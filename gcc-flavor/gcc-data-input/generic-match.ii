# 1 "generic-match.c"
# 1 "/home/marxin/Programming/gcc/objdir/gcc//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "generic-match.c"



# 1 "../../gcc/generic-match-head.c" 1
# 20 "../../gcc/generic-match-head.c"
# 1 "./config.h" 1





# 1 "./auto-host.h" 1
# 7 "./config.h" 2

# 1 "../../gcc/../include/ansidecl.h" 1
# 40 "../../gcc/../include/ansidecl.h"
extern "C" {
# 390 "../../gcc/../include/ansidecl.h"
}
# 9 "./config.h" 2
# 21 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/system.h" 1
# 32 "../../gcc/system.h"
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdarg.h" 3 4

# 40 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 33 "../../gcc/system.h" 2
# 43 "../../gcc/system.h"
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 149 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 216 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 426 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 44 "../../gcc/system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 423 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 419 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 420 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 421 "/usr/include/sys/cdefs.h" 2 3 4
# 424 "/usr/include/features.h" 2 3 4
# 447 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 448 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 131 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 37 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 38 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4

# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 18 "/usr/include/_G_config.h" 2 3 4




typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 145 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 458 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 520 "/usr/include/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4
# 57 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) ;
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 868 "/usr/include/stdio.h" 3 4
}
# 47 "../../gcc/system.h" 2
# 103 "../../gcc/system.h"

# 103 "../../gcc/system.h"
extern "C" {
# 187 "../../gcc/system.h"
}
# 209 "../../gcc/system.h"
# 1 "../../gcc/../include/safe-ctype.h" 1
# 57 "../../gcc/../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 110 "../../gcc/../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 122 "../../gcc/../include/safe-ctype.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4






# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/bits/byteswap.h" 2 3 4
# 44 "/usr/include/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 123 "../../gcc/../include/safe-ctype.h" 2
# 210 "../../gcc/system.h" 2

# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 146 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 157 "/usr/include/sys/types.h" 2 3 4
# 178 "/usr/include/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 197 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/sys/select.h" 3 4
}
# 198 "/usr/include/sys/types.h" 2 3 4







# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/sys/sysmacros.h" 3 4
# 1 "/usr/include/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));
# 85 "/usr/include/sys/sysmacros.h" 3 4
}
# 206 "/usr/include/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 58 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 58 "/usr/include/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 92 "/usr/include/bits/pthreadtypes-arch.h" 3 4
};
# 59 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 99 "/usr/include/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 

  short __spins; short __elision;
  __pthread_list_t __list;
# 123 "/usr/include/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/sys/types.h" 2 3 4


}
# 212 "../../gcc/system.h" 2

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/bits/errno.h" 1 3 4
# 26 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;





typedef int error_t;




}
# 214 "../../gcc/system.h" 2
# 235 "../../gcc/system.h"
# 1 "/usr/include/c++/7/cstring" 1 3
# 39 "/usr/include/c++/7/cstring" 3
       
# 40 "/usr/include/c++/7/cstring" 3

# 1 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 1 3


# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 4 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 2 3
# 2190 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 2212 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 2494 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 3
# 1 "/usr/include/c++/7/x86_64-suse-linux/bits/os_defines.h" 1 3
# 2495 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 2 3


# 1 "/usr/include/c++/7/x86_64-suse-linux/bits/cpu_defines.h" 1 3
# 2498 "/usr/include/c++/7/x86_64-suse-linux/bits/c++config.h" 2 3
# 42 "/usr/include/c++/7/cstring" 2 3
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 88 "/usr/include/string.h" 3 4
}
# 98 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 203 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 223 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 250 "/usr/include/string.h" 3 4
}
# 260 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 300 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 327 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 368 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 498 "/usr/include/string.h" 3 4
}
# 43 "/usr/include/c++/7/cstring" 2 3
# 71 "/usr/include/c++/7/cstring" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 120 "/usr/include/c++/7/cstring" 3

}
# 236 "../../gcc/system.h" 2
# 1 "/usr/include/c++/7/new" 1 3
# 37 "/usr/include/c++/7/new" 3
       
# 38 "/usr/include/c++/7/new" 3


# 1 "/usr/include/c++/7/exception" 1 3
# 33 "/usr/include/c++/7/exception" 3
       
# 34 "/usr/include/c++/7/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/7/bits/exception.h" 1 3
# 34 "/usr/include/c++/7/bits/exception.h" 3
       
# 35 "/usr/include/c++/7/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/7/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/7/exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 101 "/usr/include/c++/7/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 132 "/usr/include/c++/7/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/7/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/7/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "/usr/include/c++/7/bits/exception_defines.h" 1 3
# 38 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/typeinfo" 1 3
# 32 "/usr/include/c++/7/typeinfo" 3
       
# 33 "/usr/include/c++/7/typeinfo" 3



# 1 "/usr/include/c++/7/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/7/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/7/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/7/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/7/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/7/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/include/c++/7/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/new" 1 3
# 41 "/usr/include/c++/7/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "/usr/include/c++/7/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "/usr/include/c++/7/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 200 "/usr/include/c++/7/bits/exception_ptr.h" 3
      return exception_ptr();

    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 143 "/usr/include/c++/7/exception" 2 3
# 1 "/usr/include/c++/7/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/7/bits/nested_exception.h" 3
#pragma GCC visibility push(default)






# 1 "/usr/include/c++/7/bits/move.h" 1 3
# 34 "/usr/include/c++/7/bits/move.h" 3
# 1 "/usr/include/c++/7/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/7/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/7/bits/concept_check.h" 3
# 35 "/usr/include/c++/7/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }


}


# 1 "/usr/include/c++/7/type_traits" 1 3
# 32 "/usr/include/c++/7/type_traits" 3
       
# 33 "/usr/include/c++/7/type_traits" 3
# 42 "/usr/include/c++/7/type_traits" 3
namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "/usr/include/c++/7/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 192 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 324 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 936 "/usr/include/c++/7/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  template<typename _Tp, typename... _Args>
    struct is_constructible;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>,
       __not_<is_constructible<__dst_t, _From>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };



  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1771 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1860 "/usr/include/c++/7/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };



  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1890 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2036 "/usr/include/c++/7/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2075 "/usr/include/c++/7/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2548 "/usr/include/c++/7/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;






  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 3099 "/usr/include/c++/7/type_traits" 3

}
# 55 "/usr/include/c++/7/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 115 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 135 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



}
# 166 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 181 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "/usr/include/c++/7/bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 144 "/usr/include/c++/7/exception" 2 3
# 41 "/usr/include/c++/7/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "/usr/include/c++/7/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "/usr/include/c++/7/new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "/usr/include/c++/7/new" 3
#pragma GCC visibility pop
# 237 "../../gcc/system.h" 2
# 1 "/usr/include/c++/7/utility" 1 3
# 58 "/usr/include/c++/7/utility" 3
       
# 59 "/usr/include/c++/7/utility" 3
# 69 "/usr/include/c++/7/utility" 3
# 1 "/usr/include/c++/7/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/7/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
 
# 85 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

 
  }

}
# 70 "/usr/include/c++/7/utility" 2 3
# 1 "/usr/include/c++/7/bits/stl_pair.h" 1 3
# 65 "/usr/include/c++/7/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/7/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };
# 197 "/usr/include/c++/7/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 241 "/usr/include/c++/7/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 269 "/usr/include/c++/7/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __not_<__and_<is_copy_assignable<_T1>,
                is_copy_assignable<_T2>>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p) = delete;

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 516 "/usr/include/c++/7/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 535 "/usr/include/c++/7/bits/stl_pair.h" 3

}
# 71 "/usr/include/c++/7/utility" 2 3





# 1 "/usr/include/c++/7/initializer_list" 1 3
# 33 "/usr/include/c++/7/initializer_list" 3
       
# 34 "/usr/include/c++/7/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 77 "/usr/include/c++/7/utility" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp, typename = void>
    struct __tuple_size_cv_impl { };

  template<typename _Tp>
    struct __tuple_size_cv_impl<_Tp, __void_t<decltype(tuple_size<_Tp>::value)>>
    : integral_constant<size_t, tuple_size<_Tp>::value> { };



  template<typename _Tp>
    struct tuple_size<const _Tp> : __tuple_size_cv_impl<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile _Tp> : __tuple_size_cv_impl<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile _Tp> : __tuple_size_cv_impl<_Tp> { };
# 132 "/usr/include/c++/7/utility" 3
  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };




  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }




  template<size_t... _Indexes> struct _Index_tuple { };


  template<typename _Itup1, typename _Itup2> struct _Itup_cat;

  template<size_t... _Ind1, size_t... _Ind2>
    struct _Itup_cat<_Index_tuple<_Ind1...>, _Index_tuple<_Ind2...>>
    {
      using __type = _Index_tuple<_Ind1..., (_Ind2 + sizeof...(_Ind1))...>;
    };


  template<size_t _Num>
    struct _Build_index_tuple
    : _Itup_cat<typename _Build_index_tuple<_Num / 2>::__type,
  typename _Build_index_tuple<_Num - _Num / 2>::__type>
    { };

  template<>
    struct _Build_index_tuple<1>
    {
      typedef _Index_tuple<0> __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };

  template<typename _Tp, _Tp _Num,
    typename _ISeq = typename _Build_index_tuple<_Num>::__type>
    struct _Make_integer_sequence;

  template<typename _Tp, _Tp _Num, size_t... _Idx>
    struct _Make_integer_sequence<_Tp, _Num, _Index_tuple<_Idx...>>
    {
      static_assert( _Num >= 0,
       "Cannot make integer sequence of negative length" );

      typedef integer_sequence<_Tp, static_cast<_Tp>(_Idx)...> __type;
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence
      = typename _Make_integer_sequence<_Tp, _Num>::__type;


  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 406 "/usr/include/c++/7/utility" 3

}
# 238 "../../gcc/system.h" 2
# 258 "../../gcc/system.h"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 36 "/usr/include/c++/7/stdlib.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3
# 75 "/usr/include/c++/7/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/floatn.h" 1 3 4
# 61 "/usr/include/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 73 "/usr/include/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));




extern _Float128 strtof128 (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 201 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 270 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 286 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 452 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 492 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 557 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 570 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 580 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 592 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 602 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 613 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 624 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 634 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 644 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 656 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 666 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 682 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 754 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 839 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 901 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 902 "/usr/include/stdlib.h" 2 3 4
# 911 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/7/cstdlib" 2 3

# 1 "/usr/include/c++/7/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/7/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/7/bits/std_abs.h" 3
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/usr/include/c++/7/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/7/cstdlib" 2 3
# 118 "/usr/include/c++/7/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 189 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 221 "/usr/include/c++/7/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/7/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 259 "../../gcc/system.h" 2







# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3
# 267 "../../gcc/system.h" 2
# 294 "../../gcc/system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/bits/getopt_posix.h" 3 4
# 1 "/usr/include/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/bits/getopt_posix.h" 3 4
}
# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1092 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1113 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1162 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;







}
# 295 "../../gcc/system.h" 2



# 1 "/usr/include/sys/param.h" 1 3 4
# 23 "/usr/include/sys/param.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 24 "/usr/include/sys/param.h" 2 3 4


# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 1 3 4
# 194 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 38 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 2 3 4
# 161 "/usr/include/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 2 3 4
# 27 "/usr/include/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/bits/signum.h" 1 3 4
# 26 "/usr/include/bits/signum.h" 3 4
# 1 "/usr/include/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/bits/types/sigval_t.h" 1 3 4




union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval sigval_t;
# 7 "/usr/include/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 63 "/usr/include/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/bits/siginfo-consts-arch.h" 1 3 4
# 185 "/usr/include/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 63 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 64 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 108 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 147 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 166 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 181 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 24 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 223 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 282 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 288 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 298 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/bits/types/stack_t.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 24 "/usr/include/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 300 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 37 "/usr/include/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 303 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 313 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 314 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 324 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 356 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();




}
# 29 "/usr/include/sys/param.h" 2 3 4


# 1 "/usr/include/bits/param.h" 1 3 4
# 28 "/usr/include/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/bits/param.h" 2 3 4
# 32 "/usr/include/sys/param.h" 2 3 4
# 299 "../../gcc/system.h" 2






# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 1 3 4
# 306 "../../gcc/system.h" 2
# 336 "../../gcc/system.h"
# 1 "/usr/include/sys/time.h" 1 3 4
# 34 "/usr/include/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 186 "/usr/include/sys/time.h" 3 4
}
# 337 "../../gcc/system.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 73 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 26 "/usr/include/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 338 "../../gcc/system.h" 2
# 349 "../../gcc/system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 35 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 24 "/usr/include/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/bits/fcntl-linux.h" 2 3 4
# 258 "/usr/include/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 321 "/usr/include/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 322 "/usr/include/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};





extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 392 "/usr/include/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 61 "/usr/include/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/bits/stat.h" 1 3 4
# 46 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 170 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 180 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 190 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 215 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 226 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 236 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 284 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 294 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 305 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 316 "/usr/include/fcntl.h" 3 4
}
# 350 "../../gcc/system.h" 2
# 396 "../../gcc/system.h"
# 1 "/usr/include/sys/wait.h" 1 3 4
# 27 "/usr/include/sys/wait.h" 3 4
extern "C" {
# 74 "/usr/include/sys/wait.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 88 "/usr/include/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 111 "/usr/include/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 132 "/usr/include/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 397 "../../gcc/system.h" 2
# 427 "../../gcc/system.h"
# 1 "/usr/include/sys/mman.h" 1 3 4
# 25 "/usr/include/sys/mman.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 26 "/usr/include/sys/mman.h" 2 3 4
# 41 "/usr/include/sys/mman.h" 3 4
# 1 "/usr/include/bits/mman.h" 1 3 4
# 45 "/usr/include/bits/mman.h" 3 4
# 1 "/usr/include/bits/mman-linux.h" 1 3 4
# 45 "/usr/include/bits/mman.h" 2 3 4
# 42 "/usr/include/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 428 "../../gcc/system.h" 2
# 439 "../../gcc/system.h"
# 1 "/usr/include/sys/resource.h" 1 3 4
# 24 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/bits/resource.h" 1 3 4
# 31 "/usr/include/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 131 "/usr/include/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/bits/types/struct_rusage.h" 1 3 4
# 31 "/usr/include/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };



    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};


extern "C" {




extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) throw ();
# 217 "/usr/include/bits/resource.h" 3 4
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) throw ();



}
# 25 "/usr/include/sys/resource.h" 2 3 4






extern "C" {
# 42 "/usr/include/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 61 "/usr/include/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) throw ();
# 81 "/usr/include/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 440 "../../gcc/system.h" 2



# 1 "/usr/include/sys/times.h" 1 3 4
# 29 "/usr/include/sys/times.h" 3 4
extern "C" {


struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) throw ();

}
# 444 "../../gcc/system.h" 2
# 452 "../../gcc/system.h"

# 452 "../../gcc/system.h"
extern "C" {
# 520 "../../gcc/system.h"
}



# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdint.h" 1 3 4
# 9 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 100 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stdint.h" 2 3 4
# 525 "../../gcc/system.h" 2



# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();
# 432 "/usr/include/inttypes.h" 3 4
}
# 529 "../../gcc/system.h" 2




# 532 "../../gcc/system.h"
extern "C" {
# 575 "../../gcc/system.h"
}
# 598 "../../gcc/system.h"
# 1 "/usr/include/sys/stat.h" 1 3 4
# 99 "/usr/include/sys/stat.h" 3 4

# 99 "/usr/include/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/bits/stat.h" 1 3 4
# 102 "/usr/include/sys/stat.h" 2 3 4
# 205 "/usr/include/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));
# 530 "/usr/include/sys/stat.h" 3 4
}
# 599 "../../gcc/system.h" 2
# 670 "../../gcc/system.h"
# 1 "../../gcc/../include/filenames.h" 1
# 29 "../../gcc/../include/filenames.h"
# 1 "../../gcc/../include/hashtab.h" 1
# 36 "../../gcc/../include/hashtab.h"

# 36 "../../gcc/../include/hashtab.h"
extern "C" {


# 1 "../../gcc/../include/ansidecl.h" 1
# 40 "../../gcc/../include/hashtab.h" 2


typedef unsigned int hashval_t;




typedef hashval_t (*htab_hash) (const void *);






typedef int (*htab_eq) (const void *, const void *);



typedef void (*htab_del) (void *);





typedef int (*htab_trav) (void **, void *);





typedef void *(*htab_alloc) (size_t, size_t);


typedef void (*htab_free) (void *);



typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
# 95 "../../gcc/../include/hashtab.h"
struct htab {

  htab_hash hash_f;


  htab_eq eq_f;


  htab_del del_f;


  void **entries;


  size_t size;


  size_t n_elements;


  size_t n_deleted;



  unsigned int searches;



  unsigned int collisions;


  htab_alloc alloc_f;
  htab_free free_f;


  void *alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;



  unsigned int size_prime_index;
};

typedef struct htab *htab_t;


enum insert_option {NO_INSERT, INSERT};



extern htab_t htab_create_alloc (size_t, htab_hash,
                                    htab_eq, htab_del,
                                    htab_alloc, htab_free);

extern htab_t htab_create_alloc_ex (size_t, htab_hash,
                                      htab_eq, htab_del,
                                      void *, htab_alloc_with_arg,
                                      htab_free_with_arg);

extern htab_t htab_create_typed_alloc (size_t, htab_hash, htab_eq, htab_del,
     htab_alloc, htab_alloc, htab_free);


extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);

extern void htab_set_functions_ex (htab_t, htab_hash,
                                       htab_eq, htab_del,
                                       void *, htab_alloc_with_arg,
                                       htab_free_with_arg);

extern void htab_delete (htab_t);
extern void htab_empty (htab_t);

extern void * htab_find (htab_t, const void *);
extern void ** htab_find_slot (htab_t, const void *, enum insert_option);
extern void * htab_find_with_hash (htab_t, const void *, hashval_t);
extern void ** htab_find_slot_with_hash (htab_t, const void *,
       hashval_t, enum insert_option);
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, void *);
extern void htab_remove_elt_with_hash (htab_t, void *, hashval_t);

extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);

extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);


extern htab_hash htab_hash_pointer;


extern htab_eq htab_eq_pointer;


extern hashval_t htab_hash_string (const void *);


extern hashval_t iterative_hash (const void *, size_t, hashval_t);




}
# 30 "../../gcc/../include/filenames.h" 2


extern "C" {
# 83 "../../gcc/../include/filenames.h"
extern int filename_cmp (const char *s1, const char *s2);


extern int filename_ncmp (const char *s1, const char *s2,
     size_t n);

extern hashval_t filename_hash (const void *s);

extern int filename_eq (const void *s1, const void *s2);

extern int canonical_filename_eq (const char *a, const char *b);


}
# 671 "../../gcc/system.h" 2
# 682 "../../gcc/system.h"
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/bits/dlfcn.h" 3 4

# 57 "/usr/include/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 28 "/usr/include/dlfcn.h" 2 3 4
# 44 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;
  Dl_serpath dls_serpath[1];
} Dl_serinfo;



}
# 683 "../../gcc/system.h" 2




# 1 "/usr/include/gmp.h" 1 3 4
# 34 "/usr/include/gmp.h" 3 4
# 1 "/usr/include/c++/7/iosfwd" 1 3 4
# 36 "/usr/include/c++/7/iosfwd" 3 4
       
# 37 "/usr/include/c++/7/iosfwd" 3


# 1 "/usr/include/c++/7/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/7/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/7/bits/stringfwd.h" 3


# 1 "/usr/include/c++/7/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/7/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/7/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/7/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "/usr/include/c++/7/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "/usr/include/c++/7/iosfwd" 2 3
# 1 "/usr/include/c++/7/bits/postypes.h" 1 3
# 38 "/usr/include/c++/7/bits/postypes.h" 3
       
# 39 "/usr/include/c++/7/bits/postypes.h" 3

# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4







# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4





# 1 "/usr/include/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/mbstate_t.h" 1 3 4





typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();




extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();





extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();


extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();







extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 500 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 606 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 660 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 715 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 741 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 751 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 790 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/7/cwchar" 2 3
# 62 "/usr/include/c++/7/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/7/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 232 "/usr/include/c++/7/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/include/c++/7/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/usr/include/c++/7/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/7/bits/postypes.h" 2 3
# 68 "/usr/include/c++/7/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/7/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/7/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/7/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/7/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/7/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/7/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 35 "/usr/include/gmp.h" 2 3 4
# 1 "/usr/include/c++/7/cstdio" 1 3 4
# 39 "/usr/include/c++/7/cstdio" 3 4
       
# 40 "/usr/include/c++/7/cstdio" 3
# 96 "/usr/include/c++/7/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/7/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/7/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 36 "/usr/include/gmp.h" 2 3 4
# 55 "/usr/include/gmp.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 56 "/usr/include/gmp.h" 2 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include-fixed/limits.h" 1 3 4
# 57 "/usr/include/gmp.h" 2 3 4
# 141 "/usr/include/gmp.h" 3 4
typedef unsigned long int mp_limb_t;
typedef long int mp_limb_signed_t;


typedef unsigned long int mp_bitcnt_t;




typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;




typedef __mpz_struct MP_INT;
typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;







typedef long int mp_size_t;
typedef long int mp_exp_t;


typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct MP_RAT;
typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;


typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 468 "/usr/include/gmp.h" 3 4
extern "C" {
using std::FILE;



 void __gmp_set_memory_functions (void *(*) (size_t),
          void *(*) (void *, size_t, size_t),
          void (*) (void *, size_t)) throw ();


 void __gmp_get_memory_functions (void *(**) (size_t),
          void *(**) (void *, size_t, size_t),
          void (**) (void *, size_t)) throw ();


 extern const int __gmp_bits_per_limb;


 extern int __gmp_errno;


 extern const char * const __gmp_version;






 void __gmp_randinit (gmp_randstate_t, gmp_randalg_t, ...);


 void __gmp_randinit_default (gmp_randstate_t);


 void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);


 int __gmp_randinit_lc_2exp_size (gmp_randstate_t, mp_bitcnt_t);


 void __gmp_randinit_mt (gmp_randstate_t);


 void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


 void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


 void __gmp_randseed_ui (gmp_randstate_t, unsigned long int);


 void __gmp_randclear (gmp_randstate_t);


 unsigned long __gmp_urandomb_ui (gmp_randstate_t, unsigned long);


 unsigned long __gmp_urandomm_ui (gmp_randstate_t, unsigned long);





 int __gmp_asprintf (char **, const char *, ...);



 int __gmp_fprintf (FILE *, const char *, ...);
# 550 "/usr/include/gmp.h" 3 4
 int __gmp_printf (const char *, ...);


 int __gmp_snprintf (char *, size_t, const char *, ...);


 int __gmp_sprintf (char *, const char *, ...);



 int __gmp_vasprintf (char **, const char *, va_list);




 int __gmp_vfprintf (FILE *, const char *, va_list);




 int __gmp_vprintf (const char *, va_list);




 int __gmp_vsnprintf (char *, size_t, const char *, va_list);




 int __gmp_vsprintf (char *, const char *, va_list);







 int __gmp_fscanf (FILE *, const char *, ...);



 int __gmp_scanf (const char *, ...);


 int __gmp_sscanf (const char *, const char *, ...);



 int __gmp_vfscanf (FILE *, const char *, va_list);




 int __gmp_vscanf (const char *, va_list);




 int __gmp_vsscanf (const char *, const char *, va_list);







 void *__gmpz_realloc (mpz_ptr, mp_size_t);



 void __gmpz_abs (mpz_ptr, mpz_srcptr);



 void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_add_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


 void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_bin_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_cdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_clear (mpz_ptr);


 void __gmpz_clears (mpz_ptr, ...);


 void __gmpz_clrbit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_cmp (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_cmp_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmp_si (mpz_srcptr, signed long int) throw () __attribute__ ((__pure__));


 int __gmpz_cmp_ui (mpz_srcptr, unsigned long int) throw () __attribute__ ((__pure__));


 int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_cmpabs_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmpabs_ui (mpz_srcptr, unsigned long int) throw () __attribute__ ((__pure__));


 void __gmpz_com (mpz_ptr, mpz_srcptr);


 void __gmpz_combit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 int __gmpz_congruent_ui_p (mpz_srcptr, unsigned long, unsigned long) __attribute__ ((__pure__));


 void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, unsigned long);


 int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_divisible_ui_p (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 void __gmpz_dump (mpz_srcptr);


 void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


 void __gmpz_fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_2fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_mfac_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_primorial_ui (mpz_ptr, unsigned long int);


 void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_fib_ui (mpz_ptr, unsigned long int);


 void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_fits_sint_p (mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_fits_slong_p (mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpz_fits_sshort_p (mpz_srcptr) throw () __attribute__ ((__pure__));



 int __gmpz_fits_uint_p (mpz_srcptr) throw () __attribute__ ((__pure__));




 int __gmpz_fits_ulong_p (mpz_srcptr) throw () __attribute__ ((__pure__));




 int __gmpz_fits_ushort_p (mpz_srcptr) throw () __attribute__ ((__pure__));



 void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 double __gmpz_get_d (mpz_srcptr) __attribute__ ((__pure__));


 double __gmpz_get_d_2exp (signed long int *, mpz_srcptr);


 long int __gmpz_get_si (mpz_srcptr) throw () __attribute__ ((__pure__));


 char *__gmpz_get_str (char *, int, mpz_srcptr);



 unsigned long int __gmpz_get_ui (mpz_srcptr) throw () __attribute__ ((__pure__));




 mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) throw () __attribute__ ((__pure__));



 mp_bitcnt_t __gmpz_hamdist (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


 void __gmpz_init (mpz_ptr);


 void __gmpz_init2 (mpz_ptr, mp_bitcnt_t);


 void __gmpz_inits (mpz_ptr, ...);


 void __gmpz_init_set (mpz_ptr, mpz_srcptr);


 void __gmpz_init_set_d (mpz_ptr, double);


 void __gmpz_init_set_si (mpz_ptr, signed long int);


 int __gmpz_init_set_str (mpz_ptr, const char *, int);


 void __gmpz_init_set_ui (mpz_ptr, unsigned long int);



 size_t __gmpz_inp_raw (mpz_ptr, FILE *);




 size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



 int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_kronecker_si (mpz_srcptr, long) __attribute__ ((__pure__));


 int __gmpz_kronecker_ui (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_si_kronecker (long, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_ui_kronecker (unsigned long, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, unsigned long);




 void __gmpz_lucnum_ui (mpz_ptr, unsigned long int);


 void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_millerrabin (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);




 void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 void __gmpz_mul_si (mpz_ptr, mpz_srcptr, long int);


 void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, unsigned long int);



 void __gmpz_neg (mpz_ptr, mpz_srcptr);



 void __gmpz_nextprime (mpz_ptr, mpz_srcptr);



 size_t __gmpz_out_raw (FILE *, mpz_srcptr);




 size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



 int __gmpz_perfect_power_p (mpz_srcptr) __attribute__ ((__pure__));



 int __gmpz_perfect_square_p (mpz_srcptr) __attribute__ ((__pure__));




 mp_bitcnt_t __gmpz_popcount (mpz_srcptr) throw () __attribute__ ((__pure__));



 void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_sec (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, unsigned long int, mpz_srcptr);


 int __gmpz_probab_prime_p (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_random (mpz_ptr, mp_size_t);


 void __gmpz_random2 (mpz_ptr, mp_size_t);


 void __gmpz_realloc2 (mpz_ptr, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_root (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rootrem (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_scan0 (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 mp_bitcnt_t __gmpz_scan1 (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 void __gmpz_set (mpz_ptr, mpz_srcptr);


 void __gmpz_set_d (mpz_ptr, double);


 void __gmpz_set_f (mpz_ptr, mpf_srcptr);



 void __gmpz_set_q (mpz_ptr, mpq_srcptr);



 void __gmpz_set_si (mpz_ptr, signed long int);


 int __gmpz_set_str (mpz_ptr, const char *, int);


 void __gmpz_set_ui (mpz_ptr, unsigned long int);


 void __gmpz_setbit (mpz_ptr, mp_bitcnt_t);



 size_t __gmpz_size (mpz_srcptr) throw () __attribute__ ((__pure__));



 size_t __gmpz_sizeinbase (mpz_srcptr, int) throw () __attribute__ ((__pure__));


 void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


 void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);


 void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_ui_sub (mpz_ptr, unsigned long int, mpz_srcptr);


 void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_swap (mpz_ptr, mpz_ptr) throw ();


 unsigned long int __gmpz_tdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 int __gmpz_tstbit (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


 void __gmpz_ui_pow_ui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



 void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);


 mp_srcptr __gmpz_limbs_read (mpz_srcptr);


 mp_ptr __gmpz_limbs_write (mpz_ptr, mp_size_t);


 mp_ptr __gmpz_limbs_modify (mpz_ptr, mp_size_t);


 void __gmpz_limbs_finish (mpz_ptr, mp_size_t);


 mpz_srcptr __gmpz_roinit_n (mpz_ptr, mp_srcptr, mp_size_t);







 void __gmpq_abs (mpq_ptr, mpq_srcptr);



 void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_canonicalize (mpq_ptr);


 void __gmpq_clear (mpq_ptr);


 void __gmpq_clears (mpq_ptr, ...);


 int __gmpq_cmp (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


 int __gmpq_cmp_si (mpq_srcptr, long, unsigned long) __attribute__ ((__pure__));


 int __gmpq_cmp_ui (mpq_srcptr, unsigned long int, unsigned long int) __attribute__ ((__pure__));


 int __gmpq_cmp_z (mpq_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);


 int __gmpq_equal (mpq_srcptr, mpq_srcptr) throw () __attribute__ ((__pure__));


 void __gmpq_get_num (mpz_ptr, mpq_srcptr);


 void __gmpq_get_den (mpz_ptr, mpq_srcptr);


 double __gmpq_get_d (mpq_srcptr) __attribute__ ((__pure__));


 char *__gmpq_get_str (char *, int, mpq_srcptr);


 void __gmpq_init (mpq_ptr);


 void __gmpq_inits (mpq_ptr, ...);



 size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



 void __gmpq_inv (mpq_ptr, mpq_srcptr);


 void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);



 void __gmpq_neg (mpq_ptr, mpq_srcptr);




 size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



 void __gmpq_set (mpq_ptr, mpq_srcptr);


 void __gmpq_set_d (mpq_ptr, double);


 void __gmpq_set_den (mpq_ptr, mpz_srcptr);


 void __gmpq_set_f (mpq_ptr, mpf_srcptr);


 void __gmpq_set_num (mpq_ptr, mpz_srcptr);


 void __gmpq_set_si (mpq_ptr, signed long int, unsigned long int);


 int __gmpq_set_str (mpq_ptr, const char *, int);


 void __gmpq_set_ui (mpq_ptr, unsigned long int, unsigned long int);


 void __gmpq_set_z (mpq_ptr, mpz_srcptr);


 void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_swap (mpq_ptr, mpq_ptr) throw ();





 void __gmpf_abs (mpf_ptr, mpf_srcptr);


 void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_add_ui (mpf_ptr, mpf_srcptr, unsigned long int);

 void __gmpf_ceil (mpf_ptr, mpf_srcptr);


 void __gmpf_clear (mpf_ptr);


 void __gmpf_clears (mpf_ptr, ...);


 int __gmpf_cmp (mpf_srcptr, mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_cmp_z (mpf_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_cmp_d (mpf_srcptr, double) __attribute__ ((__pure__));


 int __gmpf_cmp_si (mpf_srcptr, signed long int) throw () __attribute__ ((__pure__));


 int __gmpf_cmp_ui (mpf_srcptr, unsigned long int) throw () __attribute__ ((__pure__));


 void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_div_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_dump (mpf_srcptr);


 int __gmpf_eq (mpf_srcptr, mpf_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 int __gmpf_fits_sint_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_slong_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_sshort_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_uint_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_ulong_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 int __gmpf_fits_ushort_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_floor (mpf_ptr, mpf_srcptr);


 double __gmpf_get_d (mpf_srcptr) __attribute__ ((__pure__));


 double __gmpf_get_d_2exp (signed long int *, mpf_srcptr);


 mp_bitcnt_t __gmpf_get_default_prec (void) throw () __attribute__ ((__pure__));


 mp_bitcnt_t __gmpf_get_prec (mpf_srcptr) throw () __attribute__ ((__pure__));


 long __gmpf_get_si (mpf_srcptr) throw () __attribute__ ((__pure__));


 char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


 unsigned long __gmpf_get_ui (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_init (mpf_ptr);


 void __gmpf_init2 (mpf_ptr, mp_bitcnt_t);


 void __gmpf_inits (mpf_ptr, ...);


 void __gmpf_init_set (mpf_ptr, mpf_srcptr);


 void __gmpf_init_set_d (mpf_ptr, double);


 void __gmpf_init_set_si (mpf_ptr, signed long int);


 int __gmpf_init_set_str (mpf_ptr, const char *, int);


 void __gmpf_init_set_ui (mpf_ptr, unsigned long int);



 size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



 int __gmpf_integer_p (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_neg (mpf_ptr, mpf_srcptr);



 size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



 void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


 void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_set (mpf_ptr, mpf_srcptr);


 void __gmpf_set_d (mpf_ptr, double);


 void __gmpf_set_default_prec (mp_bitcnt_t) throw ();


 void __gmpf_set_prec (mpf_ptr, mp_bitcnt_t);


 void __gmpf_set_prec_raw (mpf_ptr, mp_bitcnt_t) throw ();


 void __gmpf_set_q (mpf_ptr, mpq_srcptr);


 void __gmpf_set_si (mpf_ptr, signed long int);


 int __gmpf_set_str (mpf_ptr, const char *, int);


 void __gmpf_set_ui (mpf_ptr, unsigned long int);


 void __gmpf_set_z (mpf_ptr, mpz_srcptr);


 size_t __gmpf_size (mpf_srcptr) throw () __attribute__ ((__pure__));


 void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


 void __gmpf_sqrt_ui (mpf_ptr, unsigned long int);


 void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_swap (mpf_ptr, mpf_ptr) throw ();


 void __gmpf_trunc (mpf_ptr, mpf_srcptr);


 void __gmpf_ui_div (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_ui_sub (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_urandomb (mpf_t, gmp_randstate_t, mp_bitcnt_t);
# 1461 "/usr/include/gmp.h" 3 4
 mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) throw ();



 mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);



 int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));




 int __gmpn_zero_p (mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));



 void __gmpn_divexact_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


 mp_limb_t __gmpn_div_qr_1 (mp_ptr, mp_limb_t *, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_div_qr_2 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);


 mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


 mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


 mp_bitcnt_t __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));


 mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_neg (mp_ptr, mp_srcptr, mp_size_t);



 void __gmpn_com (mp_ptr, mp_srcptr, mp_size_t);


 int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_perfect_power_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_popcount (mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));


 mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



 mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 void __gmpn_random (mp_ptr, mp_size_t);


 void __gmpn_random2 (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_bitcnt_t __gmpn_scan0 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_scan1 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


 size_t __gmpn_sizeinbase (mp_srcptr, mp_size_t, int);


 mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) throw ();



 mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 void __gmpn_and_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_andn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nand_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_ior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_iorn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xnor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_copyi (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_copyd (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_zero (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_cnd_add_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 mp_limb_t __gmpn_cnd_sub_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_sec_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_add_1_itch (mp_size_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_sec_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_sub_1_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_cnd_swap (mp_limb_t, volatile mp_limb_t *, volatile mp_limb_t *, mp_size_t);


 void __gmpn_sec_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_mul_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_sqr (mp_ptr, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_sqr_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_powm (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_bitcnt_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_powm_itch (mp_size_t, mp_bitcnt_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_tabselect (volatile mp_limb_t *, volatile const mp_limb_t *, mp_size_t, mp_size_t, mp_size_t);


 mp_limb_t __gmpn_sec_div_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_qr_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));

 void __gmpn_sec_div_r (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_r_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_sec_invert (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_bitcnt_t, mp_ptr);

 mp_size_t __gmpn_sec_invert_itch (mp_size_t) __attribute__ ((__pure__));
# 1707 "/usr/include/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1731 "/usr/include/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffff * 2U + 1U)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffffffffffffL * 2UL + 1UL)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fff * 2 + 1)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

unsigned long
__gmpz_get_ui (mpz_srcptr __gmp_z) throw ()
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (__gmp_n != 0 ? __gmp_l : 0);
# 1787 "/usr/include/gmp.h" 3 4
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n) throw ()
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_bitcnt_t
__gmpz_popcount (mpz_srcptr __gmp_u) throw ()
{
  mp_size_t __gmp_usize;
  mp_bitcnt_t __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? (0x7fffffffffffffffL * 2UL + 1UL) : 0);
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__ __attribute__ ((__gnu_inline__))

size_t
__gmpz_size (mpz_srcptr __gmp_z) throw ()
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2129 "/usr/include/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) throw ()
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size) throw ()
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_zero_p (mp_srcptr __gmp_p, mp_size_t __gmp_n) throw ()
{

    do {
      if (__gmp_p[--__gmp_n] != 0)
 return 0;
    } while (__gmp_n != 0);
  return 1;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) throw ()
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_neg (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)
{
  while (*__gmp_up == 0)
    {
      *__gmp_rp = 0;
      if (!--__gmp_n)
 return 0;
      ++__gmp_up; ++__gmp_rp;
    }

  *__gmp_rp = (- *__gmp_up) & ((~ (static_cast<mp_limb_t> (0))) >> 0);

  if (--__gmp_n)
    __gmpn_com (++__gmp_rp, ++__gmp_up, __gmp_n);

  return 1;
}



}
# 2278 "/usr/include/gmp.h" 3 4
 std::ostream& operator<< (std::ostream &, mpz_srcptr);
 std::ostream& operator<< (std::ostream &, mpq_srcptr);
 std::ostream& operator<< (std::ostream &, mpf_srcptr);
 std::istream& operator>> (std::istream &, mpz_ptr);
 std::istream& operator>> (std::istream &, mpq_ptr);
 std::istream& operator>> (std::istream &, mpf_ptr);
# 2309 "/usr/include/gmp.h" 3 4
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 688 "../../gcc/system.h" 2



# 1 "../../gcc/../include/libiberty.h" 1
# 39 "../../gcc/../include/libiberty.h"

# 39 "../../gcc/../include/libiberty.h"
extern "C" {





# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 46 "../../gcc/../include/libiberty.h" 2
# 55 "../../gcc/../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 123 "../../gcc/../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 153 "../../gcc/../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 189 "../../gcc/../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 201 "../../gcc/../include/libiberty.h"
extern char * getpwd (void);
# 214 "../../gcc/../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 283 "../../gcc/../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 382 "../../gcc/../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 419 "../../gcc/../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 519 "../../gcc/../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 534 "../../gcc/../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 609 "../../gcc/../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 628 "../../gcc/../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);
# 645 "../../gcc/../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 657 "../../gcc/../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 706 "../../gcc/../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 719 "../../gcc/../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 746 "../../gcc/../include/libiberty.h"
}
# 692 "../../gcc/system.h" 2
# 735 "../../gcc/system.h"
extern void fancy_abort (const char *, int, const char *)
      __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 867 "../../gcc/system.h"
        





        






        




        


        
# 939 "../../gcc/system.h"
        






        
# 1031 "../../gcc/system.h"
        
# 1049 "../../gcc/system.h"
        


        



        
# 1067 "../../gcc/system.h"
        
# 1083 "../../gcc/system.h"
        



       
# 1200 "../../gcc/system.h"
# 1 "../../gcc/hwint.h" 1
# 77 "../../gcc/hwint.h"
typedef long __gcc_host_wide_int__;
# 141 "../../gcc/hwint.h"
static inline unsigned long
least_bit_hwi (unsigned long x)
{
  return (x & -x);
}



static inline bool
pow2_or_zerop (unsigned long x)
{
  return least_bit_hwi (x) == x;
}



static inline bool
pow2p_hwi (unsigned long x)
{
  return x && pow2_or_zerop (x);
}
# 184 "../../gcc/hwint.h"
static inline int
clz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_clzl (x);





}

static inline int
ctz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_ctzl (x);





}

static inline int
ffs_hwi (unsigned long x)
{

  return __builtin_ffsl (x);





}

static inline int
popcount_hwi (unsigned long x)
{

  return __builtin_popcountl (x);





}

static inline int
floor_log2 (unsigned long x)
{
  return 64 - 1 - clz_hwi (x);
}

static inline int
ceil_log2 (unsigned long x)
{
  return floor_log2 (x - 1) + 1;
}

static inline int
exact_log2 (unsigned long x)
{
  return pow2p_hwi (x) ? ctz_hwi (x) : -1;
}







extern long abs_hwi (long);
extern unsigned long absu_hwi (long);
extern long gcd (long, long);
extern long pos_mul_hwi (long, long);
extern long mul_hwi (long, long);
extern long least_common_multiple (long, long);



static inline int
ctz_or_zero (unsigned long x)
{
  return ffs_hwi (x) - 1;
}



static inline long
sext_hwi (long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else

    {






      ((void)(!(prec < 64) ? fancy_abort ("../../gcc/hwint.h", 291, __FUNCTION__), 0 : 0));
      int shift = 64 - prec;
      return ((long) ((unsigned long) src << shift)) >> shift;
    }
# 304 "../../gcc/hwint.h"
}


static inline unsigned long
zext_hwi (unsigned long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else
    {
      ((void)(!(prec < 64) ? fancy_abort ("../../gcc/hwint.h", 314, __FUNCTION__), 0 : 0));
      return src & ((1UL << prec) - 1);
    }
}



inline long
abs_hwi (long x)
{
  ((void)(!(x != (long) (1UL << (64 - 1))) ? fancy_abort ("../../gcc/hwint.h", 324, __FUNCTION__), 0 : 0));
  return x >= 0 ? x : -x;
}



inline unsigned long
absu_hwi (long x)
{
  return x >= 0 ? (unsigned long)x : -(unsigned long)x;
}
# 1201 "../../gcc/system.h" 2
# 1209 "../../gcc/system.h"
void qsort_chk (void *, size_t, size_t, int (*)(const void *, const void *));
# 22 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/coretypes.h" 1
# 46 "../../gcc/coretypes.h"
typedef int64_t gcov_type;
typedef uint64_t gcov_type_unsigned;

struct bitmap_head;
typedef struct bitmap_head *bitmap;
typedef const struct bitmap_head *const_bitmap;
struct simple_bitmap_def;
typedef struct simple_bitmap_def *sbitmap;
typedef const struct simple_bitmap_def *const_sbitmap;
struct rtx_def;
typedef struct rtx_def *rtx;
typedef const struct rtx_def *const_rtx;
class scalar_mode;
class scalar_int_mode;
class scalar_float_mode;
class complex_mode;
class fixed_size_mode;
template<typename> class opt_mode;
typedef opt_mode<scalar_mode> opt_scalar_mode;
typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;
typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;
template<typename> class pod_mode;
typedef pod_mode<scalar_mode> scalar_mode_pod;
typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;
typedef pod_mode<fixed_size_mode> fixed_size_mode_pod;




class rtx_def;
  class rtx_expr_list;
  class rtx_insn_list;
  class rtx_sequence;
  class rtx_insn;
    class rtx_debug_insn;
    class rtx_nonjump_insn;
    class rtx_jump_insn;
    class rtx_call_insn;
    class rtx_jump_table_data;
    class rtx_barrier;
    class rtx_code_label;
    class rtx_note;

struct rtvec_def;
typedef struct rtvec_def *rtvec;
typedef const struct rtvec_def *const_rtvec;
struct hwivec_def;
typedef struct hwivec_def *hwivec;
typedef const struct hwivec_def *const_hwivec;
union tree_node;
typedef union tree_node *tree;
typedef const union tree_node *const_tree;
struct gimple;
typedef gimple *gimple_seq;
struct gimple_stmt_iterator;




struct gcond;
struct gdebug;
struct ggoto;
struct glabel;
struct gswitch;
struct gassign;
struct gasm;
struct gcall;
struct gtransaction;
struct greturn;
struct gbind;
struct gcatch;
struct geh_filter;
struct geh_mnt;
struct geh_else;
struct gresx;
struct geh_dispatch;
struct gphi;
struct gtry;
struct gomp_atomic_load;
struct gomp_atomic_store;
struct gomp_continue;
struct gomp_critical;
struct gomp_ordered;
struct gomp_for;
struct gomp_parallel;
struct gomp_task;
struct gomp_sections;
struct gomp_single;
struct gomp_target;
struct gomp_teams;

union section;
typedef union section section;
struct gcc_options;
struct cl_target_option;
struct cl_optimization;
struct cl_option;
struct cl_decoded_option;
struct cl_option_handlers;
struct diagnostic_context;
struct pretty_printer;


typedef unsigned char addr_space_t;






enum ir_type {
  IR_GIMPLE,
  IR_RTL_CFGRTL,
  IR_RTL_CFGLAYOUT
};






struct cpp_reader;
struct cpp_token;




enum tls_model {
  TLS_MODEL_NONE,
  TLS_MODEL_EMULATED,
  TLS_MODEL_REAL,
  TLS_MODEL_GLOBAL_DYNAMIC = TLS_MODEL_REAL,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};


enum offload_abi {
  OFFLOAD_ABI_UNSET,
  OFFLOAD_ABI_LP64,
  OFFLOAD_ABI_ILP32
};


enum profile_update {
  PROFILE_UPDATE_SINGLE,
  PROFILE_UPDATE_ATOMIC,
  PROFILE_UPDATE_PREFER_ATOMIC
};



enum unwind_info_type
{
  UI_NONE,
  UI_SJLJ,
  UI_DWARF2,
  UI_TARGET,
  UI_SEH
};


enum node_frequency {


  NODE_FREQUENCY_UNLIKELY_EXECUTED,


  NODE_FREQUENCY_EXECUTED_ONCE,

  NODE_FREQUENCY_NORMAL,


  NODE_FREQUENCY_HOT
};


enum optimization_type {

  OPTIMIZE_FOR_SPEED,


  OPTIMIZE_FOR_BOTH,


  OPTIMIZE_FOR_SIZE
};


enum pad_direction {

  PAD_NONE,




  PAD_UPWARD,




  PAD_DOWNWARD
};




enum var_init_status
{
  VAR_INIT_STATUS_UNKNOWN,
  VAR_INIT_STATUS_UNINITIALIZED,
  VAR_INIT_STATUS_INITIALIZED
};



enum warn_strict_overflow_code
{



  WARN_STRICT_OVERFLOW_ALL = 1,




  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,


  WARN_STRICT_OVERFLOW_COMPARISON = 3,


  WARN_STRICT_OVERFLOW_MISC = 4,


  WARN_STRICT_OVERFLOW_MAGNITUDE = 5
};







typedef int alias_set_type;

struct edge_def;
typedef struct edge_def *edge;
typedef const struct edge_def *const_edge;
struct basic_block_def;
typedef struct basic_block_def *basic_block;
typedef const struct basic_block_def *const_basic_block;
# 318 "../../gcc/coretypes.h"
typedef int reg_class_t;

class rtl_opt_pass;

namespace gcc {
  class context;
}

typedef std::pair <tree, tree> tree_pair;
# 351 "../../gcc/coretypes.h"
enum function_class {
  function_c94,
  function_c99_misc,
  function_c99_math_complex,
  function_sincos,
  function_c11_misc
};



enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_PROTECTED,
  VISIBILITY_HIDDEN,
  VISIBILITY_INTERNAL
};



enum flt_eval_method
{
  FLT_EVAL_METHOD_UNPREDICTABLE = -1,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT = 0,
  FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE = 1,
  FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE = 2,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 = 16
};

enum excess_precision_type
{
  EXCESS_PRECISION_TYPE_IMPLICIT,
  EXCESS_PRECISION_TYPE_STANDARD,
  EXCESS_PRECISION_TYPE_FAST
};



typedef void (*gt_pointer_operator) (void *, void *);


typedef unsigned char uchar;




# 1 "./insn-modes.h" 1






enum machine_mode
{
  E_VOIDmode,






  E_BLKmode,






  E_CCmode,






  E_CCGCmode,






  E_CCGOCmode,






  E_CCNOmode,






  E_CCGZmode,






  E_CCAmode,






  E_CCCmode,






  E_CCOmode,






  E_CCPmode,






  E_CCSmode,






  E_CCZmode,






  E_CCFPmode,






  E_BImode,






  E_QImode,






  E_HImode,






  E_SImode,






  E_DImode,






  E_TImode,






  E_OImode,






  E_XImode,






  E_BND32mode,






  E_BND64mode,






  E_QQmode,






  E_HQmode,






  E_SQmode,






  E_DQmode,






  E_TQmode,






  E_UQQmode,






  E_UHQmode,






  E_USQmode,






  E_UDQmode,






  E_UTQmode,






  E_HAmode,






  E_SAmode,






  E_DAmode,






  E_TAmode,






  E_UHAmode,






  E_USAmode,






  E_UDAmode,






  E_UTAmode,






  E_SFmode,






  E_DFmode,






  E_XFmode,






  E_TFmode,






  E_SDmode,






  E_DDmode,






  E_TDmode,






  E_CQImode,






  E_CHImode,






  E_CSImode,






  E_CDImode,






  E_CTImode,






  E_COImode,






  E_CXImode,






  E_SCmode,






  E_DCmode,






  E_XCmode,






  E_TCmode,






  E_V2QImode,






  E_V4QImode,






  E_V2HImode,






  E_V1SImode,






  E_V8QImode,






  E_V4HImode,






  E_V2SImode,






  E_V1DImode,






  E_V12QImode,






  E_V6HImode,






  E_V14QImode,






  E_V16QImode,






  E_V8HImode,






  E_V4SImode,






  E_V2DImode,






  E_V1TImode,






  E_V32QImode,






  E_V16HImode,






  E_V8SImode,






  E_V4DImode,






  E_V2TImode,






  E_V64QImode,






  E_V32HImode,






  E_V16SImode,






  E_V8DImode,






  E_V4TImode,






  E_V128QImode,






  E_V64HImode,






  E_V32SImode,






  E_V16DImode,






  E_V8TImode,






  E_V64SImode,






  E_V2SFmode,






  E_V4SFmode,






  E_V2DFmode,






  E_V8SFmode,






  E_V4DFmode,






  E_V2TFmode,






  E_V16SFmode,






  E_V8DFmode,






  E_V4TFmode,






  E_V32SFmode,






  E_V16DFmode,






  E_V8TFmode,






  E_V64SFmode,






  E_V32DFmode,






  E_V16TFmode,






  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = E_VOIDmode,
  MAX_MODE_RANDOM = E_BLKmode,

  MIN_MODE_CC = E_CCmode,
  MAX_MODE_CC = E_CCFPmode,

  MIN_MODE_INT = E_QImode,
  MAX_MODE_INT = E_XImode,

  MIN_MODE_PARTIAL_INT = E_VOIDmode,
  MAX_MODE_PARTIAL_INT = E_VOIDmode,

  MIN_MODE_POINTER_BOUNDS = E_BND32mode,
  MAX_MODE_POINTER_BOUNDS = E_BND64mode,

  MIN_MODE_FRACT = E_QQmode,
  MAX_MODE_FRACT = E_TQmode,

  MIN_MODE_UFRACT = E_UQQmode,
  MAX_MODE_UFRACT = E_UTQmode,

  MIN_MODE_ACCUM = E_HAmode,
  MAX_MODE_ACCUM = E_TAmode,

  MIN_MODE_UACCUM = E_UHAmode,
  MAX_MODE_UACCUM = E_UTAmode,

  MIN_MODE_FLOAT = E_SFmode,
  MAX_MODE_FLOAT = E_TFmode,

  MIN_MODE_DECIMAL_FLOAT = E_SDmode,
  MAX_MODE_DECIMAL_FLOAT = E_TDmode,

  MIN_MODE_COMPLEX_INT = E_CQImode,
  MAX_MODE_COMPLEX_INT = E_CXImode,

  MIN_MODE_COMPLEX_FLOAT = E_SCmode,
  MAX_MODE_COMPLEX_FLOAT = E_TCmode,

  MIN_MODE_VECTOR_BOOL = E_VOIDmode,
  MAX_MODE_VECTOR_BOOL = E_VOIDmode,

  MIN_MODE_VECTOR_INT = E_V2QImode,
  MAX_MODE_VECTOR_INT = E_V64SImode,

  MIN_MODE_VECTOR_FRACT = E_VOIDmode,
  MAX_MODE_VECTOR_FRACT = E_VOIDmode,

  MIN_MODE_VECTOR_UFRACT = E_VOIDmode,
  MAX_MODE_VECTOR_UFRACT = E_VOIDmode,

  MIN_MODE_VECTOR_ACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_ACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_UACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_UACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_FLOAT = E_V2SFmode,
  MAX_MODE_VECTOR_FLOAT = E_V16TFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 398 "../../gcc/coretypes.h" 2
# 1 "../../gcc/signop.h" 1
# 28 "../../gcc/signop.h"
enum signop {
  SIGNED,
  UNSIGNED
};
# 399 "../../gcc/coretypes.h" 2
# 1 "../../gcc/wide-int.h" 1
# 314 "../../gcc/wide-int.h"
template <typename T> class generic_wide_int;
template <int N> class fixed_wide_int_storage;
class wide_int_storage;





typedef generic_wide_int <wide_int_storage> wide_int;
typedef generic_wide_int < fixed_wide_int_storage <((64 + 4 + 64 - 1) & ~(64 - 1))> > offset_int;
typedef generic_wide_int < fixed_wide_int_storage <(((128 + 64) / 64) * 64)> > widest_int;



template <bool SE, bool HDP = true>
struct wide_int_ref_storage;

typedef generic_wide_int <wide_int_ref_storage <false> > wide_int_ref;
# 345 "../../gcc/wide-int.h"
namespace wi
{

  enum precision_type {



    FLEXIBLE_PRECISION,


    VAR_PRECISION,



    CONST_PRECISION
  };
# 383 "../../gcc/wide-int.h"
  template <typename T> struct int_traits;




  template <typename T1, typename T2,
     enum precision_type P1 = int_traits <T1>::precision_type,
     enum precision_type P2 = int_traits <T2>::precision_type>
  struct binary_traits;





  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef widest_int result_type;

  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, CONST_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T2>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, FLEXIBLE_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, CONST_PRECISION>
  {
    static_assert ((int_traits <T1>::precision == int_traits <T2>::precision), "int_traits <T1>::precision == int_traits <T2>::precision");


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };
}


namespace wi
{
  template <typename T>
  unsigned int get_precision (const T &);

  template <typename T1, typename T2>
  unsigned int get_binary_precision (const T1 &, const T2 &);

  template <typename T1, typename T2>
  void copy (T1 &, const T2 &);
# 492 "../../gcc/wide-int.h"
  template <typename T> bool fits_shwi_p (const T &);
  template <typename T> bool fits_uhwi_p (const T &);
  template <typename T> bool neg_p (const T &, signop = SIGNED);

  template <typename T>
  long sign_mask (const T &);

  template <typename T1, typename T2> bool eq_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ne_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool lt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool lts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ltu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool le_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool les_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool leu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool gts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gtu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ge_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool ges_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool geu_p (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmp (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  int cmps (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmpu (const T1 &, const T2 &);

  template <typename T> typename wi::binary_traits <T, T>::result_type bit_not (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &, bool *);
  template <typename T> typename wi::binary_traits <T, T>::result_type abs (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type ext (const T &, unsigned int, signop);
  template <typename T> typename wi::binary_traits <T, T>::result_type sext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type zext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type set_bit (const T &, unsigned int);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type min (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type max (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smax (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umax (const T1 &, const T2 &);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_xor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &, signop, bool *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &, signop, bool *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &, signop, bool *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smul (const T1 &, const T2 &, bool *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umul (const T1 &, const T2 &, bool *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul_high (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_trunc (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_floor (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_ceil (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_ceil (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_round (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type divmod_trunc (const T1 &, const T2 &, signop,
    typename wi::binary_traits <T1, T2>::result_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type gcd (const T1 &, const T2 &, signop = UNSIGNED);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_trunc (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_floor (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_ceil (const T1 &, const T2 &, signop, bool * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_round (const T1 &, const T2 &, signop, bool * = 0);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop,
        typename wi::binary_traits <T1, T2>::result_type *);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type arshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rshift (const T1 &, const T2 &, signop sgn);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrotate (const T1 &, const T2 &, unsigned int = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rrotate (const T1 &, const T2 &, unsigned int = 0);







  bool only_sign_bit_p (const wide_int_ref &, unsigned int);
  bool only_sign_bit_p (const wide_int_ref &);
  int clz (const wide_int_ref &);
  int clrsb (const wide_int_ref &);
  int ctz (const wide_int_ref &);
  int exact_log2 (const wide_int_ref &);
  int floor_log2 (const wide_int_ref &);
  int ffs (const wide_int_ref &);
  int popcount (const wide_int_ref &);
  int parity (const wide_int_ref &);

  template <typename T>
  unsigned long extract_uhwi (const T &, unsigned int, unsigned int);

  template <typename T>
  unsigned int min_precision (const T &, signop);
}

namespace wi
{


  struct storage_ref
  {
    storage_ref () {}
    storage_ref (const long *, unsigned int, unsigned int);

    const long *val;
    unsigned int len;
    unsigned int precision;



    unsigned int get_len () const;
    unsigned int get_precision () const;
    const long *get_val () const;
  };
}

inline::wi::storage_ref::storage_ref (const long *val_in,
          unsigned int len_in,
          unsigned int precision_in)
  : val (val_in), len (len_in), precision (precision_in)
{
}

inline unsigned int
wi::storage_ref::get_len () const
{
  return len;
}

inline unsigned int
wi::storage_ref::get_precision () const
{
  return precision;
}

inline const long *
wi::storage_ref::get_val () const
{
  return val;
}
# 680 "../../gcc/wide-int.h"
template <typename storage>
class generic_wide_int : public storage
{
public:
  generic_wide_int ();

  template <typename T>
  generic_wide_int (const T &);

  template <typename T>
  generic_wide_int (const T &, unsigned int);


  long to_shwi (unsigned int) const;
  long to_shwi () const;
  unsigned long to_uhwi (unsigned int) const;
  unsigned long to_uhwi () const;
  long to_short_addr () const;


  long sign_mask () const;
  long elt (unsigned int) const;
  unsigned long ulow () const;
  unsigned long uhigh () const;
  long slow () const;
  long shigh () const;

  template <typename T>
  generic_wide_int &operator = (const T &);
# 722 "../../gcc/wide-int.h"
  template <typename T> generic_wide_int &operator &= (const T &c) { return (*this = wi::bit_and (*this, c)); }
  template <typename T> generic_wide_int &operator |= (const T &c) { return (*this = wi::bit_or (*this, c)); }
  template <typename T> generic_wide_int &operator ^= (const T &c) { return (*this = wi::bit_xor (*this, c)); }
  template <typename T> generic_wide_int &operator += (const T &c) { return (*this = wi::add (*this, c)); }
  template <typename T> generic_wide_int &operator -= (const T &c) { return (*this = wi::sub (*this, c)); }
  template <typename T> generic_wide_int &operator *= (const T &c) { return (*this = wi::mul (*this, c)); }
  template <typename T> generic_wide_int &operator <<= (const T &c) { return (*this = wi::lshift (*this, c)); }
  template <typename T> generic_wide_int &operator >>= (const T &c) { return (*this = *this >> c); }
  generic_wide_int &operator ++ () { *this += 1; return *this; }
  generic_wide_int &operator -- () { *this += -1; return *this; }






  void dump () const;

  static const bool is_sign_extended
    = wi::int_traits <generic_wide_int <storage> >::is_sign_extended;
};

template <typename storage>
inline generic_wide_int <storage>::generic_wide_int () {}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x)
  : storage (x)
{
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x,
           unsigned int precision)
  : storage (x, precision)
{
}



template <typename storage>
inline long
generic_wide_int <storage>::to_shwi (unsigned int precision) const
{
  if (precision < 64)
    return sext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::to_shwi () const
{
  if (is_sign_extended)
    return this->get_val ()[0];
  else
    return to_shwi (this->get_precision ());
}




template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi (unsigned int precision) const
{
  if (precision < 64)
    return zext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi () const
{
  return to_uhwi (this->get_precision ());
}





template <typename storage>
inline long
generic_wide_int <storage>::to_short_addr () const
{
  return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::sign_mask () const
{
  unsigned int len = this->get_len ();
  unsigned long high = this->get_val ()[len - 1];
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      int excess = len * 64 - precision;
      if (excess > 0)
 high <<= excess;
    }
  return (long) (high) < 0 ? -1 : 0;
}



template <typename storage>
inline long
generic_wide_int <storage>::slow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline long
generic_wide_int <storage>::shigh () const
{
  return this->get_val ()[this->get_len () - 1];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::ulow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::uhigh () const
{
  return this->get_val ()[this->get_len () - 1];
}


template <typename storage>
inline long
generic_wide_int <storage>::elt (unsigned int i) const
{
  if (i >= this->get_len ())
    return sign_mask ();
  else
    return this->get_val ()[i];
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage> &
generic_wide_int <storage>::operator = (const T &x)
{
  storage::operator = (x);
  return *this;
}


template <typename storage>
void
generic_wide_int <storage>::dump () const
{
  unsigned int len = this->get_len ();
  const long *val = this->get_val ();
  unsigned int precision = this->get_precision ();
  fprintf (
# 898 "../../gcc/wide-int.h" 3 4
          stderr
# 898 "../../gcc/wide-int.h"
                , "[");
  if (len * 64 < precision)
    fprintf (
# 900 "../../gcc/wide-int.h" 3 4
            stderr
# 900 "../../gcc/wide-int.h"
                  , "...,");
  for (unsigned int i = 0; i < len - 1; ++i)
    fprintf (
# 902 "../../gcc/wide-int.h" 3 4
            stderr
# 902 "../../gcc/wide-int.h"
                  , "%#" 
# 902 "../../gcc/wide-int.h" 3 4
                    "l" "x" 
# 902 "../../gcc/wide-int.h"
                                            ",", val[len - 1 - i]);
  fprintf (
# 903 "../../gcc/wide-int.h" 3 4
          stderr
# 903 "../../gcc/wide-int.h"
                , "%#" 
# 903 "../../gcc/wide-int.h" 3 4
                  "l" "x" 
# 903 "../../gcc/wide-int.h"
                                          "], precision = %d\n",
    val[0], precision);
}

namespace wi
{
  template <typename storage>
  struct int_traits < generic_wide_int <storage> >
    : public wi::int_traits <storage>
  {
    static unsigned int get_precision (const generic_wide_int <storage> &);
    static wi::storage_ref decompose (long *, unsigned int,
          const generic_wide_int <storage> &);
  };
}

template <typename storage>
inline unsigned int
wi::int_traits < generic_wide_int <storage> >::
get_precision (const generic_wide_int <storage> &x)
{
  return x.get_precision ();
}

template <typename storage>
inline wi::storage_ref
wi::int_traits < generic_wide_int <storage> >::
decompose (long *, unsigned int precision,
    const generic_wide_int <storage> &x)
{
  ((void)(!(precision == x.get_precision ()) ? fancy_abort ("../../gcc/wide-int.h", 933, __FUNCTION__), 0 : 0));
  return wi::storage_ref (x.get_val (), x.get_len (), precision);
}




template <bool SE, bool HDP>
struct wide_int_ref_storage : public wi::storage_ref
{
private:


  long scratch[2];

public:
  wide_int_ref_storage () {}

  wide_int_ref_storage (const wi::storage_ref &);

  template <typename T>
  wide_int_ref_storage (const T &);

  template <typename T>
  wide_int_ref_storage (const T &, unsigned int);
};


template <bool SE, bool HDP>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const wi::storage_ref &x)
  : storage_ref (x)
{}




template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::wide_int_ref_storage (const T &x)
  : storage_ref (wi::int_traits <T>::decompose (scratch,
      wi::get_precision (x), x))
{
}


template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const T &x, unsigned int precision)
  : storage_ref (wi::int_traits <T>::decompose (scratch, precision, x))
{
}

namespace wi
{
  template <bool SE, bool HDP>
  struct int_traits <wide_int_ref_storage <SE, HDP> >
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = HDP;
    static const bool is_sign_extended = SE;
  };
}

namespace wi
{
  unsigned int force_to_size (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         signop sgn);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool = true);
}


class wide_int_storage
{
private:
  long val[((128 + 64) / 64)];
  unsigned int len;
  unsigned int precision;

public:
  wide_int_storage ();
  template <typename T>
  wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  wide_int_storage &operator = (const T &);

  static wide_int from (const wide_int_ref &, unsigned int, signop);
  static wide_int from_array (const long *, unsigned int,
         unsigned int, bool = true);
  static wide_int create (unsigned int);


  wide_int bswap () const;
};

namespace wi
{
  template <>
  struct int_traits <wide_int_storage>
  {
    static const enum precision_type precision_type = VAR_PRECISION;

    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    template <typename T1, typename T2>
    static wide_int get_binary_result (const T1 &, const T2 &);
  };
}

inline wide_int_storage::wide_int_storage () {}





template <typename T>
inline wide_int_storage::wide_int_storage (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
}

template <typename T>
inline wide_int_storage&
wide_int_storage::operator = (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
  return *this;
}

inline unsigned int
wide_int_storage::get_precision () const
{
  return precision;
}

inline const long *
wide_int_storage::get_val () const
{
  return val;
}

inline unsigned int
wide_int_storage::get_len () const
{
  return len;
}

inline long *
wide_int_storage::write_val ()
{
  return val;
}

inline void
wide_int_storage::set_len (unsigned int l, bool is_sign_extended)
{
  len = l;
  if (!is_sign_extended && len * 64 > precision)
    val[len - 1] = sext_hwi (val[len - 1],
        precision % 64);
}



inline wide_int
wide_int_storage::from (const wide_int_ref &x, unsigned int precision,
   signop sgn)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, precision, sgn));
  return result;
}




inline wide_int
wide_int_storage::from_array (const long *val, unsigned int len,
         unsigned int precision, bool need_canon_p)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::from_array (result.write_val (), val, len, precision,
      need_canon_p));
  return result;
}


inline wide_int
wide_int_storage::create (unsigned int precision)
{
  wide_int x;
  x.precision = precision;
  return x;
}

template <typename T1, typename T2>
inline wide_int
wi::int_traits <wide_int_storage>::get_binary_result (const T1 &x, const T2 &y)
{

  static_assert ((wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION), "wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION")
                                                                ;
  if (wi::int_traits <T1>::precision_type == FLEXIBLE_PRECISION)
    return wide_int::create (wi::get_precision (y));
  else
    return wide_int::create (wi::get_precision (x));
}


template <int N>
class fixed_wide_int_storage
{
private:
  long val[(N + 64 + 1) / 64];
  unsigned int len;

public:
  fixed_wide_int_storage ();
  template <typename T>
  fixed_wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  static generic_wide_int < fixed_wide_int_storage <N> > from (const wide_int_ref &, signop);
  static generic_wide_int < fixed_wide_int_storage <N> > from_array (const long *, unsigned int,
     bool = true);
};

namespace wi
{
  template <int N>
  struct int_traits < fixed_wide_int_storage <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
    template <typename T1, typename T2>
    static generic_wide_int < fixed_wide_int_storage <N> > get_binary_result (const T1 &, const T2 &);
  };
}

template <int N>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage () {}


template <int N>
template <typename T>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage (const T &x)
{


  typename wi::binary_traits <T, generic_wide_int < fixed_wide_int_storage <N> > >::result_type *assertion __attribute__ ((__unused__));
  wi::copy (*this, generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > (x, N));
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
fixed_wide_int_storage <N>::get_val () const
{
  return val;
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_len () const
{
  return len;
}

template <int N>
inline long *
fixed_wide_int_storage <N>::write_val ()
{
  return val;
}

template <int N>
inline void
fixed_wide_int_storage <N>::set_len (unsigned int l, bool)
{
  len = l;

  static_assert ((N % 64 == 0), "N % HOST_BITS_PER_WIDE_INT == 0");
}


template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from (const wide_int_ref &x, signop sgn)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, N, sgn));
  return result;
}




template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from_array (const long *val,
     unsigned int len,
     bool need_canon_p)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::from_array (result.write_val (), val, len,
      N, need_canon_p));
  return result;
}

template <int N>
template <typename T1, typename T2>
inline generic_wide_int < fixed_wide_int_storage <N> >
wi::int_traits < fixed_wide_int_storage <N> >::
get_binary_result (const T1 &, const T2 &)
{
  return generic_wide_int < fixed_wide_int_storage <N> > ();
}


class trailing_wide_int_storage
{
private:


  unsigned int m_precision;


  unsigned char *m_len;



  long *m_val;

public:
  trailing_wide_int_storage (unsigned int, unsigned char *, long *);


  unsigned int get_len () const;
  unsigned int get_precision () const;
  const long *get_val () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  trailing_wide_int_storage &operator = (const T &);
};

typedef generic_wide_int <trailing_wide_int_storage> trailing_wide_int;


namespace wi
{
  template <>
  struct int_traits <trailing_wide_int_storage>
    : public int_traits <wide_int_storage> {};
}





template <int N>
class trailing_wide_ints
{
private:

  unsigned short m_precision;


  unsigned char m_max_len;


  unsigned char m_len[N];



  long m_val[1];

public:
  typedef generic_wide_int <wide_int_ref_storage <wi::int_traits <trailing_wide_int_storage>::is_sign_extended, wi::int_traits <trailing_wide_int_storage>::host_dependent_precision> > const_reference;

  void set_precision (unsigned int);
  unsigned int get_precision () const { return m_precision; }
  trailing_wide_int operator [] (unsigned int);
  const_reference operator [] (unsigned int) const;
  static size_t extra_size (unsigned int);
  size_t extra_size () const { return extra_size (m_precision); }
};

inline trailing_wide_int_storage::
trailing_wide_int_storage (unsigned int precision, unsigned char *len,
      long *val)
  : m_precision (precision), m_len (len), m_val (val)
{
}

inline unsigned int
trailing_wide_int_storage::get_len () const
{
  return *m_len;
}

inline unsigned int
trailing_wide_int_storage::get_precision () const
{
  return m_precision;
}

inline const long *
trailing_wide_int_storage::get_val () const
{
  return m_val;
}

inline long *
trailing_wide_int_storage::write_val ()
{
  return m_val;
}

inline void
trailing_wide_int_storage::set_len (unsigned int len, bool is_sign_extended)
{
  *m_len = len;
  if (!is_sign_extended && len * 64 > m_precision)
    m_val[len - 1] = sext_hwi (m_val[len - 1],
          m_precision % 64);
}

template <typename T>
inline trailing_wide_int_storage &
trailing_wide_int_storage::operator = (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, m_precision);
  wi::copy (*this, xi);
  return *this;
}



template <int N>
inline void
trailing_wide_ints <N>::set_precision (unsigned int precision)
{
  m_precision = precision;
  m_max_len = ((precision + 64 - 1)
        / 64);
}


template <int N>
inline trailing_wide_int
trailing_wide_ints <N>::operator [] (unsigned int index)
{
  return trailing_wide_int_storage (m_precision, &m_len[index],
        &m_val[index * m_max_len]);
}

template <int N>
inline typename trailing_wide_ints <N>::const_reference
trailing_wide_ints <N>::operator [] (unsigned int index) const
{
  return wi::storage_ref (&m_val[index * m_max_len],
     m_len[index], m_precision);
}



template <int N>
inline size_t
trailing_wide_ints <N>::extra_size (unsigned int precision)
{
  unsigned int max_len = ((precision + 64 - 1)
     / 64);
  return (N * max_len - 1) * sizeof (long);
}
# 1452 "../../gcc/wide-int.h"
namespace wi
{

  template <typename T, bool signed_p>
  struct primitive_int_traits
  {
    static const enum precision_type precision_type = FLEXIBLE_PRECISION;
    static const bool host_dependent_precision = true;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (T);
    static wi::storage_ref decompose (long *, unsigned int, T);
  };
}

template <typename T, bool signed_p>
inline unsigned int
wi::primitive_int_traits <T, signed_p>::get_precision (T)
{
  return sizeof (T) * 8;
}

template <typename T, bool signed_p>
inline wi::storage_ref
wi::primitive_int_traits <T, signed_p>::decompose (long *scratch,
         unsigned int precision, T x)
{
  scratch[0] = x;
  if (signed_p || scratch[0] >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}


namespace wi
{
  template <>
  struct int_traits <unsigned char>
    : public primitive_int_traits <unsigned char, false> {};

  template <>
  struct int_traits <unsigned short>
    : public primitive_int_traits <unsigned short, false> {};

  template <>
  struct int_traits <int>
    : public primitive_int_traits <int, true> {};

  template <>
  struct int_traits <unsigned int>
    : public primitive_int_traits <unsigned int, false> {};

  template <>
  struct int_traits <long>
    : public primitive_int_traits <long, true> {};

  template <>
  struct int_traits <unsigned long>
    : public primitive_int_traits <unsigned long, false> {};


  template <>
  struct int_traits <long long>
    : public primitive_int_traits <long long, true> {};

  template <>
  struct int_traits <unsigned long long>
    : public primitive_int_traits <unsigned long long, false> {};

}

namespace wi
{


  struct hwi_with_prec
  {
    hwi_with_prec () {}
    hwi_with_prec (long, unsigned int, signop);
    long val;
    unsigned int precision;
    signop sgn;
  };

  hwi_with_prec shwi (long, unsigned int);
  hwi_with_prec uhwi (unsigned long, unsigned int);

  hwi_with_prec minus_one (unsigned int);
  hwi_with_prec zero (unsigned int);
  hwi_with_prec one (unsigned int);
  hwi_with_prec two (unsigned int);
}

inline wi::hwi_with_prec::hwi_with_prec (long v, unsigned int p,
      signop s)
  : precision (p), sgn (s)
{
  if (precision < 64)
    val = sext_hwi (v, precision);
  else
    val = v;
}


inline wi::hwi_with_prec
wi::shwi (long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, SIGNED);
}


inline wi::hwi_with_prec
wi::uhwi (unsigned long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, UNSIGNED);
}


inline wi::hwi_with_prec
wi::minus_one (unsigned int precision)
{
  return wi::shwi (-1, precision);
}


inline wi::hwi_with_prec
wi::zero (unsigned int precision)
{
  return wi::shwi (0, precision);
}


inline wi::hwi_with_prec
wi::one (unsigned int precision)
{
  return wi::shwi (1, precision);
}


inline wi::hwi_with_prec
wi::two (unsigned int precision)
{
  return wi::shwi (2, precision);
}

namespace wi
{


  template<typename T, precision_type = int_traits<T>::precision_type>
  struct ints_for
  {
    static int zero (const T &) { return 0; }
  };

  template<typename T>
  struct ints_for<T, VAR_PRECISION>
  {
    static hwi_with_prec zero (const T &);
  };
}

template<typename T>
inline wi::hwi_with_prec
wi::ints_for<T, wi::VAR_PRECISION>::zero (const T &x)
{
  return wi::zero (wi::get_precision (x));
}

namespace wi
{
  template <>
  struct int_traits <wi::hwi_with_prec>
  {
    static const enum precision_type precision_type = VAR_PRECISION;


    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (const wi::hwi_with_prec &);
    static wi::storage_ref decompose (long *, unsigned int,
          const wi::hwi_with_prec &);
  };
}

inline unsigned int
wi::int_traits <wi::hwi_with_prec>::get_precision (const wi::hwi_with_prec &x)
{
  return x.precision;
}

inline wi::storage_ref
wi::int_traits <wi::hwi_with_prec>::
decompose (long *scratch, unsigned int precision,
    const wi::hwi_with_prec &x)
{
  ((void)(!(precision == x.precision) ? fancy_abort ("../../gcc/wide-int.h", 1648, __FUNCTION__), 0 : 0));
  scratch[0] = x.val;
  if (x.sgn == SIGNED || x.val >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}






namespace wi
{
  bool eq_p_large (const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  bool lts_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  bool ltu_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  int cmps_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  int cmpu_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  unsigned int sext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int zext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int set_bit_large (long *, const long *,
         unsigned int, unsigned int, unsigned int);
  unsigned int lshift_large (long *, const long *,
        unsigned int, unsigned int, unsigned int);
  unsigned int lrshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int arshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int and_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int and_not_large (long *, const long *,
         unsigned int, const long *,
         unsigned int, unsigned int);
  unsigned int or_large (long *, const long *, unsigned int,
    const long *, unsigned int, unsigned int);
  unsigned int or_not_large (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int);
  unsigned int xor_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int add_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, bool *);
  unsigned int sub_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, bool *);
  unsigned int mul_internal (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int, signop, bool *,
        bool);
  unsigned int divmod_internal (long *, unsigned int *,
    long *, const long *,
    unsigned int, unsigned int,
    const long *,
    unsigned int, unsigned int,
    signop, bool *);
}


template <typename T>
inline unsigned int
wi::get_precision (const T &x)
{
  return wi::int_traits <T>::get_precision (x);
}



template <typename T1, typename T2>
inline unsigned int
wi::get_binary_precision (const T1 &x, const T2 &y)
{
  return get_precision (wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::
   get_binary_result (x, y));
}


template <typename T1, typename T2>
inline void
wi::copy (T1 &x, const T2 &y)
{
  long *xval = x.write_val ();
  const long *yval = y.get_val ();
  unsigned int len = y.get_len ();
  unsigned int i = 0;
  do
    xval[i] = yval[i];
  while (++i < len);
  x.set_len (len, y.is_sign_extended);
}


template <typename T>
inline bool
wi::fits_shwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.len == 1;
}



template <typename T>
inline bool
wi::fits_uhwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (xi.precision <= 64)
    return true;
  if (xi.len == 1)
    return xi.slow () >= 0;
  return xi.len == 2 && xi.uhigh () == 0;
}



template <typename T>
inline bool
wi::neg_p (const T &x, signop sgn)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (sgn == UNSIGNED)
    return false;
  return xi.sign_mask () < 0;
}


template <typename T>
inline long
wi::sign_mask (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.sign_mask ();
}


template <typename T1, typename T2>
inline bool
wi::eq_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (xi.is_sign_extended && yi.is_sign_extended)
    {

      if (xi.len != yi.len)
 return false;
      unsigned int i = 0;
      do
 if (xi.val[i] != yi.val[i])
   return false;
      while (++i != xi.len);
      return true;
    }
  if (__builtin_expect (yi.len == 1, true))
    {

      if (xi.len != 1)
 return false;


      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return xi.val[0] == 0;

      unsigned long diff = xi.val[0] ^ yi.val[0];
      int excess = 64 - precision;
      if (excess > 0)
 diff <<= excess;
      return diff == 0;
    }
  return eq_p_large (xi.val, xi.len, yi.val, yi.len, precision);
}


template <typename T1, typename T2>
inline bool
wi::ne_p (const T1 &x, const T2 &y)
{
  return !eq_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::lts_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi);

      if (wi::fits_shwi_p (xi))
 return xi.to_shwi () < yi.to_shwi ();


      if (neg_p (xi))
 return true;


      return false;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return !neg_p (yi);
  return lts_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::ltu_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    return xi.len == 1 && xi.to_uhwi () < (unsigned long) yi.val[0];
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    return yi.len != 1 || yi.to_uhwi () > (unsigned long) xi.val[0];



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl;
    }
  return ltu_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::lt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return lts_p (x, y);
  else
    return ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::les_p (const T1 &x, const T2 &y)
{
  return !lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::leu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::le_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return les_p (x, y);
  else
    return leu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::gts_p (const T1 &x, const T2 &y)
{
  return lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gtu_p (const T1 &x, const T2 &y)
{
  return ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return gts_p (x, y);
  else
    return gtu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ges_p (const T1 &x, const T2 &y)
{
  return !lts_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::geu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ge_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return ges_p (x, y);
  else
    return geu_p (x, y);
}



template <typename T1, typename T2>
inline int
wi::cmps (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi) ? -1 : !(xi.len == 1 && xi.val[0] == 0);

      if (wi::fits_shwi_p (xi))
 {
   long xl = xi.to_shwi ();
   long yl = yi.to_shwi ();
   return xl < yl ? -1 : xl > yl;
 }


      if (neg_p (xi))
 return -1;


      return 1;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return neg_p (yi) ? 1 : -1;
  return cmps_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmpu (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    {

      if (xi.len != 1)
 return 1;

      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.val[0];
      return xl < yl ? -1 : xl > yl;
    }
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    {

      if (yi.len != 1)
 return -1;

      unsigned long xl = xi.val[0];
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }
  return cmpu_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmp (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return cmps (x, y);
  else
    return cmpu (x, y);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::bit_not (const T &x)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, get_precision (result));
  for (unsigned int i = 0; i < xi.len; ++i)
    val[i] = ~xi.val[i];
  result.set_len (xi.len);
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x)
{
  return sub (0, x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x, bool *overflow)
{
  *overflow = only_sign_bit_p (x);
  return sub (0, x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::abs (const T &x)
{
  return neg_p (x) ? neg (x) : typename wi::binary_traits <T, T>::result_type (x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::sext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);

  if (offset <= 64)
    {
      val[0] = sext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (sext_large (val, xi.val, xi.len, precision, offset));
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::zext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (offset >= precision)
    {
      wi::copy (result, xi);
      return result;
    }



  if (offset < 64)
    {
      val[0] = zext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (zext_large (val, xi.val, xi.len, precision, offset), true);
  return result;
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::ext (const T &x, unsigned int offset, signop sgn)
{
  return sgn == SIGNED ? sext (x, offset) : zext (x, offset);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::set_bit (const T &x, unsigned int bit)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () | (1UL << bit);
      result.set_len (1);
    }
  else
    result.set_len (set_bit_large (val, xi.val, xi.len, precision, bit));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::min (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::le_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, UNSIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::max (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::ge_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, UNSIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_large (val, xi.val, xi.len, yi.val, yi.len,
          precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_not_large (val, xi.val, xi.len, yi.val, yi.len,
       precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_large (val, xi.val, xi.len,
         yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_not_large (val, xi.val, xi.len, yi.val, yi.len,
      precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_xor (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () ^ yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (xor_large (val, xi.val, xi.len,
          yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () + yi.ulow ();
      result.set_len (1);
    }
# 2388 "../../gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (resultl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      if (sgn == SIGNED)
 *overflow = (((resultl ^ xl) & (resultl ^ yl))
       >> (precision - 1)) & 1;
      else
 *overflow = ((resultl << (64 - precision))
       < (xl << (64 - precision)));
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () - yi.ulow ();
      result.set_len (1);
    }
# 2461 "../../gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (xl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      if (sgn == SIGNED)
 *overflow = (((xl ^ yl) & (resultl ^ xl)) >> (precision - 1)) & 1;
      else
 *overflow = ((resultl << (64 - precision))
       > (xl << (64 - precision)));
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () * yi.ulow ();
      result.set_len (1);
    }
  else
    result.set_len (mul_internal (val, xi.val, xi.len, yi.val, yi.len,
      precision, UNSIGNED, 0, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, overflow, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smul (const T1 &x, const T2 &y, bool *overflow)
{
  return mul (x, y, SIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umul (const T1 &x, const T2 &y, bool *overflow)
{
  return mul (x, y, UNSIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul_high (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, 0, true));
  return result;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_trunc (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  quotient.set_len (divmod_internal (quotient_val, 0, 0, xi.val, xi.len,
         precision,
         yi.val, yi.len, yi.precision,
         sgn, overflow));
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_floor (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return quotient - 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_ceil (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return quotient + 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_ceil (const T1 &x, const T2 &y)
{
  return div_ceil (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return quotient - 1;
       else
  return quotient + 1;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return quotient + 1;
 }
    }
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::divmod_trunc (const T1 &x, const T2 &y, signop sgn,
    typename wi::binary_traits <T1, T2>::result_type *remainder_ptr)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn, 0));
  remainder.set_len (remainder_len);

  *remainder_ptr = remainder;
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::gcd (const T1 &a, const T2 &b, signop sgn)
{
  T1 x, y, z;

  x = wi::abs (a);
  y = wi::abs (b);

  while (gt_p (x, 0, sgn))
    {
      z = mod_trunc (y, x, sgn);
      y = x;
      x = z;
    }

  return y;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_trunc (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (remainder);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  divmod_internal (0, &remainder_len, remainder_val,
     xi.val, xi.len, precision,
     yi.val, yi.len, yi.precision, sgn, overflow);
  remainder.set_len (remainder_len);

  return remainder;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_floor (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return remainder + y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_floor (const T1 &x, const T2 &y)
{
  return mod_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_ceil (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return remainder - y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_round (const T1 &x, const T2 &y, signop sgn, bool *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return remainder + y;
       else
  return remainder - y;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return remainder - y;
 }
    }
  return remainder;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn)
{
  return wi::mod_trunc (x, y, sgn) == 0;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn,
     typename wi::binary_traits <T1, T2>::result_type *res)
{
  typename wi::binary_traits <T1, T2>::result_type remainder;
  typename wi::binary_traits <T1, T2>::result_type quotient
    = divmod_trunc (x, y, sgn, &remainder);
  if (remainder == 0)
    {
      *res = quotient;
      return true;
    }
  return false;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 2975 "../../gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? ((__builtin_constant_p (shift < 64 - 1) && (shift < 64 - 1))
      && xi.len == 1
      && xi.val[0] <= (long) ((unsigned long)
           (~((long) (1UL << (64 - 1)))) >> shift))
   : precision <= 64)
 {
   val[0] = xi.ulow () << shift;
   result.set_len (1);
 }
      else
 result.set_len (lshift_large (val, xi.val, xi.len,
          precision, shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lrshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3020 "../../gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? (shift < 64
      && xi.len == 1
      && xi.val[0] >= 0)
   : xi.precision <= 64)
 {
   val[0] = xi.to_uhwi () >> shift;
   result.set_len (1);
 }
      else
 result.set_len (lrshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::arshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = sign_mask (x);
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
      if (xi.precision <= 64)
 {
   val[0] = sext_hwi (xi.ulow () >> shift, xi.precision - shift);
   result.set_len (1, true);
 }
      else
 result.set_len (arshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::rshift (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == UNSIGNED)
    return lrshift (x, y);
  else
    return arshift (x, y);
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::lrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::rrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}



inline int
wi::parity (const wide_int_ref &x)
{
  return popcount (x) & 1;
}


template <typename T>
inline unsigned long
wi::extract_uhwi (const T &x, unsigned int bitpos, unsigned int width)
{
  unsigned precision = get_precision (x);
  if (precision < bitpos + width)
    precision = bitpos + width;
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (width == 0)
    return 0;

  unsigned int start = bitpos / 64;
  unsigned int shift = bitpos % 64;
  unsigned long res = xi.elt (start);
  res >>= shift;
  if (shift + width > 64)
    {
      unsigned long upper = xi.elt (start + 1);
      res |= upper << (-shift % 64);
    }
  return zext_hwi (res, width);
}


template <typename T>
inline unsigned int
wi::min_precision (const T &x, signop sgn)
{
  if (sgn == SIGNED)
    return get_precision (x) - clrsb (x);
  else
    return get_precision (x) - clz (x);
}
# 3170 "../../gcc/wide-int.h"
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator < (const T1 &x, const T2 &y) { return wi::lts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator <= (const T1 &x, const T2 &y) { return wi::les_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator > (const T1 &x, const T2 &y) { return wi::gts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator >= (const T1 &x, const T2 &y) { return wi::ges_p (x, y); }
# 3209 "../../gcc/wide-int.h"
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator ~ (const generic_wide_int<T> &x) { return wi::bit_not (x); }
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator - (const generic_wide_int<T> &x) { return wi::neg (x); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator == (const T1 &x, const T2 &y) { return wi::eq_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator != (const T1 &x, const T2 &y) { return wi::ne_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator & (const T1 &x, const T2 &y) { return wi::bit_and (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator | (const T1 &x, const T2 &y) { return wi::bit_or (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator ^ (const T1 &x, const T2 &y) { return wi::bit_xor (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator + (const T1 &x, const T2 &y) { return wi::add (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator - (const T1 &x, const T2 &y) { return wi::sub (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator * (const T1 &x, const T2 &y) { return wi::mul (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T1>::operator_result operator << (const T1 &x, const T2 &y) { return wi::lshift (x, y); }






template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator >> (const T1 &x, const T2 &y)
{
  return wi::arshift (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator / (const T1 &x, const T2 &y)
{
  return wi::sdiv_trunc (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator % (const T1 &x, const T2 &y)
{
  return wi::smod_trunc (x, y);
}

template<typename T>
void
gt_ggc_mx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *, void (*) (void *, void *), void *)
{
}

template<int N>
void
gt_ggc_mx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *, void (*) (void *, void *), void *)
{
}

namespace wi
{



  struct never_used1 {};
  struct never_used2 {};

  wide_int min_value (unsigned int, signop);
  wide_int min_value (never_used1 *);
  wide_int min_value (never_used2 *);
  wide_int max_value (unsigned int, signop);
  wide_int max_value (never_used1 *);
  wide_int max_value (never_used2 *);



  wide_int from_buffer (const unsigned char *, unsigned int);


  void to_mpz (const wide_int_ref &, mpz_t, signop);


  wide_int mask (unsigned int, bool, unsigned int);
  wide_int shifted_mask (unsigned int, unsigned int, bool, unsigned int);
  wide_int set_bit_in_zero (unsigned int, unsigned int);
  wide_int insert (const wide_int &x, const wide_int &y, unsigned int,
     unsigned int);
  wide_int round_down_for_mask (const wide_int &, const wide_int &);
  wide_int round_up_for_mask (const wide_int &, const wide_int &);

  template <typename T>
  T mask (unsigned int, bool);

  template <typename T>
  T shifted_mask (unsigned int, unsigned int, bool);

  template <typename T>
  T set_bit_in_zero (unsigned int);

  unsigned int mask (long *, unsigned int, bool, unsigned int);
  unsigned int shifted_mask (long *, unsigned int, unsigned int,
        bool, unsigned int);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool);
}



inline wide_int
wi::mask (unsigned int width, bool negate_p, unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (mask (result.write_val (), width, negate_p, precision));
  return result;
}




inline wide_int
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p,
    unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (shifted_mask (result.write_val (), start, width, negate_p,
    precision));
  return result;
}



inline wide_int
wi::set_bit_in_zero (unsigned int bit, unsigned int precision)
{
  return shifted_mask (bit, 1, false, precision);
}



template <typename T>
inline T
wi::mask (unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (mask (result.write_val (), width, negate_p,
   wi::int_traits <T>::precision));
  return result;
}




template <typename T>
inline T
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (shifted_mask (result.write_val (), start, width,
    negate_p,
    wi::int_traits <T>::precision));
  return result;
}



template <typename T>
inline T
wi::set_bit_in_zero (unsigned int bit)
{
  return shifted_mask <T> (bit, 1, false);
}
# 400 "../../gcc/coretypes.h" 2
# 1 "../../gcc/wide-int-print.h" 1
# 29 "../../gcc/wide-int-print.h"
extern void print_dec (const wide_int_ref &wi, char *buf, signop sgn);
extern void print_dec (const wide_int_ref &wi, FILE *file, signop sgn);
extern void print_decs (const wide_int_ref &wi, char *buf);
extern void print_decs (const wide_int_ref &wi, FILE *file);
extern void print_decu (const wide_int_ref &wi, char *buf);
extern void print_decu (const wide_int_ref &wi, FILE *file);
extern void print_hex (const wide_int_ref &wi, char *buf);
extern void print_hex (const wide_int_ref &wi, FILE *file);
# 401 "../../gcc/coretypes.h" 2
# 414 "../../gcc/coretypes.h"
# 1 "../../gcc/poly-int.h" 1
# 32 "../../gcc/poly-int.h"
template<unsigned int N, typename T> class poly_int_pod;
template<unsigned int N, typename T> class poly_int;
# 62 "../../gcc/poly-int.h"
template<typename T, wi::precision_type = wi::int_traits<T>::precision_type>
struct poly_coeff_traits;

template<typename T>
struct poly_coeff_traits<T, wi::FLEXIBLE_PRECISION>
{
  typedef T result;
  typedef T int_type;
  static const int signedness = (T (0) >= T (-1));
  static const int precision = sizeof (T) * 8;
  static const T max_value = (signedness
         ? ((T (1) << (precision - 2))
     + ((T (1) << (precision - 2)) - 1))
         : T (-1));
  static const int rank = sizeof (T) * 2 + !signedness;
};

template<typename T>
struct poly_coeff_traits<T, wi::VAR_PRECISION>
{
  typedef T result;
  typedef int int_type;
  static const int signedness = -1;
  static const int precision = (((128 + 64) / 64) * 64);
  static const int rank = 0x7fffffff;
};

template<typename T>
struct poly_coeff_traits<T, wi::CONST_PRECISION>
{
  typedef typename wi::binary_traits <T, T>::result_type result;
  typedef int int_type;

  static const int signedness = 1;
  static const int precision = wi::int_traits<T>::precision;
  static const int rank = precision * 2 / 8;
};


template<typename T1, typename T2>
struct poly_coeff_pair_traits
{
# 118 "../../gcc/poly-int.h"
  static const bool lossless_p = (poly_coeff_traits<T1>::signedness
      == poly_coeff_traits<T2>::signedness
      ? (poly_coeff_traits<T1>::precision
         >= poly_coeff_traits<T2>::precision)
      : (poly_coeff_traits<T1>::signedness == 1
         && poly_coeff_traits<T2>::signedness == 0
         && (poly_coeff_traits<T1>::precision
      > poly_coeff_traits<T2>::precision)));





  static const int result_kind
    = ((poly_coeff_traits<T1>::rank <= poly_coeff_traits<long>::rank
 && poly_coeff_traits<T2>::rank <= poly_coeff_traits<long>::rank)
       ? 0
       : (poly_coeff_traits<T1>::rank <= poly_coeff_traits<unsigned long>::rank
   && poly_coeff_traits<T2>::rank <= poly_coeff_traits<unsigned long>::rank)
       ? 1 : 2);

};



template<typename T1, typename T2, typename T3,
  bool lossless_p = poly_coeff_pair_traits<T1, T2>::lossless_p>
struct if_lossless;
template<typename T1, typename T2, typename T3>
struct if_lossless<T1, T2, T3, true>
{
  typedef T3 type;
};
# 166 "../../gcc/poly-int.h"
template<typename T>
struct poly_int_traits
{
  static const bool is_poly = false;
  static const unsigned int num_coeffs = 1;
  typedef T coeff_type;
  typedef typename poly_coeff_traits<T>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int_pod<N, C> >
{
  static const bool is_poly = true;
  static const unsigned int num_coeffs = N;
  typedef C coeff_type;
  typedef typename poly_coeff_traits<C>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int<N, C> > : poly_int_traits<poly_int_pod<N, C> >
{
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_nonpoly {};
template<typename T1, typename T2>
struct if_nonpoly<T1, T2, false>
{
  typedef T2 type;
};



template<typename T1, typename T2, typename T3,
  bool is_poly1 = poly_int_traits<T1>::is_poly,
  bool is_poly2 = poly_int_traits<T2>::is_poly>
struct if_nonpoly2 {};
template<typename T1, typename T2, typename T3>
struct if_nonpoly2<T1, T2, T3, false, false>
{
  typedef T3 type;
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_poly {};
template<typename T1, typename T2>
struct if_poly<T1, T2, true>
{
  typedef T2 type;
};
# 234 "../../gcc/poly-int.h"
template<typename T1, typename T2 = T1,
  int result_kind = poly_coeff_pair_traits<T1, T2>::result_kind>
struct poly_result;


template<typename T1, typename T2>
struct poly_result<T1, T2, 0>
{
  typedef long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 1>
{
  typedef unsigned long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 2>
{
  typedef typename wi::binary_traits <T1, T2>::result_type type;


  typedef const T1 &cast;
};
# 337 "../../gcc/poly-int.h"
template<unsigned int N, typename C>
class poly_int_pod
{
public:
  template<typename Ca>
  poly_int_pod &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int_pod &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int_pod &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator *= (const Ca &);

  poly_int_pod &operator <<= (unsigned int);

  bool is_constant () const;

  template<typename T>
  typename if_lossless<T, C, bool>::type is_constant (T *) const;

  C to_constant () const;

  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, unsigned int,
         signop);
  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, signop);

  bool to_shwi (poly_int_pod<N, long> *) const;
  bool to_uhwi (poly_int_pod<N, unsigned long> *) const;
  poly_int<N, long> force_shwi () const;
  poly_int<N, unsigned long> force_uhwi () const;





  C coeffs[N];
};

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator = (const Ca &a)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = a) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (a)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::is_constant () const
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (this->coeffs[i] != 0)
 return false;
  return true;
}




template<unsigned int N, typename C>
template<typename T>
inline typename if_lossless<T, C, bool>::type
poly_int_pod<N, C>::is_constant (T *const_value) const
{
  if (is_constant ())
    {
      *const_value = this->coeffs[0];
      return true;
    }
  return false;
}







template<unsigned int N, typename C>
inline C
poly_int_pod<N, C>::to_constant () const
{
  ((void)(!(is_constant ()) ? fancy_abort ("../../gcc/poly-int.h", 504, __FUNCTION__), 0 : 0));
  return this->coeffs[0];
}





template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a,
     unsigned int bitsize, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], bitsize, sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], bitsize, sgn))));
  return r;
}




template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], sgn))));
  return r;
}





template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_shwi (poly_int_pod<N, long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_shwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_shwi ();
  return true;
}






template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_uhwi (poly_int_pod<N, unsigned long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_uhwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_uhwi ();
  return true;
}




template<unsigned int N, typename C>
inline poly_int<N, long>
poly_int_pod<N, C>::force_shwi () const
{
  poly_int_pod<N, long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_shwi ();
  return r;
}




template<unsigned int N, typename C>
inline poly_int<N, unsigned long>
poly_int_pod<N, C>::force_uhwi () const
{
  poly_int_pod<N, unsigned long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_uhwi ();
  return r;
}
# 611 "../../gcc/poly-int.h"
template<unsigned int N, typename C>
class poly_int : public poly_int_pod<N, C>
{
public:
  poly_int () {}

  template<typename Ca>
  poly_int (const poly_int<N, Ca> &);
  template<typename Ca>
  poly_int (const poly_int_pod<N, Ca> &);
  template<typename C0>
  poly_int (const C0 &);
  template<typename C0, typename C1>
  poly_int (const C0 &, const C1 &);

  template<typename Ca>
  poly_int &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator *= (const Ca &);

  poly_int &operator <<= (unsigned int);
};

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename C0>
inline
poly_int<N, C>::poly_int (const C0 &c0)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename C0, typename C1>
inline
poly_int<N, C>::poly_int (const C0 &c0, const C1 &c1)
{
  static_assert ((N >= 2), "N >= 2");
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[1] = c1) : (void) ((*this).coeffs[1].~C (), new (&(*this).coeffs[1]) C (c1)));
  for (unsigned int i = 2; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] = a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator = (const Ca &a)
{
  this->coeffs[0] = a;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      this->coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0]);
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int<N, C>&
poly_int<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const Ca &a, const Cb &b, const Cc &c)
{
  return a >= b && a <= c;
}

template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const poly_int_pod<N, Ca> &a, const Cb &b, const Cc &c)
{
  for (unsigned int i = 0; i < N; i++)
    if (a.coeffs[i] < b || a.coeffs[i] > c)
      return false;
  return true;
}

namespace wi {


template<unsigned int N>
inline poly_int<N, hwi_with_prec>
shwi (const poly_int_pod<N, long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::shwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::shwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N>
inline poly_int<N, hwi_with_prec>
uhwi (const poly_int_pod<N, unsigned long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::uhwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::uhwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
sext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sext (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
zext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::zext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::zext (a.coeffs[i], precision))));
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator + (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) + b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) + b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator + (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) + b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) + b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator + (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a + NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a + NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, bool *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      bool suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      *overflow |= suboverflow;
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator - (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) - b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) - b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator - (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) - b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) - b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator - (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a - NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a - NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, bool *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      bool suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      *overflow |= suboverflow;
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator - (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCa (a.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a, bool *overflow)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::neg (a.coeffs[0], overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::neg (a.coeffs[0], overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      bool suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i], &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i], &suboverflow))));
      *overflow |= suboverflow;
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator ~ (const poly_int_pod<N, Ca> &a)
{
  if (N >= 2)
    return -1 - a;
  return ~a.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator * (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) * b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) * b)));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator * (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a) * b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a) * b.coeffs[i])));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a, b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a, b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b,
     signop sgn, bool *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::mul (a.coeffs[0], b, sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::mul (a.coeffs[0], b, sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      bool suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b, sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b, sgn, &suboverflow))));
      *overflow |= suboverflow;
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator << (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) << b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) << b)));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
lshift (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::lshift (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::lshift (a.coeffs[i], b))));
  return r;
}
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b0, const Cb &b1)
{
  if (a1 != b1)







    return (a1 < b1
     ? b0 <= a0 && (a0 - b0) % (b1 - a1) == 0
     : b0 >= a0 && (b0 - a0) % (a1 - b1) == 0);
  return a0 == b0;
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b)
{
  if (a1 != 0)






    return (a1 < 0
     ? b <= a0 && (a0 - b) % a1 == 0
     : b >= a0 && (b - a0) % a1 == 0);
  return a0 == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_eq (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b.coeffs[0], b.coeffs[1]);
  return a.coeffs[0] == b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_eq (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b);
  return a.coeffs[0] == b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_eq (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (b.coeffs[0], b.coeffs[1], a);
  return a == b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_eq (const Ca &a, const Cb &b)
{
  return a == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_ne (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != b.coeffs[i])
 return true;
  return a.coeffs[0] != b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_ne (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != 0)
 return true;
  return a.coeffs[0] != b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_ne (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] != 0)
 return true;
  return a != b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_ne (const Ca &a, const Cb &b)
{
  return a != b;
}
# 1312 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_le (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] <= b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_le (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] <= b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_le (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a <= b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_le (const Ca &a, const Cb &b)
{
  return a <= b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_lt (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] < b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_lt (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] < b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_lt (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a < b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_lt (const Ca &a, const Cb &b)
{
  return a < b;
}
# 1414 "../../gcc/poly-int.h"
template<typename T1, typename T2>
inline bool
ordered_p (const T1 &a, const T2 &b)
{
  return ((poly_int_traits<T1>::num_coeffs == 1
    && poly_int_traits<T2>::num_coeffs == 1)
   || (!maybe_lt (b, a))
   || (!maybe_lt (a, b)));
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("../../gcc/poly-int.h", 1439, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_min (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("../../gcc/poly-int.h", 1453, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("../../gcc/poly-int.h", 1467, __FUNCTION__), 0 : 0));
      return b;
    }
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("../../gcc/poly-int.h", 1487, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_max (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("../../gcc/poly-int.h", 1501, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("../../gcc/poly-int.h", 1515, __FUNCTION__), 0 : 0));
      return a;
    }
}




template<unsigned int N, typename Ca>
inline Ca
constant_lower_bound (const poly_int_pod<N, Ca> &a)
{
  ((void)(!((!maybe_lt (a, typename poly_int_traits<Ca>::int_type (0)))) ? fancy_abort ("../../gcc/poly-int.h", 1527, __FUNCTION__), 0 : 0));
  return a.coeffs[0];
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
lower_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return lower_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}

template<typename Ca, typename Cb>
inline typename poly_result<typename if_nonpoly<Ca>::type, typename if_nonpoly<Cb>::type>::type
lower_bound (const Ca &a, const Cb &b)
{
  return a < b ? a : b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
upper_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return upper_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
coeff_gcd (const poly_int_pod<N, Ca> &a)
{

  unsigned int i;
  for (i = N - 1; i > 0; --i)
    if (a.coeffs[i] != 0)
      break;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[i];
  for (unsigned int j = 0; j < i; ++j)
    if (a.coeffs[j] != 0)
      r = gcd (r, C (a.coeffs[j]));
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
common_multiple (const poly_int_pod<N, Ca> &a, Cb b)
{
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type xgcd = coeff_gcd (a);
  return a * (least_common_multiple (xgcd, b) / xgcd);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
common_multiple (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return common_multiple (b, a);
}
# 1669 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, Cb>::type>
force_common_multiple (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return common_multiple (a, b.coeffs[0]);
  if (a.is_constant ())
    return common_multiple (a.coeffs[0], b);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Ca>::int_type ICa;

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] != ICa (0))
      {
 C lcm = least_common_multiple (NCa (a.coeffs[i]), NCb (b.coeffs[i]));
 C amul = lcm / a.coeffs[i];
 C bmul = lcm / b.coeffs[i];
 for (unsigned int j = 0; j < N; ++j)
   ((void)(!(a.coeffs[j] * amul == b.coeffs[j] * bmul) ? fancy_abort ("../../gcc/poly-int.h", 1691, __FUNCTION__), 0 : 0));
 return a * amul;
      }
  (fancy_abort ("../../gcc/poly-int.h", 1694, __FUNCTION__));
}
# 1708 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline int
compare_sizes_for_sort (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b)
{
  for (unsigned int i = N; i-- > 0; )
    if (a.coeffs[i] != b.coeffs[i])
      return a.coeffs[i] < b.coeffs[i] ? -1 : 1;
  return 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_p (const poly_int_pod<N, Ca> &value, Cb align)
{
  for (unsigned int i = 1; i < N; i++)
    if ((value.coeffs[i] & (align - 1)) != 0)
      return false;
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_up (const poly_int_pod<N, Ca> &value, Cb align,
       poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value + (-value.coeffs[0] & (align - 1));
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_down (const poly_int_pod<N, Ca> &value, Cb align,
  poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value - (value.coeffs[0] & (align - 1));
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_up (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b,
       Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_up (a, align, &aligned_a)
   && can_align_up (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_down (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b,
         Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_down (a, align, &aligned_a)
   && can_align_down (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}
# 1800 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("../../gcc/poly-int.h", 1804, __FUNCTION__), 0 : 0));
  return value + (-value.coeffs[0] & (align - 1));
}
# 1815 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("../../gcc/poly-int.h", 1819, __FUNCTION__), 0 : 0));
  return value - (value.coeffs[0] & (align - 1));
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_lower_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)


    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] - (value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] - (value.coeffs[i] & (align - 1))))))
                                             ;
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_upper_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] + (-value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] + (-value.coeffs[i] & (align - 1))))))
                                              ;
  return r;
}
# 1863 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("../../gcc/poly-int.h", 1867, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}
# 1887 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("../../gcc/poly-int.h", 1891, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
known_misalignment (const poly_int_pod<N, Ca> &value, Cb align, Cm *misalign)
{
  ((void)(!(align != 0) ? fancy_abort ("../../gcc/poly-int.h", 1911, __FUNCTION__), 0 : 0));
  if (!can_align_p (value, align))
    return false;
  *misalign = value.coeffs[0] & (align - 1);
  return true;
}





template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
force_get_misalignment (const poly_int_pod<N, Ca> &a, Cb align)
{
  ((void)(!(can_align_p (a, align)) ? fancy_abort ("../../gcc/poly-int.h", 1926, __FUNCTION__), 0 : 0));
  return a.coeffs[0] & (align - 1);
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
known_alignment (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[0];
  for (unsigned int i = 1; i < N; ++i)
    r |= a.coeffs[i];
  return r & -r;
}




template<unsigned int N, typename Ca, typename Cb, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_ior_p (const poly_int_pod<N, Ca> &a, Cb b, Cr *result)
{


  typedef typename poly_int_traits<Ca>::int_type int_type;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if ((-(a.coeffs[i] & -a.coeffs[i]) & b) != int_type (0))
 return false;
  *result = a;
  result->coeffs[0] |= b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
constant_multiple_p (const poly_int_pod<N, Ca> &a, Cb b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  if (NCa (a.coeffs[0]) % NCb (b) != 0 || !a.is_constant ())
    return false;
  *multiple = NCa (a.coeffs[0]) / NCb (b);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
constant_multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type int_type;



  if (NCa (a) % NCb (b.coeffs[0]) != 0
      || (a != int_type (0) && !b.is_constant ()))
    return false;
  *multiple = NCa (a) / NCb (b.coeffs[0]);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
constant_multiple_p (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;

  if (NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0)
    return false;

  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    if (b.coeffs[i] == ICb (0)
 ? a.coeffs[i] != ICa (0)
 : (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0
    || NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != r))
      return false;

  *multiple = r;
  return true;
}



template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b)
{
  return a % b == 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b)
{
  for (unsigned int i = 0; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  return true;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_int_traits<Ca>::int_type int_type;



  return a % b.coeffs[0] == 0 && (a == int_type (0) || b.is_constant ());
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0]);
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type tmp;
  return constant_multiple_p (a, b, &tmp);
}




template<typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b, Cm *multiple)
{
  if (a % b != 0)
    return false;
  *multiple = a / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b, poly_int_pod<N, Cm> *multiple)
{
  if (!multiple_p (a, b))
    return false;
  for (unsigned int i = 0; i < N; ++i)
    multiple->coeffs[i] = a.coeffs[i] / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;



  if (a % b.coeffs[0] != 0 || (NCa (a) != 0 && !b.is_constant ()))
    return false;
  *multiple = a / b.coeffs[0];
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     poly_int_pod<N, Cm> *multiple)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0], multiple);
  return constant_multiple_p (a, b, multiple);
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
exact_div (const poly_int_pod<N, Ca> &a, Cb b)
{
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    {
      ((void)(!(a.coeffs[i] % b == 0) ? fancy_abort ("../../gcc/poly-int.h", 2139, __FUNCTION__), 0 : 0));
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = a.coeffs[i] / b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (a.coeffs[i] / b)));
    }
  return r;
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
exact_div (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return exact_div (a, b.coeffs[0]);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Cb>::int_type int_type;

  ((void)(!(a.coeffs[0] % b.coeffs[0] == 0) ? fancy_abort ("../../gcc/poly-int.h", 2159, __FUNCTION__), 0 : 0));
  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    ((void)(!(b.coeffs[i] == int_type (0) ? a.coeffs[i] == int_type (0) : (a.coeffs[i] % b.coeffs[i] == 0 && NCa (a.coeffs[i]) / NCb (b.coeffs[i]) == r)) ? fancy_abort (


                                                     "../../gcc/poly-int.h"
# 2162 "../../gcc/poly-int.h"
    ,


                                                     2165
# 2162 "../../gcc/poly-int.h"
    , __FUNCTION__), 0 : 0))


                                                      ;

  return r;
}
# 2178 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly2<Cb, Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b, Cq *quotient)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  Cq q = NCa (a.coeffs[0]) / NCb (b);
  if (!a.is_constant ())
    return false;
  *quotient = q;
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient)
{


  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  C q = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
# 2254 "../../gcc/poly-int.h"
  bool rem_p = NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0;
  for (unsigned int i = 1; i < N; ++i)
    {
      if (b.coeffs[i] == ICb (0))
 {

   if (a.coeffs[i] != ICa (0))
     return false;
 }
      else
 {
   if (q == 0)
     {

       if (a.coeffs[i] != ICa (0))
  {


    C neg_abs_a = (a.coeffs[i] < 0 ? a.coeffs[i] : -a.coeffs[i]);
    C neg_abs_b = (b.coeffs[i] < 0 ? b.coeffs[i] : -b.coeffs[i]);
    if (neg_abs_a < neg_abs_b)
      return false;
    rem_p = true;
  }
     }
   else
     {

       if (NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != q)
  return false;
       if (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0)
  rem_p = true;
     }
 }
    }




  if (rem_p && (!ordered_p (a, ICa (0)) || !ordered_p (b, ICb (0))))
    return false;

  *quotient = q;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a - *quotient * b;
  return true;
}
# 2322 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient)
{

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  for (unsigned int i = 0; i < N; ++i)
    quotient->coeffs[i] = a.coeffs[i] / b;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a.coeffs[0] % b;
  return true;
}
# 2357 "../../gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_away_from_zero_p (const poly_int_pod<N, Ca> &a,
     const poly_int_pod<N, Cb> &b,
     Cq *quotient)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  if (maybe_ne (*quotient * b, a))
    *quotient += (*quotient < 0 ? -1 : 1);
  return true;
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file, signop sgn)
{
  if (value.is_constant ())
    print_dec (value.coeffs[0], file, sgn);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_dec (value.coeffs[i], file, sgn);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file)
{
  static_assert ((poly_coeff_traits<C>::signedness >= 0), "poly_coeff_traits<C>::signedness >= 0");
  print_dec (value, file,
      poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED);
}







template<typename Pos, typename Start, typename Size,
  typename Diff = typename poly_result<typename poly_int_traits<Start>::coeff_type, typename poly_int_traits<Pos>::coeff_type>::type,
  typename Res = typename poly_result<typename poly_int_traits<Size>::coeff_type, typename poly_int_traits<Diff>::coeff_type>::type>
struct poly_span_traits
{


  template<typename T>
  static const T &cast (const T &x) { return x; }
};






template<typename T1, typename T2, typename T3>
struct poly_span_traits<T1, T2, T3, long, unsigned long>
{
  template<typename T>
  static typename if_nonpoly<T, unsigned long>::type
  cast (const T &x) { return x; }

  template<unsigned int N, typename T>
  static poly_int<N, unsigned long>
  cast (const poly_int_pod<N, T> &x) { return x; }
};




template<typename T>
inline bool
known_size_p (const T &a)
{
  return maybe_ne (a, typename poly_int_traits<T>::int_type (-1));
}





template<typename T1, typename T2, typename T3>
inline bool
maybe_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2, T3> span;
  if ((!maybe_le (pos, val)))
    return false;
  if (!known_size_p (size))
    return true;
  if ((poly_int_traits<T1>::num_coeffs > 1
       || poly_int_traits<T2>::num_coeffs > 1)
      && maybe_lt (val, pos))


    return true;
  return maybe_lt (span::cast (val - pos), size);
}





template<typename T1, typename T2, typename T3>
inline bool
known_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2, T3> span;
  return (known_size_p (size)
   && (!maybe_lt (val, pos))
   && (!maybe_le (size, span::cast (val - pos))));
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_maybe_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  if (maybe_in_range_p (pos2, pos1, size1))
    return maybe_ne (size2, typename poly_int_traits<T4>::int_type (0));
  if (maybe_in_range_p (pos1, pos2, size2))
    return maybe_ne (size1, typename poly_int_traits<T2>::int_type (0));
  return false;
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_known_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  typedef poly_span_traits<T1, T3, T2> span1;
  typedef poly_span_traits<T1, T3, T4> span2;
# 2521 "../../gcc/poly-int.h"
  return (known_size_p (size1)
   && known_size_p (size2)
   && (!maybe_le (size1, span1::cast (pos2 - lower_bound (pos1, pos2))))
   && (!maybe_le (size2, span2::cast (pos1 - lower_bound (pos1, pos2)))));
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
known_subrange_p (const T1 &pos1, const T2 &size1,
    const T3 &pos2, const T4 &size2)
{
  typedef typename poly_int_traits<T2>::coeff_type C2;
  typedef typename poly_result<typename poly_int_traits<T2>::coeff_type, typename poly_int_traits<T4>::coeff_type>::type size_diff_type;
  typedef poly_span_traits<T1, T3, size_diff_type> span;
  return ((!maybe_le (size1, typename poly_int_traits<T2>::int_type (0)))
   && (poly_coeff_traits<C2>::signedness > 0
       || known_size_p (size1))
   && known_size_p (size2)
   && (!maybe_lt (pos1, pos2))
   && (!maybe_lt (size2, size1))
   && (!maybe_lt (size2 - size1, span::cast (pos1 - pos2))));
}





template<typename T>
inline typename if_nonpoly<T, bool>::type
endpoint_representable_p (const T &pos, const T &size)
{
  return (!known_size_p (size)
   || pos <= poly_coeff_traits<T>::max_value - size);
}

template<unsigned int N, typename C>
inline bool
endpoint_representable_p (const poly_int_pod<N, C> &pos,
     const poly_int_pod<N, C> &size)
{
  if (known_size_p (size))
    for (unsigned int i = 0; i < N; ++i)
      if (pos.coeffs[i] > poly_coeff_traits<C>::max_value - size.coeffs[i])
 return false;
  return true;
}

template<unsigned int N, typename C>
void
gt_ggc_mx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *, void (*) (void *, void *), void *)
{
}
# 415 "../../gcc/coretypes.h" 2
# 1 "../../gcc/poly-int-types.h" 1
# 23 "../../gcc/poly-int-types.h"
typedef poly_int_pod<1, unsigned short> poly_uint16_pod;
typedef poly_int_pod<1, long> poly_int64_pod;
typedef poly_int_pod<1,
       unsigned long> poly_uint64_pod;
typedef poly_int_pod<1, offset_int> poly_offset_int_pod;
typedef poly_int_pod<1, wide_int> poly_wide_int_pod;
typedef poly_int_pod<1, widest_int> poly_widest_int_pod;

typedef poly_int<1, unsigned short> poly_uint16;
typedef poly_int<1, long> poly_int64;
typedef poly_int<1, unsigned long> poly_uint64;
typedef poly_int<1, offset_int> poly_offset_int;
typedef poly_int<1, wide_int> poly_wide_int;
typedef poly_int<1, wide_int_ref> poly_wide_int_ref;
typedef poly_int<1, widest_int> poly_widest_int;
# 416 "../../gcc/coretypes.h" 2
# 1 "./insn-modes-inline.h" 1
# 10 "./insn-modes-inline.h"
inline __attribute__((__always_inline__))



poly_uint16
mode_size_inline (machine_mode mode)
{
  extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 18, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_BND32mode: return 8;
    case E_BND64mode: return 16;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 2;
    case E_CHImode: return 4;
    case E_CSImode: return 8;
    case E_CDImode: return 16;
    case E_CTImode: return 32;
    case E_COImode: return 64;
    case E_CXImode: return 128;
    case E_SCmode: return 8;
    case E_DCmode: return 16;
    case E_TCmode: return 32;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 4;
    case E_V1SImode: return 4;
    case E_V8QImode: return 8;
    case E_V4HImode: return 8;
    case E_V2SImode: return 8;
    case E_V1DImode: return 8;
    case E_V12QImode: return 12;
    case E_V6HImode: return 12;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 16;
    case E_V4SImode: return 16;
    case E_V2DImode: return 16;
    case E_V1TImode: return 16;
    case E_V32QImode: return 32;
    case E_V16HImode: return 32;
    case E_V8SImode: return 32;
    case E_V4DImode: return 32;
    case E_V2TImode: return 32;
    case E_V64QImode: return 64;
    case E_V32HImode: return 64;
    case E_V16SImode: return 64;
    case E_V8DImode: return 64;
    case E_V4TImode: return 64;
    case E_V128QImode: return 128;
    case E_V64HImode: return 128;
    case E_V32SImode: return 128;
    case E_V16DImode: return 128;
    case E_V8TImode: return 128;
    case E_V64SImode: return 256;
    case E_V2SFmode: return 8;
    case E_V4SFmode: return 16;
    case E_V2DFmode: return 16;
    case E_V8SFmode: return 32;
    case E_V4DFmode: return 32;
    case E_V2TFmode: return 32;
    case E_V16SFmode: return 64;
    case E_V8DFmode: return 64;
    case E_V4TFmode: return 64;
    case E_V32SFmode: return 128;
    case E_V16DFmode: return 128;
    case E_V8TFmode: return 128;
    case E_V64SFmode: return 256;
    case E_V32DFmode: return 256;
    case E_V16TFmode: return 256;
    default: return mode_size[mode];
    }
}


inline __attribute__((__always_inline__))



poly_uint16
mode_nunits_inline (machine_mode mode)
{
  extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 1;
    case E_CCGCmode: return 1;
    case E_CCGOCmode: return 1;
    case E_CCNOmode: return 1;
    case E_CCGZmode: return 1;
    case E_CCAmode: return 1;
    case E_CCCmode: return 1;
    case E_CCOmode: return 1;
    case E_CCPmode: return 1;
    case E_CCSmode: return 1;
    case E_CCZmode: return 1;
    case E_CCFPmode: return 1;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 1;
    case E_SImode: return 1;
    case E_DImode: return 1;
    case E_TImode: return 1;
    case E_OImode: return 1;
    case E_XImode: return 1;
    case E_BND32mode: return 1;
    case E_BND64mode: return 1;
    case E_QQmode: return 1;
    case E_HQmode: return 1;
    case E_SQmode: return 1;
    case E_DQmode: return 1;
    case E_TQmode: return 1;
    case E_UQQmode: return 1;
    case E_UHQmode: return 1;
    case E_USQmode: return 1;
    case E_UDQmode: return 1;
    case E_UTQmode: return 1;
    case E_HAmode: return 1;
    case E_SAmode: return 1;
    case E_DAmode: return 1;
    case E_TAmode: return 1;
    case E_UHAmode: return 1;
    case E_USAmode: return 1;
    case E_UDAmode: return 1;
    case E_UTAmode: return 1;
    case E_SFmode: return 1;
    case E_DFmode: return 1;
    case E_XFmode: return 1;
    case E_TFmode: return 1;
    case E_SDmode: return 1;
    case E_DDmode: return 1;
    case E_TDmode: return 1;
    case E_CQImode: return 2;
    case E_CHImode: return 2;
    case E_CSImode: return 2;
    case E_CDImode: return 2;
    case E_CTImode: return 2;
    case E_COImode: return 2;
    case E_CXImode: return 2;
    case E_SCmode: return 2;
    case E_DCmode: return 2;
    case E_XCmode: return 2;
    case E_TCmode: return 2;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 2;
    case E_V1SImode: return 1;
    case E_V8QImode: return 8;
    case E_V4HImode: return 4;
    case E_V2SImode: return 2;
    case E_V1DImode: return 1;
    case E_V12QImode: return 12;
    case E_V6HImode: return 6;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 8;
    case E_V4SImode: return 4;
    case E_V2DImode: return 2;
    case E_V1TImode: return 1;
    case E_V32QImode: return 32;
    case E_V16HImode: return 16;
    case E_V8SImode: return 8;
    case E_V4DImode: return 4;
    case E_V2TImode: return 2;
    case E_V64QImode: return 64;
    case E_V32HImode: return 32;
    case E_V16SImode: return 16;
    case E_V8DImode: return 8;
    case E_V4TImode: return 4;
    case E_V128QImode: return 128;
    case E_V64HImode: return 64;
    case E_V32SImode: return 32;
    case E_V16DImode: return 16;
    case E_V8TImode: return 8;
    case E_V64SImode: return 64;
    case E_V2SFmode: return 2;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 2;
    case E_V8SFmode: return 8;
    case E_V4DFmode: return 4;
    case E_V2TFmode: return 2;
    case E_V16SFmode: return 16;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 4;
    case E_V32SFmode: return 32;
    case E_V16DFmode: return 16;
    case E_V8TFmode: return 8;
    case E_V64SFmode: return 64;
    case E_V32DFmode: return 32;
    case E_V16TFmode: return 16;
    default: return mode_nunits[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_inner_inline (machine_mode mode)
{
  extern const unsigned char mode_inner[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 261, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return E_VOIDmode;
    case E_BLKmode: return E_BLKmode;
    case E_CCmode: return E_CCmode;
    case E_CCGCmode: return E_CCGCmode;
    case E_CCGOCmode: return E_CCGOCmode;
    case E_CCNOmode: return E_CCNOmode;
    case E_CCGZmode: return E_CCGZmode;
    case E_CCAmode: return E_CCAmode;
    case E_CCCmode: return E_CCCmode;
    case E_CCOmode: return E_CCOmode;
    case E_CCPmode: return E_CCPmode;
    case E_CCSmode: return E_CCSmode;
    case E_CCZmode: return E_CCZmode;
    case E_CCFPmode: return E_CCFPmode;
    case E_BImode: return E_BImode;
    case E_QImode: return E_QImode;
    case E_HImode: return E_HImode;
    case E_SImode: return E_SImode;
    case E_DImode: return E_DImode;
    case E_TImode: return E_TImode;
    case E_OImode: return E_OImode;
    case E_XImode: return E_XImode;
    case E_BND32mode: return E_BND32mode;
    case E_BND64mode: return E_BND64mode;
    case E_QQmode: return E_QQmode;
    case E_HQmode: return E_HQmode;
    case E_SQmode: return E_SQmode;
    case E_DQmode: return E_DQmode;
    case E_TQmode: return E_TQmode;
    case E_UQQmode: return E_UQQmode;
    case E_UHQmode: return E_UHQmode;
    case E_USQmode: return E_USQmode;
    case E_UDQmode: return E_UDQmode;
    case E_UTQmode: return E_UTQmode;
    case E_HAmode: return E_HAmode;
    case E_SAmode: return E_SAmode;
    case E_DAmode: return E_DAmode;
    case E_TAmode: return E_TAmode;
    case E_UHAmode: return E_UHAmode;
    case E_USAmode: return E_USAmode;
    case E_UDAmode: return E_UDAmode;
    case E_UTAmode: return E_UTAmode;
    case E_SFmode: return E_SFmode;
    case E_DFmode: return E_DFmode;
    case E_XFmode: return E_XFmode;
    case E_TFmode: return E_TFmode;
    case E_SDmode: return E_SDmode;
    case E_DDmode: return E_DDmode;
    case E_TDmode: return E_TDmode;
    case E_CQImode: return E_QImode;
    case E_CHImode: return E_HImode;
    case E_CSImode: return E_SImode;
    case E_CDImode: return E_DImode;
    case E_CTImode: return E_TImode;
    case E_COImode: return E_OImode;
    case E_CXImode: return E_XImode;
    case E_SCmode: return E_SFmode;
    case E_DCmode: return E_DFmode;
    case E_XCmode: return E_XFmode;
    case E_TCmode: return E_TFmode;
    case E_V2QImode: return E_QImode;
    case E_V4QImode: return E_QImode;
    case E_V2HImode: return E_HImode;
    case E_V1SImode: return E_SImode;
    case E_V8QImode: return E_QImode;
    case E_V4HImode: return E_HImode;
    case E_V2SImode: return E_SImode;
    case E_V1DImode: return E_DImode;
    case E_V12QImode: return E_QImode;
    case E_V6HImode: return E_HImode;
    case E_V14QImode: return E_QImode;
    case E_V16QImode: return E_QImode;
    case E_V8HImode: return E_HImode;
    case E_V4SImode: return E_SImode;
    case E_V2DImode: return E_DImode;
    case E_V1TImode: return E_TImode;
    case E_V32QImode: return E_QImode;
    case E_V16HImode: return E_HImode;
    case E_V8SImode: return E_SImode;
    case E_V4DImode: return E_DImode;
    case E_V2TImode: return E_TImode;
    case E_V64QImode: return E_QImode;
    case E_V32HImode: return E_HImode;
    case E_V16SImode: return E_SImode;
    case E_V8DImode: return E_DImode;
    case E_V4TImode: return E_TImode;
    case E_V128QImode: return E_QImode;
    case E_V64HImode: return E_HImode;
    case E_V32SImode: return E_SImode;
    case E_V16DImode: return E_DImode;
    case E_V8TImode: return E_TImode;
    case E_V64SImode: return E_SImode;
    case E_V2SFmode: return E_SFmode;
    case E_V4SFmode: return E_SFmode;
    case E_V2DFmode: return E_DFmode;
    case E_V8SFmode: return E_SFmode;
    case E_V4DFmode: return E_DFmode;
    case E_V2TFmode: return E_TFmode;
    case E_V16SFmode: return E_SFmode;
    case E_V8DFmode: return E_DFmode;
    case E_V4TFmode: return E_TFmode;
    case E_V32SFmode: return E_SFmode;
    case E_V16DFmode: return E_DFmode;
    case E_V8TFmode: return E_TFmode;
    case E_V64SFmode: return E_SFmode;
    case E_V32DFmode: return E_DFmode;
    case E_V16TFmode: return E_TFmode;
    default: return mode_inner[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_unit_size_inline (machine_mode mode)
{
  extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 384, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_BND32mode: return 8;
    case E_BND64mode: return 16;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 1;
    case E_CHImode: return 2;
    case E_CSImode: return 4;
    case E_CDImode: return 8;
    case E_CTImode: return 16;
    case E_COImode: return 32;
    case E_CXImode: return 64;
    case E_SCmode: return 4;
    case E_DCmode: return 8;
    case E_TCmode: return 16;
    case E_V2QImode: return 1;
    case E_V4QImode: return 1;
    case E_V2HImode: return 2;
    case E_V1SImode: return 4;
    case E_V8QImode: return 1;
    case E_V4HImode: return 2;
    case E_V2SImode: return 4;
    case E_V1DImode: return 8;
    case E_V12QImode: return 1;
    case E_V6HImode: return 2;
    case E_V14QImode: return 1;
    case E_V16QImode: return 1;
    case E_V8HImode: return 2;
    case E_V4SImode: return 4;
    case E_V2DImode: return 8;
    case E_V1TImode: return 16;
    case E_V32QImode: return 1;
    case E_V16HImode: return 2;
    case E_V8SImode: return 4;
    case E_V4DImode: return 8;
    case E_V2TImode: return 16;
    case E_V64QImode: return 1;
    case E_V32HImode: return 2;
    case E_V16SImode: return 4;
    case E_V8DImode: return 8;
    case E_V4TImode: return 16;
    case E_V128QImode: return 1;
    case E_V64HImode: return 2;
    case E_V32SImode: return 4;
    case E_V16DImode: return 8;
    case E_V8TImode: return 16;
    case E_V64SImode: return 4;
    case E_V2SFmode: return 4;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 8;
    case E_V8SFmode: return 4;
    case E_V4DFmode: return 8;
    case E_V2TFmode: return 16;
    case E_V16SFmode: return 4;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 16;
    case E_V32SFmode: return 4;
    case E_V16DFmode: return 8;
    case E_V8TFmode: return 16;
    case E_V64SFmode: return 4;
    case E_V32DFmode: return 8;
    case E_V16TFmode: return 16;
    default: return mode_unit_size[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned short
mode_unit_precision_inline (machine_mode mode)
{
  extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 505, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4*(8);
    case E_CCGCmode: return 4*(8);
    case E_CCGOCmode: return 4*(8);
    case E_CCNOmode: return 4*(8);
    case E_CCGZmode: return 4*(8);
    case E_CCAmode: return 4*(8);
    case E_CCCmode: return 4*(8);
    case E_CCOmode: return 4*(8);
    case E_CCPmode: return 4*(8);
    case E_CCSmode: return 4*(8);
    case E_CCZmode: return 4*(8);
    case E_CCFPmode: return 4*(8);
    case E_BImode: return 1;
    case E_QImode: return 1*(8);
    case E_HImode: return 2*(8);
    case E_SImode: return 4*(8);
    case E_DImode: return 8*(8);
    case E_TImode: return 16*(8);
    case E_OImode: return 32*(8);
    case E_XImode: return 64*(8);
    case E_BND32mode: return 8*(8);
    case E_BND64mode: return 16*(8);
    case E_QQmode: return 1*(8);
    case E_HQmode: return 2*(8);
    case E_SQmode: return 4*(8);
    case E_DQmode: return 8*(8);
    case E_TQmode: return 16*(8);
    case E_UQQmode: return 1*(8);
    case E_UHQmode: return 2*(8);
    case E_USQmode: return 4*(8);
    case E_UDQmode: return 8*(8);
    case E_UTQmode: return 16*(8);
    case E_HAmode: return 2*(8);
    case E_SAmode: return 4*(8);
    case E_DAmode: return 8*(8);
    case E_TAmode: return 16*(8);
    case E_UHAmode: return 2*(8);
    case E_USAmode: return 4*(8);
    case E_UDAmode: return 8*(8);
    case E_UTAmode: return 16*(8);
    case E_SFmode: return 4*(8);
    case E_DFmode: return 8*(8);
    case E_XFmode: return 80;
    case E_TFmode: return 16*(8);
    case E_SDmode: return 4*(8);
    case E_DDmode: return 8*(8);
    case E_TDmode: return 16*(8);
    case E_CQImode: return 1*(8);
    case E_CHImode: return 2*(8);
    case E_CSImode: return 4*(8);
    case E_CDImode: return 8*(8);
    case E_CTImode: return 16*(8);
    case E_COImode: return 32*(8);
    case E_CXImode: return 64*(8);
    case E_SCmode: return 4*(8);
    case E_DCmode: return 8*(8);
    case E_XCmode: return 80;
    case E_TCmode: return 16*(8);
    case E_V2QImode: return 1*(8);
    case E_V4QImode: return 1*(8);
    case E_V2HImode: return 2*(8);
    case E_V1SImode: return 4*(8);
    case E_V8QImode: return 1*(8);
    case E_V4HImode: return 2*(8);
    case E_V2SImode: return 4*(8);
    case E_V1DImode: return 8*(8);
    case E_V12QImode: return 1*(8);
    case E_V6HImode: return 2*(8);
    case E_V14QImode: return 1*(8);
    case E_V16QImode: return 1*(8);
    case E_V8HImode: return 2*(8);
    case E_V4SImode: return 4*(8);
    case E_V2DImode: return 8*(8);
    case E_V1TImode: return 16*(8);
    case E_V32QImode: return 1*(8);
    case E_V16HImode: return 2*(8);
    case E_V8SImode: return 4*(8);
    case E_V4DImode: return 8*(8);
    case E_V2TImode: return 16*(8);
    case E_V64QImode: return 1*(8);
    case E_V32HImode: return 2*(8);
    case E_V16SImode: return 4*(8);
    case E_V8DImode: return 8*(8);
    case E_V4TImode: return 16*(8);
    case E_V128QImode: return 1*(8);
    case E_V64HImode: return 2*(8);
    case E_V32SImode: return 4*(8);
    case E_V16DImode: return 8*(8);
    case E_V8TImode: return 16*(8);
    case E_V64SImode: return 4*(8);
    case E_V2SFmode: return 4*(8);
    case E_V4SFmode: return 4*(8);
    case E_V2DFmode: return 8*(8);
    case E_V8SFmode: return 4*(8);
    case E_V4DFmode: return 8*(8);
    case E_V2TFmode: return 16*(8);
    case E_V16SFmode: return 4*(8);
    case E_V8DFmode: return 8*(8);
    case E_V4TFmode: return 16*(8);
    case E_V32SFmode: return 4*(8);
    case E_V16DFmode: return 8*(8);
    case E_V8TFmode: return 16*(8);
    case E_V64SFmode: return 4*(8);
    case E_V32DFmode: return 8*(8);
    case E_V16TFmode: return 16*(8);
    default: return mode_unit_precision[mode];
    }
}
# 417 "../../gcc/coretypes.h" 2
# 1 "../../gcc/machmode.h" 1
# 23 "../../gcc/machmode.h"
typedef opt_mode<machine_mode> opt_machine_mode;

extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_inner[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_wider[NUM_MACHINE_MODES];
extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];

template<typename T>
struct mode_traits
{
# 68 "../../gcc/machmode.h"
  enum from_int { dummy = MAX_MACHINE_MODE };

};

template<>
struct mode_traits<machine_mode>
{

  typedef machine_mode from_int;
};
# 89 "../../gcc/machmode.h"
extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "../../gcc/mode-classes.def" 1
# 95 "../../gcc/machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_POINTER_BOUNDS, MODE_FRACT, MODE_UFRACT, MODE_ACCUM, MODE_UACCUM, MODE_FLOAT, MODE_DECIMAL_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_BOOL, MODE_VECTOR_INT, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM, MODE_VECTOR_UACCUM, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 244 "../../gcc/machmode.h"
template<typename T>
class opt_mode
{
public:
  enum from_int { dummy = MAX_MACHINE_MODE };

  inline __attribute__ ((always_inline)) opt_mode () : m_mode (E_VOIDmode) {}
  inline __attribute__ ((always_inline)) opt_mode (const T &m) : m_mode (m) {}
  template<typename U>
  inline __attribute__ ((always_inline)) opt_mode (const U &m) : m_mode (T (m)) {}
  inline __attribute__ ((always_inline)) opt_mode (from_int m) : m_mode (machine_mode (m)) {}

  machine_mode else_void () const;
  machine_mode else_blk () const;
  T require () const;

  bool exists () const;
  template<typename U> bool exists (U *) const;

private:
  machine_mode m_mode;
};




template<typename T>
inline __attribute__ ((always_inline)) machine_mode
opt_mode<T>::else_void () const
{
  return m_mode;
}



template<typename T>
inline machine_mode
opt_mode<T>::else_blk () const
{
  return m_mode == E_VOIDmode ? E_BLKmode : m_mode;
}



template<typename T>
inline T
opt_mode<T>::require () const
{
  ((void)(!(m_mode != E_VOIDmode) ? fancy_abort ("../../gcc/machmode.h", 292, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m_mode);
}



template<typename T>
inline __attribute__ ((always_inline)) bool
opt_mode<T>::exists () const
{
  return m_mode != E_VOIDmode;
}



template<typename T>
template<typename U>
inline bool
opt_mode<T>::exists (U *mode) const
{
  if (m_mode != E_VOIDmode)
    {
      *mode = T (typename mode_traits<T>::from_int (m_mode));
      return true;
    }
  return false;
}



template<typename T>
struct pod_mode
{
  typedef typename mode_traits<T>::from_int from_int;
  typedef typename T::measurement_type measurement_type;

  machine_mode m_mode;
  inline __attribute__ ((always_inline)) operator machine_mode () const { return m_mode; }
  inline __attribute__ ((always_inline)) operator T () const { return from_int (m_mode); }
  inline __attribute__ ((always_inline)) pod_mode &operator = (const T &m) { m_mode = m; return *this; }
};



template<typename T>
inline bool
is_a (machine_mode m)
{
  return T::includes_p (m);
}

template<typename T, typename U>
inline bool
is_a (const opt_mode<U> &m)
{
  return T::includes_p (m.else_void ());
}



template<typename T>
inline T
as_a (machine_mode m)
{
  ((void)(!(T::includes_p (m)) ? fancy_abort ("../../gcc/machmode.h", 356, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m);
}

template<typename T, typename U>
inline T
as_a (const opt_mode<U> &m)
{
  return as_a <T> (m.else_void ());
}



template<typename T>
inline opt_mode<T>
dyn_cast (machine_mode m)
{
  if (T::includes_p (m))
    return T (typename mode_traits<T>::from_int (m));
  return opt_mode<T> ();
}

template<typename T, typename U>
inline opt_mode<T>
dyn_cast (const opt_mode<U> &m)
{
  return dyn_cast <T> (m.else_void ());
}




template<typename T, typename U>
inline bool
is_a (machine_mode m, U *result)
{
  if (T::includes_p (m))
    {
      *result = T (typename mode_traits<T>::from_int (m));
      return true;
    }
  return false;
}


class scalar_int_mode
{
public:
  typedef mode_traits<scalar_int_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_int_mode () {}
  inline __attribute__ ((always_inline)) scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}
  inline __attribute__ ((always_inline)) operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_int_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_INT || ((enum mode_class) mode_class[m]) == MODE_PARTIAL_INT);
}


class scalar_float_mode
{
public:
  typedef mode_traits<scalar_float_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_float_mode () {}
  inline __attribute__ ((always_inline)) scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}
  inline __attribute__ ((always_inline)) operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_float_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_FLOAT || ((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT);
}


class scalar_mode
{
public:
  typedef mode_traits<scalar_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_mode () {}
  inline __attribute__ ((always_inline)) scalar_mode (from_int m) : m_mode (machine_mode (m)) {}
  inline __attribute__ ((always_inline)) scalar_mode (const scalar_int_mode &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) scalar_mode (const scalar_float_mode &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_mode::includes_p (machine_mode m)
{
  switch (((enum mode_class) mode_class[m]))
    {
    case MODE_INT:
    case MODE_PARTIAL_INT:
    case MODE_FRACT:
    case MODE_UFRACT:
    case MODE_ACCUM:
    case MODE_UACCUM:
    case MODE_FLOAT:
    case MODE_DECIMAL_FLOAT:
    case MODE_POINTER_BOUNDS:
      return true;
    default:
      return false;
    }
}


class complex_mode
{
public:
  typedef mode_traits<complex_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) complex_mode () {}
  inline __attribute__ ((always_inline)) complex_mode (from_int m) : m_mode (machine_mode (m)) {}
  inline __attribute__ ((always_inline)) operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
complex_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_COMPLEX_INT || ((enum mode_class) mode_class[m]) == MODE_COMPLEX_FLOAT);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bytes (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_size_inline (mode) : mode_size[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bits (machine_mode mode)
{
  return mode_to_bytes (mode) * (8);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_precision (machine_mode mode)
{
  return mode_precision[mode];
}



inline __attribute__ ((always_inline)) scalar_mode
mode_to_inner (machine_mode mode)
{

  return scalar_mode::from_int (__builtin_constant_p (mode)
    ? mode_inner_inline (mode)
    : mode_inner[mode]);



}



inline __attribute__ ((always_inline)) unsigned char
mode_to_unit_size (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_size_inline (mode) : mode_unit_size[mode]);



}



inline __attribute__ ((always_inline)) unsigned short
mode_to_unit_precision (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_precision_inline (mode) : mode_unit_precision[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_nunits (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_nunits_inline (mode) : mode_nunits[mode]);



}






inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_SIZE (machine_mode mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode).coeffs[0];
}







inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_BITSIZE (machine_mode mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode).coeffs[0];
}
# 657 "../../gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_PRECISION (machine_mode mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode).coeffs[0];
}



extern const unsigned char mode_ibit[NUM_MACHINE_MODES];



extern const unsigned char mode_fbit[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];
# 715 "../../gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_NUNITS (machine_mode mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode).coeffs[0];
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_WIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_wider[m]);
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_2XWIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_2xwider[m]);
}


extern const unsigned char mode_complex[NUM_MACHINE_MODES];






class fixed_size_mode
{
public:
  typedef mode_traits<fixed_size_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) fixed_size_mode () {}
  inline __attribute__ ((always_inline)) fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}
  inline __attribute__ ((always_inline)) fixed_size_mode (const scalar_mode &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) fixed_size_mode (const complex_mode &m) : m_mode (m) {}
  inline __attribute__ ((always_inline)) operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
fixed_size_mode::includes_p (machine_mode mode)
{
  return mode_to_bytes (mode).is_constant ();
}
# 804 "../../gcc/machmode.h"
extern opt_machine_mode mode_for_size (poly_uint64, enum mode_class, int);





inline opt_scalar_int_mode
int_mode_for_size (poly_uint64 size, int limit)
{
  return dyn_cast <scalar_int_mode> (mode_for_size (size, MODE_INT, limit));
}




inline opt_scalar_float_mode
float_mode_for_size (poly_uint64 size)
{
  return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));
}



inline opt_scalar_float_mode
decimal_float_mode_for_size (unsigned int size)
{
  return dyn_cast <scalar_float_mode>
    (mode_for_size (size, MODE_DECIMAL_FLOAT, 0));
}

extern machine_mode smallest_mode_for_size (poly_uint64, enum mode_class);




inline scalar_int_mode
smallest_int_mode_for_size (poly_uint64 size)
{
  return as_a <scalar_int_mode> (smallest_mode_for_size (size, MODE_INT));
}

extern opt_scalar_int_mode int_mode_for_mode (machine_mode);
extern opt_machine_mode bitwise_mode_for_mode (machine_mode);
extern opt_machine_mode mode_for_vector (scalar_mode, poly_uint64);
extern opt_machine_mode mode_for_int_vector (unsigned int, poly_uint64);







inline opt_machine_mode
mode_for_int_vector (machine_mode mode)
{
  return mode_for_int_vector (((unsigned short) (mode_to_unit_size (mode) * (8))),
         GET_MODE_NUNITS (mode));
}


class bit_field_mode_iterator
{
public:
  bit_field_mode_iterator (long, long,
      poly_int64, poly_int64,
      unsigned int, bool);
  bool next_mode (scalar_int_mode *);
  bool prefer_smaller_modes ();

private:
  opt_scalar_int_mode m_mode;


  long m_bitsize;
  long m_bitpos;
  poly_int64 m_bitregion_start;
  poly_int64 m_bitregion_end;
  unsigned int m_align;
  bool m_volatilep;
  int m_count;
};



extern bool get_best_mode (int, int, poly_uint64, poly_uint64, unsigned int,
      unsigned long, bool, scalar_int_mode *);



extern unsigned short mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];
# 913 "../../gcc/machmode.h"
template<typename T>
inline T
get_narrowest_mode (T mode)
{
  return typename mode_traits<T>::from_int
    (class_narrowest_mode[((enum mode_class) mode_class[mode])]);
}




extern scalar_int_mode byte_mode;
extern scalar_int_mode word_mode;
extern scalar_int_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 938 "../../gcc/machmode.h"
inline bool
HWI_COMPUTABLE_MODE_P (machine_mode mode)
{
  machine_mode mme = mode;
  return ((((enum mode_class) mode_class[mme]) == MODE_INT || ((enum mode_class) mode_class[mme]) == MODE_PARTIAL_INT)
   && mode_to_precision (mme).coeffs[0] <= 64);
}

inline bool
HWI_COMPUTABLE_MODE_P (scalar_int_mode mode)
{
  return GET_MODE_PRECISION (mode) <= 64;
}

struct int_n_data_t {

  unsigned int bitsize;
  scalar_int_mode_pod m;

};



extern bool int_n_enabled_p[1];
extern const int_n_data_t int_n_data[1];




template<typename T>
inline bool
is_int_mode (machine_mode mode, T *int_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_INT)
    {
      *int_mode = scalar_int_mode (scalar_int_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_float_mode (machine_mode mode, T *float_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_FLOAT)
    {
      *float_mode = scalar_float_mode (scalar_float_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_int_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_INT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_float_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_FLOAT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




inline bool
is_narrower_int_mode (machine_mode mode, scalar_int_mode limit)
{
  scalar_int_mode int_mode;
  return (is_a <scalar_int_mode> (mode, &int_mode)
   && GET_MODE_PRECISION (int_mode) < GET_MODE_PRECISION (limit));
}

namespace mode_iterator
{


  template<typename T>
  inline void
  start (opt_mode<T> *iter, enum mode_class mclass)
  {
    if (((machine_mode) class_narrowest_mode[mclass]) == E_VOIDmode)
      *iter = opt_mode<T> ();
    else
      *iter = as_a<T> (((machine_mode) class_narrowest_mode[mclass]));
  }

  inline void
  start (machine_mode *iter, enum mode_class mclass)
  {
    *iter = ((machine_mode) class_narrowest_mode[mclass]);
  }



  template<typename T>
  inline bool
  iterate_p (opt_mode<T> *iter)
  {
    return iter->exists ();
  }

  inline bool
  iterate_p (machine_mode *iter)
  {
    return *iter != E_VOIDmode;
  }




  template<typename T>
  inline void
  get_wider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_WIDER_MODE (iter->require ());
  }

  inline void
  get_wider (machine_mode *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).else_void ();
  }




  template<typename T>
  inline void
  get_known_wider (T *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).require ();
  }




  template<typename T>
  inline void
  get_2xwider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (iter->require ());
  }

  inline void
  get_2xwider (machine_mode *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (*iter).else_void ();
  }
}
# 1157 "../../gcc/machmode.h"
template<typename T>
void
gt_ggc_mx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *, void (*) (void *, void *), void *)
{
}
# 418 "../../gcc/coretypes.h" 2
# 1 "../../gcc/double-int.h" 1
# 49 "../../gcc/double-int.h"
struct double_int
{







  static double_int from_uhwi (unsigned long cst);
  static double_int from_shwi (long cst);
  static double_int from_pair (long high, unsigned long low);



  static double_int from_buffer (const unsigned char *buffer, int len);





  static double_int mask (unsigned prec);
  static double_int max_value (unsigned int prec, bool uns);
  static double_int min_value (unsigned int prec, bool uns);



  double_int &operator ++ ();
  double_int &operator -- ();
  double_int &operator *= (double_int);
  double_int &operator += (double_int);
  double_int &operator -= (double_int);
  double_int &operator &= (double_int);
  double_int &operator ^= (double_int);
  double_int &operator |= (double_int);





  long to_shwi () const;
  unsigned long to_uhwi () const;



  bool fits_uhwi () const;
  bool fits_shwi () const;
  bool fits_hwi (bool uns) const;



  int trailing_zeros () const;
  int popcount () const;



  bool multiple_of (double_int, bool, double_int *) const;







  double_int set_bit (unsigned) const;
  double_int mul_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int wide_mul_with_sign (double_int, bool unsigned_p,
     double_int *higher, bool *overflow) const;
  double_int add_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int sub_with_overflow (double_int, bool *overflow) const;
  double_int neg_with_overflow (bool *overflow) const;

  double_int operator * (double_int) const;
  double_int operator + (double_int) const;
  double_int operator - (double_int) const;
  double_int operator - () const;
  double_int operator ~ () const;
  double_int operator & (double_int) const;
  double_int operator | (double_int) const;
  double_int operator ^ (double_int) const;
  double_int and_not (double_int) const;

  double_int lshift (long count) const;
  double_int lshift (long count, unsigned int prec, bool arith) const;
  double_int rshift (long count) const;
  double_int rshift (long count, unsigned int prec, bool arith) const;
  double_int alshift (long count, unsigned int prec) const;
  double_int arshift (long count, unsigned int prec) const;
  double_int llshift (long count, unsigned int prec) const;
  double_int lrshift (long count, unsigned int prec) const;
  double_int lrotate (long count, unsigned int prec) const;
  double_int rrotate (long count, unsigned int prec) const;





  double_int div (double_int, bool, unsigned) const;
  double_int sdiv (double_int, unsigned) const;
  double_int udiv (double_int, unsigned) const;
  double_int mod (double_int, bool, unsigned) const;
  double_int smod (double_int, unsigned) const;
  double_int umod (double_int, unsigned) const;
  double_int divmod_with_overflow (double_int, bool, unsigned,
       double_int *, bool *) const;
  double_int divmod (double_int, bool, unsigned, double_int *) const;
  double_int sdivmod (double_int, unsigned, double_int *) const;
  double_int udivmod (double_int, unsigned, double_int *) const;



  double_int ext (unsigned prec, bool uns) const;
  double_int zext (unsigned prec) const;
  double_int sext (unsigned prec) const;



  bool is_zero () const;
  bool is_one () const;
  bool is_minus_one () const;
  bool is_negative () const;

  int cmp (double_int b, bool uns) const;
  int ucmp (double_int b) const;
  int scmp (double_int b) const;

  bool ult (double_int b) const;
  bool ule (double_int b) const;
  bool ugt (double_int b) const;
  bool slt (double_int b) const;
  bool sle (double_int b) const;
  bool sgt (double_int b) const;

  double_int max (double_int b, bool uns);
  double_int smax (double_int b);
  double_int umax (double_int b);

  double_int min (double_int b, bool uns);
  double_int smin (double_int b);
  double_int umin (double_int b);

  bool operator == (double_int cst2) const;
  bool operator != (double_int cst2) const;



  unsigned long low;
  long high;

};
# 207 "../../gcc/double-int.h"
inline double_int
double_int::from_shwi (long cst)
{
  double_int r;
  r.low = (unsigned long) cst;
  r.high = cst < 0 ? -1 : 0;
  return r;
}
# 230 "../../gcc/double-int.h"
inline double_int
double_int::from_uhwi (unsigned long cst)
{
  double_int r;
  r.low = cst;
  r.high = 0;
  return r;
}

inline double_int
double_int::from_pair (long high, unsigned long low)
{
  double_int r;
  r.low = low;
  r.high = high;
  return r;
}

inline double_int &
double_int::operator ++ ()
{
  *this += (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator -- ()
{
  *this -= (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator &= (double_int b)
{
  *this = *this & b;
  return *this;
}

inline double_int &
double_int::operator ^= (double_int b)
{
  *this = *this ^ b;
  return *this;
}

inline double_int &
double_int::operator |= (double_int b)
{
  *this = *this | b;
  return *this;
}




inline long
double_int::to_shwi () const
{
  return (long) low;
}




inline unsigned long
double_int::to_uhwi () const
{
  return low;
}



inline bool
double_int::fits_uhwi () const
{
  return high == 0;
}





inline double_int
double_int::operator ~ () const
{
  double_int result;
  result.low = ~low;
  result.high = ~high;
  return result;
}



inline double_int
double_int::operator | (double_int b) const
{
  double_int result;
  result.low = low | b.low;
  result.high = high | b.high;
  return result;
}



inline double_int
double_int::operator & (double_int b) const
{
  double_int result;
  result.low = low & b.low;
  result.high = high & b.high;
  return result;
}



inline double_int
double_int::and_not (double_int b) const
{
  double_int result;
  result.low = low & ~b.low;
  result.high = high & ~b.high;
  return result;
}



inline double_int
double_int::operator ^ (double_int b) const
{
  double_int result;
  result.low = low ^ b.low;
  result.high = high ^ b.high;
  return result;
}

void dump_double_int (FILE *, double_int, bool);
# 376 "../../gcc/double-int.h"
inline bool
double_int::is_zero () const
{
  return low == 0 && high == 0;
}



inline bool
double_int::is_one () const
{
  return low == 1 && high == 0;
}



inline bool
double_int::is_minus_one () const
{
  return low == -1UL && high == -1;
}



inline bool
double_int::is_negative () const
{
  return high < 0;
}



inline bool
double_int::operator == (double_int cst2) const
{
  return low == cst2.low && high == cst2.high;
}



inline bool
double_int::operator != (double_int cst2) const
{
  return low != cst2.low || high != cst2.high;
}



inline int
double_int::popcount () const
{
  return popcount_hwi (high) + popcount_hwi (low);
}





void mpz_set_double_int (mpz_t, double_int, bool);
double_int mpz_get_double_int (const_tree, mpz_t, bool);


namespace wi
{
  template <>
  struct int_traits <double_int>
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = true;
    static const unsigned int precision = (2 * 64);
    static unsigned int get_precision (const double_int &);
    static wi::storage_ref decompose (long *, unsigned int,
          const double_int &);
  };
}

inline unsigned int
wi::int_traits <double_int>::get_precision (const double_int &)
{
  return precision;
}

inline wi::storage_ref
wi::int_traits <double_int>::decompose (long *scratch, unsigned int p,
     const double_int &x)
{
  ((void)(!(precision == p) ? fancy_abort ("../../gcc/double-int.h", 462, __FUNCTION__), 0 : 0));
  scratch[0] = x.low;
  if ((x.high == 0 && scratch[0] >= 0) || (x.high == -1 && scratch[0] < 0))
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = x.high;
  return wi::storage_ref (scratch, 2, precision);
}
# 419 "../../gcc/coretypes.h" 2


# 1 "../../gcc/real.h" 1
# 26 "../../gcc/real.h"
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};







struct real_value {



  unsigned int cl : 2;
  unsigned int decimal : 1;
  unsigned int sign : 1;
  unsigned int signalling : 1;
  unsigned int canonical : 1;
  unsigned int uexp : (32 - 6);
  unsigned long sig[((128 + (8 * 8)) / (8 * 8))];
};
# 73 "../../gcc/real.h"
extern char test_real_width
  [sizeof (struct real_value) <= (((128 + (8 * 8)) + 32)/64 + (((128 + (8 * 8)) + 32)%64 ? 1 : 0)) * sizeof (long) ? 1 : -1];
# 111 "../../gcc/real.h"
struct real_format
{

  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);


  int b;


  int p;


  int pnan;


  int emin;


  int emax;



  int signbit_ro;



  int signbit_rw;
# 151 "../../gcc/real.h"
  int ieee_bits;


  bool round_towards_zero;
  bool has_sign_dependent_rounding;


  bool has_nans;
  bool has_inf;
  bool has_denorm;
  bool has_signed_zero;
  bool qnan_msb_set;
  bool canonical_nan_lsbs_set;
  const char *name;
};







extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1
         + MAX_MODE_DECIMAL_FLOAT - MIN_MODE_DECIMAL_FLOAT + 1];
# 210 "../../gcc/real.h"
class format_helper
{
public:
  format_helper (const real_format *format) : m_format (format) {}
  template<typename T> format_helper (const T &);
  const real_format *operator-> () const { return m_format; }
  operator const real_format *() const { return m_format; }

  bool decimal_p () const { return m_format && m_format->b == 10; }

private:
  const real_format *m_format;
};

template<typename T>
inline format_helper::format_helper (const T &m)
  : m_format (m == ((void) 0, E_VOIDmode) ? 0 : (real_format_for_mode[(((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT) ? (((m) - MIN_MODE_DECIMAL_FLOAT) + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) : ((enum mode_class) mode_class[m]) == MODE_FLOAT ? ((m) - MIN_MODE_FLOAT) : ((fancy_abort ("../../gcc/real.h", 226, __FUNCTION__)), 0)]))
{}
# 236 "../../gcc/real.h"
extern bool HONOR_NANS (machine_mode);
extern bool HONOR_NANS (const_tree);
extern bool HONOR_NANS (const_rtx);


extern bool HONOR_SNANS (machine_mode);
extern bool HONOR_SNANS (const_tree);
extern bool HONOR_SNANS (const_rtx);



extern bool HONOR_INFINITIES (machine_mode);
extern bool HONOR_INFINITIES (const_tree);
extern bool HONOR_INFINITIES (const_rtx);



extern bool HONOR_SIGNED_ZEROS (machine_mode);
extern bool HONOR_SIGNED_ZEROS (const_tree);
extern bool HONOR_SIGNED_ZEROS (const_rtx);



extern bool HONOR_SIGN_DEPENDENT_ROUNDING (machine_mode);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_tree);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_rtx);


extern bool real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);


extern bool real_compare (int, const struct real_value *, const struct real_value *);


extern bool real_isinf (const struct real_value *);


extern bool real_isnan (const struct real_value *);


extern bool real_issignaling_nan (const struct real_value *);


extern bool real_isfinite (const struct real_value *);


extern bool real_isneg (const struct real_value *);


extern bool real_isnegzero (const struct real_value *);


extern bool real_identical (const struct real_value *, const struct real_value *);
extern bool real_equal (const struct real_value *, const struct real_value *);
extern bool real_less (const struct real_value *, const struct real_value *);


extern void real_convert (struct real_value *, format_helper,
     const struct real_value *);


extern bool exact_real_truncate (format_helper, const struct real_value *);


extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);



extern void real_to_decimal_for_mode (char *, const struct real_value *, size_t,
          size_t, int, machine_mode);


extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);


extern long real_to_integer (const struct real_value *);



extern int real_from_string (struct real_value *, const char *);

extern void real_from_string3 (struct real_value *, const char *, format_helper);

extern long real_to_target (long *, const struct real_value *, format_helper);

extern void real_from_target (struct real_value *, const long *,
         format_helper);

extern void real_inf (struct real_value *);

extern bool real_nan (struct real_value *, const char *, int, format_helper);

extern void real_maxval (struct real_value *, int, machine_mode);

extern void real_2expN (struct real_value *, int, format_helper);

extern unsigned int real_hash (const struct real_value *);



extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format motorola_single_format;
extern const struct real_format spu_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format motorola_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format real_internal_format;
extern const struct real_format decimal_single_format;
extern const struct real_format decimal_double_format;
extern const struct real_format decimal_quad_format;
extern const struct real_format ieee_half_format;
extern const struct real_format arm_half_format;
# 409 "../../gcc/real.h"
extern struct real_value real_value_truncate (format_helper, struct real_value);

extern struct real_value real_value_negate (const struct real_value *);
extern struct real_value real_value_abs (const struct real_value *);

extern int significand_size (format_helper);

extern struct real_value real_from_string2 (const char *, format_helper);
# 434 "../../gcc/real.h"
extern int real_exponent (const struct real_value *);


extern void real_ldexp (struct real_value *, const struct real_value *, int);





extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconstm1;
extern struct real_value dconsthalf;
# 457 "../../gcc/real.h"
extern const struct real_value * dconst_e_ptr (void);


extern const struct real_value *dconst_third_ptr (void);
extern const struct real_value *dconst_quarter_ptr (void);
extern const struct real_value *dconst_sixth_ptr (void);
extern const struct real_value *dconst_ninth_ptr (void);


extern const struct real_value * dconst_sqrt2_ptr (void);



struct real_value real_value_from_int_cst (const_tree, const_tree);


extern rtx const_double_from_real_value (struct real_value, machine_mode);


extern bool exact_real_inverse (format_helper, struct real_value *);




bool real_can_shorten_arithmetic (machine_mode, machine_mode);


extern tree build_real (tree, struct real_value);


extern tree build_real_truncate (tree, struct real_value);


extern bool real_powi (struct real_value *, format_helper,
         const struct real_value *, long);


extern void real_trunc (struct real_value *, format_helper,
   const struct real_value *);
extern void real_floor (struct real_value *, format_helper,
   const struct real_value *);
extern void real_ceil (struct real_value *, format_helper,
         const struct real_value *);
extern void real_round (struct real_value *, format_helper,
   const struct real_value *);


extern void real_copysign (struct real_value *, const struct real_value *);


extern bool real_isinteger (const struct real_value *, format_helper);
extern bool real_isinteger (const struct real_value *, long *);




extern void get_max_float (const struct real_format *, char *, size_t);



extern wide_int real_to_integer (const struct real_value *, bool *, int);
extern void real_from_integer (struct real_value *, format_helper,
          const wide_int_ref &, signop);
# 422 "../../gcc/coretypes.h" 2
# 1 "../../gcc/fixed-value.h" 1
# 23 "../../gcc/fixed-value.h"
struct fixed_value
{
  double_int data;
  scalar_mode_pod mode;
};
# 36 "../../gcc/fixed-value.h"
extern struct fixed_value fconst0[18];
extern struct fixed_value fconst1[8];
# 46 "../../gcc/fixed-value.h"
extern rtx const_fixed_from_fixed_value (struct fixed_value, machine_mode);



extern struct fixed_value fixed_from_double_int (double_int, scalar_mode);



static inline rtx
const_fixed_from_double_int (double_int payload,
        scalar_mode mode)
{
  return
    const_fixed_from_fixed_value (fixed_from_double_int (payload, mode),
                                  mode);
}


extern void fixed_from_string (struct fixed_value *, const char *,
          scalar_mode);


extern tree build_fixed (tree, struct fixed_value);


extern bool fixed_convert (struct fixed_value *, scalar_mode,
      const struct fixed_value *, bool);


extern bool fixed_convert_from_int (struct fixed_value *, scalar_mode,
        double_int, bool, bool);


extern bool fixed_convert_from_real (struct fixed_value *, scalar_mode,
         const struct real_value *, bool);


extern void real_convert_from_fixed (struct real_value *, scalar_mode,
         const struct fixed_value *);


extern bool fixed_identical (const struct fixed_value *, const struct fixed_value *);


extern unsigned int fixed_hash (const struct fixed_value *);







extern void fixed_to_decimal (char *str, const struct fixed_value *, size_t);


extern bool fixed_arithmetic (struct fixed_value *, int, const struct fixed_value *,
         const struct fixed_value *, bool);


extern bool fixed_compare (int, const struct fixed_value *,
      const struct fixed_value *);


extern bool fixed_isneg (const struct fixed_value *);
# 423 "../../gcc/coretypes.h" 2
# 1 "../../gcc/hash-table.h" 1
# 234 "../../gcc/hash-table.h"
# 1 "../../gcc/statistics.h" 1
# 61 "../../gcc/statistics.h"
struct function;


extern void statistics_early_init (void);
extern void statistics_init (void);
extern void statistics_fini (void);
extern void statistics_fini_pass (void);
extern void statistics_counter_event (struct function *, const char *, int);
extern void statistics_histogram_event (struct function *, const char *, int);
# 235 "../../gcc/hash-table.h" 2
# 1 "../../gcc/ggc.h" 1
# 30 "../../gcc/ggc.h"
# 1 "./gtype-desc.h" 1
# 31 "./gtype-desc.h"
extern void gt_ggc_mx_line_maps (void *);



extern void gt_ggc_mx_cpp_token (void *);



extern void gt_ggc_mx_cpp_macro (void *);



extern void gt_ggc_mx_answer (void *);



extern void gt_ggc_mx_string_concat (void *);



extern void gt_ggc_mx_string_concat_db (void *);



extern void gt_ggc_mx_hash_map_location_hash_string_concat__ (void *);



extern void gt_ggc_mx_bitmap_head (void *);



extern void gt_ggc_mx_rtx_def (void *);



extern void gt_ggc_mx_rtvec_def (void *);



extern void gt_ggc_mx_gimple (void *);



extern void gt_ggc_mx_section (void *);



extern void gt_ggc_mx_cl_target_option (void *);



extern void gt_ggc_mx_cl_optimization (void *);



extern void gt_ggc_mx_edge_def (void *);



extern void gt_ggc_mx_basic_block_def (void *);



extern void gt_ggc_mx_stack_local_entry (void *);



extern void gt_ggc_mx_machine_function (void *);



extern void gt_ggc_mx_bitmap_element (void *);



extern void gt_ggc_mx_bitmap_obstack (void *);



extern void gt_ggc_mx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_ggc_mx_coverage_data (void *);



extern void gt_ggc_mx_mem_attrs (void *);



extern void gt_ggc_mx_reg_attrs (void *);



extern void gt_ggc_mx_object_block (void *);



extern void gt_ggc_mx_vec_rtx_va_gc_ (void *);



extern void gt_ggc_mx_real_value (void *);



extern void gt_ggc_mx_fixed_value (void *);



extern void gt_ggc_mx_constant_descriptor_rtx (void *);



extern void gt_ggc_mx_function (void *);



extern void gt_ggc_mx_target_rtl (void *);



extern void gt_ggc_mx_cgraph_rtl_info (void *);



extern void gt_ggc_mx_hash_map_tree_tree_tree_cache_traits_ (void *);



extern void gt_ggc_mx_ptr_info_def (void *);



extern void gt_ggc_mx_range_info_def (void *);



extern void gt_ggc_mx_die_struct (void *);



extern void gt_ggc_mx_vec_constructor_elt_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_va_gc_ (void *);



extern void gt_ggc_mx_lang_type (void *);



extern void gt_ggc_mx_lang_decl (void *);



extern void gt_ggc_mx_symtab_node (void *);



extern void gt_ggc_mx_tree_statement_list_node (void *);



extern void gt_ggc_mx_target_globals (void *);



extern void gt_ggc_mx_lang_tree_node (void *);



extern void gt_ggc_mx_tree_map (void *);



extern void gt_ggc_mx_tree_decl_map (void *);



extern void gt_ggc_mx_tree_int_map (void *);



extern void gt_ggc_mx_tree_vec_map (void *);



extern void gt_ggc_mx_vec_alias_pair_va_gc_ (void *);



extern void gt_ggc_mx_libfunc_entry (void *);



extern void gt_ggc_mx_hash_table_libfunc_hasher_ (void *);



extern void gt_ggc_mx_target_libfuncs (void *);



extern void gt_ggc_mx_sequence_stack (void *);



extern void gt_ggc_mx_vec_rtx_insn__va_gc_ (void *);



extern void gt_ggc_mx_call_site_record_d (void *);



extern void gt_ggc_mx_vec_uchar_va_gc_ (void *);



extern void gt_ggc_mx_vec_call_site_record_va_gc_ (void *);



extern void gt_ggc_mx_gimple_df (void *);



extern void gt_ggc_mx_dw_fde_node (void *);



extern void gt_ggc_mx_rtx_constant_pool (void *);



extern void gt_ggc_mx_frame_space (void *);



extern void gt_ggc_mx_stack_usage (void *);



extern void gt_ggc_mx_eh_status (void *);



extern void gt_ggc_mx_control_flow_graph (void *);



extern void gt_ggc_mx_loops (void *);



extern void gt_ggc_mx_language_function (void *);



extern void gt_ggc_mx_hash_set_tree_ (void *);



extern void gt_ggc_mx_types_used_by_vars_entry (void *);



extern void gt_ggc_mx_hash_table_used_type_hasher_ (void *);



extern void gt_ggc_mx_nb_iter_bound (void *);



extern void gt_ggc_mx_loop_exit (void *);



extern void gt_ggc_mx_loop (void *);



extern void gt_ggc_mx_control_iv (void *);



extern void gt_ggc_mx_vec_loop_p_va_gc_ (void *);



extern void gt_ggc_mx_niter_desc (void *);



extern void gt_ggc_mx_hash_table_loop_exit_hasher_ (void *);



extern void gt_ggc_mx_vec_basic_block_va_gc_ (void *);



extern void gt_ggc_mx_rtl_bb_info (void *);



extern void gt_ggc_mx_vec_edge_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_ggc_mx_section_hash_entry (void *);



extern void gt_ggc_mx_lto_file_decl_data (void *);



extern void gt_ggc_mx_ipa_replace_map (void *);



extern void gt_ggc_mx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_ggc_mx_cgraph_simd_clone (void *);



extern void gt_ggc_mx_cgraph_function_version_info (void *);



extern void gt_ggc_mx_cgraph_edge (void *);



extern void gt_ggc_mx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_ggc_mx_cgraph_indirect_call_info (void *);



extern void gt_ggc_mx_asm_node (void *);



extern void gt_ggc_mx_symbol_table (void *);



extern void gt_ggc_mx_hash_table_section_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_asmname_hasher_ (void *);



extern void gt_ggc_mx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_ggc_mx_constant_descriptor_tree (void *);



extern void gt_ggc_mx_hash_map_alias_set_hash_int_ (void *);



extern void gt_ggc_mx_alias_set_entry (void *);



extern void gt_ggc_mx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_ggc_mx_hash_table_function_version_hasher_ (void *);



extern void gt_ggc_mx_lto_in_decl_state (void *);



extern void gt_ggc_mx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_ipa_node_params (void *);



extern void gt_ggc_mx_ipa_edge_args (void *);



extern void gt_ggc_mx_ipa_agg_replacement_value (void *);



extern void gt_ggc_mx_ipa_fn_summary (void *);



extern void gt_ggc_mx_odr_type_d (void *);



extern void gt_ggc_mx_typeinfo (void *);



extern void gt_ggc_mx_dw_cfi_node (void *);



extern void gt_ggc_mx_dw_loc_descr_node (void *);



extern void gt_ggc_mx_dw_loc_list_struct (void *);



extern void gt_ggc_mx_dw_discr_list_node (void *);



extern void gt_ggc_mx_dw_cfa_location (void *);



extern void gt_ggc_mx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_ggc_mx_addr_table_entry (void *);



extern void gt_ggc_mx_indirect_string_node (void *);



extern void gt_ggc_mx_dwarf_file_data (void *);



extern void gt_ggc_mx_hash_map_char__tree_ (void *);



extern void gt_ggc_mx_dw_cfi_row (void *);



extern void gt_ggc_mx_reg_saved_in_data (void *);



extern void gt_ggc_mx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_indirect_string_hasher_ (void *);



extern void gt_ggc_mx_comdat_type_node (void *);



extern void gt_ggc_mx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_ggc_mx_dw_line_info_table (void *);



extern void gt_ggc_mx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_ggc_mx_limbo_die_struct (void *);



extern void gt_ggc_mx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_die_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_ggc_mx_variable_value_struct (void *);



extern void gt_ggc_mx_hash_table_variable_value_hasher_ (void *);



extern void gt_ggc_mx_hash_table_block_die_hasher_ (void *);



extern void gt_ggc_mx_var_loc_node (void *);



extern void gt_ggc_mx_var_loc_list_def (void *);



extern void gt_ggc_mx_call_arg_loc_node (void *);



extern void gt_ggc_mx_hash_table_decl_loc_hasher_ (void *);



extern void gt_ggc_mx_cached_dw_loc_list_def (void *);



extern void gt_ggc_mx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_ggc_mx_vec_pubname_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_ggc_mx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_addr_hasher_ (void *);



extern void gt_ggc_mx_inline_entry_data (void *);



extern void gt_ggc_mx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_ggc_mx_temp_slot (void *);



extern void gt_ggc_mx_initial_value_struct (void *);



extern void gt_ggc_mx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_const_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_reg_attr_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_double_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_fixed_hasher_ (void *);



extern void gt_ggc_mx_eh_region_d (void *);



extern void gt_ggc_mx_eh_landing_pad_d (void *);



extern void gt_ggc_mx_eh_catch_d (void *);



extern void gt_ggc_mx_vec_eh_region_va_gc_ (void *);



extern void gt_ggc_mx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_ggc_mx_hash_map_gimple__int_ (void *);



extern void gt_ggc_mx_hash_table_insn_cache_hasher_ (void *);



extern void gt_ggc_mx_temp_slot_address_entry (void *);



extern void gt_ggc_mx_hash_table_temp_address_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_hash_tree_ (void *);



extern void gt_ggc_mx_test_struct (void *);



extern void gt_ggc_mx_test_of_length (void *);



extern void gt_ggc_mx_test_other (void *);



extern void gt_ggc_mx_test_of_union (void *);



extern void gt_ggc_mx_example_base (void *);



extern void gt_ggc_mx_test_node (void *);



extern void gt_ggc_mx_user_struct (void *);



extern void gt_ggc_mx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_ggc_mx_string_pool_data (void *);



extern void gt_ggc_mx_type_hash (void *);



extern void gt_ggc_mx_hash_table_type_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_cl_option_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_section_hasher_ (void *);



extern void gt_ggc_mx_hash_table_object_block_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_clone_hasher_ (void *);



extern void gt_ggc_mx_tm_restart_node (void *);



extern void gt_ggc_mx_hash_map_tree_tree_ (void *);



extern void gt_ggc_mx_hash_table_ssa_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_restart_hasher_ (void *);



extern void gt_ggc_mx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_ggc_mx_scev_info_str (void *);



extern void gt_ggc_mx_hash_table_scev_info_hasher_ (void *);



extern void gt_ggc_mx_ssa_operand_memory_d (void *);



extern void gt_ggc_mx_grid_launch_attributes_trees (void *);



extern void gt_ggc_mx_hash_table_dllimport_hasher_ (void *);



extern void gt_ggc_mx_vec_gimple__va_gc_ (void *);



extern void gt_ggc_mx_value_range (void *);



extern void gt_ggc_mx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_ggc_mx_ipa_bits (void *);



extern void gt_ggc_mx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_bits__va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_vr_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_ggc_mx_ipa_node_params_t (void *);



extern void gt_ggc_mx_ipa_edge_args_sum_t (void *);



extern void gt_ggc_mx_vec_ipcp_transformation_summary_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_state_hasher_ (void *);



extern void gt_ggc_mx_vec_condition_va_gc_ (void *);



extern void gt_ggc_mx_vec_size_time_entry_va_gc_ (void *);



extern void gt_ggc_mx_function_summary_ipa_fn_summary__ (void *);



extern void gt_ggc_mx_tree_type_map (void *);



extern void gt_ggc_mx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_ggc_mx_vec_odr_type_va_gc_ (void *);



extern void gt_ggc_mx_vec_hsa_decl_kernel_map_element_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_value_annotation_hasher_ (void *);



extern void gt_ggc_mx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_ggc_mx_tree_entity_vec_map (void *);



extern void gt_ggc_mx_hash_table_dummy_type_hasher_ (void *);



extern void gt_ggc_mx_parm_attr_d (void *);



extern void gt_ggc_mx_vec_parm_attr_va_gc_ (void *);



extern void gt_ggc_mx_stmt_group (void *);



extern void gt_ggc_mx_elab_info (void *);



extern void gt_ggc_mx_range_check_info_d (void *);



extern void gt_ggc_mx_vec_range_check_info_va_gc_ (void *);



extern void gt_ggc_mx_loop_info_d (void *);



extern void gt_ggc_mx_vec_loop_info_va_gc_ (void *);



extern void gt_ggc_mx_gnat_binding_level (void *);



extern void gt_ggc_mx_pad_type_hash (void *);



extern void gt_ggc_mx_hash_table_pad_type_hasher_ (void *);



extern void gt_ggc_mx_c_label_vars (void *);



extern void gt_ggc_mx_c_binding (void *);



extern void gt_ggc_mx_c_scope (void *);



extern void gt_ggc_mx_c_goto_bindings (void *);



extern void gt_ggc_mx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_ggc_mx_c_inline_static (void *);



extern void gt_ggc_mx_sorted_fields_type (void *);



extern void gt_ggc_mx_vec_const_char_p_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_ggc_mx_align_stack (void *);



extern void gt_ggc_mx_vec_pending_weak_va_gc_ (void *);



extern void gt_ggc_mx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_ggc_mx_opt_stack (void *);



extern void gt_ggc_mx_c_parser (void *);



extern void gt_ggc_mx_binding_table_s (void *);



extern void gt_ggc_mx_binding_entry_s (void *);



extern void gt_ggc_mx_cxx_binding (void *);



extern void gt_ggc_mx_cp_binding_level (void *);



extern void gt_ggc_mx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_ggc_mx_cp_token_cache (void *);



extern void gt_ggc_mx_vec_qualified_typedef_usage_t_va_gc_ (void *);



extern void gt_ggc_mx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_ggc_mx_saved_scope (void *);



extern void gt_ggc_mx_cxx_int_tree_map (void *);



extern void gt_ggc_mx_named_label_entry (void *);



extern void gt_ggc_mx_hash_table_named_label_hash_ (void *);



extern void gt_ggc_mx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_ggc_mx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_named_decl_hash_ (void *);



extern void gt_ggc_mx_tinst_level (void *);



extern void gt_ggc_mx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_ggc_mx_tree_check (void *);



extern void gt_ggc_mx_vec_cp_token_va_gc_ (void *);



extern void gt_ggc_mx_cp_lexer (void *);



extern void gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser_context (void *);



extern void gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser (void *);



extern void gt_ggc_mx_constexpr_fundef (void *);



extern void gt_ggc_mx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_ggc_mx_constexpr_call (void *);



extern void gt_ggc_mx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_ggc_mx_named_label_use_entry (void *);



extern void gt_ggc_mx_vec_incomplete_var_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_typename_hasher_ (void *);



extern void gt_ggc_mx_hash_table_mangled_decl_hash_ (void *);



extern void gt_ggc_mx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_int_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_conv_type_hasher_ (void *);



extern void gt_ggc_mx_pending_template (void *);



extern void gt_ggc_mx_spec_entry (void *);



extern void gt_ggc_mx_hash_table_spec_hasher_ (void *);



extern void gt_ggc_mx_constr_entry (void *);



extern void gt_ggc_mx_hash_table_constr_hasher_ (void *);



extern void gt_ggc_mx_constraint_sat_entry (void *);



extern void gt_ggc_mx_concept_spec_entry (void *);



extern void gt_ggc_mx_hash_table_constraint_sat_hasher_ (void *);



extern void gt_ggc_mx_hash_table_concept_spec_hasher_ (void *);



extern void gt_ggc_mx_subsumption_entry (void *);



extern void gt_ggc_mx_hash_table_subsumption_hasher_ (void *);



extern void gt_ggc_mx_vec_tinfo_s_va_gc_ (void *);



extern void gt_ggc_mx_vec_deferred_access_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_cplus_array_hasher_ (void *);



extern void gt_ggc_mx_hash_table_list_hasher_ (void *);



extern void gt_ggc_mx_pending_abstract_type (void *);



extern void gt_ggc_mx_hash_table_abstract_type_hasher_ (void *);



extern void gt_ggc_mx_binding_level (void *);



extern void gt_ggc_mx_hash_table_module_hasher_ (void *);



extern void gt_ggc_mx_module_htab_entry (void *);



extern void gt_ggc_mx_hash_table_module_decl_hasher_ (void *);



extern void gt_ggc_mx_objc_map_private (void *);



extern void gt_ggc_mx_hashed_entry (void *);



extern void gt_ggc_mx_hashed_attribute (void *);



extern void gt_ggc_mx_imp_entry (void *);



extern void gt_ggc_mx_string_descriptor (void *);



extern void gt_ggc_mx_hash_table_objc_string_hasher_ (void *);



extern void gt_ggc_mx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_ggc_mx_vec_msgref_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_ivarref_entry_va_gc_ (void *);
# 1296 "./gtype-desc.h"
extern void gt_pch_nx_line_maps (void *);



extern void gt_pch_nx_cpp_token (void *);



extern void gt_pch_nx_cpp_macro (void *);



extern void gt_pch_nx_answer (void *);



extern void gt_pch_nx_string_concat (void *);



extern void gt_pch_nx_string_concat_db (void *);



extern void gt_pch_nx_hash_map_location_hash_string_concat__ (void *);



extern void gt_pch_nx_bitmap_head (void *);



extern void gt_pch_nx_rtx_def (void *);



extern void gt_pch_nx_rtvec_def (void *);



extern void gt_pch_nx_gimple (void *);



extern void gt_pch_nx_section (void *);



extern void gt_pch_nx_cl_target_option (void *);



extern void gt_pch_nx_cl_optimization (void *);



extern void gt_pch_nx_edge_def (void *);



extern void gt_pch_nx_basic_block_def (void *);



extern void gt_pch_nx_stack_local_entry (void *);



extern void gt_pch_nx_machine_function (void *);



extern void gt_pch_nx_bitmap_element (void *);



extern void gt_pch_nx_bitmap_obstack (void *);



extern void gt_pch_nx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_pch_nx_coverage_data (void *);



extern void gt_pch_nx_mem_attrs (void *);



extern void gt_pch_nx_reg_attrs (void *);



extern void gt_pch_nx_object_block (void *);



extern void gt_pch_nx_vec_rtx_va_gc_ (void *);



extern void gt_pch_nx_real_value (void *);



extern void gt_pch_nx_fixed_value (void *);



extern void gt_pch_nx_constant_descriptor_rtx (void *);



extern void gt_pch_nx_function (void *);



extern void gt_pch_nx_target_rtl (void *);



extern void gt_pch_nx_cgraph_rtl_info (void *);



extern void gt_pch_nx_hash_map_tree_tree_tree_cache_traits_ (void *);



extern void gt_pch_nx_ptr_info_def (void *);



extern void gt_pch_nx_range_info_def (void *);



extern void gt_pch_nx_die_struct (void *);



extern void gt_pch_nx_vec_constructor_elt_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_va_gc_ (void *);



extern void gt_pch_nx_lang_type (void *);



extern void gt_pch_nx_lang_decl (void *);



extern void gt_pch_nx_symtab_node (void *);



extern void gt_pch_nx_tree_statement_list_node (void *);



extern void gt_pch_nx_target_globals (void *);



extern void gt_pch_nx_lang_tree_node (void *);



extern void gt_pch_nx_tree_map (void *);



extern void gt_pch_nx_tree_decl_map (void *);



extern void gt_pch_nx_tree_int_map (void *);



extern void gt_pch_nx_tree_vec_map (void *);



extern void gt_pch_nx_vec_alias_pair_va_gc_ (void *);



extern void gt_pch_nx_libfunc_entry (void *);



extern void gt_pch_nx_hash_table_libfunc_hasher_ (void *);



extern void gt_pch_nx_target_libfuncs (void *);



extern void gt_pch_nx_sequence_stack (void *);



extern void gt_pch_nx_vec_rtx_insn__va_gc_ (void *);



extern void gt_pch_nx_call_site_record_d (void *);



extern void gt_pch_nx_vec_uchar_va_gc_ (void *);



extern void gt_pch_nx_vec_call_site_record_va_gc_ (void *);



extern void gt_pch_nx_gimple_df (void *);



extern void gt_pch_nx_dw_fde_node (void *);



extern void gt_pch_nx_rtx_constant_pool (void *);



extern void gt_pch_nx_frame_space (void *);



extern void gt_pch_nx_stack_usage (void *);



extern void gt_pch_nx_eh_status (void *);



extern void gt_pch_nx_control_flow_graph (void *);



extern void gt_pch_nx_loops (void *);



extern void gt_pch_nx_language_function (void *);



extern void gt_pch_nx_hash_set_tree_ (void *);



extern void gt_pch_nx_types_used_by_vars_entry (void *);



extern void gt_pch_nx_hash_table_used_type_hasher_ (void *);



extern void gt_pch_nx_nb_iter_bound (void *);



extern void gt_pch_nx_loop_exit (void *);



extern void gt_pch_nx_loop (void *);



extern void gt_pch_nx_control_iv (void *);



extern void gt_pch_nx_vec_loop_p_va_gc_ (void *);



extern void gt_pch_nx_niter_desc (void *);



extern void gt_pch_nx_hash_table_loop_exit_hasher_ (void *);



extern void gt_pch_nx_vec_basic_block_va_gc_ (void *);



extern void gt_pch_nx_rtl_bb_info (void *);



extern void gt_pch_nx_vec_edge_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_pch_nx_section_hash_entry (void *);



extern void gt_pch_nx_lto_file_decl_data (void *);



extern void gt_pch_nx_ipa_replace_map (void *);



extern void gt_pch_nx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_pch_nx_cgraph_simd_clone (void *);



extern void gt_pch_nx_cgraph_function_version_info (void *);



extern void gt_pch_nx_cgraph_edge (void *);



extern void gt_pch_nx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_pch_nx_cgraph_indirect_call_info (void *);



extern void gt_pch_nx_asm_node (void *);



extern void gt_pch_nx_symbol_table (void *);



extern void gt_pch_nx_hash_table_section_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_asmname_hasher_ (void *);



extern void gt_pch_nx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_pch_nx_constant_descriptor_tree (void *);



extern void gt_pch_nx_hash_map_alias_set_hash_int_ (void *);



extern void gt_pch_nx_alias_set_entry (void *);



extern void gt_pch_nx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_pch_nx_hash_table_function_version_hasher_ (void *);



extern void gt_pch_nx_lto_in_decl_state (void *);



extern void gt_pch_nx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_pch_nx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_pch_nx_ipa_node_params (void *);



extern void gt_pch_nx_ipa_edge_args (void *);



extern void gt_pch_nx_ipa_agg_replacement_value (void *);



extern void gt_pch_nx_ipa_fn_summary (void *);



extern void gt_pch_nx_odr_type_d (void *);



extern void gt_pch_nx_typeinfo (void *);



extern void gt_pch_nx_dw_cfi_node (void *);



extern void gt_pch_nx_dw_loc_descr_node (void *);



extern void gt_pch_nx_dw_loc_list_struct (void *);



extern void gt_pch_nx_dw_discr_list_node (void *);



extern void gt_pch_nx_dw_cfa_location (void *);



extern void gt_pch_nx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_pch_nx_addr_table_entry (void *);



extern void gt_pch_nx_indirect_string_node (void *);



extern void gt_pch_nx_dwarf_file_data (void *);



extern void gt_pch_nx_hash_map_char__tree_ (void *);



extern void gt_pch_nx_dw_cfi_row (void *);



extern void gt_pch_nx_reg_saved_in_data (void *);



extern void gt_pch_nx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_pch_nx_hash_table_indirect_string_hasher_ (void *);



extern void gt_pch_nx_comdat_type_node (void *);



extern void gt_pch_nx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_pch_nx_dw_line_info_table (void *);



extern void gt_pch_nx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_pch_nx_limbo_die_struct (void *);



extern void gt_pch_nx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_die_hasher_ (void *);



extern void gt_pch_nx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_pch_nx_variable_value_struct (void *);



extern void gt_pch_nx_hash_table_variable_value_hasher_ (void *);



extern void gt_pch_nx_hash_table_block_die_hasher_ (void *);



extern void gt_pch_nx_var_loc_node (void *);



extern void gt_pch_nx_var_loc_list_def (void *);



extern void gt_pch_nx_call_arg_loc_node (void *);



extern void gt_pch_nx_hash_table_decl_loc_hasher_ (void *);



extern void gt_pch_nx_cached_dw_loc_list_def (void *);



extern void gt_pch_nx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_pch_nx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_pch_nx_vec_pubname_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_pch_nx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_hash_table_addr_hasher_ (void *);



extern void gt_pch_nx_inline_entry_data (void *);



extern void gt_pch_nx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_pch_nx_temp_slot (void *);



extern void gt_pch_nx_initial_value_struct (void *);



extern void gt_pch_nx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_pch_nx_hash_table_const_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_reg_attr_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_double_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_fixed_hasher_ (void *);



extern void gt_pch_nx_eh_region_d (void *);



extern void gt_pch_nx_eh_landing_pad_d (void *);



extern void gt_pch_nx_eh_catch_d (void *);



extern void gt_pch_nx_vec_eh_region_va_gc_ (void *);



extern void gt_pch_nx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_pch_nx_hash_map_gimple__int_ (void *);



extern void gt_pch_nx_hash_table_insn_cache_hasher_ (void *);



extern void gt_pch_nx_temp_slot_address_entry (void *);



extern void gt_pch_nx_hash_table_temp_address_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_hash_tree_ (void *);



extern void gt_pch_nx_test_struct (void *);



extern void gt_pch_nx_test_of_length (void *);



extern void gt_pch_nx_test_other (void *);



extern void gt_pch_nx_test_of_union (void *);



extern void gt_pch_nx_example_base (void *);



extern void gt_pch_nx_test_node (void *);



extern void gt_pch_nx_user_struct (void *);



extern void gt_pch_nx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_pch_nx_string_pool_data (void *);



extern void gt_pch_nx_type_hash (void *);



extern void gt_pch_nx_hash_table_type_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_cl_option_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_section_hasher_ (void *);



extern void gt_pch_nx_hash_table_object_block_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_clone_hasher_ (void *);



extern void gt_pch_nx_tm_restart_node (void *);



extern void gt_pch_nx_hash_map_tree_tree_ (void *);



extern void gt_pch_nx_hash_table_ssa_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_restart_hasher_ (void *);



extern void gt_pch_nx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_pch_nx_scev_info_str (void *);



extern void gt_pch_nx_hash_table_scev_info_hasher_ (void *);



extern void gt_pch_nx_ssa_operand_memory_d (void *);



extern void gt_pch_nx_grid_launch_attributes_trees (void *);



extern void gt_pch_nx_hash_table_dllimport_hasher_ (void *);



extern void gt_pch_nx_vec_gimple__va_gc_ (void *);



extern void gt_pch_nx_value_range (void *);



extern void gt_pch_nx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_pch_nx_ipa_bits (void *);



extern void gt_pch_nx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_bits__va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_vr_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_pch_nx_ipa_node_params_t (void *);



extern void gt_pch_nx_ipa_edge_args_sum_t (void *);



extern void gt_pch_nx_vec_ipcp_transformation_summary_va_gc_ (void *);



extern void gt_pch_nx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_state_hasher_ (void *);



extern void gt_pch_nx_vec_condition_va_gc_ (void *);



extern void gt_pch_nx_vec_size_time_entry_va_gc_ (void *);



extern void gt_pch_nx_function_summary_ipa_fn_summary__ (void *);



extern void gt_pch_nx_tree_type_map (void *);



extern void gt_pch_nx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_pch_nx_vec_odr_type_va_gc_ (void *);



extern void gt_pch_nx_vec_hsa_decl_kernel_map_element_va_gc_ (void *);



extern void gt_pch_nx_hash_table_value_annotation_hasher_ (void *);



extern void gt_pch_nx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_pch_nx_tree_entity_vec_map (void *);



extern void gt_pch_nx_hash_table_dummy_type_hasher_ (void *);



extern void gt_pch_nx_parm_attr_d (void *);



extern void gt_pch_nx_vec_parm_attr_va_gc_ (void *);



extern void gt_pch_nx_stmt_group (void *);



extern void gt_pch_nx_elab_info (void *);



extern void gt_pch_nx_range_check_info_d (void *);



extern void gt_pch_nx_vec_range_check_info_va_gc_ (void *);



extern void gt_pch_nx_loop_info_d (void *);



extern void gt_pch_nx_vec_loop_info_va_gc_ (void *);



extern void gt_pch_nx_gnat_binding_level (void *);



extern void gt_pch_nx_pad_type_hash (void *);



extern void gt_pch_nx_hash_table_pad_type_hasher_ (void *);



extern void gt_pch_nx_c_label_vars (void *);



extern void gt_pch_nx_c_binding (void *);



extern void gt_pch_nx_c_scope (void *);



extern void gt_pch_nx_c_goto_bindings (void *);



extern void gt_pch_nx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_pch_nx_c_inline_static (void *);



extern void gt_pch_nx_sorted_fields_type (void *);



extern void gt_pch_nx_vec_const_char_p_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_pch_nx_align_stack (void *);



extern void gt_pch_nx_vec_pending_weak_va_gc_ (void *);



extern void gt_pch_nx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_pch_nx_opt_stack (void *);



extern void gt_pch_nx_c_parser (void *);



extern void gt_pch_nx_binding_table_s (void *);



extern void gt_pch_nx_binding_entry_s (void *);



extern void gt_pch_nx_cxx_binding (void *);



extern void gt_pch_nx_cp_binding_level (void *);



extern void gt_pch_nx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_pch_nx_cp_token_cache (void *);



extern void gt_pch_nx_vec_qualified_typedef_usage_t_va_gc_ (void *);



extern void gt_pch_nx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_pch_nx_saved_scope (void *);



extern void gt_pch_nx_cxx_int_tree_map (void *);



extern void gt_pch_nx_named_label_entry (void *);



extern void gt_pch_nx_hash_table_named_label_hash_ (void *);



extern void gt_pch_nx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_pch_nx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_pch_nx_hash_table_named_decl_hash_ (void *);



extern void gt_pch_nx_tinst_level (void *);



extern void gt_pch_nx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_pch_nx_tree_check (void *);



extern void gt_pch_nx_vec_cp_token_va_gc_ (void *);



extern void gt_pch_nx_cp_lexer (void *);



extern void gt_pch_nx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser_context (void *);



extern void gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser (void *);



extern void gt_pch_nx_constexpr_fundef (void *);



extern void gt_pch_nx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_pch_nx_constexpr_call (void *);



extern void gt_pch_nx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_pch_nx_named_label_use_entry (void *);



extern void gt_pch_nx_vec_incomplete_var_va_gc_ (void *);



extern void gt_pch_nx_hash_table_typename_hasher_ (void *);



extern void gt_pch_nx_hash_table_mangled_decl_hash_ (void *);



extern void gt_pch_nx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_int_va_gc_ (void *);



extern void gt_pch_nx_hash_table_conv_type_hasher_ (void *);



extern void gt_pch_nx_pending_template (void *);



extern void gt_pch_nx_spec_entry (void *);



extern void gt_pch_nx_hash_table_spec_hasher_ (void *);



extern void gt_pch_nx_constr_entry (void *);



extern void gt_pch_nx_hash_table_constr_hasher_ (void *);



extern void gt_pch_nx_constraint_sat_entry (void *);



extern void gt_pch_nx_concept_spec_entry (void *);



extern void gt_pch_nx_hash_table_constraint_sat_hasher_ (void *);



extern void gt_pch_nx_hash_table_concept_spec_hasher_ (void *);



extern void gt_pch_nx_subsumption_entry (void *);



extern void gt_pch_nx_hash_table_subsumption_hasher_ (void *);



extern void gt_pch_nx_vec_tinfo_s_va_gc_ (void *);



extern void gt_pch_nx_vec_deferred_access_va_gc_ (void *);



extern void gt_pch_nx_hash_table_cplus_array_hasher_ (void *);



extern void gt_pch_nx_hash_table_list_hasher_ (void *);



extern void gt_pch_nx_pending_abstract_type (void *);



extern void gt_pch_nx_hash_table_abstract_type_hasher_ (void *);



extern void gt_pch_nx_binding_level (void *);



extern void gt_pch_nx_hash_table_module_hasher_ (void *);



extern void gt_pch_nx_module_htab_entry (void *);



extern void gt_pch_nx_hash_table_module_decl_hasher_ (void *);



extern void gt_pch_nx_objc_map_private (void *);



extern void gt_pch_nx_hashed_entry (void *);



extern void gt_pch_nx_hashed_attribute (void *);



extern void gt_pch_nx_imp_entry (void *);



extern void gt_pch_nx_string_descriptor (void *);



extern void gt_pch_nx_hash_table_objc_string_hasher_ (void *);



extern void gt_pch_nx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_pch_nx_vec_msgref_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_ivarref_entry_va_gc_ (void *);





extern void gt_pch_p_9line_maps
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6answer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13string_concat
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_concat_db
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_map_location_hash_string_concat__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11bitmap_head
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7section
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cl_target_option
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cl_optimization
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_element
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_obstack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34generic_wide_int_wide_int_storage_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13coverage_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12object_block
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14vec_rtx_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11fixed_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10target_rtl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cgraph_rtl_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_37hash_map_tree_tree_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14range_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_constructor_elt_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_tree_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14target_globals
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_decl_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_int_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_alias_pair_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13libfunc_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_libfunc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15target_libfuncs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_rtx_insn__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18call_site_record_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16vec_uchar_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_call_site_record_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9gimple_df
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_fde_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11frame_space
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11stack_usage
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18control_flow_graph
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5loops
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14hash_set_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24types_used_by_vars_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_used_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13nb_iter_bound
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9loop_exit
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_4loop
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10control_iv
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_loop_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10niter_desc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_loop_exit_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_basic_block_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11rtl_bb_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_edge_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_ref_t_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18section_hash_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18lto_file_decl_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_replace_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ipa_replace_map__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cgraph_simd_clone
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28cgraph_function_version_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cgraph_edge_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25cgraph_indirect_call_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8asm_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12symbol_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_section_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_asmname_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_symtab_node__symbol_priority_map_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_map_alias_set_hash_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_alias_set_entry__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_function_version_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17lto_in_decl_state
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_ipa_bit_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_ipa_vr_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_node_params
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ipa_edge_args
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25ipa_agg_replacement_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14ipa_fn_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10odr_type_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_cfi_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17dw_loc_descr_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_discr_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dw_cfa_location
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_cfi_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16addr_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dwarf_file_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20hash_map_char__tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10dw_cfi_row
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17reg_saved_in_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_fde_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_indirect_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16comdat_type_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_line_info_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_line_info_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_dw_attr_node_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dwarf_file_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_die_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21variable_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_variable_value_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_block_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17call_arg_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_loc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22cached_dw_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_dw_loc_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30vec_dw_line_info_table__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_pubname_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_macinfo_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_dw_ranges_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_ranges_by_label_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_die_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_addr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17inline_entry_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36hash_table_inline_entry_data_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_temp_slot_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_const_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_wide_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_poly_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_reg_attr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_const_double_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_const_fixed_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11eh_region_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16eh_landing_pad_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10eh_catch_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_eh_region_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_eh_landing_pad_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21hash_map_gimple__int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_insn_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23temp_slot_address_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_temp_address_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_tree_hash_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11test_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14test_of_length
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10test_other
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13test_of_union
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9test_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11user_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_libfunc_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_type_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_poly_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_cl_option_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_decl_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_37hash_table_tree_vec_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_section_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_object_block_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_tree_descriptor_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_rtx_desc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_tm_clone_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15tm_restart_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19hash_map_tree_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_ssa_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_restart_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_mem_addr_template_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13scev_info_str
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_scev_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20ssa_operand_memory_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28grid_launch_attributes_trees
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_dllimport_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_gimple__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11value_range
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_ipa_agg_jf_item_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8ipa_bits
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_ipa_param_descriptor_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_bits__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_ipa_vr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ipa_jump_func_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_39vec_ipa_polymorphic_call_context_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17ipa_node_params_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipa_edge_args_sum_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_ipcp_transformation_summary_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_wrapper_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_decl_state_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_condition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_size_time_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33function_summary_ipa_fn_summary__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_type_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_type_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_odr_type_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_hsa_decl_kernel_map_element_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_value_annotation_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_Entity_Id_va_gc_atomic_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19tree_entity_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dummy_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11parm_attr_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_parm_attr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10stmt_group
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9elab_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18range_check_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_range_check_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11loop_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_loop_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18gnat_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13pad_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_pad_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12c_label_vars
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_goto_bindings
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_c_goto_bindings_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_inline_static
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_const_char_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_gc_vec_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_pending_weak_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_pending_redefinition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9opt_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8c_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_table_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_entry_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cxx_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cp_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_cp_class_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14cp_token_cache
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_qualified_typedef_usage_t_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_cxx_saved_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11saved_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cxx_int_tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17named_label_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_named_label_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_cxx_int_tree_map_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_pair_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_named_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tinst_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32vec_deferred_access_check_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_check
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_cp_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8cp_lexer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_cp_default_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cp_parser_context
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cp_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16constexpr_fundef
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_constexpr_fundef_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14constexpr_call
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_constexpr_call_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21named_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_incomplete_var_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_typename_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_mangled_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_pending_noexcept_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_tree_int_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_conv_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16pending_template
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10spec_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_spec_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12constr_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25hash_table_constr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20constraint_sat_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18concept_spec_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_constraint_sat_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_concept_spec_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17subsumption_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_subsumption_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_tinfo_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_deferred_access_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cplus_array_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21pending_abstract_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_abstract_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25hash_table_module_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17module_htab_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_module_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16objc_map_private
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12hashed_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16hashed_attribute
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9imp_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17string_descriptor
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_objc_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ident_data_tuple_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_msgref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_prot_list_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ivarref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
# 31 "../../gcc/ggc.h" 2




typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);






typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);


extern int gt_pch_note_object (void *, void *, gt_note_pointers);



extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);


extern void gt_clear_caches ();


typedef void (*gt_pointer_walker) (void *);



struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};


extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];
# 91 "../../gcc/ggc.h"
extern int ggc_set_mark (const void *);




extern int ggc_marked_p (const void *);


extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (const void *);




extern void init_stringpool (void);


extern void init_ggc (void);





extern bool ggc_protect_identifiers;


extern void gt_pch_save (FILE *f);





extern void *ggc_internal_alloc (size_t, void (*)(void *), size_t,
     size_t )
     __attribute__ ((__malloc__));

inline void *
ggc_internal_alloc (size_t s )
{
  return ggc_internal_alloc (s, 
# 130 "../../gcc/ggc.h" 3 4
                               __null
# 130 "../../gcc/ggc.h"
                                   , 0, 1 );
}

extern size_t ggc_round_alloc_size (size_t requested_size);


extern void *ggc_internal_cleared_alloc (size_t, void (*)(void *),
      size_t, size_t
      ) __attribute__ ((__malloc__));

inline void *
ggc_internal_cleared_alloc (size_t s )
{
  return ggc_internal_cleared_alloc (s, 
# 143 "../../gcc/ggc.h" 3 4
                                       __null
# 143 "../../gcc/ggc.h"
                                           , 0, 1 );
}


extern void *ggc_realloc (void *, size_t );


extern void ggc_free (void *);

extern void dump_ggc_loc_statistics (bool);





template<typename T>
void
finalize (void *p)
{
  static_cast<T *> (p)->~T ();
}

template<typename T>
inline bool
need_finalization_p ()
{

  return !__has_trivial_destructor (T);



}

template<typename T>
inline T *
ggc_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), finalize<T>, 0, 1
       ));
  else
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), 
# 184 "../../gcc/ggc.h" 3 4
                                                            __null
# 184 "../../gcc/ggc.h"
                                                                , 0, 1
       ));
}

template<typename T>
inline T *
ggc_cleared_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T),
        finalize<T>, 0, 1
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T), 
# 197 "../../gcc/ggc.h" 3 4
                                                                    __null
# 197 "../../gcc/ggc.h"
                                                                        , 0, 1
        ));
}

template<typename T>
inline T *
ggc_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), finalize<T>,
       sizeof (T), c ));
  else
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), 
# 209 "../../gcc/ggc.h" 3 4
                                                                __null
# 209 "../../gcc/ggc.h"
                                                                    , 0, 0
       ));
}

template<typename T>
inline T *
ggc_cleared_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T),
        finalize<T>,
        sizeof (T), c
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T), 
# 223 "../../gcc/ggc.h" 3 4
                                                                        __null
# 223 "../../gcc/ggc.h"
                                                                            ,
        0, 0 ));
}

inline void *
ggc_alloc_atomic (size_t s )
{
    return ggc_internal_alloc (s );
}




extern const char *ggc_alloc_string (const char *contents, int length
                                     );






extern void ggc_collect (void);


extern void ggc_grow (void);



extern void ggc_register_root_tab (const struct ggc_root_tab *);


extern void gt_pch_restore (FILE *f);




extern void ggc_print_statistics (void);

extern void stringpool_statistics (void);


extern void init_ggc_heuristics (void);







inline struct rtx_def *
ggc_alloc_rtx_def_stat (size_t s )
{
  return (struct rtx_def *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_cleared_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_cleared_alloc (s );
}

inline gimple *
ggc_alloc_cleared_gimple_statement_stat (size_t s )
{
  return (gimple *) ggc_internal_cleared_alloc (s );
}

inline void
gt_ggc_mx (const char *s)
{
  ((const_cast<char *> (s)) != 
# 299 "../../gcc/ggc.h" 3 4
 __null 
# 299 "../../gcc/ggc.h"
 && ((void *) (const_cast<char *> (s))) != (void *) 1 && ! ggc_set_mark (const_cast<char *> (s)));
}

inline void
gt_pch_nx (const char *)
{
}

inline void
gt_ggc_mx (int)
{
}

inline void
gt_pch_nx (int)
{
}

inline void
gt_pch_nx (unsigned int)
{
}
# 236 "../../gcc/hash-table.h" 2
# 1 "../../gcc/vec.h" 1
# 30 "../../gcc/vec.h"
extern void ggc_free (void *);
extern size_t ggc_round_alloc_size (size_t requested_size);
extern void *ggc_realloc (void *, size_t );
# 183 "../../gcc/vec.h"
extern void dump_vec_loc_statistics (void);


extern htab_t vec_mem_usage_hash;




struct vec_prefix
{




  void register_overhead (void *, size_t, size_t );
  void release_overhead (void *, size_t, bool );
  static unsigned calculate_allocation (vec_prefix *, unsigned, bool);
  static unsigned calculate_allocation_1 (unsigned, unsigned);







  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;

  unsigned m_alloc : 31;
  unsigned m_using_auto_storage : 1;
  unsigned m_num;
};





inline unsigned
vec_prefix::calculate_allocation (vec_prefix *pfx, unsigned reserve,
      bool exact)
{
  if (exact)
    return (pfx ? pfx->m_num : 0) + reserve;
  else if (!pfx)
    return ((4) > (reserve) ? (4) : (reserve));
  return calculate_allocation_1 (pfx->m_alloc, pfx->m_num + reserve);
}

template<typename, typename, typename> struct vec;






struct vl_embed { };
struct vl_ptr { };
# 254 "../../gcc/vec.h"
struct va_heap
{


  typedef vl_ptr default_layout;

  template<typename T>
  static void reserve (vec<T, va_heap, vl_embed> *&, unsigned, bool
         );

  template<typename T>
  static void release (vec<T, va_heap, vl_embed> *&);
};







template<typename T>
inline void
va_heap::reserve (vec<T, va_heap, vl_embed> *&v, unsigned reserve, bool exact
    )
{
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  ((void)(!(alloc) ? fancy_abort ("../../gcc/vec.h", 281, __FUNCTION__), 0 : 0));

  if (0 && v)
    v->m_vecpfx.release_overhead (v, v->allocated (), false);

  size_t size = vec<T, va_heap, vl_embed>::embedded_size (alloc);
  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, va_heap, vl_embed> *> (xrealloc (v, size));
  v->embedded_init (alloc, nelem);

  if (0)
    v->m_vecpfx.register_overhead (v, alloc, nelem );
}




template<typename T>
void
va_heap::release (vec<T, va_heap, vl_embed> *&v)
{
  if (v == 
# 302 "../../gcc/vec.h" 3 4
          __null
# 302 "../../gcc/vec.h"
              )
    return;

  if (0)
    v->m_vecpfx.release_overhead (v, v->allocated (), true);
  ::free (v);
  v = 
# 308 "../../gcc/vec.h" 3 4
     __null
# 308 "../../gcc/vec.h"
         ;
}





struct va_gc
{




  typedef vl_embed default_layout;

  template<typename T, typename A>
  static void reserve (vec<T, A, vl_embed> *&, unsigned, bool
         );

  template<typename T, typename A>
  static void release (vec<T, A, vl_embed> *&v);
};




template<typename T, typename A>
inline void
va_gc::release (vec<T, A, vl_embed> *&v)
{
  if (v)
    ::ggc_free (v);
  v = 
# 340 "../../gcc/vec.h" 3 4
     __null
# 340 "../../gcc/vec.h"
         ;
}







template<typename T, typename A>
void
va_gc::reserve (vec<T, A, vl_embed> *&v, unsigned reserve, bool exact
  )
{
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  if (!alloc)
    {
      ::ggc_free (v);
      v = 
# 359 "../../gcc/vec.h" 3 4
         __null
# 359 "../../gcc/vec.h"
             ;
      return;
    }


  size_t size = vec<T, A, vl_embed>::embedded_size (alloc);


  size = ::ggc_round_alloc_size (size);


  size_t vec_offset = sizeof (vec_prefix);
  size_t elt_size = sizeof (T);
  alloc = (size - vec_offset) / elt_size;


  size = vec_offset + alloc * elt_size;

  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc (v, size
              ));
  v->embedded_init (alloc, nelem);
}





struct va_gc_atomic : va_gc
{
};
# 403 "../../gcc/vec.h"
template<typename T,
         typename A = va_heap,
         typename L = typename A::default_layout>
struct vec
{
};
# 421 "../../gcc/vec.h"
template<typename T>
void
debug_helper (vec<T> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 428 "../../gcc/vec.h" 3 4
              stderr
# 428 "../../gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 430 "../../gcc/vec.h" 3 4
                  stderr
# 430 "../../gcc/vec.h"
                        );
    }
}






template<typename T>
void
debug_helper (vec<T, va_gc> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 446 "../../gcc/vec.h" 3 4
              stderr
# 446 "../../gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 448 "../../gcc/vec.h" 3 4
                  stderr
# 448 "../../gcc/vec.h"
                        );
    }
}
# 489 "../../gcc/vec.h"
template <typename T>
inline void
vec_default_construct (T *dst, unsigned n)
{
# 508 "../../gcc/vec.h"
  for ( ; n; ++dst, --n)
    ::new (static_cast<void*>(dst)) T ();
}



template <typename T>
inline void
vec_copy_construct (T *dst, const T *src, unsigned n)
{
  for ( ; n; ++dst, ++src, --n)
    ::new (static_cast<void*>(dst)) T (*src);
}







struct vnull
{
  template <typename T, typename A, typename L>
  constexpr operator vec<T, A, L> () { return vec<T, A, L>(); }
};
extern vnull vNULL;
# 562 "../../gcc/vec.h"
template<typename T, typename A>
struct vec<T, A, vl_embed>
{
public:
  unsigned allocated (void) const { return m_vecpfx.m_alloc; }
  unsigned length (void) const { return m_vecpfx.m_num; }
  bool is_empty (void) const { return m_vecpfx.m_num == 0; }
  T *address (void) { return m_vecdata; }
  const T *address (void) const { return m_vecdata; }
  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return address () + length (); }
  const T *end () const { return address () + length (); }
  const T &operator[] (unsigned) const;
  T &operator[] (unsigned);
  T &last (void);
  bool space (unsigned) const;
  bool iterate (unsigned, T *) const;
  bool iterate (unsigned, T **) const;
  vec *copy () const;
  void splice (const vec &);
  void splice (const vec *src);
  T *quick_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void quick_insert (unsigned, const T &);
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  static size_t embedded_size (unsigned);
  void embedded_init (unsigned, unsigned = 0, unsigned = 0);
  void quick_grow (unsigned len);
  void quick_grow_cleared (unsigned len);


  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;



  vec_prefix m_vecpfx;
  T m_vecdata[1];
};
# 630 "../../gcc/vec.h"
template<typename T, typename A>
inline bool
vec_safe_space (const vec<T, A, vl_embed> *v, unsigned nelems)
{
  return v ? v->space (nelems) : nelems == 0;
}



template<typename T, typename A>
inline unsigned
vec_safe_length (const vec<T, A, vl_embed> *v)
{
  return v ? v->length () : 0;
}



template<typename T, typename A>
inline T *
vec_safe_address (vec<T, A, vl_embed> *v)
{
  return v ? v->address () : 
# 652 "../../gcc/vec.h" 3 4
                            __null
# 652 "../../gcc/vec.h"
                                ;
}



template<typename T, typename A>
inline bool
vec_safe_is_empty (vec<T, A, vl_embed> *v)
{
  return v ? v->is_empty () : true;
}



template<typename T, typename A>
inline bool
vec_safe_reserve (vec<T, A, vl_embed> *&v, unsigned nelems, bool exact = false
    )
{
  bool extend = nelems ? !vec_safe_space (v, nelems) : false;
  if (extend)
    A::reserve (v, nelems, exact );
  return extend;
}

template<typename T, typename A>
inline bool
vec_safe_reserve_exact (vec<T, A, vl_embed> *&v, unsigned nelems
   )
{
  return vec_safe_reserve (v, nelems, true );
}





template<typename T, typename A>
inline void
vec_alloc (vec<T, A, vl_embed> *&v, unsigned nelems )
{
  v = 
# 693 "../../gcc/vec.h" 3 4
     __null
# 693 "../../gcc/vec.h"
         ;
  vec_safe_reserve (v, nelems, false );
}




template<typename T, typename A>
inline void
vec_free (vec<T, A, vl_embed> *&v)
{
  A::release (v);
}



template<typename T, typename A>
inline void
vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  ((void)(!(len >= oldlen) ? fancy_abort ("../../gcc/vec.h", 714, __FUNCTION__), 0 : 0));
  vec_safe_reserve_exact (v, len - oldlen );
  v->quick_grow (len);
}



template<typename T, typename A>
inline void
vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  vec_safe_grow (v, len );
  vec_default_construct (v->address () + oldlen, len - oldlen);
}



template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T **ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}

template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T *ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline T *
vec_safe_push (vec<T, A, vl_embed> *&v, const T &obj )
{
  vec_safe_reserve (v, 1, false );
  return v->quick_push (obj);
}




template<typename T, typename A>
inline void
vec_safe_insert (vec<T, A, vl_embed> *&v, unsigned ix, const T &obj
   )
{
  vec_safe_reserve (v, 1, false );
  v->quick_insert (ix, obj);
}



template<typename T, typename A>
inline void
vec_safe_truncate (vec<T, A, vl_embed> *v, unsigned size)
{
  if (v)
    v->truncate (size);
}



template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec_safe_copy (vec<T, A, vl_embed> *src )
{
  return src ? src->copy () : 
# 797 "../../gcc/vec.h" 3 4
                                                __null
# 797 "../../gcc/vec.h"
                                                    ;
}



template<typename T, typename A>
inline void
vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src
   )
{
  unsigned src_len = vec_safe_length (src);
  if (src_len)
    {
      vec_safe_reserve_exact (dst, vec_safe_length (dst) + src_len
         );
      dst->splice (*src);
    }
}




template<typename T, typename A>
inline bool
vec_safe_contains (vec<T, A, vl_embed> *v, const T &search)
{
  return v ? v->contains (search) : false;
}




template<typename T, typename A>
inline const T &
vec<T, A, vl_embed>::operator[] (unsigned ix) const
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("../../gcc/vec.h", 833, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}

template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::operator[] (unsigned ix)
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("../../gcc/vec.h", 841, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::last (void)
{
  ((void)(!(m_vecpfx.m_num > 0) ? fancy_abort ("../../gcc/vec.h", 852, __FUNCTION__), 0 : 0));
  return (*this)[m_vecpfx.m_num - 1];
}
# 863 "../../gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::space (unsigned nelems) const
{
  return m_vecpfx.m_alloc - m_vecpfx.m_num >= nelems;
}
# 878 "../../gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T *ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = m_vecdata[ix];
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}
# 904 "../../gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T **ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = (const_cast<T *> ((&m_vecdata[ix])));
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec<T, A, vl_embed>::copy (void) const
{
  vec<T, A, vl_embed> *new_vec = 
# 927 "../../gcc/vec.h" 3 4
                                __null
# 927 "../../gcc/vec.h"
                                    ;
  unsigned len = length ();
  if (len)
    {
      vec_alloc (new_vec, len );
      new_vec->embedded_init (len, len);
      vec_copy_construct (new_vec->address (), m_vecdata, len);
    }
  return new_vec;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> &src)
{
  unsigned len = src.length ();
  if (len)
    {
      ((void)(!(space (len)) ? fancy_abort ("../../gcc/vec.h", 949, __FUNCTION__), 0 : 0));
      vec_copy_construct (end (), src.address (), len);
      m_vecpfx.m_num += len;
    }
}

template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> *src)
{
  if (src)
    splice (*src);
}






template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::quick_push (const T &obj)
{
  ((void)(!(space (1)) ? fancy_abort ("../../gcc/vec.h", 972, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[m_vecpfx.m_num++];
  *slot = obj;
  return slot;
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::pop (void)
{
  ((void)(!(length () > 0) ? fancy_abort ("../../gcc/vec.h", 985, __FUNCTION__), 0 : 0));
  return m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::truncate (unsigned size)
{
  ((void)(!(length () >= size) ? fancy_abort ("../../gcc/vec.h", 997, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = size;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_insert (unsigned ix, const T &obj)
{
  ((void)(!(length () < allocated ()) ? fancy_abort ("../../gcc/vec.h", 1009, __FUNCTION__), 0 : 0));
  ((void)(!(ix <= length ()) ? fancy_abort ("../../gcc/vec.h", 1010, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot + 1, slot, (m_vecpfx.m_num++ - ix) * sizeof (T));
  *slot = obj;
}






template<typename T, typename A>
inline void
vec<T, A, vl_embed>::ordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("../../gcc/vec.h", 1025, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot, slot + 1, (--m_vecpfx.m_num - ix) * sizeof (T));
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::unordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("../../gcc/vec.h", 1038, __FUNCTION__), 0 : 0));
  m_vecdata[ix] = m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::block_remove (unsigned ix, unsigned len)
{
  ((void)(!(ix + len <= length ()) ? fancy_abort ("../../gcc/vec.h", 1050, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  m_vecpfx.m_num -= len;
  memmove (slot, slot + len, (m_vecpfx.m_num - ix) * sizeof (T));
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::qsort (int (*cmp) (const void *, const void *))
{
  if (length () > 1)
    ::qsort_chk (address (), length (), sizeof (T), cmp);
}





template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *))
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return 
# 1100 "../../gcc/vec.h" 3 4
        __null
# 1100 "../../gcc/vec.h"
            ;
}




template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::contains (const T &search) const
{
  unsigned int len = length ();
  for (unsigned int i = 0; i < len; i++)
    if ((*this)[i] == search)
      return true;

  return false;
}






template<typename T, typename A>
unsigned
vec<T, A, vl_embed>::lower_bound (T obj, bool (*lessthan)(const T &, const T &))
  const
{
  unsigned int len = length ();
  unsigned int half, middle;
  unsigned int first = 0;
  while (len > 0)
    {
      half = len / 2;
      middle = first;
      middle += half;
      T middle_elem = (*this)[middle];
      if (lessthan (middle_elem, obj))
 {
   first = middle;
   ++first;
   len = len - half - 1;
 }
      else
 len = half;
    }
  return first;
}
# 1162 "../../gcc/vec.h"
template<typename T, typename A>
inline size_t
vec<T, A, vl_embed>::embedded_size (unsigned alloc)
{
  typedef vec<T, A, vl_embed> vec_embedded;
  return 
# 1167 "../../gcc/vec.h" 3 4
        __builtin_offsetof (
# 1167 "../../gcc/vec.h"
        vec_embedded
# 1167 "../../gcc/vec.h" 3 4
        , 
# 1167 "../../gcc/vec.h"
        m_vecdata
# 1167 "../../gcc/vec.h" 3 4
        ) 
# 1167 "../../gcc/vec.h"
                                           + alloc * sizeof (T);
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::embedded_init (unsigned alloc, unsigned num, unsigned aut)
{
  m_vecpfx.m_alloc = alloc;
  m_vecpfx.m_using_auto_storage = aut;
  m_vecpfx.m_num = num;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow (unsigned len)
{
  ((void)(!(length () <= len && len <= m_vecpfx.m_alloc) ? fancy_abort ("../../gcc/vec.h", 1191, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = len;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow_cleared (unsigned len)
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  quick_grow (len);
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}



template<typename T>
void
gt_ggc_mx (vec<T, va_gc> *v)
{
  extern void gt_ggc_mx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_ggc_mx ((*v)[i]);
}

template<typename T>
void
gt_ggc_mx (vec<T, va_gc_atomic, vl_embed> *v __attribute__ ((__unused__)))
{


}




template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v)
{
  extern void gt_pch_nx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx ((*v)[i]);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T *, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  for (unsigned i = 0; i < v->length (); i++)
    op (&((*v)[i]), cookie);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  extern void gt_pch_nx (T *, gt_pointer_operator, void *);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx (&((*v)[i]), op, cookie);
}
# 1287 "../../gcc/vec.h"
template<typename T>
struct vec<T, va_heap, vl_ptr>
{
public:


  void create (unsigned nelems );
  void release (void);


  bool exists (void) const
  { return m_vec != 
# 1298 "../../gcc/vec.h" 3 4
                   __null
# 1298 "../../gcc/vec.h"
                       ; }

  bool is_empty (void) const
  { return m_vec ? m_vec->is_empty () : true; }

  unsigned length (void) const
  { return m_vec ? m_vec->length () : 0; }

  T *address (void)
  { return m_vec ? m_vec->m_vecdata : 
# 1307 "../../gcc/vec.h" 3 4
                                     __null
# 1307 "../../gcc/vec.h"
                                         ; }

  const T *address (void) const
  { return m_vec ? m_vec->m_vecdata : 
# 1310 "../../gcc/vec.h" 3 4
                                     __null
# 1310 "../../gcc/vec.h"
                                         ; }

  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return begin () + length (); }
  const T *end () const { return begin () + length (); }
  const T &operator[] (unsigned ix) const
  { return (*m_vec)[ix]; }

  bool operator!=(const vec &other) const
  { return !(*this == other); }

  bool operator==(const vec &other) const
  { return address () == other.address (); }

  T &operator[] (unsigned ix)
  { return (*m_vec)[ix]; }

  T &last (void)
  { return m_vec->last (); }

  bool space (int nelems) const
  { return m_vec ? m_vec->space (nelems) : nelems == 0; }

  bool iterate (unsigned ix, T *p) const;
  bool iterate (unsigned ix, T **p) const;
  vec copy () const;
  bool reserve (unsigned, bool = false );
  bool reserve_exact (unsigned );
  void splice (const vec &);
  void safe_splice (const vec & );
  T *quick_push (const T &);
  T *safe_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void safe_grow (unsigned );
  void safe_grow_cleared (unsigned );
  void quick_grow (unsigned);
  void quick_grow_cleared (unsigned);
  void quick_insert (unsigned, const T &);
  void safe_insert (unsigned, const T & );
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;

  bool using_auto_storage () const;



  vec<T, va_heap, vl_embed> *m_vec;
};
# 1373 "../../gcc/vec.h"
template<typename T, size_t N = 0>
class auto_vec : public vec<T, va_heap>
{
public:
  auto_vec ()
  {
    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  auto_vec (size_t s)
  {
    if (s > N)
      {
 this->create (s);
 return;
      }

    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  ~auto_vec ()
  {
    this->release ();
  }

private:
  vec<T, va_heap, vl_embed> m_auto;
  T m_data[((N - 1) > (1) ? (N - 1) : (1))];
};



template<typename T>
class auto_vec<T, 0> : public vec<T, va_heap>
{
public:
  auto_vec () { this->m_vec = 
# 1411 "../../gcc/vec.h" 3 4
                             __null
# 1411 "../../gcc/vec.h"
                                 ; }
  auto_vec (size_t n) { this->create (n); }
  ~auto_vec () { this->release (); }
};






template<typename T>
inline void
vec_alloc (vec<T> *&v, unsigned nelems )
{
  v = new vec<T>;
  v->create (nelems );
}




template<typename T>
inline void
vec_check_alloc (vec<T, va_heap> *&vec, unsigned nelems )
{
  if (!vec)
    vec_alloc (vec, nelems );
}




template<typename T>
inline void
vec_free (vec<T> *&v)
{
  if (v == 
# 1447 "../../gcc/vec.h" 3 4
          __null
# 1447 "../../gcc/vec.h"
              )
    return;

  v->release ();
  delete v;
  v = 
# 1452 "../../gcc/vec.h" 3 4
     __null
# 1452 "../../gcc/vec.h"
         ;
}
# 1463 "../../gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T *ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1486 "../../gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T **ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1525 "../../gcc/vec.h"
template<typename T>
inline vec<T, va_heap, vl_ptr>
vec<T, va_heap, vl_ptr>::copy (void) const
{
  vec<T, va_heap, vl_ptr> new_vec = vNULL;
  if (length ())
    new_vec.m_vec = m_vec->copy ();
  return new_vec;
}
# 1545 "../../gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve (unsigned nelems, bool exact )
{
  if (space (nelems))
    return false;




  vec<T, va_heap, vl_embed> *oldvec = m_vec;
  unsigned int oldsize = 0;
  bool handle_auto_vec = m_vec && using_auto_storage ();
  if (handle_auto_vec)
    {
      m_vec = 
# 1560 "../../gcc/vec.h" 3 4
             __null
# 1560 "../../gcc/vec.h"
                 ;
      oldsize = oldvec->length ();
      nelems += oldsize;
    }

  va_heap::reserve (m_vec, nelems, exact );
  if (handle_auto_vec)
    {
      vec_copy_construct (m_vec->address (), oldvec->address (), oldsize);
      m_vec->m_vecpfx.m_num = oldsize;
    }

  return true;
}







template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve_exact (unsigned nelems )
{
  return reserve (nelems, true );
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::create (unsigned nelems )
{
  m_vec = 
# 1598 "../../gcc/vec.h" 3 4
         __null
# 1598 "../../gcc/vec.h"
             ;
  if (nelems > 0)
    reserve_exact (nelems );
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::release (void)
{
  if (!m_vec)
    return;

  if (using_auto_storage ())
    {
      m_vec->m_vecpfx.m_num = 0;
      return;
    }

  va_heap::release (m_vec);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::splice (const vec<T, va_heap, vl_ptr> &src)
{
  if (src.m_vec)
    m_vec->splice (*(src.m_vec));
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_splice (const vec<T, va_heap, vl_ptr> &src
          )
{
  if (src.length ())
    {
      reserve_exact (src.length ());
      splice (src);
    }
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::quick_push (const T &obj)
{
  return m_vec->quick_push (obj);
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::safe_push (const T &obj )
{
  reserve (1, false );
  return quick_push (obj);
}




template<typename T>
inline T &
vec<T, va_heap, vl_ptr>::pop (void)
{
  return m_vec->pop ();
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::truncate (unsigned size)
{
  if (m_vec)
    m_vec->truncate (size);
  else
    ((void)(!(size == 0) ? fancy_abort ("../../gcc/vec.h", 1699, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow (unsigned len )
{
  unsigned oldlen = length ();
  ((void)(!(oldlen <= len) ? fancy_abort ("../../gcc/vec.h", 1712, __FUNCTION__), 0 : 0));
  reserve_exact (len - oldlen );
  if (m_vec)
    m_vec->quick_grow (len);
  else
    ((void)(!(len == 0) ? fancy_abort ("../../gcc/vec.h", 1717, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len )
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  safe_grow (len );
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("../../gcc/vec.h", 1744, __FUNCTION__), 0 : 0));
  m_vec->quick_grow (len);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow_cleared (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("../../gcc/vec.h", 1757, __FUNCTION__), 0 : 0));
  m_vec->quick_grow_cleared (len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_insert (unsigned ix, const T &obj)
{
  m_vec->quick_insert (ix, obj);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_insert (unsigned ix, const T &obj )
{
  reserve (1, false );
  quick_insert (ix, obj);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::ordered_remove (unsigned ix)
{
  m_vec->ordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::unordered_remove (unsigned ix)
{
  m_vec->unordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::block_remove (unsigned ix, unsigned len)
{
  m_vec->block_remove (ix, len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::qsort (int (*cmp) (const void *, const void *))
{
  if (m_vec)
    m_vec->qsort (cmp);
}





template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *))
{
  if (m_vec)
    return m_vec->bsearch (key, cmp);
  return 
# 1841 "../../gcc/vec.h" 3 4
        __null
# 1841 "../../gcc/vec.h"
            ;
}







template<typename T>
inline unsigned
vec<T, va_heap, vl_ptr>::lower_bound (T obj,
          bool (*lessthan)(const T &, const T &))
    const
{
  return m_vec ? m_vec->lower_bound (obj, lessthan) : 0;
}




template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::contains (const T &search) const
{
  return m_vec ? m_vec->contains (search) : false;
}

template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::using_auto_storage () const
{
  return m_vec->m_vecpfx.m_using_auto_storage;
}



template<typename T>
inline void
release_vec_vec (vec<vec<T> > &vec)
{
  for (unsigned i = 0; i < vec.length (); i++)
    vec[i].release ();

  vec.release ();
}


        
# 237 "../../gcc/hash-table.h" 2
# 1 "../../gcc/../include/hashtab.h" 1
# 238 "../../gcc/hash-table.h" 2
# 1 "../../gcc/inchash.h" 1
# 31 "../../gcc/inchash.h"
hashval_t iterative_hash_host_wide_int (long, hashval_t);
hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);

namespace inchash
{

class hash
{
 public:


  hash (hashval_t seed = 0)
  {
    val = seed;
    bits = 0;
  }


  hashval_t end ()
  {
    return val;
  }


  void add_int (unsigned v)
  {
    val = iterative_hash_hashval_t (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_int (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_int (v.coeffs[i]);
  }


  void add_hwi (long v)
  {
    val = iterative_hash_host_wide_int (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_hwi (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_hwi (v.coeffs[i]);
  }


  template<typename T>
  void add_wide_int (const generic_wide_int<T> &x)
  {
    add_int (x.get_len ());
    for (unsigned i = 0; i < x.get_len (); i++)
      add_hwi (x.elt (i));
  }


  void add_ptr (const void *ptr)
  {
    add (&ptr, sizeof (ptr));
  }


  void add (const void *data, size_t len)
  {
    val = iterative_hash (data, len, val);
  }


  void merge_hash (hashval_t other)
  {
    val = iterative_hash_hashval_t (other, val);
  }


  void merge (hash &other)
  {
    merge_hash (other.val);
  }

  template<class T> void add_object(T &obj)
  {
    add (&obj, sizeof(T));
  }



  void add_flag (bool flag)
  {
    bits = (bits << 1) | flag;
  }

  void commit_flag ()
  {
    add_int (bits);
    bits = 0;
  }





  void add_commutative (hash &a, hash &b)
  {
    if (a.end() > b.end())
      {
 merge (b);
 merge (a);
      }
    else
      {
 merge (a);
 merge (b);
      }
  }

 private:
  hashval_t val;
  unsigned bits;
};

}
# 174 "../../gcc/inchash.h"
inline
hashval_t
iterative_hash_hashval_t (hashval_t val, hashval_t val2)
{

  hashval_t a = 0x9e3779b9;

  { a -= val; a -= val2; a ^= (val2>>13); val -= val2; val -= a; val ^= (a<< 8); val2 -= a; val2 -= val; val2 ^= ((val&0xffffffff)>>13); a -= val; a -= val2; a ^= ((val2&0xffffffff)>>12); val -= val2; val -= a; val = (val ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>> 5)) & 0xffffffff; a -= val; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; val -= val2; val -= a; val = (val ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>>15)) & 0xffffffff; };
  return val2;
}



inline
hashval_t
iterative_hash_host_wide_int (long val, hashval_t val2)
{
  if (sizeof (long) == sizeof (hashval_t))
    return iterative_hash_hashval_t (val, val2);
  else
    {
      hashval_t a = (hashval_t) val;


      int zero = 0;
      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));
      { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
      if (sizeof (long) > 2 * sizeof (hashval_t))
 {
   hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));
   hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));
   { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
 }
      return val2;
    }
}
# 239 "../../gcc/hash-table.h" 2
# 1 "../../gcc/mem-stats-traits.h" 1
# 25 "../../gcc/mem-stats-traits.h"
enum mem_alloc_origin
{
  HASH_TABLE_ORIGIN,
  HASH_MAP_ORIGIN,
  HASH_SET_ORIGIN,
  VEC_ORIGIN,
  BITMAP_ORIGIN,
  GGC_ORIGIN,
  ALLOC_POOL_ORIGIN,
  MEM_ALLOC_ORIGIN_LENGTH
};


static const char * mem_alloc_origin_names[] = { "Hash tables", "Hash maps",
  "Hash sets", "Heap vectors", "Bitmaps", "GGC memory", "Allocation pool" };
# 240 "../../gcc/hash-table.h" 2
# 1 "../../gcc/hash-traits.h" 1
# 25 "../../gcc/hash-traits.h"
template <typename Type>
struct typed_free_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_free_remove <Type>::remove (Type *p)
{
  free (p);
}



template <typename Type>
struct typed_delete_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_delete_remove <Type>::remove (Type *p)
{
  delete p;
}



template <typename Type>
struct typed_noop_remove
{
  static inline void remove (Type &);
};




template <typename Type>
inline void
typed_noop_remove <Type>::remove (Type &)
{
}







template <typename Type, Type Empty, Type Deleted = Empty>
struct int_hash : typed_noop_remove <Type>
{
  typedef Type value_type;
  typedef Type compare_type;

  static inline hashval_t hash (value_type);
  static inline bool equal (value_type existing, value_type candidate);
  static inline void mark_deleted (Type &);
  static inline void mark_empty (Type &);
  static inline bool is_deleted (Type);
  static inline bool is_empty (Type);
};

template <typename Type, Type Empty, Type Deleted>
inline hashval_t
int_hash <Type, Empty, Deleted>::hash (value_type x)
{
  return x;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)
{
  return x == y;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)
{
  ((void)(!(Empty != Deleted) ? fancy_abort ("../../gcc/hash-traits.h", 114, __FUNCTION__), 0 : 0));
  x = Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_empty (Type &x)
{
  x = Empty;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_deleted (Type x)
{
  return Empty != Deleted && x == Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_empty (Type x)
{
  return x == Empty;
}





template <typename Type>
struct pointer_hash
{
  typedef Type *value_type;
  typedef Type *compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &existing,
       const compare_type &candidate);
  static inline void mark_deleted (Type *&);
  static inline void mark_empty (Type *&);
  static inline bool is_deleted (Type *);
  static inline bool is_empty (Type *);
};

template <typename Type>
inline hashval_t
pointer_hash <Type>::hash (const value_type &candidate)
{


  return (hashval_t) ((intptr_t)candidate >> 3);
}

template <typename Type>
inline bool
pointer_hash <Type>::equal (const value_type &existing,
      const compare_type &candidate)
{
  return existing == candidate;
}

template <typename Type>
inline void
pointer_hash <Type>::mark_deleted (Type *&e)
{
  e = reinterpret_cast<Type *> (1);
}

template <typename Type>
inline void
pointer_hash <Type>::mark_empty (Type *&e)
{
  e = 
# 186 "../../gcc/hash-traits.h" 3 4
     __null
# 186 "../../gcc/hash-traits.h"
         ;
}

template <typename Type>
inline bool
pointer_hash <Type>::is_deleted (Type *e)
{
  return e == reinterpret_cast<Type *> (1);
}

template <typename Type>
inline bool
pointer_hash <Type>::is_empty (Type *e)
{
  return e == 
# 200 "../../gcc/hash-traits.h" 3 4
             __null
# 200 "../../gcc/hash-traits.h"
                 ;
}




struct string_hash : pointer_hash <const char>
{
  static inline hashval_t hash (const char *);
  static inline bool equal (const char *, const char *);
};

inline hashval_t
string_hash::hash (const char *id)
{
  return htab_hash_string (id);
}

inline bool
string_hash::equal (const char *id1, const char *id2)
{
  return strcmp (id1, id2) == 0;
}



template<typename T>
struct ggc_remove
{
  static void remove (T &) {}

  static void
  ggc_mx (T &p)
  {
    extern void gt_ggc_mx (T &);
    gt_ggc_mx (p);
  }


  static void
  ggc_maybe_mx (T &p)
  {
    ggc_mx (p);
  }

  static void
  pch_nx (T &p)
  {
    extern void gt_pch_nx (T &);
    gt_pch_nx (p);
  }

  static void
  pch_nx (T &p, gt_pointer_operator op, void *cookie)
  {
    op (&p, cookie);
  }
};




template<typename T>
struct ggc_cache_remove : ggc_remove<T>
{

  static void ggc_maybe_mx (T &) {}

  static int
  keep_cache_entry (T &e)
  {
    return ggc_marked_p (e) ? -1 : 0;
  }
};




template <typename T>
struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T *> {};




template <typename T>
struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};




template <typename T>
struct delete_ptr_hash : pointer_hash <T>, typed_delete_remove <T> {};




template <typename T>
struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};





template <typename T>
struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};




struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};




template <typename T1, typename T2>
struct pair_hash
{
  typedef std::pair <typename T1::value_type,
       typename T2::value_type> value_type;
  typedef std::pair <typename T1::compare_type,
       typename T2::compare_type> compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &, const compare_type &);
  static inline void remove (value_type &);
  static inline void mark_deleted (value_type &);
  static inline void mark_empty (value_type &);
  static inline bool is_deleted (const value_type &);
  static inline bool is_empty (const value_type &);
};

template <typename T1, typename T2>
inline hashval_t
pair_hash <T1, T2>::hash (const value_type &x)
{
  return iterative_hash_hashval_t (T1::hash (x.first), T2::hash (x.second));
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::equal (const value_type &x, const compare_type &y)
{
  return T1::equal (x.first, y.first) && T2::equal (x.second, y.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::remove (value_type &x)
{
  T1::remove (x.first);
  T2::remove (x.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_deleted (value_type &x)
{
  T1::mark_deleted (x.first);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_empty (value_type &x)
{
  T1::mark_empty (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_deleted (const value_type &x)
{
  return T1::is_deleted (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_empty (const value_type &x)
{
  return T1::is_empty (x.first);
}

template <typename T> struct default_hash_traits : T {};

template <typename T>
struct default_hash_traits <T *> : ggc_ptr_hash <T> {};
# 241 "../../gcc/hash-table.h" 2
# 1 "../../gcc/hash-map-traits.h" 1
# 31 "../../gcc/hash-map-traits.h"
template <typename H, typename Value>
struct simple_hashmap_traits
{
  typedef typename H::value_type key_type;
  static const bool maybe_mx = true;
  static inline hashval_t hash (const key_type &);
  static inline bool equal_keys (const key_type &, const key_type &);
  template <typename T> static inline void remove (T &);
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename H, typename Value>
inline hashval_t
simple_hashmap_traits <H, Value>::hash (const key_type &h)
{
  return H::hash (h);
}

template <typename H, typename Value>
inline bool
simple_hashmap_traits <H, Value>::equal_keys (const key_type &k1,
           const key_type &k2)
{
  return H::equal (k1, k2);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::remove (T &entry)
{
  H::remove (entry.m_key);
  entry.m_value.~Value ();
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_empty (const T &entry)
{
  return H::is_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_deleted (const T &entry)
{
  return H::is_deleted (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_empty (T &entry)
{
  H::mark_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_deleted (T &entry)
{
  H::mark_deleted (entry.m_key);
}

template <typename H, typename Value>
struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>
{
  static const bool maybe_mx = false;
};






template <typename Value>
struct unbounded_hashmap_traits
{
  template <typename T> static inline void remove (T &);
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::remove (T &entry)
{
  default_hash_traits <Value>::remove (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_empty (const T &entry)
{
  return default_hash_traits <Value>::is_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_deleted (const T &entry)
{
  return default_hash_traits <Value>::is_deleted (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_empty (T &entry)
{
  default_hash_traits <Value>::mark_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_deleted (T &entry)
{
  default_hash_traits <Value>::mark_deleted (entry.m_value);
}





template <typename Key, typename Value>
struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>
{
  typedef Key key_type;
  static inline hashval_t hash (Key);
  static inline bool equal_keys (Key, Key);
};

template <typename Key, typename Value>
inline hashval_t
unbounded_int_hashmap_traits <Key, Value>::hash (Key k)
{
  return k;
}

template <typename Key, typename Value>
inline bool
unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)
{
  return k1 == k2;
}
# 242 "../../gcc/hash-table.h" 2

template<typename, typename, typename> class hash_map;
template<typename, typename> class hash_set;




template <typename Type>
struct xcallocator
{
  static Type *data_alloc (size_t count);
  static void data_free (Type *memory);
};




template <typename Type>
inline Type *
xcallocator <Type>::data_alloc (size_t count)
{
  return static_cast <Type *> (xcalloc (count, sizeof (Type)));
}




template <typename Type>
inline void
xcallocator <Type>::data_free (Type *memory)
{
  return ::free (memory);
}




struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;
  hashval_t shift;
};

extern struct prime_ent const prime_tab[];




extern unsigned int hash_table_higher_prime_index (unsigned long n)
   __attribute__ ((__pure__));
# 306 "../../gcc/hash-table.h"
inline hashval_t
mul_mod (hashval_t x, hashval_t y, hashval_t inv, int shift)
{
   hashval_t t1, t2, t3, t4, q, r;

   t1 = ((uint64_t)x * inv) >> 32;
   t2 = x - t1;
   t3 = t2 >> 1;
   t4 = t1 + t3;
   q = t4 >> shift;
   r = x - (q * y);

   return r;
}



inline hashval_t
hash_table_mod1 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("../../gcc/hash-table.h", 327, __FUNCTION__), 0 : 0));
  return mul_mod (hash, p->prime, p->inv, p->shift);
}



inline hashval_t
hash_table_mod2 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("../../gcc/hash-table.h", 337, __FUNCTION__), 0 : 0));
  return 1 + mul_mod (hash, p->prime - 2, p->inv_m2, p->shift);
}

class mem_usage;
# 356 "../../gcc/hash-table.h"
template <typename Descriptor,
  template<typename Type> class Allocator = xcallocator>
class hash_table
{
  typedef typename Descriptor::value_type value_type;
  typedef typename Descriptor::compare_type compare_type;

public:
  explicit hash_table (size_t, bool ggc = false,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  explicit hash_table (const hash_table &, bool ggc = false,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  ~hash_table ();


  static hash_table *
  create_ggc (size_t n )
  {
    hash_table *table = ggc_alloc<hash_table> ();
    new (table) hash_table (n, true, 0,
       HASH_TABLE_ORIGIN );
    return table;
  }


  size_t size () const { return m_size; }


  size_t elements () const { return m_n_elements - m_n_deleted; }


  size_t elements_with_deleted () const { return m_n_elements; }


  void empty () { if (elements ()) empty_slow (); }




  void clear_slot (value_type *);




  value_type &find_with_hash (const compare_type &, hashval_t);


  value_type &find (const value_type &value)
    {
      return find_with_hash (value, Descriptor::hash (value));
    }

  value_type *find_slot (const value_type &value, insert_option insert)
    {
      return find_slot_with_hash (value, Descriptor::hash (value), insert);
    }
# 424 "../../gcc/hash-table.h"
  value_type *find_slot_with_hash (const compare_type &comparable,
        hashval_t hash, enum insert_option insert);




  void remove_elt_with_hash (const compare_type &, hashval_t);



  void remove_elt (const value_type &value)
    {
      remove_elt_with_hash (value, Descriptor::hash (value));
    }




  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse_noresize (Argument argument);



  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse (Argument argument);

  class iterator
  {
  public:
    iterator () : m_slot (
# 455 "../../gcc/hash-table.h" 3 4
                         __null
# 455 "../../gcc/hash-table.h"
                             ), m_limit (
# 455 "../../gcc/hash-table.h" 3 4
                                         __null
# 455 "../../gcc/hash-table.h"
                                             ) {}

    iterator (value_type *slot, value_type *limit) :
      m_slot (slot), m_limit (limit) {}

    inline value_type &operator * () { return *m_slot; }
    void slide ();
    inline iterator &operator ++ ();
    bool operator != (const iterator &other) const
      {
 return m_slot != other.m_slot || m_limit != other.m_limit;
      }

  private:
    value_type *m_slot;
    value_type *m_limit;
  };

  iterator begin () const
    {
      iterator iter (m_entries, m_entries + m_size);
      iter.slide ();
      return iter;
    }

  iterator end () const { return iterator (); }

  double collisions () const
    {
      return m_searches ? static_cast <double> (m_collisions) / m_searches : 0;
    }

private:
  template<typename T> friend void gt_ggc_mx (hash_table<T> *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *);
  template<typename T> friend void
    hashtab_entry_note_pointers (void *, void *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void
  gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U> friend void gt_pch_nx (hash_set<T, U> *,
         gt_pointer_operator,
         void *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *,
           gt_pointer_operator, void *);

  template<typename T> friend void gt_cleare_cache (hash_table<T> *);

  void empty_slow ();

  value_type *alloc_entries (size_t n ) const;
  value_type *find_empty_slot_for_expand (hashval_t);
  bool too_empty_p (unsigned int);
  void expand ();
  static bool is_deleted (value_type &v)
  {
    return Descriptor::is_deleted (v);
  }

  static bool is_empty (value_type &v)
  {
    return Descriptor::is_empty (v);
  }

  static void mark_deleted (value_type &v)
  {
    Descriptor::mark_deleted (v);
  }

  static void mark_empty (value_type &v)
  {
    Descriptor::mark_empty (v);
  }


  typename Descriptor::value_type *m_entries;

  size_t m_size;


  size_t m_n_elements;


  size_t m_n_deleted;



  unsigned int m_searches;



  unsigned int m_collisions;



  unsigned int m_size_prime_index;


  bool m_ggc;


  bool m_gather_mem_stats;
};




# 1 "../../gcc/mem-stats.h" 1
# 25 "../../gcc/mem-stats.h"
template<typename Key, typename Value,
  typename Traits = simple_hashmap_traits<default_hash_traits<Key>,
       Value> >
class hash_map;





struct mem_location
{

  inline
  mem_location () {}


  inline
  mem_location (mem_alloc_origin origin, bool ggc,
  const char *filename = 
# 43 "../../gcc/mem-stats.h" 3 4
                        __null
# 43 "../../gcc/mem-stats.h"
                            , int line = 0,
  const char *function = 
# 44 "../../gcc/mem-stats.h" 3 4
                        __null
# 44 "../../gcc/mem-stats.h"
                            ):
    m_filename (filename), m_function (function), m_line (line), m_origin
    (origin), m_ggc (ggc) {}


  inline
  mem_location (mem_location &other): m_filename (other.m_filename),
    m_function (other.m_function), m_line (other.m_line),
    m_origin (other.m_origin), m_ggc (other.m_ggc) {}





  hashval_t
  hash ()
  {
    inchash::hash hash;

    hash.add_ptr (m_filename);
    hash.add_ptr (m_function);
    hash.add_int (m_line);

    return hash.end ();
  }


  int
  equal (mem_location &other)
  {
    return m_filename == other.m_filename && m_function == other.m_function
      && m_line == other.m_line;
  }


  inline const char *
  get_trimmed_filename ()
  {
    const char *s1 = m_filename;
    const char *s2;

    while ((s2 = strstr (s1, "gcc/")))
      s1 = s2 + 4;

    return s1;
  }

  inline char *
  to_string ()
  {
    unsigned l = strlen (get_trimmed_filename ()) + strlen (m_function)
      + 30;

    char *s = ((char *) xmalloc (sizeof (char) * (l)));
    sprintf (s, "%s:%i (%s)", get_trimmed_filename (),
      m_line, m_function);

    s[((48) < (l - 1) ? (48) : (l - 1))] = '\0';

    return s;
  }


  static const char *
  get_origin_name (mem_alloc_origin origin)
  {
    return mem_alloc_origin_names[(unsigned) origin];
  }


  const char *m_filename;

  const char *m_function;

  int m_line;

  mem_alloc_origin m_origin;

  bool m_ggc;
};


struct mem_usage
{

  mem_usage (): m_allocated (0), m_times (0), m_peak (0), m_instances (1) {}


  mem_usage (size_t allocated, size_t times, size_t peak, size_t instances = 0):
    m_allocated (allocated), m_times (times), m_peak (peak),
    m_instances (instances) {}


  inline void
  register_overhead (size_t size)
  {
    m_allocated += size;
    m_times++;

    if (m_peak < m_allocated)
      m_peak = m_allocated;
  }


  inline void
  release_overhead (size_t size)
  {
    ((void)(!(size <= m_allocated) ? fancy_abort ("../../gcc/mem-stats.h", 151, __FUNCTION__), 0 : 0));

    m_allocated -= size;
  }


  mem_usage
  operator+ (const mem_usage &second)
  {
    return mem_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_instances + second.m_instances);
  }


  inline bool
  operator== (const mem_usage &second) const
  {
    return (m_allocated == second.m_allocated
     && m_peak == second.m_peak
     && m_allocated == second.m_allocated);
  }


  inline bool
  operator< (const mem_usage &second) const
  {
    if (*this == second)
      return false;

    return (m_allocated == second.m_allocated ?
     (m_peak == second.m_peak ? m_times < second.m_times
      : m_peak < second.m_peak) : m_allocated < second.m_allocated);
  }


  static int
  compare (const void *first, const void *second)
  {
    typedef std::pair<mem_location *, mem_usage *> mem_pair_t;

    const mem_pair_t f = *(const mem_pair_t *)first;
    const mem_pair_t s = *(const mem_pair_t *)second;

    if (*f.second == *s.second)
      return 0;

    return *f.second < *s.second ? 1 : -1;
  }


  inline void
  dump (mem_location *loc, mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 208 "../../gcc/mem-stats.h" 3 4
            stderr
# 208 "../../gcc/mem-stats.h"
                  , "%-48s %10" 
# 208 "../../gcc/mem-stats.h" 3 4
                                "l" "u" 
# 208 "../../gcc/mem-stats.h"
                                       ":%5.1f%%"
      "%10" 
# 209 "../../gcc/mem-stats.h" 3 4
           "l" "u" 
# 209 "../../gcc/mem-stats.h"
                  "%10" 
# 209 "../../gcc/mem-stats.h" 3 4
                        "l" "u" 
# 209 "../../gcc/mem-stats.h"
                               ":%5.1f%%%10s\n",
      location_string, (uint64_t)m_allocated,
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)m_peak, (uint64_t)m_times,
      get_percent (m_times, total.m_times), loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  inline void
  dump_footer () const
  {
    print_dash_line ();
    fprintf (
# 223 "../../gcc/mem-stats.h" 3 4
            stderr
# 223 "../../gcc/mem-stats.h"
                  , "%s%54" 
# 223 "../../gcc/mem-stats.h" 3 4
                            "l" "u" 
# 223 "../../gcc/mem-stats.h"
                                   "%27" 
# 223 "../../gcc/mem-stats.h" 3 4
                                         "l" "u" 
# 223 "../../gcc/mem-stats.h"
                                                "\n", "Total",
      (uint64_t)m_allocated, (uint64_t)m_times);
    print_dash_line ();
  }


  static inline float
  get_percent (size_t nominator, size_t denominator)
  {
    return denominator == 0 ? 0.0f : nominator * 100.0 / denominator;
  }


  static inline void
  print_dash_line (size_t count = 140)
  {
    while (count--)
      fputc ('-', 
# 240 "../../gcc/mem-stats.h" 3 4
                 stderr
# 240 "../../gcc/mem-stats.h"
                       );
    fputc ('\n', 
# 241 "../../gcc/mem-stats.h" 3 4
                stderr
# 241 "../../gcc/mem-stats.h"
                      );
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 248 "../../gcc/mem-stats.h" 3 4
            stderr
# 248 "../../gcc/mem-stats.h"
                  , "%-48s %11s%16s%10s%17s\n", name, "Leak", "Peak",
      "Times", "Type");
    print_dash_line ();
  }


  size_t m_allocated;

  size_t m_times;

  size_t m_peak;

  size_t m_instances;
};



template <class T>
struct mem_usage_pair
{
  mem_usage_pair (T *usage_, size_t allocated_): usage (usage_),
  allocated (allocated_) {}

  T *usage;
  size_t allocated;
};


template <class T>
class mem_alloc_description
{
public:
  struct mem_location_hash : nofree_ptr_hash <mem_location>
  {
    static hashval_t
    hash (value_type l)
    {
 inchash::hash hstate;

 hstate.add_ptr ((const void *)l->m_filename);
 hstate.add_ptr (l->m_function);
 hstate.add_int (l->m_line);

 return hstate.end ();
    }

    static bool
    equal (value_type l1, value_type l2)
    {
      return l1->m_filename == l2->m_filename
 && l1->m_function == l2->m_function
 && l1->m_line == l2->m_line;
    }
  };


  typedef hash_map <mem_location_hash, T *> mem_map_t;
  typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;
  typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;
  typedef std::pair <mem_location *, T *> mem_list_t;


  mem_alloc_description ();


  ~mem_alloc_description ();


  bool
  contains_descriptor_for_instance (const void *ptr);


  T *
  get_descriptor_for_instance (const void *ptr);



  T *
  register_descriptor (const void *ptr, mem_location *location);





  T *
  register_descriptor (const void *ptr, mem_alloc_origin origin,
     bool ggc, const char *name, int line,
     const char *function);



  T *
  register_instance_overhead (size_t size, const void *ptr);




  void
  register_object_overhead (T *usage, size_t size, const void *ptr);



  void
  release_instance_overhead (void *ptr, size_t size,
      bool remove_from_map = false);


  void
  release_object_overhead (void *ptr);


  T
  get_sum (mem_alloc_origin origin);





  mem_list_t *
  get_list (mem_alloc_origin origin, unsigned *length,
     int (*cmp) (const void *first, const void *second) = 
# 368 "../../gcc/mem-stats.h" 3 4
                                                         __null
# 368 "../../gcc/mem-stats.h"
                                                             );



  void dump (mem_alloc_origin origin,
      int (*cmp) (const void *first, const void *second) = 
# 373 "../../gcc/mem-stats.h" 3 4
                                                          __null
# 373 "../../gcc/mem-stats.h"
                                                              );


  reverse_object_map_t *m_reverse_object_map;

private:


  T *register_overhead (size_t size, mem_alloc_origin origin, const char *name,
   int line, const char *function, const void *ptr);


  mem_location m_location;


  mem_map_t *m_map;


  reverse_mem_map_t *m_reverse_map;
};




template <class T>
inline bool
mem_alloc_description<T>::contains_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr);
}



template <class T>
inline T*
mem_alloc_description<T>::get_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr) ? (*m_reverse_map->get (ptr)).usage : 
# 410 "../../gcc/mem-stats.h" 3 4
                                                                       __null
# 410 "../../gcc/mem-stats.h"
                                                                           ;
}




template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_location *location)
{
  T *usage = 
# 421 "../../gcc/mem-stats.h" 3 4
            __null
# 421 "../../gcc/mem-stats.h"
                ;

  T **slot = m_map->get (location);
  if (slot)
    {
      delete location;
      usage = *slot;
      usage->m_instances++;
    }
  else
    {
      usage = new T ();
      m_map->put (location, usage);
    }

  if (!m_reverse_map->get (ptr))
    m_reverse_map->put (ptr, mem_usage_pair<T> (usage, 0));

  return usage;
}






template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_alloc_origin origin,
            bool ggc,
            const char *filename,
            int line,
            const char *function)
{
  mem_location *l = new mem_location (origin, ggc, filename, line, function);
  return register_descriptor (ptr, l);
}




template <class T>
inline T*
mem_alloc_description<T>::register_instance_overhead (size_t size,
            const void *ptr)
{
  mem_usage_pair <T> *slot = m_reverse_map->get (ptr);
  if (!slot)
    {

      return 
# 472 "../../gcc/mem-stats.h" 3 4
            __null
# 472 "../../gcc/mem-stats.h"
                ;
    }

  T *usage = (*slot).usage;
  usage->register_overhead (size);

  return usage;
}





template <class T>
void
mem_alloc_description<T>::register_object_overhead (T *usage, size_t size,
          const void *ptr)
{


  m_reverse_object_map->put (ptr, std::pair<T *, size_t> (usage, size));
}




template <class T>
inline T*
mem_alloc_description<T>::register_overhead (size_t size,
          mem_alloc_origin origin,
          const char *filename,
          int line,
          const char *function,
          const void *ptr)
{
  T *usage = register_descriptor (ptr, origin, filename, line, function);
  usage->register_overhead (size);

  return usage;
}



template <class T>
inline void
mem_alloc_description<T>::release_instance_overhead (void *ptr, size_t size,
           bool remove_from_map)
{
  mem_usage_pair<T> *slot = m_reverse_map->get (ptr);

  if (!slot)
    {

      return;
    }

  mem_usage_pair<T> usage_pair = *slot;
  usage_pair.usage->release_overhead (size);

  if (remove_from_map)
    m_reverse_map->remove (ptr);
}



template <class T>
inline void
mem_alloc_description<T>::release_object_overhead (void *ptr)
{
  std::pair <T *, size_t> *entry = m_reverse_object_map->get (ptr);
  if (entry)
    {
      entry->first->release_overhead (entry->second);
      m_reverse_object_map->remove (ptr);
    }
}



template <class T>
inline
mem_alloc_description<T>::mem_alloc_description ()
{
  m_map = new mem_map_t (13, false, false);
  m_reverse_map = new reverse_mem_map_t (13, false, false);
  m_reverse_object_map = new reverse_object_map_t (13, false, false);
}



template <class T>
inline
mem_alloc_description<T>::~mem_alloc_description ()
{
  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    {
      delete (*it).first;
      delete (*it).second;
    }

  delete m_map;
  delete m_reverse_map;
  delete m_reverse_object_map;
}






template <class T>
inline
typename mem_alloc_description<T>::mem_list_t *
mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length,
   int (*cmp) (const void *first, const void *second))
{


  size_t element_size = sizeof (mem_list_t);
  mem_list_t *list = ((mem_list_t *) xcalloc ((m_map->elements ()), sizeof (mem_list_t)));
  unsigned i = 0;

  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    if ((*it).first->m_origin == origin)
      list[i++] = std::pair<mem_location*, T*> (*it);

  qsort_chk (list, i, element_size, cmp == 
# 600 "../../gcc/mem-stats.h" 3 4
 __null 
# 600 "../../gcc/mem-stats.h"
 ? T::compare : cmp);
  *length = i;

  return list;
}



template <class T>
inline T
mem_alloc_description<T>::get_sum (mem_alloc_origin origin)
{
  unsigned length;
  mem_list_t *list = get_list (origin, &length);
  T sum;

  for (unsigned i = 0; i < length; i++)
    sum = sum + *list[i].second;

  free ((void*) (list));

  return sum;
}




template <class T>
inline void
mem_alloc_description<T>::dump (mem_alloc_origin origin,
    int (*cmp) (const void *first,
         const void *second))
{
  unsigned length;

  fprintf (
# 635 "../../gcc/mem-stats.h" 3 4
          stderr
# 635 "../../gcc/mem-stats.h"
                , "\n");

  mem_list_t *list = get_list (origin, &length, cmp);
  T total = get_sum (origin);

  T::dump_header (mem_location::get_origin_name (origin));
  for (int i = length - 1; i >= 0; i--)
    list[i].second->dump (list[i].first, total);

  total.dump_footer ();

  free ((void*) (list));

  fprintf (
# 648 "../../gcc/mem-stats.h" 3 4
          stderr
# 648 "../../gcc/mem-stats.h"
                , "\n");
}
# 562 "../../gcc/hash-table.h" 2
# 1 "../../gcc/hash-map.h" 1
# 24 "../../gcc/hash-map.h"
template<typename KeyId, typename Value,
  typename Traits>
class hash_map
{
  typedef typename Traits::key_type Key;
  struct hash_entry
  {
    Key m_key;
    Value m_value;

    typedef hash_entry value_type;
    typedef Key compare_type;

    static hashval_t hash (const hash_entry &e)
      {
        return Traits::hash (e.m_key);
      }

    static bool equal (const hash_entry &a, const Key &b)
        {
   return Traits::equal_keys (a.m_key, b);
        }

    static void remove (hash_entry &e) { Traits::remove (e); }

    static void mark_deleted (hash_entry &e) { Traits::mark_deleted (e); }

    static bool is_deleted (const hash_entry &e)
      {
        return Traits::is_deleted (e);
      }

    static void mark_empty (hash_entry &e) { Traits::mark_empty (e); }
    static bool is_empty (const hash_entry &e) { return Traits::is_empty (e); }

    static void ggc_mx (hash_entry &e)
      {
 gt_ggc_mx (e.m_key);
 gt_ggc_mx (e.m_value);
      }

    static void ggc_maybe_mx (hash_entry &e)
      {
 if (Traits::maybe_mx)
   ggc_mx (e);
      }

    static void pch_nx (hash_entry &e)
      {
 gt_pch_nx (e.m_key);
 gt_pch_nx (e.m_value);
      }

    static void pch_nx (hash_entry &e, gt_pointer_operator op, void *c)
      {
 pch_nx_helper (e.m_key, op, c);
 pch_nx_helper (e.m_value, op, c);
      }

    static int keep_cache_entry (hash_entry &e)
      {
 return ggc_marked_p (e.m_key);
      }

  private:
    template<typename T>
    static void
      pch_nx_helper (T &x, gt_pointer_operator op, void *cookie)
 {
   gt_pch_nx (&x, op, cookie);
 }

    static void
      pch_nx_helper (int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (unsigned int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (bool, gt_pointer_operator, void *)
 {
 }

    template<typename T>
      static void
      pch_nx_helper (T *&x, gt_pointer_operator op, void *cookie)
 {
   op (&x, cookie);
 }
  };

public:
  explicit hash_map (size_t n = 13, bool ggc = false,
       bool gather_mem_stats = 0
       )
    : m_table (n, ggc, gather_mem_stats, HASH_MAP_ORIGIN ) {}

  explicit hash_map (const hash_map &h, bool ggc = false,
       bool gather_mem_stats = 0
       )
    : m_table (h.m_table, ggc, gather_mem_stats,
        HASH_MAP_ORIGIN ) {}


  static hash_map *create_ggc (size_t size,
          bool gather_mem_stats = 0
          )
    {
      hash_map *map = ggc_alloc<hash_map> ();
      new (map) hash_map (size, true, gather_mem_stats );
      return map;
    }





  bool put (const Key &k, const Value &v)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool existed = !hash_entry::is_empty (*e);
      if (!existed)
 e->m_key = k;

      e->m_value = v;
      return existed;
    }



  Value *get (const Key &k)
    {
      hash_entry &e = m_table.find_with_hash (k, Traits::hash (k));
      return Traits::is_empty (e) ? 
# 162 "../../gcc/hash-map.h" 3 4
                                   __null 
# 162 "../../gcc/hash-map.h"
                                        : &e.m_value;
    }





  Value &get_or_insert (const Key &k, bool *existed = 
# 169 "../../gcc/hash-map.h" 3 4
                                                     __null
# 169 "../../gcc/hash-map.h"
                                                         )
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = Traits::is_empty (*e);
      if (ins)
 e->m_key = k;

      if (existed != 
# 177 "../../gcc/hash-map.h" 3 4
                    __null
# 177 "../../gcc/hash-map.h"
                        )
 *existed = !ins;

      return e->m_value;
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       const Value &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f ((*iter).m_key, (*iter).m_value, a);
    }

  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       Value *, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 if (!f ((*iter).m_key, &(*iter).m_value, a))
   break;
    }

  size_t elements () const { return m_table.elements (); }

  void empty () { m_table.empty(); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<hash_entry>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
    {
      ++m_iter;
      return *this;
    }

    std::pair<Key, Value> operator* ()
    {
      hash_entry &e = *m_iter;
      return std::pair<Key, Value> (e.m_key, e.m_value);
    }

    bool
    operator != (const iterator &other) const
    {
      return m_iter != other.m_iter;
    }

  private:
    typename hash_table<hash_entry>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }

private:

  template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void gt_cleare_cache (hash_map<T, U, V> *);

  hash_table<hash_entry> m_table;
};



template<typename K, typename V, typename H>
static inline void
gt_ggc_mx (hash_map<K, V, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_cleare_cache (hash_map<K, V, H> *h)
{
  if (h)
    gt_cleare_cache (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}
# 563 "../../gcc/hash-table.h" 2

extern mem_alloc_description<mem_usage> hash_table_usage;


extern void dump_hash_table_loc_statistics (void);

template<typename Descriptor, template<typename Type> class Allocator>
hash_table<Descriptor, Allocator>::hash_table (size_t size, bool ggc, bool
            gather_mem_stats,
            mem_alloc_origin origin
            ) :
  m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0),
  m_ggc (ggc), m_gather_mem_stats (gather_mem_stats)
{
  unsigned int size_prime_index;

  size_prime_index = hash_table_higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  if (m_gather_mem_stats)
    hash_table_usage.register_descriptor (this, origin, ggc
       , 0,0,0);

  m_entries = alloc_entries (size );
  m_size = size;
  m_size_prime_index = size_prime_index;
}

template<typename Descriptor, template<typename Type> class Allocator>
hash_table<Descriptor, Allocator>::hash_table (const hash_table &h, bool ggc,
            bool gather_mem_stats,
            mem_alloc_origin origin
            ) :
  m_n_elements (h.m_n_elements), m_n_deleted (h.m_n_deleted),
  m_searches (0), m_collisions (0), m_ggc (ggc),
  m_gather_mem_stats (gather_mem_stats)
{
  size_t size = h.m_size;

  if (m_gather_mem_stats)
    hash_table_usage.register_descriptor (this, origin, ggc
       , 0,0,0);

  value_type *nentries = alloc_entries (size );
  for (size_t i = 0; i < size; ++i)
    {
      value_type &entry = h.m_entries[i];
      if (is_deleted (entry))
 mark_deleted (nentries[i]);
      else if (!is_empty (entry))
 nentries[i] = entry;
    }
  m_entries = nentries;
  m_size = size;
  m_size_prime_index = h.m_size_prime_index;
}

template<typename Descriptor, template<typename Type> class Allocator>
hash_table<Descriptor, Allocator>::~hash_table ()
{
  for (size_t i = m_size - 1; i < m_size; i--)
    if (!is_empty (m_entries[i]) && !is_deleted (m_entries[i]))
      Descriptor::remove (m_entries[i]);

  if (!m_ggc)
    Allocator <value_type> ::data_free (m_entries);
  else
    ggc_free (m_entries);

  if (m_gather_mem_stats)
    hash_table_usage.release_instance_overhead (this,
      sizeof (value_type) * m_size,
      true);
}



template<typename Descriptor, template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Allocator>::value_type *
hash_table<Descriptor, Allocator>::alloc_entries (size_t n ) const
{
  value_type *nentries;

  if (m_gather_mem_stats)
    hash_table_usage.register_instance_overhead (sizeof (value_type) * n, this);

  if (!m_ggc)
    nentries = Allocator <value_type> ::data_alloc (n);
  else
    nentries = ::ggc_cleared_vec_alloc<value_type> (n );

  ((void)(!(nentries != 
# 654 "../../gcc/hash-table.h" 3 4
 __null
# 654 "../../gcc/hash-table.h"
 ) ? fancy_abort ("../../gcc/hash-table.h", 654, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < n; i++)
    mark_empty (nentries[i]);

  return nentries;
}
# 668 "../../gcc/hash-table.h"
template<typename Descriptor, template<typename Type> class Allocator>
typename hash_table<Descriptor, Allocator>::value_type *
hash_table<Descriptor, Allocator>::find_empty_slot_for_expand (hashval_t hash)
{
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  size_t size = m_size;
  value_type *slot = m_entries + index;
  hashval_t hash2;

  if (is_empty (*slot))
    return slot;
  ((void)(!(!is_deleted (*slot)) ? fancy_abort ("../../gcc/hash-table.h", 679, __FUNCTION__), 0 : 0));

  hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      index += hash2;
      if (index >= size)
        index -= size;

      slot = m_entries + index;
      if (is_empty (*slot))
        return slot;
      ((void)(!(!is_deleted (*slot)) ? fancy_abort ("../../gcc/hash-table.h", 691, __FUNCTION__), 0 : 0));
    }
}



template<typename Descriptor, template<typename Type> class Allocator>
inline bool
hash_table<Descriptor, Allocator>::too_empty_p (unsigned int elts)
{
  return elts * 8 < m_size && m_size > 32;
}
# 711 "../../gcc/hash-table.h"
template<typename Descriptor, template<typename Type> class Allocator>
void
hash_table<Descriptor, Allocator>::expand ()
{
  value_type *oentries = m_entries;
  unsigned int oindex = m_size_prime_index;
  size_t osize = size ();
  value_type *olimit = oentries + osize;
  size_t elts = elements ();



  unsigned int nindex;
  size_t nsize;
  if (elts * 2 > osize || too_empty_p (elts))
    {
      nindex = hash_table_higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }

  value_type *nentries = alloc_entries (nsize);

  if (m_gather_mem_stats)
    hash_table_usage.release_instance_overhead (this, sizeof (value_type)
          * osize);

  m_entries = nentries;
  m_size = nsize;
  m_size_prime_index = nindex;
  m_n_elements -= m_n_deleted;
  m_n_deleted = 0;

  value_type *p = oentries;
  do
    {
      value_type &x = *p;

      if (!is_empty (x) && !is_deleted (x))
        {
          value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));

          *q = x;
        }

      p++;
    }
  while (p < olimit);

  if (!m_ggc)
    Allocator <value_type> ::data_free (oentries);
  else
    ggc_free (oentries);
}



template<typename Descriptor, template<typename Type> class Allocator>
void
hash_table<Descriptor, Allocator>::empty_slow ()
{
  size_t size = m_size;
  size_t nsize = size;
  value_type *entries = m_entries;
  int i;

  for (i = size - 1; i >= 0; i--)
    if (!is_empty (entries[i]) && !is_deleted (entries[i]))
      Descriptor::remove (entries[i]);


  if (size > 1024*1024 / sizeof (value_type))
    nsize = 1024 / sizeof (value_type);
  else if (too_empty_p (m_n_elements))
    nsize = m_n_elements * 2;

  if (nsize != size)
    {
      int nindex = hash_table_higher_prime_index (nsize);
      int nsize = prime_tab[nindex].prime;

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);

      m_entries = alloc_entries (nsize);
      m_size = nsize;
      m_size_prime_index = nindex;
    }
  else
    {

      for ( ; size; ++entries, --size)
 *entries = value_type ();



    }
  m_n_deleted = 0;
  m_n_elements = 0;
}





template<typename Descriptor, template<typename Type> class Allocator>
void
hash_table<Descriptor, Allocator>::clear_slot (value_type *slot)
{
  ((void)(!(!(slot < m_entries || slot >= m_entries + size () || is_empty (*slot) || is_deleted (*slot))) ? fancy_abort (
                                                     "../../gcc/hash-table.h"
# 826 "../../gcc/hash-table.h"
  ,
                                                     827
# 826 "../../gcc/hash-table.h"
  , __FUNCTION__), 0 : 0))
                                                      ;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, template<typename Type> class Allocator>
typename hash_table<Descriptor, Allocator>::value_type &
hash_table<Descriptor, Allocator>
::find_with_hash (const compare_type &comparable, hashval_t hash)
{
  m_searches++;
  size_t size = m_size;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);

  value_type *entry = &m_entries[index];
  if (is_empty (*entry)
      || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
    return *entry;

  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
        index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry)
          || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
        return *entry;
    }
}
# 876 "../../gcc/hash-table.h"
template<typename Descriptor, template<typename Type> class Allocator>
typename hash_table<Descriptor, Allocator>::value_type *
hash_table<Descriptor, Allocator>
::find_slot_with_hash (const compare_type &comparable, hashval_t hash,
         enum insert_option insert)
{
  if (insert == INSERT && m_size * 3 <= m_n_elements * 4)
    expand ();

  m_searches++;

  value_type *first_deleted_slot = 
# 887 "../../gcc/hash-table.h" 3 4
                                  __null
# 887 "../../gcc/hash-table.h"
                                      ;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  value_type *entry = &m_entries[index];
  size_t size = m_size;
  if (is_empty (*entry))
    goto empty_entry;
  else if (is_deleted (*entry))
    first_deleted_slot = &m_entries[index];
  else if (Descriptor::equal (*entry, comparable))
    return &m_entries[index];

  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
 index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry))
 goto empty_entry;
      else if (is_deleted (*entry))
 {
   if (!first_deleted_slot)
     first_deleted_slot = &m_entries[index];
 }
      else if (Descriptor::equal (*entry, comparable))
 return &m_entries[index];
    }

 empty_entry:
  if (insert == NO_INSERT)
    return 
# 920 "../../gcc/hash-table.h" 3 4
          __null
# 920 "../../gcc/hash-table.h"
              ;

  if (first_deleted_slot)
    {
      m_n_deleted--;
      mark_empty (*first_deleted_slot);
      return first_deleted_slot;
    }

  m_n_elements++;
  return &m_entries[index];
}





template<typename Descriptor, template<typename Type> class Allocator>
void
hash_table<Descriptor, Allocator>
::remove_elt_with_hash (const compare_type &comparable, hashval_t hash)
{
  value_type *slot = find_slot_with_hash (comparable, hash, NO_INSERT);
  if (is_empty (*slot))
    return;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor,
   template<typename Type> class Allocator>
template<typename Argument,
   int (*Callback)
     (typename hash_table<Descriptor, Allocator>::value_type *slot,
      Argument argument)>
void
hash_table<Descriptor, Allocator>::traverse_noresize (Argument argument)
{
  value_type *slot = m_entries;
  value_type *limit = slot + size ();

  do
    {
      value_type &x = *slot;

      if (!is_empty (x) && !is_deleted (x))
        if (! Callback (slot, argument))
          break;
    }
  while (++slot < limit);
}




template <typename Descriptor,
   template <typename Type> class Allocator>
template <typename Argument,
   int (*Callback)
     (typename hash_table<Descriptor, Allocator>::value_type *slot,
      Argument argument)>
void
hash_table<Descriptor, Allocator>::traverse (Argument argument)
{
  if (too_empty_p (elements ()))
    expand ();

  traverse_noresize <Argument, Callback> (argument);
}



template<typename Descriptor, template<typename Type> class Allocator>
void
hash_table<Descriptor, Allocator>::iterator::slide ()
{
  for ( ; m_slot < m_limit; ++m_slot )
    {
      value_type &x = *m_slot;
      if (!is_empty (x) && !is_deleted (x))
        return;
    }
  m_slot = 
# 1009 "../../gcc/hash-table.h" 3 4
          __null
# 1009 "../../gcc/hash-table.h"
              ;
  m_limit = 
# 1010 "../../gcc/hash-table.h" 3 4
           __null
# 1010 "../../gcc/hash-table.h"
               ;
}



template<typename Descriptor, template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Allocator>::iterator &
hash_table<Descriptor, Allocator>::iterator::operator ++ ()
{
  ++m_slot;
  slide ();
  return *this;
}
# 1036 "../../gcc/hash-table.h"
template<typename E>
static inline void
gt_ggc_mx (hash_table<E> *h)
{
  typedef hash_table<E> table;

  if (!((h->m_entries) != 
# 1042 "../../gcc/hash-table.h" 3 4
      __null 
# 1042 "../../gcc/hash-table.h"
      && ((void *) (h->m_entries)) != (void *) 1 && ! ggc_set_mark (h->m_entries)))
    return;

  for (size_t i = 0; i < h->m_size; i++)
    {
      if (table::is_empty (h->m_entries[i])
   || table::is_deleted (h->m_entries[i]))
 continue;



      E::ggc_maybe_mx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
hashtab_entry_note_pointers (void *obj, void *h, gt_pointer_operator op,
        void *cookie)
{
  hash_table<D> *map = static_cast<hash_table<D> *> (h);
  ((void)(!(map->m_entries == obj) ? fancy_abort ("../../gcc/hash-table.h", 1063, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < map->m_size; i++)
    {
      typedef hash_table<D> table;
      if (table::is_empty (map->m_entries[i])
   || table::is_deleted (map->m_entries[i]))
 continue;

      D::pch_nx (map->m_entries[i], op, cookie);
    }
}

template<typename D>
static void
gt_pch_nx (hash_table<D> *h)
{
  bool success
    = gt_pch_note_object (h->m_entries, h, hashtab_entry_note_pointers<D>);
  ((void)(!(success) ? fancy_abort ("../../gcc/hash-table.h", 1081, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < h->m_size; i++)
    {
      if (hash_table<D>::is_empty (h->m_entries[i])
   || hash_table<D>::is_deleted (h->m_entries[i]))
 continue;

      D::pch_nx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
gt_pch_nx (hash_table<D> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_entries, cookie);
}

template<typename H>
inline void
gt_cleare_cache (hash_table<H> *h)
{
  typedef hash_table<H> table;
  if (!h)
    return;

  for (typename table::iterator iter = h->begin (); iter != h->end (); ++iter)
    if (!table::is_empty (*iter) && !table::is_deleted (*iter))
      {
 int res = H::keep_cache_entry (*iter);
 if (res == 0)
   h->clear_slot (&*iter);
 else if (res != -1)
   H::ggc_mx (*iter);
      }
}
# 424 "../../gcc/coretypes.h" 2
# 1 "../../gcc/hash-set.h" 1
# 24 "../../gcc/hash-set.h"
template<typename KeyId, typename Traits = default_hash_traits<KeyId> >
class hash_set
{
public:
  typedef typename Traits::value_type Key;
  explicit hash_set (size_t n = 13, bool ggc = false )
    : m_table (n, ggc, 0, HASH_SET_ORIGIN ) {}



  static hash_set *
    create_ggc (size_t n)
      {
 hash_set *set = ggc_alloc<hash_set> ();
 new (set) hash_set (n, true);
 return set;
      }




  bool add (const Key &k)
    {
      Key *e = m_table.find_slot_with_hash (k, Traits::hash (k), INSERT);
      bool existed = !Traits::is_empty (*e);
      if (!existed)
 *e = k;

      return existed;
    }



  bool contains (const Key &k)
    {
      Key &e = m_table.find_with_hash (k, Traits::hash (k));
      return !Traits::is_empty (e);
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::value_type &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<Traits>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f (*iter, a);
    }



  size_t elements () const { return m_table.elements (); }



  void empty () { m_table.empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<Traits>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
      {
 ++m_iter;
 return *this;
      }

    Key
    operator* ()
      {
 return *m_iter;
      }

    bool
    operator != (const iterator &other) const
      {
 return m_iter != other.m_iter;
      }

  private:
    typename hash_table<Traits>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }


private:

  template<typename T, typename U> friend void gt_ggc_mx (hash_set<T, U> *);
  template<typename T, typename U> friend void gt_pch_nx (hash_set<T, U> *);
      template<typename T, typename U> friend void gt_pch_nx (hash_set<T, U> *, gt_pointer_operator, void *);

  hash_table<Traits> m_table;
};
# 140 "../../gcc/hash-set.h"
template<typename T>
void
debug_helper (hash_set<T> &ref)
{
  for (typename hash_set<T>::iterator it = ref.begin ();
       it != ref.end (); ++it)
    {
      debug_slim (*it);
      fputc ('\n', 
# 148 "../../gcc/hash-set.h" 3 4
                  stderr
# 148 "../../gcc/hash-set.h"
                        );
    }
}
# 170 "../../gcc/hash-set.h"
template<typename K, typename H>
static inline void
gt_ggc_mx (hash_set<K, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}
# 425 "../../gcc/coretypes.h" 2
# 1 "../../gcc/input.h" 1
# 24 "../../gcc/input.h"
# 1 "../../gcc/../libcpp/include/line-map.h" 1
# 50 "../../gcc/../libcpp/include/line-map.h"
typedef unsigned int linenum_type;
# 59 "../../gcc/../libcpp/include/line-map.h"
enum lc_reason
{
  LC_ENTER = 0,
  LC_LEAVE,
  LC_RENAME,
  LC_RENAME_VERBATIM,
  LC_ENTER_MACRO

};
# 281 "../../gcc/../libcpp/include/line-map.h"
typedef unsigned int source_location;




const unsigned int LINE_MAP_MAX_COLUMN_NUMBER = (1U << 12);




const source_location LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES = 0x50000000;




const source_location LINE_MAP_MAX_LOCATION_WITH_COLS = 0x60000000;
# 306 "../../gcc/../libcpp/include/line-map.h"
struct source_range
{
  source_location m_start;
  source_location m_finish;






  static source_range from_location (source_location loc)
  {
    source_range result;
    result.m_start = loc;
    result.m_finish = loc;
    return result;
  }


  static source_range from_locations (source_location start,
          source_location finish)
  {
    source_range result;
    result.m_start = start;
    result.m_finish = finish;
    return result;
  }
};


typedef void *(*line_map_realloc) (void *, size_t);



typedef size_t (*line_map_round_alloc_size_func) (size_t);
# 368 "../../gcc/../libcpp/include/line-map.h"
struct line_map {
  source_location start_location;


  enum lc_reason reason : 8;
};
# 387 "../../gcc/../libcpp/include/line-map.h"
struct line_map_ordinary : public line_map {
  const char *to_file;
  linenum_type to_line;




  int included_from;





  unsigned char sysp;



  unsigned int m_column_and_range_bits : 8;
# 419 "../../gcc/../libcpp/include/line-map.h"
  unsigned int m_range_bits : 8;
};



const source_location MAX_SOURCE_LOCATION = 0x7FFFFFFF;

struct cpp_hashnode;






struct line_map_macro : public line_map {

  struct cpp_hashnode *


    macro;


  unsigned int n_tokens;
# 496 "../../gcc/../libcpp/include/line-map.h"
  source_location * macro_locations;






  source_location expansion;
};
# 533 "../../gcc/../libcpp/include/line-map.h"
bool
linemap_macro_expansion_map_p (const struct line_map *);





inline line_map_ordinary *
linemap_check_ordinary (struct line_map *map)
{
  do { if (! (!linemap_macro_expansion_map_p (map))) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 543, __FUNCTION__); } while (0);
  return (line_map_ordinary *)map;
}





inline const line_map_ordinary *
linemap_check_ordinary (const struct line_map *map)
{
  do { if (! (!linemap_macro_expansion_map_p (map))) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 554, __FUNCTION__); } while (0);
  return (const line_map_ordinary *)map;
}




inline line_map_macro *linemap_check_macro (line_map *map)
{
  do { if (! (linemap_macro_expansion_map_p (map))) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 563, __FUNCTION__); } while (0);
  return (line_map_macro *)map;
}




inline const line_map_macro *
linemap_check_macro (const line_map *map)
{
  do { if (! (linemap_macro_expansion_map_p (map))) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 573, __FUNCTION__); } while (0);
  return (const line_map_macro *)map;
}



inline source_location
MAP_START_LOCATION (const line_map *map)
{
  return map->start_location;
}



inline linenum_type
ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}






inline int
ORDINARY_MAP_INCLUDER_FILE_INDEX (const line_map_ordinary *ord_map)
{
  return ord_map->included_from;
}






inline unsigned char
ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}



inline const char *
ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}



inline cpp_hashnode *
MACRO_MAP_MACRO (const line_map_macro *macro_map)
{
  return macro_map->macro;
}




inline unsigned int
MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)
{
  return macro_map->n_tokens;
}




inline source_location *
MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)
{
  return macro_map->macro_locations;
}



inline source_location
MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)
{
  return macro_map->expansion;
}
# 664 "../../gcc/../libcpp/include/line-map.h"
struct maps_info_ordinary {



  line_map_ordinary * maps;


  unsigned int allocated;



  unsigned int used;

  unsigned int cache;
};

struct maps_info_macro {


  line_map_macro * maps;


  unsigned int allocated;



  unsigned int used;

  unsigned int cache;
};



struct location_adhoc_data {
  source_location locus;
  source_range src_range;
  void * data;
};

struct htab;
# 715 "../../gcc/../libcpp/include/line-map.h"
struct location_adhoc_data_map {
  struct htab * htab;
  source_location curr_loc;
  unsigned int allocated;
  struct location_adhoc_data *data;
};


struct line_maps {

  ~line_maps ();

  maps_info_ordinary info_ordinary;

  maps_info_macro info_macro;


  unsigned int depth;


  bool trace_includes;


  source_location highest_location;


  source_location highest_line;



  unsigned int max_column_hint;



  line_map_realloc reallocator;



  line_map_round_alloc_size_func round_alloc_size;

  struct location_adhoc_data_map location_adhoc_data_map;



  source_location builtin_location;


  bool seen_line_directive;


  unsigned int default_range_bits;

  unsigned int num_optimized_ranges;
  unsigned int num_unoptimized_ranges;
};



inline unsigned int
LINEMAPS_ALLOCATED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int &
LINEMAPS_ALLOCATED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int
LINEMAPS_USED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}



inline unsigned int &
LINEMAPS_USED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}




inline unsigned int
LINEMAPS_CACHE (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.cache;
  else
    return set->info_ordinary.cache;
}



inline unsigned int &
LINEMAPS_CACHE (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.cache;
  else
    return set->info_ordinary.cache;
}


inline line_map *
LINEMAPS_MAP_AT (const line_maps *set, bool map_kind, int index)
{
  if (map_kind)
    return &set->info_macro.maps[index];
  else
    return &set->info_ordinary.maps[index];
}




inline line_map *
LINEMAPS_LAST_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_USED (set, map_kind) - 1);
}




inline line_map *
LINEMAPS_LAST_ALLOCATED_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_ALLOCATED (set, map_kind) - 1);
}



inline line_map_ordinary *
LINEMAPS_ORDINARY_MAPS (const line_maps *set)
{
  return set->info_ordinary.maps;
}


inline line_map_ordinary *
LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 880, __FUNCTION__); } while (0);
  do { if (! ((unsigned int)index < set->info_ordinary.used)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 881, __FUNCTION__); } while (0);
  return &set->info_ordinary.maps[index];
}



inline unsigned int
LINEMAPS_ORDINARY_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, false);
}


inline unsigned int
LINEMAPS_ORDINARY_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, false);
}



inline unsigned int
LINEMAPS_ORDINARY_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, false);
}



inline unsigned int &
LINEMAPS_ORDINARY_CACHE (line_maps *set)
{
  return LINEMAPS_CACHE (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_MAP (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_ALLOCATED_MAP (set, false);
}



inline line_map_macro *
LINEMAPS_MACRO_MAPS (const line_maps *set)
{
  return set->info_macro.maps;
}


inline line_map_macro *
LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 944, __FUNCTION__); } while (0);
  do { if (! ((unsigned int)index < set->info_macro.used)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 945, __FUNCTION__); } while (0);
  return &set->info_macro.maps[index];
}



inline unsigned int
LINEMAPS_MACRO_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, true);
}


inline unsigned int
LINEMAPS_MACRO_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, true);
}



inline unsigned int
LINEMAPS_MACRO_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, true);
}



inline unsigned int &
LINEMAPS_MACRO_CACHE (line_maps *set)
{
  return LINEMAPS_CACHE (set, true);
}


inline line_map_macro *
LINEMAPS_LAST_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_MAP (set, true);
}



inline source_location
LINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)
{
  return LINEMAPS_MACRO_USED (set)
         ? MAP_START_LOCATION (LINEMAPS_LAST_MACRO_MAP (set))
         : MAX_SOURCE_LOCATION;
}


inline line_map_macro *
LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);
}

extern source_location get_combined_adhoc_loc (struct line_maps *,
            source_location,
            source_range,
            void *);
extern void *get_data_from_adhoc_loc (struct line_maps *, source_location);
extern source_location get_location_from_adhoc_loc (struct line_maps *,
          source_location);

extern source_range get_range_from_loc (line_maps *set, source_location loc);



inline bool
IS_ADHOC_LOC (source_location loc)
{
  return (loc & MAX_SOURCE_LOCATION) != loc;
}




bool
pure_location_p (line_maps *set, source_location loc);




extern source_location get_pure_location (line_maps *set,
       source_location loc);



inline source_location
COMBINE_LOCATION_DATA (struct line_maps *set,
         source_location loc,
         source_range src_range,
         void *block)
{
  return get_combined_adhoc_loc (set, loc, src_range, block);
}

extern void rebuild_location_adhoc_htab (struct line_maps *);





extern void linemap_init (struct line_maps *set,
     source_location builtin_location);



extern void linemap_check_files_exited (struct line_maps *);







extern source_location linemap_line_start
(struct line_maps *set, linenum_type to_line, unsigned int max_column_hint);
# 1080 "../../gcc/../libcpp/include/line-map.h"
extern const struct line_map *linemap_add
  (struct line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, linenum_type to_line);







extern const struct line_map *linemap_lookup
  (struct line_maps *, source_location);



bool linemap_tracks_macro_expansion_locs_p (struct line_maps *);


const char* linemap_map_get_macro_name (const line_map_macro *);
# 1109 "../../gcc/../libcpp/include/line-map.h"
int linemap_location_in_system_header_p (struct line_maps *,
      source_location);



bool linemap_location_from_macro_expansion_p (const struct line_maps *,
           source_location);



bool linemap_location_from_macro_definition_p (struct line_maps *,
            source_location);






extern source_location linemap_macro_map_loc_unwind_toward_spelling
  (line_maps *set, const line_map_macro *macro_map, source_location location);




const source_location RESERVED_LOCATION_COUNT = 2;


inline linenum_type
SOURCE_LINE (const line_map_ordinary *ord_map, source_location loc)
{
  return ((loc - ord_map->start_location)
   >> ord_map->m_column_and_range_bits) + ord_map->to_line;
}


inline linenum_type
SOURCE_COLUMN (const line_map_ordinary *ord_map, source_location loc)
{
  return ((loc - ord_map->start_location)
   & ((1 << ord_map->m_column_and_range_bits) - 1)) >> ord_map->m_range_bits;
}



inline source_location
LAST_SOURCE_LINE_LOCATION (const line_map_ordinary *map)
{
  return (((map[1].start_location - 1
     - map->start_location)
    & ~((1 << map->m_column_and_range_bits) - 1))
   + map->start_location);
}




inline linenum_type
LAST_SOURCE_LINE (const line_map_ordinary *map)
{
  return SOURCE_LINE (map, LAST_SOURCE_LINE_LOCATION (map));
}



inline linenum_type
LAST_SOURCE_COLUMN (const line_map_ordinary *map)
{
  return SOURCE_COLUMN (map, LAST_SOURCE_LINE_LOCATION (map));
}




inline line_map_ordinary *
INCLUDED_FROM (struct line_maps *set, const line_map_ordinary *ord_map)
{
  return ((ord_map->included_from == -1)
   ? 
# 1186 "../../gcc/../libcpp/include/line-map.h" 3 4
    __null
   
# 1187 "../../gcc/../libcpp/include/line-map.h"
  : LINEMAPS_ORDINARY_MAP_AT (set, ord_map->included_from));
}



inline bool
MAIN_FILE_P (const line_map_ordinary *ord_map)
{
  return ord_map->included_from < 0;
}





extern source_location
linemap_position_for_column (struct line_maps *, unsigned int);



source_location
linemap_position_for_line_and_column (line_maps *set,
          const line_map_ordinary *,
          linenum_type, unsigned int);




source_location
linemap_position_for_loc_and_offset (struct line_maps *set,
         source_location loc,
         unsigned int offset);


inline const char *
LINEMAP_FILE (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}


inline linenum_type
LINEMAP_LINE (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}





inline unsigned char
LINEMAP_SYSP (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}





int linemap_compare_locations (struct line_maps *set,
          source_location pre,
          source_location post);




inline bool
linemap_location_before_p (struct line_maps *set,
      source_location loc_a,
      source_location loc_b)
{
  return linemap_compare_locations (set, loc_a, loc_b) >= 0;
}

typedef struct
{

  const char *file;


  int line;

  int column;

  void *data;


  bool sysp;
} expanded_location;




struct location_range
{
  source_location m_loc;
# 1295 "../../gcc/../libcpp/include/line-map.h"
  bool m_show_caret_p;
};
# 1309 "../../gcc/../libcpp/include/line-map.h"
template <typename T, int NUM_EMBEDDED>
class semi_embedded_vec
{
 public:
  semi_embedded_vec ();
  ~semi_embedded_vec ();

  unsigned int count () const { return m_num; }
  T& operator[] (int idx);
  const T& operator[] (int idx) const;

  void push (const T&);
  void truncate (int len);

 private:
  int m_num;
  T m_embedded[NUM_EMBEDDED];
  int m_alloc;
  T *m_extra;
};




template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::semi_embedded_vec ()
: m_num (0), m_alloc (0), m_extra (
# 1335 "../../gcc/../libcpp/include/line-map.h" 3 4
                                  __null
# 1335 "../../gcc/../libcpp/include/line-map.h"
                                      )
{
}



template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::~semi_embedded_vec ()
{
  free ((void*) (m_extra));
}



template <typename T, int NUM_EMBEDDED>
T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx)
{
  do { if (! (idx < m_num)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1353, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != 
# 1358 "../../gcc/../libcpp/include/line-map.h" 3 4
     __null
# 1358 "../../gcc/../libcpp/include/line-map.h"
     )) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1358, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
const T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx) const
{
  do { if (! (idx < m_num)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1369, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != 
# 1374 "../../gcc/../libcpp/include/line-map.h" 3 4
     __null
# 1374 "../../gcc/../libcpp/include/line-map.h"
     )) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1374, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::push (const T& value)
{
  int idx = m_num++;
  if (idx < NUM_EMBEDDED)
    m_embedded[idx] = value;
  else
    {

      idx -= NUM_EMBEDDED;
      if (
# 1392 "../../gcc/../libcpp/include/line-map.h" 3 4
         __null 
# 1392 "../../gcc/../libcpp/include/line-map.h"
              == m_extra)
 {
   do { if (! (m_alloc == 0)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1394, __FUNCTION__); } while (0);
   m_alloc = 16;
   m_extra = ((T *) xmalloc (sizeof (T) * (m_alloc)));
 }
      else if (idx >= m_alloc)
 {
   do { if (! (m_alloc > 0)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1400, __FUNCTION__); } while (0);
   m_alloc *= 2;
   m_extra = ((T *) xrealloc ((void *) (m_extra), sizeof (T) * (m_alloc)));
 }
      do { if (! (m_extra)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1404, __FUNCTION__); } while (0);
      do { if (! (idx < m_alloc)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1405, __FUNCTION__); } while (0);
      m_extra[idx] = value;
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::truncate (int len)
{
  do { if (! (len <= m_num)) fancy_abort ("../../gcc/../libcpp/include/line-map.h", 1416, __FUNCTION__); } while (0);
  m_num = len;
}

class fixit_hint;
# 1579 "../../gcc/../libcpp/include/line-map.h"
class rich_location
{
 public:



  rich_location (line_maps *set, source_location loc);


  ~rich_location ();


  source_location get_loc () const { return get_loc (0); }
  source_location get_loc (unsigned int idx) const;

  void
  add_range (source_location loc, bool show_caret_p);

  void
  set_range (line_maps *set, unsigned int idx, source_location loc,
      bool show_caret_p);

  unsigned int get_num_locations () const { return m_ranges.count (); }

  const location_range *get_range (unsigned int idx) const;
  location_range *get_range (unsigned int idx);

  expanded_location get_expanded_location (unsigned int idx);

  void
  override_column (int column);







  void
  add_fixit_insert_before (const char *new_content);


  void
  add_fixit_insert_before (source_location where,
      const char *new_content);



  void
  add_fixit_insert_after (const char *new_content);


  void
  add_fixit_insert_after (source_location where,
     const char *new_content);




  void
  add_fixit_remove ();



  void
  add_fixit_remove (source_location where);


  void
  add_fixit_remove (source_range src_range);




  void
  add_fixit_replace (const char *new_content);



  void
  add_fixit_replace (source_location where,
       const char *new_content);



  void
  add_fixit_replace (source_range src_range,
       const char *new_content);

  unsigned int get_num_fixit_hints () const { return m_fixit_hints.count (); }
  fixit_hint *get_fixit_hint (int idx) const { return m_fixit_hints[idx]; }
  fixit_hint *get_last_fixit_hint () const;
  bool seen_impossible_fixit_p () const { return m_seen_impossible_fixit; }
# 1684 "../../gcc/../libcpp/include/line-map.h"
  void fixits_cannot_be_auto_applied ()
  {
    m_fixits_cannot_be_auto_applied = true;
  }

  bool fixits_can_be_auto_applied_p () const
  {
    return !m_fixits_cannot_be_auto_applied;
  }

private:
  bool reject_impossible_fixit (source_location where);
  void stop_supporting_fixits ();
  void maybe_add_fixit (source_location start,
   source_location next_loc,
   const char *new_content);

public:
  static const int STATICALLY_ALLOCATED_RANGES = 3;

protected:
  line_maps *m_line_table;
  semi_embedded_vec <location_range, STATICALLY_ALLOCATED_RANGES> m_ranges;

  int m_column_override;

  bool m_have_expanded_location;
  expanded_location m_expanded_location;

  static const int MAX_STATIC_FIXIT_HINTS = 2;
  semi_embedded_vec <fixit_hint *, MAX_STATIC_FIXIT_HINTS> m_fixit_hints;

  bool m_seen_impossible_fixit;
  bool m_fixits_cannot_be_auto_applied;
};
# 1734 "../../gcc/../libcpp/include/line-map.h"
class fixit_hint
{
 public:
  fixit_hint (source_location start,
       source_location next_loc,
       const char *new_content);
  ~fixit_hint () { free (m_bytes); }

  bool affects_line_p (const char *file, int line) const;
  source_location get_start_loc () const { return m_start; }
  source_location get_next_loc () const { return m_next_loc; }
  bool maybe_append (source_location start,
       source_location next_loc,
       const char *new_content);

  const char *get_string () const { return m_bytes; }
  size_t get_length () const { return m_len; }

  bool insertion_p () const { return m_start == m_next_loc; }

  bool ends_with_newline_p () const;

 private:




  source_location m_start;
  source_location m_next_loc;
  char *m_bytes;
  size_t m_len;
};





enum location_resolution_kind
{
  LRK_MACRO_EXPANSION_POINT,
  LRK_SPELLING_LOCATION,
  LRK_MACRO_DEFINITION_LOCATION
};
# 1826 "../../gcc/../libcpp/include/line-map.h"
source_location linemap_resolve_location (struct line_maps *,
       source_location loc,
       enum location_resolution_kind lrk,
       const line_map_ordinary **loc_map);
# 1838 "../../gcc/../libcpp/include/line-map.h"
source_location linemap_unwind_toward_expansion (struct line_maps *,
       source_location loc,
       const struct line_map **loc_map);
# 1856 "../../gcc/../libcpp/include/line-map.h"
source_location linemap_unwind_to_first_non_reserved_loc (struct line_maps *,
         source_location loc,
         const struct line_map **map);





expanded_location linemap_expand_location (struct line_maps *,
        const struct line_map *,
        source_location loc);



struct linemap_stats
{
  long num_ordinary_maps_allocated;
  long num_ordinary_maps_used;
  long ordinary_maps_allocated_size;
  long ordinary_maps_used_size;
  long num_expanded_macros;
  long num_macro_tokens;
  long num_macro_maps_used;
  long macro_maps_allocated_size;
  long macro_maps_used_size;
  long macro_maps_locations_size;
  long duplicated_macro_maps_locations_size;
  long adhoc_table_size;
  long adhoc_table_entries_used;
};





bool linemap_get_file_highest_location (struct line_maps * set,
     const char *file_name,
     source_location *loc);



void linemap_get_statistics (struct line_maps *, struct linemap_stats *);



void linemap_dump_location (struct line_maps *, source_location, FILE *);




void linemap_dump (FILE *, struct line_maps *, unsigned, bool);




void line_table_dump (FILE *, struct line_maps *, unsigned int, unsigned int);



enum location_aspect
{
  LOCATION_ASPECT_CARET,
  LOCATION_ASPECT_START,
  LOCATION_ASPECT_FINISH
};







extern expanded_location
linemap_client_expand_location_to_spelling_point (source_location,
        enum location_aspect);
# 25 "../../gcc/input.h" 2

extern struct line_maps *line_table;
extern struct line_maps *saved_line_table;
# 37 "../../gcc/input.h"
extern char builtins_location_check[(((source_location) 1)
         < RESERVED_LOCATION_COUNT) ? 1 : -1];

extern bool is_location_from_builtin_token (source_location);
extern expanded_location expand_location (source_location);
extern const char *location_get_source_line (const char *file_path, int line,
          int *line_size);
extern bool location_missing_trailing_newline (const char *file_path);
extern expanded_location expand_location_to_spelling_point (source_location);
extern source_location expansion_point_location_if_in_system_header (source_location);
extern source_location expansion_point_location (source_location);



typedef source_location location_t;

extern location_t input_location;
# 88 "../../gcc/input.h"
static inline location_t
get_pure_location (location_t loc)
{
  return get_pure_location (line_table, loc);
}



static inline location_t
get_start (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_start;
}



static inline location_t
get_finish (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_finish;
}

extern location_t make_location (location_t caret,
     location_t start, location_t finish);
extern location_t make_location (location_t caret, source_range src_range);

void dump_line_table_statistics (void);

void dump_location_info (FILE *stream);

void diagnostics_file_cache_fini (void);

void diagnostics_file_cache_forcibly_evict_file (const char *file_path);

struct string_concat
{
  string_concat (int num, location_t *locs);

  int m_num;
  location_t * m_locs;
};

struct location_hash : int_hash <location_t, ((source_location) 0)> { };

class string_concat_db
{
 public:
  string_concat_db ();
  void record_string_concatenation (int num, location_t *locs);

  bool get_string_concatenation (location_t loc,
     int *out_num,
     location_t **out_locs);

 private:
  static location_t get_key_loc (location_t loc);




  friend void ::gt_ggc_mx_string_concat_db (void *x_p);
  friend void ::gt_pch_nx_string_concat_db (void *x_p);
  friend void ::gt_pch_p_16string_concat_db (void *this_obj, void *x_p,
          gt_pointer_operator op,
          void *cookie);

  hash_map <location_hash, string_concat *> *m_table;
};
# 426 "../../gcc/coretypes.h" 2
# 1 "../../gcc/is-a.h" 1
# 150 "../../gcc/is-a.h"
template <typename T>
struct is_a_helper
{
  template <typename U>
  static inline bool test (U *p);
  template <typename U>
  static inline T cast (U *p);
};
# 168 "../../gcc/is-a.h"
template <typename T>
template <typename U>
inline T
is_a_helper <T>::cast (U *p)
{
  return reinterpret_cast <T> (p);
}
# 183 "../../gcc/is-a.h"
template <typename T, typename U>
inline bool
is_a (U *p)
{
  return is_a_helper<T>::test (p);
}




template <typename T, typename U>
inline T
as_a (U *p)
{
  ((void)(!(is_a <T> (p)) ? fancy_abort ("../../gcc/is-a.h", 197, __FUNCTION__), 0 : 0));
  return is_a_helper <T>::cast (p);
}




template <typename T, typename U>
inline T
safe_as_a (U *p)
{
  if (p)
    {
      ((void)(!(is_a <T> (p)) ? fancy_abort ("../../gcc/is-a.h", 210, __FUNCTION__), 0 : 0));
      return is_a_helper <T>::cast (p);
    }
  else
    return 
# 214 "../../gcc/is-a.h" 3 4
          __null
# 214 "../../gcc/is-a.h"
              ;
}




template <typename T, typename U>
inline T
dyn_cast (U *p)
{
  if (is_a <T> (p))
    return is_a_helper <T>::cast (p);
  else
    return static_cast <T> (0);
}



template <typename T, typename U>
inline T
safe_dyn_cast (U *p)
{
  return p ? dyn_cast <T> (p) : 0;
}
# 427 "../../gcc/coretypes.h" 2
# 1 "../../gcc/memory-block.h" 1
# 26 "../../gcc/memory-block.h"
class memory_block_pool
{
public:

  static const size_t block_size = 64 * 1024;

  memory_block_pool ();

  static inline void *allocate () __attribute__ ((__malloc__));
  static inline void release (void *);
  void clear_free_list ();

private:

  static memory_block_pool instance;

  struct block_list
  {
    block_list *m_next;
  };


  block_list *m_blocks;
};


inline void *
memory_block_pool::allocate ()
{
  if (instance.m_blocks == 
# 55 "../../gcc/memory-block.h" 3 4
                          __null
# 55 "../../gcc/memory-block.h"
                              )
    return ((char *) xmalloc (sizeof (char) * (block_size)));

  void *result = instance.m_blocks;
  instance.m_blocks = instance.m_blocks->m_next;
  ;
  return result;
}


inline void
memory_block_pool::release (void *uncast_block)
{
  block_list *block = new (uncast_block) block_list;
  block->m_next = instance.m_blocks;
  instance.m_blocks = block;
}

extern void *mempool_obstack_chunk_alloc (size_t) __attribute__ ((__malloc__));
extern void mempool_obstack_chunk_free (void *);
# 428 "../../gcc/coretypes.h" 2
# 1 "../../gcc/dumpfile.h" 1
# 27 "../../gcc/dumpfile.h"
enum tree_dump_index
{
  TDI_none,
  TDI_cgraph,
  TDI_inheritance,
  TDI_clones,
  TDI_original,
  TDI_gimple,
  TDI_nested,

  TDI_lang_all,
  TDI_tree_all,
  TDI_rtl_all,
  TDI_ipa_all,

  TDI_end
};



enum dump_kind
{
  DK_none,
  DK_lang,
  DK_tree,
  DK_rtl,
  DK_ipa
};
# 119 "../../gcc/dumpfile.h"
typedef uint64_t dump_flags_t;


struct dump_file_info
{

  const char *suffix;

  const char *swtch;

  const char *glob;

  const char *pfilename;

  const char *alt_filename;

  FILE *pstream;

  FILE *alt_stream;

  dump_kind dkind;

  dump_flags_t pflags;

  int alt_flags;

  int optgroup_flags;

  int pstate;

  int alt_state;

  int num;


  bool owns_strings;


  bool graph_dump_initialized;
};


extern FILE *dump_begin (int, dump_flags_t *);
extern void dump_end (int, FILE *);
extern int opt_info_switch_p (const char *);
extern const char *dump_flag_name (int);
extern void dump_printf (dump_flags_t, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void dump_printf_loc (dump_flags_t, source_location,
                             const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern void dump_function (int phase, tree fn);
extern void dump_basic_block (int, basic_block, int);
extern void dump_generic_expr_loc (int, source_location, int, tree);
extern void dump_generic_expr (dump_flags_t, dump_flags_t, tree);
extern void dump_gimple_stmt_loc (dump_flags_t, source_location, dump_flags_t,
      gimple *, int);
extern void dump_gimple_stmt (dump_flags_t, dump_flags_t, gimple *, int);
extern void print_combine_total_stats (void);
extern bool enable_rtl_dump_file (void);

template<unsigned int N, typename C>
void dump_dec (int, const poly_int<N, C> &);


extern void dump_node (const_tree, dump_flags_t, FILE *);


extern void dump_combine_total_stats (FILE *);

extern void dump_bb (FILE *, basic_block, int, dump_flags_t);


extern FILE *dump_file;
extern FILE *alt_dump_file;
extern dump_flags_t dump_flags;
extern const char *dump_file_name;


static inline bool
dump_enabled_p (void)
{
  return (dump_file || alt_dump_file);
}

namespace gcc {

class dump_manager
{
public:

  dump_manager ();
  ~dump_manager ();





  unsigned int
  dump_register (const char *suffix, const char *swtch, const char *glob,
   dump_kind dkind, int optgroup_flags, bool take_ownership);



  void
  register_dumps ();


  struct dump_file_info *
  get_dump_file_info (int phase) const;

  struct dump_file_info *
  get_dump_file_info_by_switch (const char *swtch) const;



  char *
  get_dump_file_name (int phase) const;

  char *
  get_dump_file_name (struct dump_file_info *dfi) const;

  int
  dump_switch_p (const char *arg);






  int
  dump_start (int phase, dump_flags_t *flag_ptr);



  void
  dump_finish (int phase);

  FILE *
  dump_begin (int phase, dump_flags_t *flag_ptr);


  int
  dump_initialized_p (int phase) const;


  const char *
  dump_flag_name (int phase) const;

private:

  int
  dump_phase_enabled_p (int phase) const;

  int
  dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob);

  int
  dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename);

  int
  opt_info_enable_passes (int optgroup_flags, dump_flags_t flags,
     const char *filename);

private:


  int m_next_dump;
  struct dump_file_info *m_extra_dump_files;
  size_t m_extra_dump_files_in_use;
  size_t m_extra_dump_files_alloced;


  friend bool ::enable_rtl_dump_file (void);


  friend int ::opt_info_switch_p (const char *arg);

};

}
# 429 "../../gcc/coretypes.h" 2
# 23 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/backend.h" 1
# 28 "../../gcc/backend.h"
# 1 "./tm.h" 1
# 22 "./tm.h"
# 1 "./options.h" 1





# 1 "../../gcc/flag-types.h" 1
# 23 "../../gcc/flag-types.h"
enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG

};

enum debug_info_levels
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};
# 50 "../../gcc/flag-types.h"
enum debug_info_usage
{
  DINFO_USAGE_DFN,
  DINFO_USAGE_DIR_USE,
  DINFO_USAGE_IND_USE,
  DINFO_USAGE_NUM_ENUMS
};
# 83 "../../gcc/flag-types.h"
enum debug_struct_file
{
  DINFO_STRUCT_FILE_NONE,
  DINFO_STRUCT_FILE_BASE,

  DINFO_STRUCT_FILE_SYS,

  DINFO_STRUCT_FILE_ANY
};



enum dwarf_gnat_encodings
{
  DWARF_GNAT_ENCODINGS_ALL = 0,



  DWARF_GNAT_ENCODINGS_GDB = 1,


  DWARF_GNAT_ENCODINGS_MINIMAL = 2

};



enum ivar_visibility
{
  IVAR_VISIBILITY_PRIVATE,
  IVAR_VISIBILITY_PROTECTED,
  IVAR_VISIBILITY_PUBLIC,
  IVAR_VISIBILITY_PACKAGE
};


enum stack_reuse_level
{
  SR_NONE,
  SR_NAMED_VARS,
  SR_ALL
};


enum reorder_blocks_algorithm
{
  REORDER_BLOCKS_ALGORITHM_SIMPLE,
  REORDER_BLOCKS_ALGORITHM_STC
};


enum ira_algorithm
{
  IRA_ALGORITHM_CB,
  IRA_ALGORITHM_PRIORITY
};


enum ira_region
{
  IRA_REGION_ONE,
  IRA_REGION_ALL,
  IRA_REGION_MIXED,



  IRA_REGION_AUTODETECT
};


enum excess_precision
{
  EXCESS_PRECISION_DEFAULT,
  EXCESS_PRECISION_FAST,
  EXCESS_PRECISION_STANDARD
};


enum permitted_flt_eval_methods
{
  PERMITTED_FLT_EVAL_METHODS_DEFAULT,
  PERMITTED_FLT_EVAL_METHODS_TS_18661,
  PERMITTED_FLT_EVAL_METHODS_C11
};
# 176 "../../gcc/flag-types.h"
enum stack_check_type
{

  NO_STACK_CHECK = 0,



  GENERIC_STACK_CHECK,




  STATIC_BUILTIN_STACK_CHECK,



  FULL_BUILTIN_STACK_CHECK
};


enum fp_contract_mode {
  FP_CONTRACT_OFF = 0,
  FP_CONTRACT_ON = 1,
  FP_CONTRACT_FAST = 2
};


enum scalar_storage_order_kind {
  SSO_NATIVE = 0,
  SSO_BIG_ENDIAN,
  SSO_LITTLE_ENDIAN
};


enum vect_cost_model {
  VECT_COST_MODEL_UNLIMITED = 0,
  VECT_COST_MODEL_CHEAP = 1,
  VECT_COST_MODEL_DYNAMIC = 2,
  VECT_COST_MODEL_DEFAULT = 3
};


enum sanitize_code {

  SANITIZE_ADDRESS = 1UL << 0,
  SANITIZE_USER_ADDRESS = 1UL << 1,
  SANITIZE_KERNEL_ADDRESS = 1UL << 2,

  SANITIZE_THREAD = 1UL << 3,

  SANITIZE_LEAK = 1UL << 4,

  SANITIZE_SHIFT_BASE = 1UL << 5,
  SANITIZE_SHIFT_EXPONENT = 1UL << 6,
  SANITIZE_DIVIDE = 1UL << 7,
  SANITIZE_UNREACHABLE = 1UL << 8,
  SANITIZE_VLA = 1UL << 9,
  SANITIZE_NULL = 1UL << 10,
  SANITIZE_RETURN = 1UL << 11,
  SANITIZE_SI_OVERFLOW = 1UL << 12,
  SANITIZE_BOOL = 1UL << 13,
  SANITIZE_ENUM = 1UL << 14,
  SANITIZE_FLOAT_DIVIDE = 1UL << 15,
  SANITIZE_FLOAT_CAST = 1UL << 16,
  SANITIZE_BOUNDS = 1UL << 17,
  SANITIZE_ALIGNMENT = 1UL << 18,
  SANITIZE_NONNULL_ATTRIBUTE = 1UL << 19,
  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 20,
  SANITIZE_OBJECT_SIZE = 1UL << 21,
  SANITIZE_VPTR = 1UL << 22,
  SANITIZE_BOUNDS_STRICT = 1UL << 23,
  SANITIZE_POINTER_OVERFLOW = 1UL << 24,
  SANITIZE_BUILTIN = 1UL << 25,
  SANITIZE_POINTER_COMPARE = 1UL << 26,
  SANITIZE_POINTER_SUBTRACT = 1UL << 27,
  SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,
  SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE
         | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN
         | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM
         | SANITIZE_BOUNDS | SANITIZE_ALIGNMENT
         | SANITIZE_NONNULL_ATTRIBUTE
         | SANITIZE_RETURNS_NONNULL_ATTRIBUTE
         | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR
         | SANITIZE_POINTER_OVERFLOW | SANITIZE_BUILTIN,
  SANITIZE_UNDEFINED_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST
      | SANITIZE_BOUNDS_STRICT
};


enum sanitize_coverage_code {

  SANITIZE_COV_TRACE_PC = 1 << 0,

  SANITIZE_COV_TRACE_CMP = 1 << 1
};


enum vtv_priority {
  VTV_NO_PRIORITY = 0,
  VTV_STANDARD_PRIORITY = 1,
  VTV_PREINIT_PRIORITY = 2
};


enum lto_partition_model {
  LTO_PARTITION_NONE = 0,
  LTO_PARTITION_ONE = 1,
  LTO_PARTITION_BALANCED = 2,
  LTO_PARTITION_1TO1 = 3,
  LTO_PARTITION_MAX = 4
};


enum lto_linker_output {
  LTO_LINKER_OUTPUT_UNKNOWN,
  LTO_LINKER_OUTPUT_REL,
  LTO_LINKER_OUTPUT_DYN,
  LTO_LINKER_OUTPUT_PIE,
  LTO_LINKER_OUTPUT_EXEC
};



enum gfc_init_local_real
{
  GFC_INIT_REAL_OFF = 0,
  GFC_INIT_REAL_ZERO,
  GFC_INIT_REAL_NAN,
  GFC_INIT_REAL_SNAN,
  GFC_INIT_REAL_INF,
  GFC_INIT_REAL_NEG_INF
};



enum gfc_fcoarray
{
  GFC_FCOARRAY_NONE = 0,
  GFC_FCOARRAY_SINGLE,
  GFC_FCOARRAY_LIB
};




enum gfc_convert
{
  GFC_FLAG_CONVERT_NATIVE = 0,
  GFC_FLAG_CONVERT_SWAP,
  GFC_FLAG_CONVERT_BIG,
  GFC_FLAG_CONVERT_LITTLE
};



enum cf_protection_level
{
  CF_NONE = 0,
  CF_BRANCH = 1 << 0,
  CF_RETURN = 1 << 1,
  CF_FULL = CF_BRANCH | CF_RETURN,
  CF_SET = 1 << 2
};
# 7 "./options.h" 2

# 1 "../../gcc/config/i386/i386-opts.h" 1
# 29 "../../gcc/config/i386/i386-opts.h"
enum stringop_alg
{






# 1 "../../gcc/config/i386/stringop.def" 1
# 20 "../../gcc/config/i386/stringop.def"

no_stringop,

libcall,

rep_prefix_1_byte,

rep_prefix_4_byte,

rep_prefix_8_byte,

loop_1_byte,

loop,

unrolled_loop,

vector_loop,
# 38 "../../gcc/config/i386/i386-opts.h" 2
last_alg



};


enum calling_abi
{
  SYSV_ABI = 0,
  MS_ABI = 1
};

enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};

enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_GNU2,
  TLS_DIALECT_SUN
};

enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC,
  CM_MEDIUM_PIC,
  CM_LARGE_PIC
};

enum pmode {
  PMODE_SI,
  PMODE_DI
};

enum ix86_align_data {
  ix86_align_data_type_compat,
  ix86_align_data_type_abi,
  ix86_align_data_type_cacheline
};

enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};

enum ix86_veclibabi {
  ix86_veclibabi_type_none,
  ix86_veclibabi_type_svml,
  ix86_veclibabi_type_acml
};

enum stack_protector_guard {
  SSP_TLS,
  SSP_GLOBAL
};

enum prefer_vector_width {
    PVW_NONE,
    PVW_AVX128,
    PVW_AVX256,
    PVW_AVX512
};






enum indirect_branch {
  indirect_branch_unset = 0,
  indirect_branch_keep,
  indirect_branch_thunk,
  indirect_branch_thunk_inline,
  indirect_branch_thunk_extern
};
# 9 "./options.h" 2




struct gcc_options



{




  long x_ix86_stack_protector_guard_offset;





  addr_space_t x_ix86_stack_protector_guard_reg;





  int x_recip_mask;





  long x_frame_larger_than_size;





  long x_function_entry_patch_area_size;





  long x_function_entry_patch_area_start;





  long x_ix86_isa_flags;





  long x_ix86_isa_flags2;





  long x_ix86_isa_flags2_explicit;





  long x_ix86_isa_flags_explicit;





  long x_larger_than_size;





  bool x_dump_base_name_prefixed;





  bool x_exit_after_options;





  bool x_flag_disable_hsa;





  bool x_flag_dump_all_passed;





  bool x_flag_opts_finished;





  bool x_flag_stack_usage_info;





  bool x_flag_warn_unused_result;





  bool x_in_lto_p;





  bool x_use_gnu_debug_info_extensions;





  bool x_warn_frame_larger_than;





  bool x_warn_larger_than;





  char * x_help_enum_printed;





  char * x_help_printed;





  const char * x_main_input_basename;





  const char * x_main_input_filename;





  enum debug_info_levels x_debug_info_level;





  enum debug_info_type x_write_symbols;





  enum debug_struct_file x_debug_struct_generic[DINFO_USAGE_NUM_ENUMS];





  enum debug_struct_file x_debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS];





  enum dwarf_gnat_encodings x_gnat_encodings;





  enum stack_check_type x_flag_stack_check;





  int * x_param_values;





  int x_flag_complex_method;





  int x_flag_debug_asm;





  int x_flag_dump_rtl_in_asm;





  int x_flag_gen_aux_info;





  int x_flag_generate_lto;





  int x_flag_generate_offload;





  int x_flag_incremental_link;





  int x_flag_print_asm_name;





  int x_flag_shlib;





  int x_ix86_target_flags;





  int x_main_input_baselength;





  int x_optimize;





  int x_optimize_debug;





  int x_optimize_fast;





  int x_optimize_size;





  int x_recip_mask_explicit;





  int x_rtl_dump_and_exit;





  int x_target_flags;





  unsigned int x_flag_sanitize;





  unsigned int x_flag_sanitize_coverage;





  unsigned int x_flag_sanitize_recover;





  unsigned int x_help_columns;





  unsigned int x_initial_max_fld_align;





  void * x_flag_instrument_functions_exclude_files;





  void * x_flag_instrument_functions_exclude_functions;





  int x_help_flag;





  int x_no_sysroot_suffix;





  int x_flag_preprocess_only;





  int x_warn_abi;





  int x_warn_abi_tag;





  int x_warn_address;





  int x_warn_aggregate_return;





  int x_warn_aggressive_loop_optimizations;





  int x_warn_aliasing;





  int x_warn_align_commons;





  int x_warn_aligned_new;





  const char *x_warn_alloc_size_limit;





  int x_warn_alloc_zero;





  int x_warn_alloca;





  int x_warn_alloca_limit;





  int x_warn_ampersand;





  int x_warn_argument_mismatch;





  int x_warn_array_bounds;





  int x_warn_array_temporaries;





  int x_warn_assign_intercept;





  int x_warn_attributes;





  int x_warn_bad_function_cast;





  int x_warn_bool_compare;





  int x_warn_bool_op;





  int x_warn_builtin_declaraion_mismatch;





  int x_cpp_warn_builtin_macro_redefined;





  int x_warn_cxx_compat;





  int x_warn_cxx11_compat;





  int x_warn_cxx14_compat;





  int x_warn_cxx17_compat;





  int x_warn_c_binding_type;





  int x_warn_c90_c99_compat;





  int x_warn_c99_c11_compat;





  int x_warn_cast_align;





  int x_warn_cast_function_type;





  int x_warn_cast_qual;





  int x_warn_catch_value;





  int x_warn_char_subscripts;





  int x_warn_character_truncation;





  int x_warn_chkp;





  int x_warn_class_memaccess;





  int x_warn_clobbered;





  int x_cpp_warn_comment;





  int x_warn_compare_reals;





  int x_warn_conditionally_supported;





  int x_warn_conversion;





  int x_warn_conversion_extra;





  int x_warn_conversion_null;





  int x_warn_coverage_mismatch;





  int x_warn_cpp;





  int x_warn_ctor_dtor_privacy;





  int x_warn_dangling_else;





  int x_cpp_warn_date_time;





  int x_warn_declaration_after_statement;





  int x_warn_delete_incomplete;





  int x_warn_delnonvdtor;





  int x_warn_deprecated;





  int x_warn_deprecated_decl;





  int x_warn_designated_init;





  int x_warn_disabled_optimization;





  int x_warn_discarded_array_qualifiers;





  int x_warn_discarded_qualifiers;





  int x_warn_div_by_zero;





  int x_warn_do_subscript;





  int x_warn_double_promotion;





  int x_warn_duplicate_decl_specifier;





  int x_warn_duplicated_branches;





  int x_warn_duplicated_cond;





  int x_warn_ecpp;





  int x_warn_empty_body;





  int x_cpp_warn_endif_labels;





  int x_warn_enum_compare;





  int x_warnings_are_errors;





  int x_cpp_warn_expansion_to_defined;





  int x_extra_warnings;





  int x_warn_extra_semi;





  int x_flag_fatal_errors;





  int x_warn_float_conversion;





  int x_warn_float_equal;





  int x_warn_format_contains_nul;





  int x_warn_format_extra_args;





  int x_warn_format_nonliteral;





  int x_warn_format_overflow;





  int x_warn_format_security;





  int x_warn_format_signedness;





  int x_warn_format_trunc;





  int x_warn_format_y2k;





  int x_warn_format_zero_length;





  int x_warn_format;





  int x_warn_frame_address;





  int x_warn_free_nonheap_object;





  int x_flag_warn_frontend_loop_interchange;





  int x_warn_function_elimination;





  int x_warn_hsa;





  int x_warn_if_not_aligned;





  int x_warn_ignored_attributes;





  int x_warn_ignored_qualifiers;





  int x_warn_implicit;





  int x_warn_implicit_fallthrough;





  int x_warn_implicit_function_declaration;





  int x_warn_implicit_int;





  int x_warn_implicit_interface;





  int x_warn_implicit_procedure;





  int x_warn_incompatible_pointer_types;





  int x_warn_inh_var_ctor;





  int x_warn_init_self;





  int x_warn_inline;





  int x_warn_int_conversion;





  int x_warn_int_in_bool_context;





  int x_warn_int_to_pointer_cast;





  int x_warn_integer_division;





  int x_warn_intrinsic_shadow;





  int x_warn_intrinsics_std;





  int x_warn_invalid_memory_model;





  int x_warn_invalid_offsetof;





  int x_cpp_warn_invalid_pch;





  int x_warn_jump_misses_init;





  int x_warn_line_truncation;





  int x_cpp_warn_literal_suffix;





  int x_warn_logical_not_paren;





  int x_warn_logical_op;





  int x_warn_long_long;





  int x_warn_lto_type_mismatch;





  int x_warn_main;





  int x_warn_maybe_uninitialized;





  int x_warn_memset_elt_size;





  int x_warn_memset_transposed_args;





  int x_warn_misleading_indentation;





  int x_warn_missing_attributes;





  int x_warn_missing_braces;





  int x_warn_missing_declarations;





  int x_warn_missing_field_initializers;





  int x_cpp_warn_missing_include_dirs;





  int x_warn_missing_parameter_type;





  int x_warn_missing_prototypes;





  int x_cpp_warn_multichar;





  int x_warn_multiple_inheritance;





  int x_warn_multistatement_macros;





  int x_warn_namespaces;





  int x_warn_narrowing;





  int x_warn_nested_externs;





  int x_warn_noexcept;





  int x_warn_noexcept_type;





  int x_warn_nontemplate_friend;





  int x_warn_nonvdtor;





  int x_warn_nonnull;





  int x_warn_nonnull_compare;





  int x_cpp_warn_normalize;





  int x_warn_null_dereference;





  int x_warn_odr_violations;





  int x_warn_old_style_cast;





  int x_warn_old_style_declaration;





  int x_warn_old_style_definition;





  int x_warn_openmp_simd;





  int x_warn_overflow;





  int x_warn_overlength_strings;





  int x_warn_overloaded_virtual;





  int x_warn_override_init;





  int x_warn_override_init_side_effects;





  int x_warn_packed;





  int x_warn_packed_bitfield_compat;





  int x_warn_packed_not_aligned;





  int x_warn_padded;





  int x_warn_parentheses;





  int x_pedantic;





  int x_warn_placement_new;





  int x_warn_pmf2ptr;





  int x_warn_pointer_arith;





  int x_warn_pointer_compare;





  int x_warn_pointer_sign;





  int x_warn_pointer_to_int_cast;





  int x_warn_pragmas;





  int x_warn_property_assign_default;





  int x_warn_protocol;





  int x_warn_psabi;





  int x_warn_real_q_constant;





  int x_warn_realloc_lhs;





  int x_warn_realloc_lhs_all;





  int x_warn_redundant_decls;





  int x_warn_register;





  int x_warn_reorder;





  int x_warn_restrict;





  int x_warn_return_local_addr;





  int x_warn_return_type;





  int x_warn_selector;





  int x_warn_sequence_point;





  int x_warn_shadow;





  int x_warn_shadow_ivar;





  int x_warn_shadow_compatible_local;





  int x_warn_shadow_local;





  int x_warn_shift_count_negative;





  int x_warn_shift_count_overflow;





  int x_warn_shift_negative_value;





  int x_warn_shift_overflow;





  int x_warn_sign_compare;





  int x_warn_sign_conversion;





  int x_warn_sign_promo;





  int x_warn_sized_deallocation;





  int x_warn_sizeof_array_argument;





  int x_warn_sizeof_pointer_div;





  int x_warn_sizeof_pointer_memaccess;





  int x_warn_stack_protect;





  int x_warn_stack_usage;





  int x_warn_strict_aliasing;





  int x_warn_strict_null_sentinel;





  int x_warn_strict_overflow;





  int x_warn_strict_prototypes;





  int x_warn_strict_selector_match;





  int x_warn_stringop_overflow;





  int x_warn_stringop_truncation;





  int x_warn_subobject_linkage;





  int x_warn_suggest_attribute_cold;





  int x_warn_suggest_attribute_const;





  int x_warn_suggest_attribute_format;





  int x_warn_suggest_attribute_malloc;





  int x_warn_suggest_attribute_noreturn;





  int x_warn_suggest_attribute_pure;





  int x_warn_suggest_final_methods;





  int x_warn_suggest_final_types;





  int x_warn_override;





  int x_warn_surprising;





  int x_warn_switch;





  int x_warn_switch_bool;





  int x_warn_switch_default;





  int x_warn_switch_enum;





  int x_warn_switch_unreachable;





  int x_warn_sync_nand;





  int x_warn_synth;





  int x_warn_system_headers;





  int x_warn_tabs;





  int x_warn_target_lifetime;





  int x_warn_tautological_compare;





  int x_warn_templates;





  int x_warn_terminate;





  int x_warn_traditional;





  int x_warn_traditional_conversion;





  int x_warn_trampolines;





  int x_cpp_warn_trigraphs;





  int x_warn_type_limits;





  int x_warn_undeclared_selector;





  int x_cpp_warn_undef;





  int x_warn_undefined_do_loop;





  int x_warn_underflow;





  int x_warn_uninitialized;





  int x_warn_unknown_pragmas;





  int x_warn_unsafe_loop_optimizations;





  int x_warn_unsuffixed_float_constants;





  int x_warn_unused;





  int x_warn_unused_but_set_parameter;





  int x_warn_unused_but_set_variable;





  int x_warn_unused_const_variable;





  int x_warn_unused_dummy_argument;





  int x_warn_unused_function;





  int x_warn_unused_label;





  int x_warn_unused_local_typedefs;





  int x_cpp_warn_unused_macros;





  int x_warn_unused_parameter;





  int x_warn_unused_result;





  int x_warn_unused_value;





  int x_warn_unused_variable;





  int x_warn_use_without_only;





  int x_warn_useless_cast;





  int x_warn_varargs;





  int x_cpp_warn_variadic_macros;





  int x_warn_vector_operation_performance;





  int x_warn_virtual_inheritance;





  int x_warn_virtual_move_assign;





  int x_warn_vla;





  int x_warn_vla_limit;





  int x_warn_volatile_register_var;





  int x_warn_write_strings;





  int x_warn_zero_as_null_pointer_constant;





  int x_warn_zerotrip;





  const char *x_aux_info_file_name;





  const char *x_aux_base_name;





  const char *x_dump_base_name;





  const char *x_dump_dir_name;





  int x_flag_pic;





  int x_flag_pie;





  int x_flag_abi_compat_version;





  int x_flag_abi_version;





  int x_flag_access_control;





  const char *x_ada_specs_parent;





  int x_flag_aggressive_function_elimination;





  int x_flag_aggressive_loop_optimizations;





  int x_flag_align_commons;





  int x_align_functions;





  int x_align_jumps;





  int x_align_labels;





  int x_align_loops;





  int x_aligned_new_threshold;





  int x_flag_all_intrinsics;





  int x_flag_allow_leading_underscore;





  int x_flag_allow_parameterless_variadic_functions;





  void *x_common_deferred_options;





  int x_flag_no_asm;





  int x_flag_associative_math;





  int x_flag_asynchronous_unwind_tables;





  int x_flag_auto_inc_dec;





  int x_flag_auto_profile;





  const char *x_auto_profile_file;





  int x_flag_automatic;





  int x_flag_backslash;





  int x_flag_backtrace;





  int x_flag_blas_matmul_limit;





  int x_flag_bounds_check;





  int x_flag_branch_on_count_reg;





  int x_flag_branch_probabilities;





  int x_flag_branch_target_load_optimize;





  int x_flag_branch_target_load_optimize2;





  int x_flag_btr_bb_exclusive;





  int x_flag_building_libgcc;





  int x_flag_no_builtin;





  int x_flag_c_prototypes;





  int x_flag_caller_saves;





  enum cf_protection_level x_flag_cf_protection;





  int x_flag_check_data_deps;





  int x_flag_check_new;





  int x_flag_check_pointer_bounds;





  int x_flag_checking;





  int x_flag_chkp_incomplete_type;





  int x_flag_chkp_check_read;





  int x_flag_chkp_check_write;





  int x_flag_chkp_first_field_has_own_bounds;





  int x_flag_chkp_flexible_struct_trailing_arrays;





  int x_flag_chkp_instrument_calls;





  int x_flag_chkp_instrument_marked_only;





  int x_flag_chkp_narrow_bounds;





  int x_flag_chkp_narrow_to_innermost_arrray;





  int x_flag_chkp_optimize;





  int x_flag_chkp_store_bounds;





  int x_flag_chkp_zero_dynamic_size_as_infinite;





  int x_flag_chkp_use_fast_string_functions;





  int x_flag_chkp_use_nochk_string_functions;





  int x_flag_chkp_use_static_bounds;





  int x_flag_chkp_use_static_const_bounds;





  int x_flag_chkp_use_wrappers;





  int x_flag_chkp_zero_input_bounds_for_main;





  int x_flag_cilkplus;





  enum gfc_fcoarray x_flag_coarray;





  int x_flag_code_hoisting;





  int x_flag_combine_stack_adjustments;





  int x_flag_no_common;





  int x_flag_compare_debug;





  const char *x_flag_compare_debug_opt;





  int x_flag_compare_elim_after_reload;





  int x_flag_concepts;





  int x_flag_conserve_space;





  int x_flag_conserve_stack;





  int x_max_constexpr_depth;





  int x_constexpr_loop_limit;





  enum gfc_convert x_flag_convert;





  int x_flag_cprop_registers;





  int x_flag_cray_pointer;





  int x_flag_crossjumping;





  int x_flag_cse_follow_jumps;





  int x_flag_cx_fortran_rules;





  int x_flag_cx_limited_range;





  int x_flag_data_sections;





  int x_flag_dce;





  int x_flag_debug_types_section;





  int x_flag_dec;





  int x_flag_dec_intrinsic_ints;





  int x_flag_dec_math;





  int x_flag_dec_static;





  int x_flag_dec_structure;





  int x_flag_declone_ctor_dtor;





  int x_flag_deduce_init_list;





  int x_flag_default_double;





  int x_flag_default_integer;





  int x_flag_default_real_10;





  int x_flag_default_real_16;





  int x_flag_default_real_8;





  int x_flag_defer_pop;





  int x_flag_delayed_branch;





  int x_flag_delete_dead_exceptions;





  int x_flag_delete_null_pointer_checks;





  int x_flag_devirtualize;





  int x_flag_ltrans_devirtualize;





  int x_flag_devirtualize_speculatively;





  int x_flag_diagnostics_show_color;





  int x_flag_diagnostics_generate_patch;





  int x_flag_diagnostics_parseable_fixits;





  int x_flag_diagnostics_show_caret;





  int x_flag_diagnostics_show_option;





  int x_flag_diagnostics_show_template_tree;





  int x_flag_dollar_ok;





  int x_flag_dse;





  int x_flag_dump_ada_spec;





  int x_flag_dump_ada_spec_slim;





  const char *x_flag_dump_final_insns;





  int x_flag_dump_fortran_optimized;





  int x_flag_dump_fortran_original;





  const char *x_flag_dump_go_spec;





  int x_flag_dump_locations;





  int x_flag_dump_noaddr;





  int x_flag_dump_passes;





  int x_flag_dump_unnumbered;





  int x_flag_dump_unnumbered_links;





  int x_flag_dwarf2_cfi_asm;





  int x_flag_early_inlining;





  int x_flag_elide_constructors;





  int x_flag_elide_type;





  int x_flag_debug_only_used_symbols;





  int x_flag_eliminate_unused_debug_types;





  int x_flag_emit_class_debug_always;





  int x_flag_enforce_eh_specs;





  int x_flag_exceptions;





  enum excess_precision x_flag_excess_precision_cmdline;





  int x_flag_expensive_optimizations;





  int x_flag_ext_numeric_literals;





  int x_flag_extern_tls_init;





  int x_flag_external_blas;





  int x_flag_f2c;





  int x_flag_fat_lto_objects;





  int x_flag_finite_math_only;





  int x_flag_fixed_line_length;





  int x_flag_float_store;





  int x_flag_new_for_scope;





  int x_flag_forward_propagate;





  enum fp_contract_mode x_flag_fp_contract_mode;





  int x_flag_fp_int_builtin_inexact;





  int x_flag_free_line_length;





  int x_flag_friend_injection;





  int x_flag_frontend_loop_interchange;





  int x_flag_frontend_optimize;





  int x_flag_no_function_cse;





  int x_flag_function_sections;





  int x_flag_gcse;





  int x_flag_gcse_after_reload;





  int x_flag_gcse_las;





  int x_flag_gcse_lm;





  int x_flag_gcse_sm;





  int x_flag_gimple;





  int x_flag_no_gnu_keywords;





  int x_flag_next_runtime;





  int x_flag_tm;





  int x_flag_gnu_unique;





  int x_flag_gnu89_inline;





  int x_go_check_divide_overflow;





  int x_go_check_divide_zero;





  int x_go_compiling_runtime;





  int x_go_debug_escape_level;





  const char *x_go_debug_escape_hash;





  int x_flag_graphite;





  int x_flag_graphite_identity;





  int x_flag_guess_branch_prob;





  int x_flag_hoist_adjacent_loads;





  int x_flag_no_ident;





  int x_flag_if_conversion;





  int x_flag_if_conversion2;





  int x_flag_implement_inlines;





  int x_flag_implicit_inline_templates;





  int x_flag_implicit_none;





  int x_flag_implicit_templates;





  int x_flag_indirect_inlining;





  int x_flag_inhibit_size_directive;





  int x_flag_init_derived;





  enum gfc_init_local_real x_flag_init_real;





  int x_flag_no_inline;





  int x_flag_inline_atomics;





  int x_flag_inline_functions;





  int x_flag_inline_functions_called_once;





  int x_flag_inline_matmul_limit;





  int x_flag_inline_small_functions;





  int x_flag_instrument_function_entry_exit;





  int x_flag_integer4_kind;





  int x_flag_ipa_bit_cp;





  int x_flag_ipa_cp;





  int x_flag_ipa_cp_clone;





  int x_flag_ipa_icf;





  int x_flag_ipa_icf_functions;





  int x_flag_ipa_icf_variables;





  int x_flag_ipa_profile;





  int x_flag_ipa_pta;





  int x_flag_ipa_pure_const;





  int x_flag_ipa_ra;





  int x_flag_ipa_reference;





  int x_flag_ipa_sra;





  int x_flag_ipa_vrp;





  enum ira_algorithm x_flag_ira_algorithm;





  int x_flag_ira_hoist_pressure;





  int x_flag_ira_loop_pressure;





  enum ira_region x_flag_ira_region;





  int x_flag_ira_share_save_slots;





  int x_flag_ira_share_spill_slots;





  int x_flag_ira_verbose;





  int x_flag_isolate_erroneous_paths_attribute;





  int x_flag_isolate_erroneous_paths_dereference;





  enum ivar_visibility x_default_ivar_visibility;





  int x_flag_ivopts;





  int x_flag_jump_tables;





  int x_flag_keep_gc_roots_live;





  int x_flag_keep_inline_dllexport;





  int x_flag_keep_inline_functions;





  int x_flag_keep_static_consts;





  int x_flag_keep_static_functions;





  int x_flag_lax_vector_conversions;





  int x_flag_leading_underscore;





  int x_flag_lifetime_dse;





  int x_flag_limit_function_alignment;





  enum lto_linker_output x_flag_lto_linker_output;





  int x_flag_live_range_shrinkage;





  int x_flag_local_ivars;





  int x_flag_loop_interchange;





  int x_flag_loop_nest_optimize;





  int x_flag_loop_parallelize_all;





  int x_flag_unroll_jam;





  int x_flag_lra_remat;





  int x_flag_lto_compression_level;





  int x_flag_lto_odr_type_mering;





  enum lto_partition_model x_flag_lto_partition;





  int x_flag_lto_report;





  int x_flag_lto_report_wpa;





  const char *x_flag_lto;





  int x_flag_ltrans;





  const char *x_ltrans_output_list;





  int x_flag_errno_math;





  int x_flag_max_array_constructor;





  int x_flag_max_errors;





  int x_flag_max_stack_var_size;





  int x_flag_max_subrecord_length;





  int x_mem_report;





  int x_mem_report_wpa;





  int x_flag_merge_constants;





  int x_flag_merge_debug_strings;





  int x_flag_module_private;





  int x_flag_modulo_sched;





  int x_flag_modulo_sched_allow_regmoves;





  int x_flag_move_loop_invariants;





  int x_flag_ms_extensions;





  int x_flag_new_inheriting_ctors;





  int x_flag_new_ttp;





  int x_flag_nil_receivers;





  int x_flag_non_call_exceptions;





  int x_flag_no_nonansi_builtin;





  int x_flag_nothrow_opt;





  int x_flag_objc_abi;





  int x_flag_objc_call_cxx_cdtors;





  int x_flag_objc_direct_dispatch;





  int x_flag_objc_exceptions;





  int x_flag_objc_gc;





  int x_flag_objc_nilcheck;





  int x_flag_objc_sjlj_exceptions;





  int x_flag_objc1_only;





  enum offload_abi x_flag_offload_abi;





  int x_flag_omit_frame_pointer;





  int x_flag_openacc;





  const char *x_flag_openacc_dims;





  int x_flag_openmp;





  int x_flag_openmp_simd;





  int x_flag_opt_info;





  int x_flag_optimize_sibling_calls;





  int x_flag_optimize_strlen;





  int x_flag_pack_derived;





  int x_flag_pack_struct;





  int x_flag_partial_inlining;





  int x_flag_pcc_struct_return;





  int x_flag_peel_loops;





  int x_flag_no_peephole;





  int x_flag_peephole2;





  int x_flag_permissive;





  enum permitted_flt_eval_methods x_flag_permitted_flt_eval_methods;





  int x_flag_plan9_extensions;





  int x_flag_plt;





  int x_post_ipa_mem_report;





  int x_pre_ipa_mem_report;





  int x_flag_predictive_commoning;





  int x_flag_prefetch_loop_arrays;





  int x_flag_pretty_templates;





  int x_flag_printf_return_value;





  int x_profile_flag;





  int x_profile_abs_path_flag;





  int x_profile_arc_flag;





  int x_flag_profile_correction;





  const char *x_profile_data_prefix;





  int x_flag_profile_reorder_functions;





  int x_profile_report;





  enum profile_update x_flag_profile_update;





  int x_flag_profile_use;





  int x_flag_profile_values;





  int x_flag_protect_parens;





  int x_flag_range_check;





  int x_flag_real4_kind;





  int x_flag_real8_kind;





  int x_flag_realloc_lhs;





  int x_flag_reciprocal_math;





  int x_flag_record_gcc_switches;





  int x_flag_record_marker;





  int x_flag_recursive;





  int x_flag_ree;





  int x_flag_rename_registers;





  int x_flag_reorder_blocks;





  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;





  int x_flag_reorder_blocks_and_partition;





  int x_flag_reorder_functions;





  int x_flag_repack_arrays;





  int x_flag_replace_objc_classes;





  int x_flag_report_bug;





  int x_go_require_return_statement;





  int x_flag_rerun_cse_after_loop;





  int x_flag_resched_modulo_sched;





  int x_flag_rounding_math;





  int x_flag_rtti;





  int x_flag_sanitize_address_use_after_scope;





  int x_flag_sanitize_undefined_trap_on_error;





  int x_flag_sched_critical_path_heuristic;





  int x_flag_sched_dep_count_heuristic;





  int x_flag_sched_group_heuristic;





  int x_flag_schedule_interblock;





  int x_flag_sched_last_insn_heuristic;





  int x_flag_sched_pressure;





  int x_flag_sched_rank_heuristic;





  int x_flag_schedule_speculative;





  int x_flag_sched_spec_insn_heuristic;





  int x_flag_schedule_speculative_load;





  int x_flag_schedule_speculative_load_dangerous;





  int x_flag_sched_stalled_insns;





  int x_flag_sched_stalled_insns_dep;





  int x_sched_verbose_param;





  int x_flag_sched2_use_superblocks;





  int x_flag_schedule_fusion;





  int x_flag_schedule_insns;





  int x_flag_schedule_insns_after_reload;





  int x_flag_second_underscore;





  int x_flag_section_anchors;





  int x_flag_sel_sched_pipelining;





  int x_flag_sel_sched_pipelining_outer_loops;





  int x_flag_sel_sched_reschedule_pipelined;





  int x_flag_selective_scheduling;





  int x_flag_selective_scheduling2;





  const char *x_flag_self_test;





  int x_flag_semantic_interposition;





  int x_flag_short_enums;





  int x_flag_short_wchar;





  int x_flag_show_column;





  int x_flag_shrink_wrap;





  int x_flag_shrink_wrap_separate;





  int x_flag_sign_zero;





  int x_flag_signaling_nans;





  int x_flag_signed_bitfields;





  int x_flag_signed_char;





  int x_flag_signed_zeros;





  enum vect_cost_model x_flag_simd_cost_model;





  int x_flag_single_precision_constant;





  int x_flag_sized_deallocation;





  int x_flag_split_ivs_in_unroller;





  int x_flag_split_loops;





  int x_flag_split_paths;





  int x_flag_split_stack;





  int x_flag_split_wide_types;





  int x_flag_ssa_backprop;





  int x_flag_ssa_phiopt;





  enum scalar_storage_order_kind x_default_sso;





  int x_flag_stack_arrays;





  int x_flag_stack_clash_protection;





  int x_flag_stack_protect;





  enum stack_reuse_level x_flag_stack_reuse;





  int x_flag_stack_usage;





  int x_flag_detailed_statistics;





  int x_flag_stdarg_opt;





  int x_flag_store_merging;





  int x_flag_strict_aliasing;





  int x_flag_strict_enums;





  int x_flag_strict_volatile_bitfields;





  int x_flag_strong_eval_order;





  int x_flag_sync_libcalls;





  int x_flag_syntax_only;





  int x_template_backtrace_limit;





  int x_flag_test_coverage;





  int x_flag_test_forall_temp;





  int x_flag_thread_jumps;





  int x_flag_threadsafe_statics;





  int x_time_report;





  int x_time_report_details;





  enum tls_model x_flag_tls_default;





  int x_flag_toplevel_reorder;





  int x_flag_tracer;





  int x_flag_trampolines;





  int x_flag_trapping_math;





  int x_flag_trapv;





  int x_flag_tree_bit_ccp;





  int x_flag_tree_builtin_call_dce;





  int x_flag_tree_ccp;





  int x_flag_tree_ch;





  int x_flag_tree_coalesce_vars;





  int x_flag_tree_copy_prop;





  int x_flag_tree_cselim;





  int x_flag_tree_dce;





  int x_flag_tree_dom;





  int x_flag_tree_dse;





  int x_flag_tree_forwprop;





  int x_flag_tree_fre;





  int x_flag_tree_loop_distribute_patterns;





  int x_flag_tree_loop_distribution;





  int x_flag_tree_loop_if_convert;





  int x_flag_tree_loop_im;





  int x_flag_tree_loop_ivcanon;





  int x_flag_tree_loop_optimize;





  int x_flag_tree_loop_vectorize;





  int x_flag_tree_live_range_split;





  int x_flag_tree_parallelize_loops;





  int x_flag_tree_partial_pre;





  int x_flag_tree_phiprop;





  int x_flag_tree_pre;





  int x_flag_tree_pta;





  int x_flag_tree_reassoc;





  int x_flag_tree_scev_cprop;





  int x_flag_tree_sink;





  int x_flag_tree_slp_vectorize;





  int x_flag_tree_slsr;





  int x_flag_tree_sra;





  int x_flag_tree_switch_conversion;





  int x_flag_tree_tail_merge;





  int x_flag_tree_ter;





  int x_flag_tree_vrp;





  int x_flag_unconstrained_commons;





  int x_flag_underscoring;





  int x_flag_unit_at_a_time;





  int x_flag_unroll_all_loops;





  int x_flag_unroll_loops;





  int x_flag_unsafe_math_optimizations;





  int x_flag_unswitch_loops;





  int x_flag_unwind_tables;





  int x_flag_use_cxa_atexit;





  int x_flag_use_cxa_get_exception_ptr;





  int x_flag_use_linker_plugin;





  int x_flag_var_tracking;





  int x_flag_var_tracking_assignments;





  int x_flag_var_tracking_assignments_toggle;





  int x_flag_var_tracking_uninit;





  int x_flag_variable_expansion_in_unroller;





  enum vect_cost_model x_flag_vect_cost_model;





  int x_flag_verbose_asm;





  int x_flag_visibility_ms_compat;





  enum symbol_visibility x_default_visibility;





  int x_flag_value_profile_transformations;





  enum vtv_priority x_flag_vtable_verify;





  int x_flag_vtv_counts;





  int x_flag_vtv_debug;





  int x_flag_weak;





  int x_flag_web;





  int x_flag_whole_program;





  int x_flag_working_directory;





  const char *x_flag_wpa;





  int x_flag_wrapv;





  int x_flag_wrapv_pointer;





  int x_flag_zero_initialized_in_bss;





  int x_flag_zero_link;





  int x_dwarf2out_as_loc_support;





  int x_dwarf2out_as_locview_support;





  int x_debug_column_info;





  int x_dwarf_version;





  int x_flag_gen_declaration;





  int x_debug_generate_pub_sections;





  int x_debug_inline_points;





  int x_debug_internal_reset_location_views;





  int x_dwarf_record_gcc_switches;





  int x_dwarf_split_debug_info;





  int x_debug_nonbind_markers_p;





  int x_dwarf_strict;





  int x_flag_gtoggle;





  int x_debug_variable_location_views;





  const char *x_imultiarch;





  const char *x_plugindir_string;





  enum calling_abi x_ix86_abi;





  enum pmode x_ix86_pmode;





  enum ix86_align_data x_ix86_align_data_type;





  int x_flag_android;





  const char *x_ix86_arch_string;





  enum asm_dialect x_ix86_asm_dialect;





  int x_linux_libc;





  int x_ix86_branch_cost;





  int x_flag_cet;





  int x_flag_cet_switch;





  enum cmodel x_ix86_cmodel;





  int x_flag_dispatch_scheduler;





  int x_ix86_dump_tunes;





  int x_flag_fentry;





  int x_ix86_force_drap;





  int x_flag_force_indirect_call;





  enum fpmath_unit x_ix86_fpmath;





  enum indirect_branch x_ix86_function_return;





  int x_ix86_incoming_stack_boundary_arg;





  int x_ix86_indirect_branch_register;





  enum indirect_branch x_ix86_indirect_branch;





  int x_ix86_section_threshold;





  const char *x_ix86_tune_memcpy_strategy;





  const char *x_ix86_tune_memset_strategy;





  int x_flag_mitigate_rop;





  int x_ix86_tune_no_default;





  int x_flag_nop_mcount;





  enum prefer_vector_width x_prefer_vector_width_type;





  int x_ix86_preferred_stack_boundary_arg;





  const char *x_ix86_recip_name;





  int x_flag_record_mcount;





  int x_ix86_regparm;





  int x_flag_skip_rax_setup;





  int x_ix86_sse2avx;





  const char *x_ix86_stack_protector_guard_offset_str;





  const char *x_ix86_stack_protector_guard_reg_str;





  const char *x_ix86_stack_protector_guard_symbol_str;





  enum stack_protector_guard x_ix86_stack_protector_guard;





  int x_ix86_force_align_arg_pointer;





  enum stringop_alg x_ix86_stringop_alg;





  enum tls_dialect x_ix86_tls_dialect;





  const char *x_ix86_tune_ctrl_string;





  const char *x_ix86_tune_string;





  enum ix86_veclibabi x_ix86_veclibabi_type;





  const char *x_asm_file_name;





  int x_pass_exit_codes;





  int x_flag_pedantic_errors;





  int x_use_pipes;





  const char *x_print_file_name;





  int x_print_multi_directory;





  int x_print_multi_lib;





  int x_print_multi_os_directory;





  int x_print_multiarch;





  const char *x_print_prog_name;





  int x_print_search_dirs;





  int x_print_sysroot;





  int x_print_sysroot_headers_suffix;





  int x_quiet_flag;





  int x_report_times;





  int x_flag_undef;





  int x_verbose_flag;





  int x_version_flag;





  int x_inhibit_warnings;





  const char *x_wrapper_string;



  int x_VAR_malign_functions_;



  int x_VAR_malign_jumps_;



  int x_VAR_malign_loops_;



  int x_VAR_mpc32;



  int x_VAR_mpc64;



  int x_VAR_mpc80;



  int x_VAR_mpcommit;



  bool frontend_set_flag_associative_math;


  bool frontend_set_flag_cx_limited_range;


  bool frontend_set_flag_excess_precision_cmdline;


  bool frontend_set_flag_finite_math_only;


  bool frontend_set_flag_errno_math;


  bool frontend_set_flag_reciprocal_math;


  bool frontend_set_flag_rounding_math;


  bool frontend_set_flag_signaling_nans;


  bool frontend_set_flag_signed_zeros;


  bool frontend_set_flag_trapping_math;


  bool frontend_set_flag_unsafe_math_optimizations;


};
extern struct gcc_options global_options;
extern const struct gcc_options global_options_init;
extern struct gcc_options global_options_set;







struct cl_optimization
{
  int x_align_functions;
  int x_align_jumps;
  int x_align_labels;
  int x_align_loops;
  int x_flag_sched_stalled_insns;
  int x_flag_sched_stalled_insns_dep;
  int x_flag_tree_parallelize_loops;
  enum fp_contract_mode x_flag_fp_contract_mode;
  enum ira_algorithm x_flag_ira_algorithm;
  enum ira_region x_flag_ira_region;
  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;
  enum vect_cost_model x_flag_simd_cost_model;
  enum stack_reuse_level x_flag_stack_reuse;
  enum vect_cost_model x_flag_vect_cost_model;
  unsigned char x_optimize;
  unsigned char x_optimize_size;
  unsigned char x_optimize_debug;
  signed char x_flag_aggressive_loop_optimizations;
  signed char x_flag_associative_math;
  signed char x_flag_asynchronous_unwind_tables;
  signed char x_flag_auto_inc_dec;
  signed char x_flag_branch_on_count_reg;
  signed char x_flag_branch_probabilities;
  signed char x_flag_branch_target_load_optimize;
  signed char x_flag_branch_target_load_optimize2;
  signed char x_flag_btr_bb_exclusive;
  signed char x_flag_caller_saves;
  signed char x_flag_code_hoisting;
  signed char x_flag_combine_stack_adjustments;
  signed char x_flag_compare_elim_after_reload;
  signed char x_flag_conserve_stack;
  signed char x_flag_cprop_registers;
  signed char x_flag_crossjumping;
  signed char x_flag_cse_follow_jumps;
  signed char x_flag_cx_fortran_rules;
  signed char x_flag_cx_limited_range;
  signed char x_flag_dce;
  signed char x_flag_defer_pop;
  signed char x_flag_delayed_branch;
  signed char x_flag_delete_dead_exceptions;
  signed char x_flag_delete_null_pointer_checks;
  signed char x_flag_devirtualize;
  signed char x_flag_devirtualize_speculatively;
  signed char x_flag_dse;
  signed char x_flag_early_inlining;
  signed char x_flag_exceptions;
  signed char x_flag_expensive_optimizations;
  signed char x_flag_finite_math_only;
  signed char x_flag_float_store;
  signed char x_flag_forward_propagate;
  signed char x_flag_fp_int_builtin_inexact;
  signed char x_flag_no_function_cse;
  signed char x_flag_gcse;
  signed char x_flag_gcse_after_reload;
  signed char x_flag_gcse_las;
  signed char x_flag_gcse_lm;
  signed char x_flag_gcse_sm;
  signed char x_flag_graphite;
  signed char x_flag_graphite_identity;
  signed char x_flag_guess_branch_prob;
  signed char x_flag_hoist_adjacent_loads;
  signed char x_flag_if_conversion;
  signed char x_flag_if_conversion2;
  signed char x_flag_indirect_inlining;
  signed char x_flag_no_inline;
  signed char x_flag_inline_atomics;
  signed char x_flag_inline_functions;
  signed char x_flag_inline_functions_called_once;
  signed char x_flag_inline_small_functions;
  signed char x_flag_ipa_bit_cp;
  signed char x_flag_ipa_cp;
  signed char x_flag_ipa_cp_clone;
  signed char x_flag_ipa_icf;
  signed char x_flag_ipa_icf_functions;
  signed char x_flag_ipa_icf_variables;
  signed char x_flag_ipa_profile;
  signed char x_flag_ipa_pta;
  signed char x_flag_ipa_pure_const;
  signed char x_flag_ipa_ra;
  signed char x_flag_ipa_reference;
  signed char x_flag_ipa_sra;
  signed char x_flag_ipa_vrp;
  signed char x_flag_ira_hoist_pressure;
  signed char x_flag_ira_loop_pressure;
  signed char x_flag_ira_share_save_slots;
  signed char x_flag_ira_share_spill_slots;
  signed char x_flag_isolate_erroneous_paths_attribute;
  signed char x_flag_isolate_erroneous_paths_dereference;
  signed char x_flag_ivopts;
  signed char x_flag_jump_tables;
  signed char x_flag_keep_gc_roots_live;
  signed char x_flag_lifetime_dse;
  signed char x_flag_limit_function_alignment;
  signed char x_flag_live_range_shrinkage;
  signed char x_flag_loop_interchange;
  signed char x_flag_loop_nest_optimize;
  signed char x_flag_loop_parallelize_all;
  signed char x_flag_unroll_jam;
  signed char x_flag_lra_remat;
  signed char x_flag_errno_math;
  signed char x_flag_modulo_sched;
  signed char x_flag_modulo_sched_allow_regmoves;
  signed char x_flag_move_loop_invariants;
  signed char x_flag_non_call_exceptions;
  signed char x_flag_nothrow_opt;
  signed char x_flag_omit_frame_pointer;
  signed char x_flag_opt_info;
  signed char x_flag_optimize_sibling_calls;
  signed char x_flag_optimize_strlen;
  signed char x_flag_pack_struct;
  signed char x_flag_partial_inlining;
  signed char x_flag_peel_loops;
  signed char x_flag_no_peephole;
  signed char x_flag_peephole2;
  signed char x_flag_plt;
  signed char x_flag_predictive_commoning;
  signed char x_flag_prefetch_loop_arrays;
  signed char x_flag_printf_return_value;
  signed char x_flag_reciprocal_math;
  signed char x_flag_pcc_struct_return;
  signed char x_flag_rename_registers;
  signed char x_flag_reorder_blocks;
  signed char x_flag_reorder_blocks_and_partition;
  signed char x_flag_reorder_functions;
  signed char x_flag_rerun_cse_after_loop;
  signed char x_flag_resched_modulo_sched;
  signed char x_flag_rounding_math;
  signed char x_flag_rtti;
  signed char x_flag_sched_critical_path_heuristic;
  signed char x_flag_sched_dep_count_heuristic;
  signed char x_flag_sched_group_heuristic;
  signed char x_flag_schedule_interblock;
  signed char x_flag_sched_last_insn_heuristic;
  signed char x_flag_sched_pressure;
  signed char x_flag_sched_rank_heuristic;
  signed char x_flag_schedule_speculative;
  signed char x_flag_sched_spec_insn_heuristic;
  signed char x_flag_schedule_speculative_load;
  signed char x_flag_schedule_speculative_load_dangerous;
  signed char x_flag_sched2_use_superblocks;
  signed char x_flag_schedule_fusion;
  signed char x_flag_schedule_insns;
  signed char x_flag_schedule_insns_after_reload;
  signed char x_flag_section_anchors;
  signed char x_flag_sel_sched_pipelining;
  signed char x_flag_sel_sched_pipelining_outer_loops;
  signed char x_flag_sel_sched_reschedule_pipelined;
  signed char x_flag_selective_scheduling;
  signed char x_flag_selective_scheduling2;
  signed char x_flag_short_enums;
  signed char x_flag_short_wchar;
  signed char x_flag_shrink_wrap;
  signed char x_flag_shrink_wrap_separate;
  signed char x_flag_signaling_nans;
  signed char x_flag_signed_zeros;
  signed char x_flag_single_precision_constant;
  signed char x_flag_split_ivs_in_unroller;
  signed char x_flag_split_loops;
  signed char x_flag_split_paths;
  signed char x_flag_split_wide_types;
  signed char x_flag_ssa_backprop;
  signed char x_flag_ssa_phiopt;
  signed char x_flag_stack_clash_protection;
  signed char x_flag_stack_protect;
  signed char x_flag_stdarg_opt;
  signed char x_flag_store_merging;
  signed char x_flag_strict_aliasing;
  signed char x_flag_strict_enums;
  signed char x_flag_strict_volatile_bitfields;
  signed char x_flag_thread_jumps;
  signed char x_flag_threadsafe_statics;
  signed char x_flag_tracer;
  signed char x_flag_trapping_math;
  signed char x_flag_trapv;
  signed char x_flag_tree_bit_ccp;
  signed char x_flag_tree_builtin_call_dce;
  signed char x_flag_tree_ccp;
  signed char x_flag_tree_ch;
  signed char x_flag_tree_coalesce_vars;
  signed char x_flag_tree_copy_prop;
  signed char x_flag_tree_cselim;
  signed char x_flag_tree_dce;
  signed char x_flag_tree_dom;
  signed char x_flag_tree_dse;
  signed char x_flag_tree_forwprop;
  signed char x_flag_tree_fre;
  signed char x_flag_tree_loop_distribute_patterns;
  signed char x_flag_tree_loop_distribution;
  signed char x_flag_tree_loop_if_convert;
  signed char x_flag_tree_loop_im;
  signed char x_flag_tree_loop_ivcanon;
  signed char x_flag_tree_loop_optimize;
  signed char x_flag_tree_loop_vectorize;
  signed char x_flag_tree_live_range_split;
  signed char x_flag_tree_partial_pre;
  signed char x_flag_tree_phiprop;
  signed char x_flag_tree_pre;
  signed char x_flag_tree_pta;
  signed char x_flag_tree_reassoc;
  signed char x_flag_tree_scev_cprop;
  signed char x_flag_tree_sink;
  signed char x_flag_tree_slp_vectorize;
  signed char x_flag_tree_slsr;
  signed char x_flag_tree_sra;
  signed char x_flag_tree_switch_conversion;
  signed char x_flag_tree_tail_merge;
  signed char x_flag_tree_ter;
  signed char x_flag_tree_vrp;
  signed char x_flag_unconstrained_commons;
  signed char x_flag_unroll_all_loops;
  signed char x_flag_unroll_loops;
  signed char x_flag_unsafe_math_optimizations;
  signed char x_flag_unswitch_loops;
  signed char x_flag_unwind_tables;
  signed char x_flag_var_tracking;
  signed char x_flag_var_tracking_assignments;
  signed char x_flag_var_tracking_assignments_toggle;
  signed char x_flag_var_tracking_uninit;
  signed char x_flag_variable_expansion_in_unroller;
  signed char x_flag_value_profile_transformations;
  signed char x_flag_web;
  signed char x_flag_wrapv;
  signed char x_flag_wrapv_pointer;
};


struct cl_target_option
{
  long x_ix86_isa_flags2_explicit;
  long x_ix86_isa_flags_explicit;
  const char *x_ix86_arch_string;
  const char *x_ix86_recip_name;
  const char *x_ix86_tune_ctrl_string;
  const char *x_ix86_tune_memcpy_strategy;
  const char *x_ix86_tune_memset_strategy;
  const char *x_ix86_tune_string;
  long x_ix86_stack_protector_guard_offset;
  addr_space_t x_ix86_stack_protector_guard_reg;
  long x_ix86_isa_flags;
  long x_ix86_isa_flags2;
  enum fpmath_unit x_ix86_fpmath;
  enum asm_dialect x_ix86_asm_dialect;
  enum calling_abi x_ix86_abi;
  enum cmodel x_ix86_cmodel;
  enum ix86_veclibabi x_ix86_veclibabi_type;
  enum pmode x_ix86_pmode;
  enum prefer_vector_width x_prefer_vector_width_type;
  enum stack_protector_guard x_ix86_stack_protector_guard;
  enum stringop_alg x_ix86_stringop_alg;
  enum tls_dialect x_ix86_tls_dialect;
  int x_ix86_branch_cost;
  int x_ix86_dump_tunes;
  int x_ix86_force_align_arg_pointer;
  int x_ix86_force_drap;
  int x_ix86_incoming_stack_boundary_arg;
  int x_ix86_preferred_stack_boundary_arg;
  int x_ix86_regparm;
  int x_ix86_section_threshold;
  int x_ix86_sse2avx;
  int x_ix86_tune_no_default;
  int x_recip_mask_explicit;
  int x_recip_mask;
  int x_target_flags;
  int x_ix86_target_flags;
  unsigned char arch;
  unsigned char arch_specified;
  unsigned char branch_cost;
  unsigned char prefetch_sse;
  unsigned char schedule;
  unsigned char tune;
  unsigned char tune_defaulted;
};



extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *);


extern void cl_optimization_restore (struct gcc_options *, struct cl_optimization *);


extern void cl_optimization_print (FILE *, int, struct cl_optimization *);


extern void cl_optimization_print_diff (FILE *, int, cl_optimization *ptr1, cl_optimization *ptr2);


extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);


extern void cl_target_option_restore (struct gcc_options *, struct cl_target_option *);


extern void cl_target_option_print (FILE *, int, struct cl_target_option *);


extern void cl_target_option_print_diff (FILE *, int, cl_target_option *ptr1, cl_target_option *ptr2);


extern bool cl_target_option_eq (const struct cl_target_option *, const struct cl_target_option *);


extern hashval_t cl_target_option_hash (const struct cl_target_option *);


extern hashval_t cl_optimization_hash (const struct cl_optimization *);



bool
common_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           const struct cl_decoded_option *decoded,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Ada_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
AdaSCIL_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
AdaWhy_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
BRIG_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
C_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
CXX_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Fortran_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Go_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
LTO_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
ObjC_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
ObjCXX_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg, int value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
void cpp_handle_option_auto (const struct gcc_options * opts, size_t scode,
                             struct cpp_options * cpp_opts);
void init_global_opts_from_cpp(struct gcc_options * opts,
                               const struct cpp_options * cpp_opts);
# 6175 "./options.h"
enum opt_code
{
  OPT____ = 0,
# 6204 "./options.h"
  OPT__help = 27,
  OPT__help_ = 28,
# 6232 "./options.h"
  OPT__no_sysroot_suffix = 55,



  OPT__output_pch_ = 59,

  OPT__param = 61,
# 6270 "./options.h"
  OPT__sysroot_ = 93,
  OPT__target_help = 94,
# 6281 "./options.h"
  OPT__version = 104,


  OPT_A = 107,
  OPT_B = 108,
  OPT_C = 109,
  OPT_CC = 110,
  OPT_D = 111,
  OPT_E = 112,
  OPT_F = 113,
  OPT_H = 114,
  OPT_I = 115,
  OPT_J = 116,
  OPT_L = 117,
  OPT_M = 118,
  OPT_MD = 119,
  OPT_MF = 120,
  OPT_MG = 121,
  OPT_MM = 122,
  OPT_MMD = 123,
  OPT_MP = 124,
  OPT_MQ = 125,
  OPT_MT = 126,
  OPT_N = 127,
  OPT_O = 128,
  OPT_Ofast = 129,
  OPT_Og = 130,
  OPT_Os = 131,
  OPT_P = 132,
  OPT_Q = 133,
  OPT_Qn = 134,
  OPT_Qy = 135,
  OPT_R = 136,
  OPT_S = 137,
  OPT_T = 138,
  OPT_Tbss = 139,
  OPT_Tbss_ = 140,
  OPT_Tdata = 141,
  OPT_Tdata_ = 142,
  OPT_Ttext = 143,
  OPT_Ttext_ = 144,
  OPT_U = 145,

  OPT_Wa_ = 147,
  OPT_Wabi = 148,
  OPT_Wabi_tag = 149,
  OPT_Wabi_ = 150,
  OPT_Waddress = 151,
  OPT_Waggregate_return = 152,
  OPT_Waggressive_loop_optimizations = 153,
  OPT_Waliasing = 154,
  OPT_Walign_commons = 155,

  OPT_Waligned_new_ = 157,
  OPT_Wall = 158,
  OPT_Walloc_size_larger_than_ = 159,
  OPT_Walloc_zero = 160,
  OPT_Walloca = 161,
  OPT_Walloca_larger_than_ = 162,
  OPT_Wampersand = 163,
  OPT_Wargument_mismatch = 164,
  OPT_Warray_bounds = 165,
  OPT_Warray_bounds_ = 166,
  OPT_Warray_temporaries = 167,
  OPT_Wassign_intercept = 168,
  OPT_Wattribute_alias = 169,
  OPT_Wattributes = 170,
  OPT_Wbad_function_cast = 171,
  OPT_Wbool_compare = 172,
  OPT_Wbool_operation = 173,
  OPT_Wbuiltin_declaration_mismatch = 174,
  OPT_Wbuiltin_macro_redefined = 175,
  OPT_Wc___compat = 176,

  OPT_Wc__11_compat = 178,
  OPT_Wc__14_compat = 179,
  OPT_Wc__17_compat = 180,

  OPT_Wc_binding_type = 182,
  OPT_Wc90_c99_compat = 183,
  OPT_Wc99_c11_compat = 184,
  OPT_Wcast_align = 185,
  OPT_Wcast_align_strict = 186,
  OPT_Wcast_function_type = 187,
  OPT_Wcast_qual = 188,

  OPT_Wcatch_value_ = 190,
  OPT_Wchar_subscripts = 191,
  OPT_Wcharacter_truncation = 192,
  OPT_Wchkp = 193,
  OPT_Wclass_memaccess = 194,
  OPT_Wclobbered = 195,
  OPT_Wcomment = 196,

  OPT_Wcompare_reals = 198,
  OPT_Wconditionally_supported = 199,
  OPT_Wconversion = 200,
  OPT_Wconversion_extra = 201,
  OPT_Wconversion_null = 202,
  OPT_Wcoverage_mismatch = 203,
  OPT_Wcpp = 204,
  OPT_Wctor_dtor_privacy = 205,
  OPT_Wdangling_else = 206,
  OPT_Wdate_time = 207,
  OPT_Wdeclaration_after_statement = 208,
  OPT_Wdelete_incomplete = 209,
  OPT_Wdelete_non_virtual_dtor = 210,
  OPT_Wdeprecated = 211,
  OPT_Wdeprecated_declarations = 212,
  OPT_Wdesignated_init = 213,
  OPT_Wdisabled_optimization = 214,
  OPT_Wdiscarded_array_qualifiers = 215,
  OPT_Wdiscarded_qualifiers = 216,
  OPT_Wdiv_by_zero = 217,
  OPT_Wdo_subscript = 218,
  OPT_Wdouble_promotion = 219,
  OPT_Wduplicate_decl_specifier = 220,
  OPT_Wduplicated_branches = 221,
  OPT_Wduplicated_cond = 222,
  OPT_Weffc__ = 223,
  OPT_Wempty_body = 224,
  OPT_Wendif_labels = 225,
  OPT_Wenum_compare = 226,
  OPT_Werror = 227,

  OPT_Werror_ = 229,
  OPT_Wexpansion_to_defined = 230,
  OPT_Wextra = 231,
  OPT_Wextra_semi = 232,
  OPT_Wfatal_errors = 233,
  OPT_Wfloat_conversion = 234,
  OPT_Wfloat_equal = 235,

  OPT_Wformat_contains_nul = 237,
  OPT_Wformat_extra_args = 238,
  OPT_Wformat_nonliteral = 239,

  OPT_Wformat_overflow_ = 241,
  OPT_Wformat_security = 242,
  OPT_Wformat_signedness = 243,

  OPT_Wformat_truncation_ = 245,
  OPT_Wformat_y2k = 246,
  OPT_Wformat_zero_length = 247,
  OPT_Wformat_ = 248,
  OPT_Wframe_address = 249,
  OPT_Wframe_larger_than_ = 250,
  OPT_Wfree_nonheap_object = 251,
  OPT_Wfrontend_loop_interchange = 252,
  OPT_Wfunction_elimination = 253,
  OPT_Whsa = 254,
  OPT_Wif_not_aligned = 255,
  OPT_Wignored_attributes = 256,
  OPT_Wignored_qualifiers = 257,
  OPT_Wimplicit = 258,

  OPT_Wimplicit_fallthrough_ = 260,
  OPT_Wimplicit_function_declaration = 261,
  OPT_Wimplicit_int = 262,
  OPT_Wimplicit_interface = 263,
  OPT_Wimplicit_procedure = 264,

  OPT_Wincompatible_pointer_types = 266,
  OPT_Winherited_variadic_ctor = 267,
  OPT_Winit_self = 268,
  OPT_Winline = 269,
  OPT_Wint_conversion = 270,
  OPT_Wint_in_bool_context = 271,
  OPT_Wint_to_pointer_cast = 272,
  OPT_Winteger_division = 273,
  OPT_Wintrinsic_shadow = 274,
  OPT_Wintrinsics_std = 275,
  OPT_Winvalid_memory_model = 276,
  OPT_Winvalid_offsetof = 277,
  OPT_Winvalid_pch = 278,
  OPT_Wjump_misses_init = 279,
  OPT_Wl_ = 280,

  OPT_Wlarger_than_ = 282,
  OPT_Wline_truncation = 283,
  OPT_Wliteral_suffix = 284,
  OPT_Wlogical_not_parentheses = 285,
  OPT_Wlogical_op = 286,
  OPT_Wlong_long = 287,
  OPT_Wlto_type_mismatch = 288,
  OPT_Wmain = 289,
  OPT_Wmaybe_uninitialized = 290,
  OPT_Wmemset_elt_size = 291,
  OPT_Wmemset_transposed_args = 292,
  OPT_Wmisleading_indentation = 293,
  OPT_Wmissing_attributes = 294,
  OPT_Wmissing_braces = 295,
  OPT_Wmissing_declarations = 296,
  OPT_Wmissing_field_initializers = 297,

  OPT_Wmissing_include_dirs = 299,

  OPT_Wmissing_parameter_type = 301,
  OPT_Wmissing_prototypes = 302,

  OPT_Wmultichar = 304,
  OPT_Wmultiple_inheritance = 305,
  OPT_Wmultistatement_macros = 306,
  OPT_Wnamespaces = 307,
  OPT_Wnarrowing = 308,
  OPT_Wnested_externs = 309,
  OPT_Wnoexcept = 310,
  OPT_Wnoexcept_type = 311,
  OPT_Wnon_template_friend = 312,
  OPT_Wnon_virtual_dtor = 313,
  OPT_Wnonnull = 314,
  OPT_Wnonnull_compare = 315,

  OPT_Wnormalized_ = 317,
  OPT_Wnull_dereference = 318,
  OPT_Wodr = 319,
  OPT_Wold_style_cast = 320,
  OPT_Wold_style_declaration = 321,
  OPT_Wold_style_definition = 322,
  OPT_Wopenmp_simd = 323,
  OPT_Woverflow = 324,
  OPT_Woverlength_strings = 325,
  OPT_Woverloaded_virtual = 326,
  OPT_Woverride_init = 327,
  OPT_Woverride_init_side_effects = 328,
  OPT_Wp_ = 329,
  OPT_Wpacked = 330,
  OPT_Wpacked_bitfield_compat = 331,
  OPT_Wpacked_not_aligned = 332,
  OPT_Wpadded = 333,
  OPT_Wparentheses = 334,
  OPT_Wpedantic = 335,

  OPT_Wplacement_new_ = 337,
  OPT_Wpmf_conversions = 338,
  OPT_Wpointer_arith = 339,
  OPT_Wpointer_compare = 340,
  OPT_Wpointer_sign = 341,
  OPT_Wpointer_to_int_cast = 342,
  OPT_Wpragmas = 343,
  OPT_Wproperty_assign_default = 344,
  OPT_Wprotocol = 345,
  OPT_Wpsabi = 346,
  OPT_Wreal_q_constant = 347,
  OPT_Wrealloc_lhs = 348,
  OPT_Wrealloc_lhs_all = 349,
  OPT_Wredundant_decls = 350,
  OPT_Wregister = 351,
  OPT_Wreorder = 352,
  OPT_Wrestrict = 353,
  OPT_Wreturn_local_addr = 354,
  OPT_Wreturn_type = 355,
  OPT_Wscalar_storage_order = 356,
  OPT_Wselector = 357,
  OPT_Wsequence_point = 358,
  OPT_Wshadow = 359,

  OPT_Wshadow_ivar = 361,

  OPT_Wshadow_compatible_local = 363,

  OPT_Wshadow_local = 365,
  OPT_Wshift_count_negative = 366,
  OPT_Wshift_count_overflow = 367,
  OPT_Wshift_negative_value = 368,

  OPT_Wshift_overflow_ = 370,
  OPT_Wsign_compare = 371,
  OPT_Wsign_conversion = 372,
  OPT_Wsign_promo = 373,
  OPT_Wsized_deallocation = 374,
  OPT_Wsizeof_array_argument = 375,
  OPT_Wsizeof_pointer_div = 376,
  OPT_Wsizeof_pointer_memaccess = 377,
  OPT_Wstack_protector = 378,
  OPT_Wstack_usage_ = 379,
  OPT_Wstrict_aliasing = 380,
  OPT_Wstrict_aliasing_ = 381,
  OPT_Wstrict_null_sentinel = 382,
  OPT_Wstrict_overflow = 383,
  OPT_Wstrict_overflow_ = 384,
  OPT_Wstrict_prototypes = 385,
  OPT_Wstrict_selector_match = 386,

  OPT_Wstringop_overflow_ = 388,
  OPT_Wstringop_truncation = 389,
  OPT_Wsubobject_linkage = 390,
  OPT_Wsuggest_attribute_cold = 391,
  OPT_Wsuggest_attribute_const = 392,
  OPT_Wsuggest_attribute_format = 393,
  OPT_Wsuggest_attribute_malloc = 394,
  OPT_Wsuggest_attribute_noreturn = 395,
  OPT_Wsuggest_attribute_pure = 396,
  OPT_Wsuggest_final_methods = 397,
  OPT_Wsuggest_final_types = 398,
  OPT_Wsuggest_override = 399,
  OPT_Wsurprising = 400,
  OPT_Wswitch = 401,
  OPT_Wswitch_bool = 402,
  OPT_Wswitch_default = 403,
  OPT_Wswitch_enum = 404,
  OPT_Wswitch_unreachable = 405,
  OPT_Wsync_nand = 406,
  OPT_Wsynth = 407,
  OPT_Wsystem_headers = 408,
  OPT_Wtabs = 409,
  OPT_Wtarget_lifetime = 410,
  OPT_Wtautological_compare = 411,
  OPT_Wtemplates = 412,
  OPT_Wterminate = 413,
  OPT_Wtraditional = 414,
  OPT_Wtraditional_conversion = 415,
  OPT_Wtrampolines = 416,
  OPT_Wtrigraphs = 417,
  OPT_Wtype_limits = 418,
  OPT_Wundeclared_selector = 419,
  OPT_Wundef = 420,
  OPT_Wundefined_do_loop = 421,
  OPT_Wunderflow = 422,
  OPT_Wuninitialized = 423,
  OPT_Wunknown_pragmas = 424,

  OPT_Wunsafe_loop_optimizations = 426,
  OPT_Wunsuffixed_float_constants = 427,
  OPT_Wunused = 428,
  OPT_Wunused_but_set_parameter = 429,
  OPT_Wunused_but_set_variable = 430,

  OPT_Wunused_const_variable_ = 432,
  OPT_Wunused_dummy_argument = 433,
  OPT_Wunused_function = 434,
  OPT_Wunused_label = 435,
  OPT_Wunused_local_typedefs = 436,
  OPT_Wunused_macros = 437,
  OPT_Wunused_parameter = 438,
  OPT_Wunused_result = 439,
  OPT_Wunused_value = 440,
  OPT_Wunused_variable = 441,
  OPT_Wuse_without_only = 442,
  OPT_Wuseless_cast = 443,
  OPT_Wvarargs = 444,
  OPT_Wvariadic_macros = 445,
  OPT_Wvector_operation_performance = 446,
  OPT_Wvirtual_inheritance = 447,
  OPT_Wvirtual_move_assign = 448,
  OPT_Wvla = 449,
  OPT_Wvla_larger_than_ = 450,
  OPT_Wvolatile_register_var = 451,
  OPT_Wwrite_strings = 452,
  OPT_Wzero_as_null_pointer_constant = 453,
  OPT_Wzerotrip = 454,
  OPT_Xassembler = 455,
  OPT_Xlinker = 456,
  OPT_Xpreprocessor = 457,
  OPT_Z = 458,
  OPT_ansi = 459,
  OPT_aux_info = 460,

  OPT_auxbase = 462,
  OPT_auxbase_strip = 463,
  OPT_c = 464,
  OPT_coverage = 465,
  OPT_cpp = 466,
  OPT_cpp_ = 467,
  OPT_d = 468,
  OPT_dumpbase = 469,
  OPT_dumpdir = 470,
  OPT_dumpfullversion = 471,
  OPT_dumpmachine = 472,
  OPT_dumpspecs = 473,
  OPT_dumpversion = 474,
  OPT_e = 475,
  OPT_export_dynamic = 476,
  OPT_fPIC = 477,
  OPT_fPIE = 478,
  OPT_fRTS_ = 479,
  OPT_fabi_compat_version_ = 480,
  OPT_fabi_version_ = 481,
  OPT_faccess_control = 482,
  OPT_fada_spec_parent_ = 483,
  OPT_faggressive_function_elimination = 484,
  OPT_faggressive_loop_optimizations = 485,
  OPT_falign_commons = 486,
  OPT_falign_functions = 487,
  OPT_falign_functions_ = 488,
  OPT_falign_jumps = 489,
  OPT_falign_jumps_ = 490,
  OPT_falign_labels = 491,
  OPT_falign_labels_ = 492,
  OPT_falign_loops = 493,
  OPT_falign_loops_ = 494,

  OPT_faligned_new_ = 496,
  OPT_fall_intrinsics = 497,

  OPT_fallow_leading_underscore = 499,
  OPT_fallow_parameterless_variadic_functions = 500,





  OPT_fasan_shadow_offset_ = 506,
  OPT_fasm = 507,
  OPT_fassociative_math = 508,
  OPT_fasynchronous_unwind_tables = 509,
  OPT_fauto_inc_dec = 510,
  OPT_fauto_profile = 511,
  OPT_fauto_profile_ = 512,
  OPT_fautomatic = 513,
  OPT_fbackslash = 514,
  OPT_fbacktrace = 515,
  OPT_fblas_matmul_limit_ = 516,
  OPT_fbounds_check = 517,
  OPT_fbranch_count_reg = 518,
  OPT_fbranch_probabilities = 519,
  OPT_fbranch_target_load_optimize = 520,
  OPT_fbranch_target_load_optimize2 = 521,
  OPT_fbtr_bb_exclusive = 522,
  OPT_fbuilding_libgcc = 523,
  OPT_fbuiltin = 524,
  OPT_fbuiltin_ = 525,
  OPT_fbuiltin_printf = 526,
  OPT_fc_prototypes = 527,
  OPT_fcall_saved_ = 528,
  OPT_fcall_used_ = 529,
  OPT_fcaller_saves = 530,
  OPT_fcanonical_system_headers = 531,

  OPT_fcf_protection_ = 533,
  OPT_fcheck_array_temporaries = 534,
  OPT_fcheck_data_deps = 535,
  OPT_fcheck_new = 536,
  OPT_fcheck_pointer_bounds = 537,
  OPT_fcheck_ = 538,
  OPT_fchecking = 539,
  OPT_fchecking_ = 540,
  OPT_fchkp_check_incomplete_type = 541,
  OPT_fchkp_check_read = 542,
  OPT_fchkp_check_write = 543,
  OPT_fchkp_first_field_has_own_bounds = 544,
  OPT_fchkp_flexible_struct_trailing_arrays = 545,
  OPT_fchkp_instrument_calls = 546,
  OPT_fchkp_instrument_marked_only = 547,
  OPT_fchkp_narrow_bounds = 548,
  OPT_fchkp_narrow_to_innermost_array = 549,
  OPT_fchkp_optimize = 550,
  OPT_fchkp_store_bounds = 551,
  OPT_fchkp_treat_zero_dynamic_size_as_infinite = 552,
  OPT_fchkp_use_fast_string_functions = 553,
  OPT_fchkp_use_nochk_string_functions = 554,
  OPT_fchkp_use_static_bounds = 555,
  OPT_fchkp_use_static_const_bounds = 556,
  OPT_fchkp_use_wrappers = 557,
  OPT_fchkp_zero_input_bounds_for_main = 558,
  OPT_fcilkplus_Undocumented = 559,
  OPT_fcoarray_ = 560,
  OPT_fcode_hoisting = 561,
  OPT_fcombine_stack_adjustments = 562,
  OPT_fcommon = 563,
  OPT_fcompare_debug = 564,
  OPT_fcompare_debug_second = 565,
  OPT_fcompare_debug_ = 566,
  OPT_fcompare_elim = 567,
  OPT_fconcepts = 568,
  OPT_fcond_mismatch = 569,
  OPT_fconserve_space = 570,
  OPT_fconserve_stack = 571,
  OPT_fconstant_string_class_ = 572,
  OPT_fconstexpr_depth_ = 573,
  OPT_fconstexpr_loop_limit_ = 574,
  OPT_fconvert_ = 575,
  OPT_fcprop_registers = 576,
  OPT_fcray_pointer = 577,
  OPT_fcrossjumping = 578,
  OPT_fcse_follow_jumps = 579,

  OPT_fcx_fortran_rules = 581,
  OPT_fcx_limited_range = 582,
  OPT_fd_lines_as_code = 583,
  OPT_fd_lines_as_comments = 584,
  OPT_fdata_sections = 585,
  OPT_fdbg_cnt_list = 586,
  OPT_fdbg_cnt_ = 587,
  OPT_fdce = 588,
  OPT_fdebug_cpp = 589,
  OPT_fdebug_prefix_map_ = 590,
  OPT_fdebug_types_section = 591,
  OPT_fdec = 592,
  OPT_fdec_intrinsic_ints = 593,
  OPT_fdec_math = 594,
  OPT_fdec_static = 595,
  OPT_fdec_structure = 596,
  OPT_fdeclone_ctor_dtor = 597,
  OPT_fdeduce_init_list = 598,
  OPT_fdefault_double_8 = 599,

  OPT_fdefault_integer_8 = 601,
  OPT_fdefault_real_10 = 602,
  OPT_fdefault_real_16 = 603,
  OPT_fdefault_real_8 = 604,
  OPT_fdefer_pop = 605,
  OPT_fdelayed_branch = 606,
  OPT_fdelete_dead_exceptions = 607,
  OPT_fdelete_null_pointer_checks = 608,
  OPT_fdevirtualize = 609,
  OPT_fdevirtualize_at_ltrans = 610,
  OPT_fdevirtualize_speculatively = 611,

  OPT_fdiagnostics_color_ = 613,
  OPT_fdiagnostics_generate_patch = 614,
  OPT_fdiagnostics_parseable_fixits = 615,
  OPT_fdiagnostics_show_caret = 616,
  OPT_fdiagnostics_show_location_ = 617,
  OPT_fdiagnostics_show_option = 618,
  OPT_fdiagnostics_show_template_tree = 619,
  OPT_fdirectives_only = 620,
  OPT_fdisable_ = 621,
  OPT_fdollar_ok = 622,
  OPT_fdollars_in_identifiers = 623,
  OPT_fdse = 624,
  OPT_fdump_ = 625,
  OPT_fdump_ada_spec = 626,
  OPT_fdump_ada_spec_slim = 627,

  OPT_fdump_final_insns = 629,
  OPT_fdump_final_insns_ = 630,
  OPT_fdump_fortran_optimized = 631,
  OPT_fdump_fortran_original = 632,
  OPT_fdump_go_spec_ = 633,
  OPT_fdump_internal_locations = 634,
  OPT_fdump_noaddr = 635,

  OPT_fdump_passes = 637,
  OPT_fdump_unnumbered = 638,
  OPT_fdump_unnumbered_links = 639,
  OPT_fdwarf2_cfi_asm = 640,
  OPT_fearly_inlining = 641,
  OPT_felide_constructors = 642,
  OPT_felide_type = 643,

  OPT_feliminate_unused_debug_symbols = 645,
  OPT_feliminate_unused_debug_types = 646,
  OPT_femit_class_debug_always = 647,
  OPT_femit_struct_debug_baseonly = 648,
  OPT_femit_struct_debug_detailed_ = 649,
  OPT_femit_struct_debug_reduced = 650,
  OPT_fenable_ = 651,
  OPT_fenforce_eh_specs = 652,

  OPT_fexceptions = 654,
  OPT_fexcess_precision_ = 655,
  OPT_fexec_charset_ = 656,
  OPT_fexpensive_optimizations = 657,
  OPT_fext_numeric_literals = 658,
  OPT_fextended_identifiers = 659,
  OPT_fextern_tls_init = 660,
  OPT_fexternal_blas = 661,

  OPT_ff2c = 663,
  OPT_ffast_math = 664,
  OPT_ffat_lto_objects = 665,
  OPT_ffile_prefix_map_ = 666,
  OPT_ffinite_math_only = 667,
  OPT_ffixed_ = 668,
  OPT_ffixed_form = 669,
  OPT_ffixed_line_length_ = 670,
  OPT_ffixed_line_length_none = 671,
  OPT_ffloat_store = 672,
  OPT_ffor_scope = 673,

  OPT_fforward_propagate = 675,
  OPT_ffp_contract_ = 676,
  OPT_ffp_int_builtin_inexact = 677,
  OPT_ffpe_summary_ = 678,
  OPT_ffpe_trap_ = 679,
  OPT_ffree_form = 680,
  OPT_ffree_line_length_ = 681,
  OPT_ffree_line_length_none = 682,
  OPT_ffreestanding = 683,
  OPT_ffriend_injection = 684,
  OPT_ffrontend_loop_interchange = 685,
  OPT_ffrontend_optimize = 686,
  OPT_ffunction_cse = 687,
  OPT_ffunction_sections = 688,
  OPT_fgcse = 689,
  OPT_fgcse_after_reload = 690,
  OPT_fgcse_las = 691,
  OPT_fgcse_lm = 692,
  OPT_fgcse_sm = 693,
  OPT_fgimple = 694,
  OPT_fgnat_encodings_ = 695,
  OPT_fgnu_keywords = 696,
  OPT_fgnu_runtime = 697,
  OPT_fgnu_tm = 698,
  OPT_fgnu_unique = 699,
  OPT_fgnu89_inline = 700,
  OPT_fgo_c_header_ = 701,
  OPT_fgo_check_divide_overflow = 702,
  OPT_fgo_check_divide_zero = 703,
  OPT_fgo_compiling_runtime = 704,
  OPT_fgo_debug_escape = 705,
  OPT_fgo_debug_escape_hash_ = 706,
  OPT_fgo_dump_ = 707,
  OPT_fgo_optimize_ = 708,
  OPT_fgo_pkgpath_ = 709,
  OPT_fgo_prefix_ = 710,
  OPT_fgo_relative_import_path_ = 711,
  OPT_fgraphite = 712,
  OPT_fgraphite_identity = 713,
  OPT_fguess_branch_probability = 714,




  OPT_fhoist_adjacent_loads = 719,

  OPT_fhosted = 721,

  OPT_fident = 723,
  OPT_fif_conversion = 724,
  OPT_fif_conversion2 = 725,
  OPT_fimplement_inlines = 726,
  OPT_fimplicit_inline_templates = 727,
  OPT_fimplicit_none = 728,
  OPT_fimplicit_templates = 729,
  OPT_findirect_inlining = 730,
  OPT_finhibit_size_directive = 731,
  OPT_finit_character_ = 732,
  OPT_finit_derived = 733,
  OPT_finit_integer_ = 734,
  OPT_finit_local_zero = 735,
  OPT_finit_logical_ = 736,
  OPT_finit_real_ = 737,
  OPT_finline = 738,
  OPT_finline_atomics = 739,
  OPT_finline_functions = 740,
  OPT_finline_functions_called_once = 741,

  OPT_finline_limit_ = 743,
  OPT_finline_matmul_limit_ = 744,
  OPT_finline_small_functions = 745,
  OPT_finput_charset_ = 746,
  OPT_finstrument_functions = 747,
  OPT_finstrument_functions_exclude_file_list_ = 748,
  OPT_finstrument_functions_exclude_function_list_ = 749,
  OPT_finteger_4_integer_8 = 750,
  OPT_fintrinsic_modules_path = 751,
  OPT_fintrinsic_modules_path_ = 752,
  OPT_fipa_bit_cp = 753,
  OPT_fipa_cp = 754,

  OPT_fipa_cp_clone = 756,
  OPT_fipa_icf = 757,
  OPT_fipa_icf_functions = 758,
  OPT_fipa_icf_variables = 759,

  OPT_fipa_profile = 761,
  OPT_fipa_pta = 762,
  OPT_fipa_pure_const = 763,
  OPT_fipa_ra = 764,
  OPT_fipa_reference = 765,
  OPT_fipa_sra = 766,

  OPT_fipa_vrp = 768,
  OPT_fira_algorithm_ = 769,
  OPT_fira_hoist_pressure = 770,
  OPT_fira_loop_pressure = 771,
  OPT_fira_region_ = 772,
  OPT_fira_share_save_slots = 773,
  OPT_fira_share_spill_slots = 774,
  OPT_fira_verbose_ = 775,
  OPT_fisolate_erroneous_paths_attribute = 776,
  OPT_fisolate_erroneous_paths_dereference = 777,
  OPT_fivar_visibility_ = 778,
  OPT_fivopts = 779,
  OPT_fjump_tables = 780,
  OPT_fkeep_gc_roots_live = 781,
  OPT_fkeep_inline_dllexport = 782,
  OPT_fkeep_inline_functions = 783,
  OPT_fkeep_static_consts = 784,
  OPT_fkeep_static_functions = 785,

  OPT_flax_vector_conversions = 787,
  OPT_fleading_underscore = 788,
  OPT_flifetime_dse = 789,
  OPT_flifetime_dse_ = 790,
  OPT_flimit_function_alignment = 791,
  OPT_flinker_output_ = 792,
  OPT_flive_range_shrinkage = 793,
  OPT_flocal_ivars = 794,


  OPT_floop_interchange = 797,
  OPT_floop_nest_optimize = 798,

  OPT_floop_parallelize_all = 800,

  OPT_floop_unroll_and_jam = 802,
  OPT_flra_remat = 803,
  OPT_flto = 804,
  OPT_flto_compression_level_ = 805,
  OPT_flto_odr_type_merging = 806,
  OPT_flto_partition_ = 807,
  OPT_flto_report = 808,
  OPT_flto_report_wpa = 809,
  OPT_flto_ = 810,
  OPT_fltrans = 811,
  OPT_fltrans_output_list_ = 812,
  OPT_fmacro_prefix_map_ = 813,
  OPT_fmath_errno = 814,
  OPT_fmax_array_constructor_ = 815,
  OPT_fmax_errors_ = 816,
  OPT_fmax_identifier_length_ = 817,
  OPT_fmax_stack_var_size_ = 818,
  OPT_fmax_subrecord_length_ = 819,
  OPT_fmem_report = 820,
  OPT_fmem_report_wpa = 821,
  OPT_fmerge_all_constants = 822,
  OPT_fmerge_constants = 823,
  OPT_fmerge_debug_strings = 824,
  OPT_fmessage_length_ = 825,
  OPT_fmodule_private = 826,
  OPT_fmodulo_sched = 827,
  OPT_fmodulo_sched_allow_regmoves = 828,
  OPT_fmove_loop_invariants = 829,
  OPT_fms_extensions = 830,





  OPT_fnew_inheriting_ctors = 836,
  OPT_fnew_ttp_matching = 837,
  OPT_fnext_runtime = 838,
  OPT_fnil_receivers = 839,
  OPT_fnon_call_exceptions = 840,
  OPT_fnonansi_builtins = 841,

  OPT_fnothrow_opt = 843,
  OPT_fobjc_abi_version_ = 844,
  OPT_fobjc_call_cxx_cdtors = 845,
  OPT_fobjc_direct_dispatch = 846,
  OPT_fobjc_exceptions = 847,
  OPT_fobjc_gc = 848,
  OPT_fobjc_nilcheck = 849,
  OPT_fobjc_sjlj_exceptions = 850,
  OPT_fobjc_std_objc1 = 851,
  OPT_foffload_abi_ = 852,
  OPT_foffload_ = 853,
  OPT_fomit_frame_pointer = 854,
  OPT_fopenacc = 855,
  OPT_fopenacc_dim_ = 856,
  OPT_fopenmp = 857,
  OPT_fopenmp_simd = 858,
  OPT_foperator_names = 859,
  OPT_fopt_info = 860,
  OPT_fopt_info_ = 861,

  OPT_foptimize_sibling_calls = 863,
  OPT_foptimize_strlen = 864,

  OPT_fpack_derived = 866,
  OPT_fpack_struct = 867,
  OPT_fpack_struct_ = 868,
  OPT_fpartial_inlining = 869,
  OPT_fpatchable_function_entry_ = 870,
  OPT_fpcc_struct_return = 871,
  OPT_fpch_deps = 872,
  OPT_fpch_preprocess = 873,
  OPT_fpeel_loops = 874,
  OPT_fpeephole = 875,
  OPT_fpeephole2 = 876,
  OPT_fpermissive = 877,
  OPT_fpermitted_flt_eval_methods_ = 878,
  OPT_fpic = 879,
  OPT_fpie = 880,
  OPT_fplan9_extensions = 881,
  OPT_fplt = 882,
  OPT_fplugin_arg_ = 883,
  OPT_fplugin_ = 884,
  OPT_fpost_ipa_mem_report = 885,
  OPT_fpre_ipa_mem_report = 886,
  OPT_fpredictive_commoning = 887,
  OPT_fprefetch_loop_arrays = 888,
  OPT_fpreprocessed = 889,
  OPT_fpretty_templates = 890,
  OPT_fprintf_return_value = 891,
  OPT_fprofile = 892,
  OPT_fprofile_abs_path = 893,
  OPT_fprofile_arcs = 894,
  OPT_fprofile_correction = 895,
  OPT_fprofile_dir_ = 896,
  OPT_fprofile_generate = 897,
  OPT_fprofile_generate_ = 898,
  OPT_fprofile_reorder_functions = 899,
  OPT_fprofile_report = 900,
  OPT_fprofile_update_ = 901,
  OPT_fprofile_use = 902,
  OPT_fprofile_use_ = 903,
  OPT_fprofile_values = 904,
  OPT_fprotect_parens = 905,
  OPT_frandom_seed = 906,
  OPT_frandom_seed_ = 907,
  OPT_frange_check = 908,
  OPT_freal_4_real_10 = 909,
  OPT_freal_4_real_16 = 910,
  OPT_freal_4_real_8 = 911,
  OPT_freal_8_real_10 = 912,
  OPT_freal_8_real_16 = 913,
  OPT_freal_8_real_4 = 914,
  OPT_frealloc_lhs = 915,
  OPT_freciprocal_math = 916,
  OPT_frecord_gcc_switches = 917,
  OPT_frecord_marker_4 = 918,
  OPT_frecord_marker_8 = 919,
  OPT_frecursive = 920,
  OPT_free = 921,
  OPT_freg_struct_return = 922,

  OPT_frename_registers = 924,
  OPT_freorder_blocks = 925,
  OPT_freorder_blocks_algorithm_ = 926,
  OPT_freorder_blocks_and_partition = 927,
  OPT_freorder_functions = 928,
  OPT_frepack_arrays = 929,
  OPT_freplace_objc_classes = 930,
  OPT_frepo = 931,
  OPT_freport_bug = 932,
  OPT_frequire_return_statement = 933,
  OPT_frerun_cse_after_loop = 934,

  OPT_freschedule_modulo_scheduled_loops = 936,
  OPT_fresolution_ = 937,
  OPT_frounding_math = 938,
  OPT_frtti = 939,
  OPT_fsanitize_address_use_after_scope = 940,
  OPT_fsanitize_coverage_ = 941,
  OPT_fsanitize_recover = 942,
  OPT_fsanitize_recover_ = 943,
  OPT_fsanitize_sections_ = 944,
  OPT_fsanitize_undefined_trap_on_error = 945,
  OPT_fsanitize_ = 946,
  OPT_fsched_critical_path_heuristic = 947,
  OPT_fsched_dep_count_heuristic = 948,
  OPT_fsched_group_heuristic = 949,
  OPT_fsched_interblock = 950,
  OPT_fsched_last_insn_heuristic = 951,
  OPT_fsched_pressure = 952,
  OPT_fsched_rank_heuristic = 953,
  OPT_fsched_spec = 954,
  OPT_fsched_spec_insn_heuristic = 955,
  OPT_fsched_spec_load = 956,
  OPT_fsched_spec_load_dangerous = 957,
  OPT_fsched_stalled_insns = 958,
  OPT_fsched_stalled_insns_dep = 959,
  OPT_fsched_stalled_insns_dep_ = 960,
  OPT_fsched_stalled_insns_ = 961,
  OPT_fsched_verbose_ = 962,
  OPT_fsched2_use_superblocks = 963,

  OPT_fschedule_fusion = 965,
  OPT_fschedule_insns = 966,
  OPT_fschedule_insns2 = 967,
  OPT_fsecond_underscore = 968,
  OPT_fsection_anchors = 969,

  OPT_fsel_sched_pipelining = 971,
  OPT_fsel_sched_pipelining_outer_loops = 972,
  OPT_fsel_sched_reschedule_pipelined = 973,
  OPT_fselective_scheduling = 974,
  OPT_fselective_scheduling2 = 975,
  OPT_fself_test_ = 976,
  OPT_fsemantic_interposition = 977,
  OPT_fshort_enums = 978,
  OPT_fshort_wchar = 979,
  OPT_fshow_column = 980,
  OPT_fshrink_wrap = 981,
  OPT_fshrink_wrap_separate = 982,
  OPT_fsign_zero = 983,
  OPT_fsignaling_nans = 984,
  OPT_fsigned_bitfields = 985,
  OPT_fsigned_char = 986,
  OPT_fsigned_zeros = 987,
  OPT_fsimd_cost_model_ = 988,
  OPT_fsingle_precision_constant = 989,
  OPT_fsized_deallocation = 990,
  OPT_fsplit_ivs_in_unroller = 991,
  OPT_fsplit_loops = 992,
  OPT_fsplit_paths = 993,
  OPT_fsplit_stack = 994,
  OPT_fsplit_wide_types = 995,

  OPT_fssa_backprop = 997,
  OPT_fssa_phiopt = 998,
  OPT_fsso_struct_ = 999,
  OPT_fstack_arrays = 1000,

  OPT_fstack_check_ = 1002,
  OPT_fstack_clash_protection = 1003,
  OPT_fstack_limit = 1004,
  OPT_fstack_limit_register_ = 1005,
  OPT_fstack_limit_symbol_ = 1006,
  OPT_fstack_protector = 1007,
  OPT_fstack_protector_all = 1008,
  OPT_fstack_protector_explicit = 1009,
  OPT_fstack_protector_strong = 1010,
  OPT_fstack_reuse_ = 1011,
  OPT_fstack_usage = 1012,
  OPT_fstats = 1013,
  OPT_fstdarg_opt = 1014,
  OPT_fstore_merging = 1015,

  OPT_fstrict_aliasing = 1017,
  OPT_fstrict_enums = 1018,
  OPT_fstrict_overflow = 1019,

  OPT_fstrict_volatile_bitfields = 1021,

  OPT_fstrong_eval_order_ = 1023,
  OPT_fsync_libcalls = 1024,
  OPT_fsyntax_only = 1025,
  OPT_ftabstop_ = 1026,

  OPT_ftemplate_backtrace_limit_ = 1028,

  OPT_ftemplate_depth_ = 1030,
  OPT_ftest_coverage = 1031,
  OPT_ftest_forall_temp = 1032,

  OPT_fthread_jumps = 1034,
  OPT_fthreadsafe_statics = 1035,
  OPT_ftime_report = 1036,
  OPT_ftime_report_details = 1037,
  OPT_ftls_model_ = 1038,
  OPT_ftoplevel_reorder = 1039,
  OPT_ftracer = 1040,
  OPT_ftrack_macro_expansion = 1041,
  OPT_ftrack_macro_expansion_ = 1042,
  OPT_ftrampolines = 1043,
  OPT_ftrapping_math = 1044,
  OPT_ftrapv = 1045,
  OPT_ftree_bit_ccp = 1046,
  OPT_ftree_builtin_call_dce = 1047,
  OPT_ftree_ccp = 1048,
  OPT_ftree_ch = 1049,

  OPT_ftree_coalesce_vars = 1051,
  OPT_ftree_copy_prop = 1052,

  OPT_ftree_cselim = 1054,
  OPT_ftree_dce = 1055,
  OPT_ftree_dominator_opts = 1056,
  OPT_ftree_dse = 1057,
  OPT_ftree_forwprop = 1058,
  OPT_ftree_fre = 1059,
  OPT_ftree_loop_distribute_patterns = 1060,
  OPT_ftree_loop_distribution = 1061,
  OPT_ftree_loop_if_convert = 1062,

  OPT_ftree_loop_im = 1064,
  OPT_ftree_loop_ivcanon = 1065,

  OPT_ftree_loop_optimize = 1067,
  OPT_ftree_loop_vectorize = 1068,
  OPT_ftree_lrs = 1069,
  OPT_ftree_parallelize_loops_ = 1070,
  OPT_ftree_partial_pre = 1071,
  OPT_ftree_phiprop = 1072,
  OPT_ftree_pre = 1073,
  OPT_ftree_pta = 1074,
  OPT_ftree_reassoc = 1075,

  OPT_ftree_scev_cprop = 1077,
  OPT_ftree_sink = 1078,
  OPT_ftree_slp_vectorize = 1079,
  OPT_ftree_slsr = 1080,
  OPT_ftree_sra = 1081,


  OPT_ftree_switch_conversion = 1084,
  OPT_ftree_tail_merge = 1085,
  OPT_ftree_ter = 1086,

  OPT_ftree_vectorize = 1088,

  OPT_ftree_vrp = 1090,
  OPT_funconstrained_commons = 1091,
  OPT_funderscoring = 1092,
  OPT_funit_at_a_time = 1093,
  OPT_funroll_all_loops = 1094,
  OPT_funroll_loops = 1095,

  OPT_funsafe_math_optimizations = 1097,
  OPT_funsigned_bitfields = 1098,
  OPT_funsigned_char = 1099,
  OPT_funswitch_loops = 1100,
  OPT_funwind_tables = 1101,
  OPT_fuse_cxa_atexit = 1102,
  OPT_fuse_cxa_get_exception_ptr = 1103,
  OPT_fuse_ld_bfd = 1104,
  OPT_fuse_ld_gold = 1105,
  OPT_fuse_linker_plugin = 1106,
  OPT_fvar_tracking = 1107,
  OPT_fvar_tracking_assignments = 1108,
  OPT_fvar_tracking_assignments_toggle = 1109,
  OPT_fvar_tracking_uninit = 1110,
  OPT_fvariable_expansion_in_unroller = 1111,

  OPT_fvect_cost_model_ = 1113,
  OPT_fverbose_asm = 1114,

  OPT_fvisibility_inlines_hidden = 1116,
  OPT_fvisibility_ms_compat = 1117,
  OPT_fvisibility_ = 1118,
  OPT_fvpt = 1119,


  OPT_fvtable_verify_ = 1122,
  OPT_fvtv_counts = 1123,
  OPT_fvtv_debug = 1124,
  OPT_fweak = 1125,
  OPT_fweb = 1126,

  OPT_fwhole_program = 1128,
  OPT_fwide_exec_charset_ = 1129,
  OPT_fworking_directory = 1130,
  OPT_fwpa = 1131,
  OPT_fwpa_ = 1132,
  OPT_fwrapv = 1133,
  OPT_fwrapv_pointer = 1134,


  OPT_fzero_initialized_in_bss = 1137,
  OPT_fzero_link = 1138,
  OPT_g = 1139,
  OPT_gant = 1140,
  OPT_gas_loc_support = 1141,
  OPT_gas_locview_support = 1142,




  OPT_gcolumn_info = 1147,
  OPT_gdwarf = 1148,
  OPT_gdwarf_ = 1149,
  OPT_gen_decls = 1150,
  OPT_ggdb = 1151,
  OPT_ggnu_pubnames = 1152,
  OPT_ginline_points = 1153,
  OPT_ginternal_reset_location_views = 1154,
  OPT_gnat = 1155,
  OPT_gnatO = 1156,
  OPT_gno_ = 1157,
  OPT_gno_pubnames = 1158,
  OPT_gpubnames = 1159,
  OPT_grecord_gcc_switches = 1160,
  OPT_gsplit_dwarf = 1161,
  OPT_gstabs = 1162,
  OPT_gstabs_ = 1163,
  OPT_gstatement_frontiers = 1164,
  OPT_gstrict_dwarf = 1165,
  OPT_gtoggle = 1166,
  OPT_gvariable_location_views = 1167,
  OPT_gvariable_location_views_incompat5 = 1168,
  OPT_gvms = 1169,
  OPT_gxcoff = 1170,
  OPT_gxcoff_ = 1171,
  OPT_gz = 1172,
  OPT_gz_ = 1173,
  OPT_h = 1174,
  OPT_idirafter = 1175,
  OPT_imacros = 1176,
  OPT_imultiarch = 1177,
  OPT_imultilib = 1178,
  OPT_include = 1179,
  OPT_iplugindir_ = 1180,
  OPT_iprefix = 1181,
  OPT_iquote = 1182,
  OPT_isysroot = 1183,
  OPT_isystem = 1184,
  OPT_iwithprefix = 1185,
  OPT_iwithprefixbefore = 1186,
  OPT_k8 = 1187,
  OPT_l = 1188,
  OPT_lang_asm = 1189,
  OPT_m128bit_long_double = 1190,
  OPT_m16 = 1191,
  OPT_m32 = 1192,
  OPT_m3dnow = 1193,
  OPT_m3dnowa = 1194,
  OPT_m64 = 1195,
  OPT_m80387 = 1196,
  OPT_m8bit_idiv = 1197,
  OPT_m96bit_long_double = 1198,
  OPT_mabi_ = 1199,
  OPT_mabm = 1200,
  OPT_maccumulate_outgoing_args = 1201,
  OPT_maddress_mode_ = 1202,
  OPT_madx = 1203,
  OPT_maes = 1204,
  OPT_malign_data_ = 1205,
  OPT_malign_double = 1206,
  OPT_malign_functions_ = 1207,
  OPT_malign_jumps_ = 1208,
  OPT_malign_loops_ = 1209,
  OPT_malign_stringops = 1210,
  OPT_mandroid = 1211,
  OPT_march_ = 1212,
  OPT_masm_ = 1213,
  OPT_mavx = 1214,
  OPT_mavx2 = 1215,
  OPT_mavx256_split_unaligned_load = 1216,
  OPT_mavx256_split_unaligned_store = 1217,
  OPT_mavx5124fmaps = 1218,
  OPT_mavx5124vnniw = 1219,
  OPT_mavx512bitalg = 1220,
  OPT_mavx512bw = 1221,
  OPT_mavx512cd = 1222,
  OPT_mavx512dq = 1223,
  OPT_mavx512er = 1224,
  OPT_mavx512f = 1225,
  OPT_mavx512ifma = 1226,
  OPT_mavx512pf = 1227,
  OPT_mavx512vbmi = 1228,
  OPT_mavx512vbmi2 = 1229,
  OPT_mavx512vl = 1230,
  OPT_mavx512vnni = 1231,
  OPT_mavx512vpopcntdq = 1232,
  OPT_mbionic = 1233,
  OPT_mbmi = 1234,
  OPT_mbmi2 = 1235,
  OPT_mbranch_cost_ = 1236,
  OPT_mcall_ms2sysv_xlogues = 1237,
  OPT_mcet = 1238,
  OPT_mcet_switch = 1239,
  OPT_mcld = 1240,
  OPT_mclflushopt = 1241,
  OPT_mclwb = 1242,
  OPT_mclzero = 1243,
  OPT_mcmodel_ = 1244,

  OPT_mcrc32 = 1246,
  OPT_mcx16 = 1247,
  OPT_mdispatch_scheduler = 1248,
  OPT_mdump_tune_features = 1249,
  OPT_mf16c = 1250,
  OPT_mfancy_math_387 = 1251,
  OPT_mfentry = 1252,
  OPT_mfma = 1253,
  OPT_mfma4 = 1254,
  OPT_mforce_drap = 1255,
  OPT_mforce_indirect_call = 1256,
  OPT_mfp_ret_in_387 = 1257,
  OPT_mfpmath_ = 1258,
  OPT_mfsgsbase = 1259,
  OPT_mfunction_return_ = 1260,

  OPT_mfxsr = 1262,
  OPT_mgeneral_regs_only = 1263,
  OPT_mgfni = 1264,
  OPT_mglibc = 1265,
  OPT_mhard_float = 1266,
  OPT_mhle = 1267,
  OPT_miamcu = 1268,
  OPT_mibt = 1269,
  OPT_mieee_fp = 1270,
  OPT_mincoming_stack_boundary_ = 1271,
  OPT_mindirect_branch_register = 1272,
  OPT_mindirect_branch_ = 1273,
  OPT_minline_all_stringops = 1274,
  OPT_minline_stringops_dynamically = 1275,

  OPT_mlarge_data_threshold_ = 1277,
  OPT_mlong_double_128 = 1278,
  OPT_mlong_double_64 = 1279,
  OPT_mlong_double_80 = 1280,
  OPT_mlwp = 1281,
  OPT_mlzcnt = 1282,
  OPT_mmemcpy_strategy_ = 1283,
  OPT_mmemset_strategy_ = 1284,
  OPT_mmitigate_rop = 1285,
  OPT_mmmx = 1286,
  OPT_mmovbe = 1287,
  OPT_mmpx = 1288,
  OPT_mms_bitfields = 1289,
  OPT_mmusl = 1290,
  OPT_mmwaitx = 1291,
  OPT_mno_align_stringops = 1292,
  OPT_mno_default = 1293,
  OPT_mno_fancy_math_387 = 1294,
  OPT_mno_push_args = 1295,
  OPT_mno_red_zone = 1296,
  OPT_mno_sse4 = 1297,
  OPT_mnop_mcount = 1298,
  OPT_momit_leaf_frame_pointer = 1299,
  OPT_mpc32 = 1300,
  OPT_mpc64 = 1301,
  OPT_mpc80 = 1302,
  OPT_mpclmul = 1303,
  OPT_mpcommit = 1304,
  OPT_mpku = 1305,
  OPT_mpopcnt = 1306,

  OPT_mprefer_vector_width_ = 1308,
  OPT_mpreferred_stack_boundary_ = 1309,
  OPT_mprefetchwt1 = 1310,
  OPT_mprfchw = 1311,
  OPT_mpush_args = 1312,
  OPT_mrdpid = 1313,
  OPT_mrdrnd = 1314,
  OPT_mrdseed = 1315,
  OPT_mrecip = 1316,
  OPT_mrecip_ = 1317,
  OPT_mrecord_mcount = 1318,
  OPT_mred_zone = 1319,
  OPT_mregparm_ = 1320,
  OPT_mrtd = 1321,
  OPT_mrtm = 1322,
  OPT_msahf = 1323,
  OPT_msgx = 1324,
  OPT_msha = 1325,
  OPT_mshstk = 1326,
  OPT_mskip_rax_setup = 1327,
  OPT_msoft_float = 1328,
  OPT_msse = 1329,
  OPT_msse2 = 1330,
  OPT_msse2avx = 1331,
  OPT_msse3 = 1332,
  OPT_msse4 = 1333,
  OPT_msse4_1 = 1334,
  OPT_msse4_2 = 1335,
  OPT_msse4a = 1336,

  OPT_msseregparm = 1338,
  OPT_mssse3 = 1339,
  OPT_mstack_arg_probe = 1340,
  OPT_mstack_protector_guard_offset_ = 1341,
  OPT_mstack_protector_guard_reg_ = 1342,
  OPT_mstack_protector_guard_symbol_ = 1343,
  OPT_mstack_protector_guard_ = 1344,
  OPT_mstackrealign = 1345,
  OPT_mstringop_strategy_ = 1346,
  OPT_mstv = 1347,
  OPT_mtbm = 1348,
  OPT_mtls_dialect_ = 1349,
  OPT_mtls_direct_seg_refs = 1350,
  OPT_mtune_ctrl_ = 1351,
  OPT_mtune_ = 1352,
  OPT_muclibc = 1353,
  OPT_mvaes = 1354,
  OPT_mveclibabi_ = 1355,
  OPT_mvect8_ret_in_mem = 1356,
  OPT_mvpclmulqdq = 1357,
  OPT_mvzeroupper = 1358,
  OPT_mx32 = 1359,
  OPT_mxop = 1360,
  OPT_mxsave = 1361,
  OPT_mxsavec = 1362,
  OPT_mxsaveopt = 1363,
  OPT_mxsaves = 1364,
  OPT_n = 1365,
  OPT_no_canonical_prefixes = 1366,
  OPT_no_integrated_cpp = 1367,
  OPT_no_pie = 1368,
  OPT_nocpp = 1369,
  OPT_nodefaultlibs = 1370,
  OPT_nostartfiles = 1371,
  OPT_nostdinc = 1372,
  OPT_nostdinc__ = 1373,
  OPT_nostdlib = 1374,
  OPT_o = 1375,
  OPT_p = 1376,
  OPT_pass_exit_codes = 1377,

  OPT_pedantic_errors = 1379,
  OPT_pg = 1380,
  OPT_pie = 1381,
  OPT_pipe = 1382,
  OPT_posix = 1383,
  OPT_print_file_name_ = 1384,
  OPT_print_libgcc_file_name = 1385,
  OPT_print_multi_directory = 1386,
  OPT_print_multi_lib = 1387,
  OPT_print_multi_os_directory = 1388,
  OPT_print_multiarch = 1389,
  OPT_print_objc_runtime_info = 1390,
  OPT_print_prog_name_ = 1391,
  OPT_print_search_dirs = 1392,
  OPT_print_sysroot = 1393,
  OPT_print_sysroot_headers_suffix = 1394,
  OPT_profile = 1395,
  OPT_pthread = 1396,
  OPT_quiet = 1397,
  OPT_r = 1398,
  OPT_rdynamic = 1399,
  OPT_remap = 1400,
  OPT_s = 1401,
  OPT_save_temps = 1402,
  OPT_save_temps_ = 1403,
  OPT_shared = 1404,
  OPT_shared_libgcc = 1405,

  OPT_specs_ = 1407,
  OPT_static = 1408,
  OPT_static_libasan = 1409,
  OPT_static_libgcc = 1410,
  OPT_static_libgfortran = 1411,
  OPT_static_libgo = 1412,
  OPT_static_liblsan = 1413,
  OPT_static_libmpx = 1414,
  OPT_static_libmpxwrappers = 1415,
  OPT_static_libstdc__ = 1416,
  OPT_static_libtsan = 1417,
  OPT_static_libubsan = 1418,
  OPT_static_pie = 1419,


  OPT_std_c__11 = 1422,
  OPT_std_c__14 = 1423,
  OPT_std_c__17 = 1424,


  OPT_std_c__2a = 1427,
  OPT_std_c__98 = 1428,
  OPT_std_c11 = 1429,
  OPT_std_c17 = 1430,



  OPT_std_c90 = 1434,
  OPT_std_c99 = 1435,

  OPT_std_f2003 = 1437,
  OPT_std_f2008 = 1438,
  OPT_std_f2008ts = 1439,
  OPT_std_f2018 = 1440,
  OPT_std_f95 = 1441,
  OPT_std_gnu = 1442,


  OPT_std_gnu__11 = 1445,
  OPT_std_gnu__14 = 1446,
  OPT_std_gnu__17 = 1447,


  OPT_std_gnu__2a = 1450,
  OPT_std_gnu__98 = 1451,
  OPT_std_gnu11 = 1452,
  OPT_std_gnu17 = 1453,



  OPT_std_gnu90 = 1457,
  OPT_std_gnu99 = 1458,


  OPT_std_iso9899_199409 = 1461,





  OPT_std_legacy = 1467,
  OPT_symbolic = 1468,
  OPT_t = 1469,
  OPT_time = 1470,
  OPT_time_ = 1471,
  OPT_tno_android_cc = 1472,
  OPT_tno_android_ld = 1473,
  OPT_traditional = 1474,
  OPT_traditional_cpp = 1475,
  OPT_trigraphs = 1476,
  OPT_u = 1477,
  OPT_undef = 1478,
  OPT_v = 1479,
  OPT_version = 1480,
  OPT_w = 1481,
  OPT_wrapper = 1482,
  OPT_x = 1483,
  OPT_z = 1484,
  N_OPTS,
  OPT_SPECIAL_unknown,
  OPT_SPECIAL_ignore,
  OPT_SPECIAL_program_name,
  OPT_SPECIAL_input_file
};
# 23 "./tm.h" 2
# 1 "./insn-constants.h" 1
# 117 "./insn-constants.h"
enum unspec {
  UNSPEC_GOT = 0,
  UNSPEC_GOTOFF = 1,
  UNSPEC_GOTPCREL = 2,
  UNSPEC_GOTTPOFF = 3,
  UNSPEC_TPOFF = 4,
  UNSPEC_NTPOFF = 5,
  UNSPEC_DTPOFF = 6,
  UNSPEC_GOTNTPOFF = 7,
  UNSPEC_INDNTPOFF = 8,
  UNSPEC_PLTOFF = 9,
  UNSPEC_MACHOPIC_OFFSET = 10,
  UNSPEC_PCREL = 11,
  UNSPEC_SIZEOF = 12,
  UNSPEC_STACK_ALLOC = 13,
  UNSPEC_SET_GOT = 14,
  UNSPEC_SET_RIP = 15,
  UNSPEC_SET_GOT_OFFSET = 16,
  UNSPEC_MEMORY_BLOCKAGE = 17,
  UNSPEC_PROBE_STACK = 18,
  UNSPEC_TP = 19,
  UNSPEC_TLS_GD = 20,
  UNSPEC_TLS_LD_BASE = 21,
  UNSPEC_TLSDESC = 22,
  UNSPEC_TLS_IE_SUN = 23,
  UNSPEC_SCAS = 24,
  UNSPEC_FNSTSW = 25,
  UNSPEC_SAHF = 26,
  UNSPEC_NOTRAP = 27,
  UNSPEC_PARITY = 28,
  UNSPEC_FSTCW = 29,
  UNSPEC_FLDCW = 30,
  UNSPEC_REP = 31,
  UNSPEC_LD_MPIC = 32,
  UNSPEC_TRUNC_NOOP = 33,
  UNSPEC_DIV_ALREADY_SPLIT = 34,
  UNSPEC_PAUSE = 35,
  UNSPEC_LEA_ADDR = 36,
  UNSPEC_XBEGIN_ABORT = 37,
  UNSPEC_STOS = 38,
  UNSPEC_PEEPSIB = 39,
  UNSPEC_INSN_FALSE_DEP = 40,
  UNSPEC_SBB = 41,
  UNSPEC_FIX_NOTRUNC = 42,
  UNSPEC_MASKMOV = 43,
  UNSPEC_MOVMSK = 44,
  UNSPEC_RCP = 45,
  UNSPEC_RSQRT = 46,
  UNSPEC_PSADBW = 47,
  UNSPEC_COPYSIGN = 48,
  UNSPEC_IEEE_MIN = 49,
  UNSPEC_IEEE_MAX = 50,
  UNSPEC_SIN = 51,
  UNSPEC_COS = 52,
  UNSPEC_FPATAN = 53,
  UNSPEC_FYL2X = 54,
  UNSPEC_FYL2XP1 = 55,
  UNSPEC_FRNDINT = 56,
  UNSPEC_FIST = 57,
  UNSPEC_F2XM1 = 58,
  UNSPEC_TAN = 59,
  UNSPEC_FXAM = 60,
  UNSPEC_FRNDINT_FLOOR = 61,
  UNSPEC_FRNDINT_CEIL = 62,
  UNSPEC_FRNDINT_TRUNC = 63,
  UNSPEC_FRNDINT_MASK_PM = 64,
  UNSPEC_FIST_FLOOR = 65,
  UNSPEC_FIST_CEIL = 66,
  UNSPEC_SINCOS_COS = 67,
  UNSPEC_SINCOS_SIN = 68,
  UNSPEC_XTRACT_FRACT = 69,
  UNSPEC_XTRACT_EXP = 70,
  UNSPEC_FSCALE_FRACT = 71,
  UNSPEC_FSCALE_EXP = 72,
  UNSPEC_FPREM_F = 73,
  UNSPEC_FPREM_U = 74,
  UNSPEC_FPREM1_F = 75,
  UNSPEC_FPREM1_U = 76,
  UNSPEC_C2_FLAG = 77,
  UNSPEC_FXAM_MEM = 78,
  UNSPEC_SP_SET = 79,
  UNSPEC_SP_TEST = 80,
  UNSPEC_ROUND = 81,
  UNSPEC_CRC32 = 82,
  UNSPEC_LZCNT = 83,
  UNSPEC_TZCNT = 84,
  UNSPEC_BEXTR = 85,
  UNSPEC_PDEP = 86,
  UNSPEC_PEXT = 87,
  UNSPEC_BNDMK = 88,
  UNSPEC_BNDMK_ADDR = 89,
  UNSPEC_BNDSTX = 90,
  UNSPEC_BNDLDX = 91,
  UNSPEC_BNDLDX_ADDR = 92,
  UNSPEC_BNDCL = 93,
  UNSPEC_BNDCU = 94,
  UNSPEC_BNDCN = 95,
  UNSPEC_MPX_FENCE = 96,
  UNSPEC_INTERRUPT_RETURN = 97,
  UNSPEC_MOVNTQ = 98,
  UNSPEC_PFRCP = 99,
  UNSPEC_PFRCPIT1 = 100,
  UNSPEC_PFRCPIT2 = 101,
  UNSPEC_PFRSQRT = 102,
  UNSPEC_PFRSQIT1 = 103,
  UNSPEC_MOVNT = 104,
  UNSPEC_LDDQU = 105,
  UNSPEC_PSHUFB = 106,
  UNSPEC_PSIGN = 107,
  UNSPEC_PALIGNR = 108,
  UNSPEC_EXTRQI = 109,
  UNSPEC_EXTRQ = 110,
  UNSPEC_INSERTQI = 111,
  UNSPEC_INSERTQ = 112,
  UNSPEC_BLENDV = 113,
  UNSPEC_INSERTPS = 114,
  UNSPEC_DP = 115,
  UNSPEC_MOVNTDQA = 116,
  UNSPEC_MPSADBW = 117,
  UNSPEC_PHMINPOSUW = 118,
  UNSPEC_PTEST = 119,
  UNSPEC_PCMPESTR = 120,
  UNSPEC_PCMPISTR = 121,
  UNSPEC_FMADDSUB = 122,
  UNSPEC_XOP_UNSIGNED_CMP = 123,
  UNSPEC_XOP_TRUEFALSE = 124,
  UNSPEC_XOP_PERMUTE = 125,
  UNSPEC_FRCZ = 126,
  UNSPEC_AESENC = 127,
  UNSPEC_AESENCLAST = 128,
  UNSPEC_AESDEC = 129,
  UNSPEC_AESDECLAST = 130,
  UNSPEC_AESIMC = 131,
  UNSPEC_AESKEYGENASSIST = 132,
  UNSPEC_PCLMUL = 133,
  UNSPEC_PCMP = 134,
  UNSPEC_VPERMIL = 135,
  UNSPEC_VPERMIL2 = 136,
  UNSPEC_VPERMIL2F128 = 137,
  UNSPEC_CAST = 138,
  UNSPEC_VTESTP = 139,
  UNSPEC_VCVTPH2PS = 140,
  UNSPEC_VCVTPS2PH = 141,
  UNSPEC_VPERMVAR = 142,
  UNSPEC_VPERMTI = 143,
  UNSPEC_GATHER = 144,
  UNSPEC_VSIBADDR = 145,
  UNSPEC_VPERMT2 = 146,
  UNSPEC_UNSIGNED_FIX_NOTRUNC = 147,
  UNSPEC_UNSIGNED_PCMP = 148,
  UNSPEC_TESTM = 149,
  UNSPEC_TESTNM = 150,
  UNSPEC_SCATTER = 151,
  UNSPEC_RCP14 = 152,
  UNSPEC_RSQRT14 = 153,
  UNSPEC_FIXUPIMM = 154,
  UNSPEC_SCALEF = 155,
  UNSPEC_VTERNLOG = 156,
  UNSPEC_GETEXP = 157,
  UNSPEC_GETMANT = 158,
  UNSPEC_ALIGN = 159,
  UNSPEC_CONFLICT = 160,
  UNSPEC_COMPRESS = 161,
  UNSPEC_COMPRESS_STORE = 162,
  UNSPEC_EXPAND = 163,
  UNSPEC_MASKED_EQ = 164,
  UNSPEC_MASKED_GT = 165,
  UNSPEC_MASKOP = 166,
  UNSPEC_KORTEST = 167,
  UNSPEC_KTEST = 168,
  UNSPEC_EMBEDDED_ROUNDING = 169,
  UNSPEC_GATHER_PREFETCH = 170,
  UNSPEC_SCATTER_PREFETCH = 171,
  UNSPEC_EXP2 = 172,
  UNSPEC_RCP28 = 173,
  UNSPEC_RSQRT28 = 174,
  UNSPEC_SHA1MSG1 = 175,
  UNSPEC_SHA1MSG2 = 176,
  UNSPEC_SHA1NEXTE = 177,
  UNSPEC_SHA1RNDS4 = 178,
  UNSPEC_SHA256MSG1 = 179,
  UNSPEC_SHA256MSG2 = 180,
  UNSPEC_SHA256RNDS2 = 181,
  UNSPEC_DBPSADBW = 182,
  UNSPEC_PMADDUBSW512 = 183,
  UNSPEC_PMADDWD512 = 184,
  UNSPEC_PSHUFHW = 185,
  UNSPEC_PSHUFLW = 186,
  UNSPEC_CVTINT2MASK = 187,
  UNSPEC_REDUCE = 188,
  UNSPEC_FPCLASS = 189,
  UNSPEC_RANGE = 190,
  UNSPEC_VPMADD52LUQ = 191,
  UNSPEC_VPMADD52HUQ = 192,
  UNSPEC_VPMULTISHIFT = 193,
  UNSPEC_VP4FMADD = 194,
  UNSPEC_VP4FNMADD = 195,
  UNSPEC_VP4DPWSSD = 196,
  UNSPEC_VP4DPWSSDS = 197,
  UNSPEC_GF2P8AFFINEINV = 198,
  UNSPEC_GF2P8AFFINE = 199,
  UNSPEC_GF2P8MUL = 200,
  UNSPEC_VPSHLD = 201,
  UNSPEC_VPSHRD = 202,
  UNSPEC_VPSHRDV = 203,
  UNSPEC_VPSHLDV = 204,
  UNSPEC_VPMADDUBSWACCD = 205,
  UNSPEC_VPMADDUBSWACCSSD = 206,
  UNSPEC_VPMADDWDACCD = 207,
  UNSPEC_VPMADDWDACCSSD = 208,
  UNSPEC_VAESDEC = 209,
  UNSPEC_VAESDECLAST = 210,
  UNSPEC_VAESENC = 211,
  UNSPEC_VAESENCLAST = 212,
  UNSPEC_VPCLMULQDQ = 213,
  UNSPEC_VPSHUFBIT = 214,
  UNSPEC_LFENCE = 215,
  UNSPEC_SFENCE = 216,
  UNSPEC_MFENCE = 217,
  UNSPEC_FILD_ATOMIC = 218,
  UNSPEC_FIST_ATOMIC = 219,
  UNSPEC_LDX_ATOMIC = 220,
  UNSPEC_STX_ATOMIC = 221,
  UNSPEC_LDA = 222,
  UNSPEC_STA = 223
};

extern const char *const unspec_strings[];

enum unspecv {
  UNSPECV_UD2 = 0,
  UNSPECV_BLOCKAGE = 1,
  UNSPECV_STACK_PROBE = 2,
  UNSPECV_PROBE_STACK_RANGE = 3,
  UNSPECV_ALIGN = 4,
  UNSPECV_PROLOGUE_USE = 5,
  UNSPECV_SPLIT_STACK_RETURN = 6,
  UNSPECV_CLD = 7,
  UNSPECV_NOPS = 8,
  UNSPECV_RDTSC = 9,
  UNSPECV_RDTSCP = 10,
  UNSPECV_RDPMC = 11,
  UNSPECV_LLWP_INTRINSIC = 12,
  UNSPECV_SLWP_INTRINSIC = 13,
  UNSPECV_LWPVAL_INTRINSIC = 14,
  UNSPECV_LWPINS_INTRINSIC = 15,
  UNSPECV_RDFSBASE = 16,
  UNSPECV_RDGSBASE = 17,
  UNSPECV_WRFSBASE = 18,
  UNSPECV_WRGSBASE = 19,
  UNSPECV_FXSAVE = 20,
  UNSPECV_FXRSTOR = 21,
  UNSPECV_FXSAVE64 = 22,
  UNSPECV_FXRSTOR64 = 23,
  UNSPECV_XSAVE = 24,
  UNSPECV_XRSTOR = 25,
  UNSPECV_XSAVE64 = 26,
  UNSPECV_XRSTOR64 = 27,
  UNSPECV_XSAVEOPT = 28,
  UNSPECV_XSAVEOPT64 = 29,
  UNSPECV_XSAVES = 30,
  UNSPECV_XRSTORS = 31,
  UNSPECV_XSAVES64 = 32,
  UNSPECV_XRSTORS64 = 33,
  UNSPECV_XSAVEC = 34,
  UNSPECV_XSAVEC64 = 35,
  UNSPECV_XGETBV = 36,
  UNSPECV_XSETBV = 37,
  UNSPECV_FNSTENV = 38,
  UNSPECV_FLDENV = 39,
  UNSPECV_FNSTSW = 40,
  UNSPECV_FNCLEX = 41,
  UNSPECV_RDRAND = 42,
  UNSPECV_RDSEED = 43,
  UNSPECV_XBEGIN = 44,
  UNSPECV_XEND = 45,
  UNSPECV_XABORT = 46,
  UNSPECV_XTEST = 47,
  UNSPECV_NLGR = 48,
  UNSPECV_CLWB = 49,
  UNSPECV_CLFLUSHOPT = 50,
  UNSPECV_MONITORX = 51,
  UNSPECV_MWAITX = 52,
  UNSPECV_CLZERO = 53,
  UNSPECV_PKU = 54,
  UNSPECV_RDPID = 55,
  UNSPECV_NOP_ENDBR = 56,
  UNSPECV_NOP_RDSSP = 57,
  UNSPECV_INCSSP = 58,
  UNSPECV_SAVEPREVSSP = 59,
  UNSPECV_RSTORSSP = 60,
  UNSPECV_WRSS = 61,
  UNSPECV_WRUSS = 62,
  UNSPECV_SETSSBSY = 63,
  UNSPECV_CLRSSBSY = 64,
  UNSPECV_EMMS = 65,
  UNSPECV_FEMMS = 66,
  UNSPECV_LDMXCSR = 67,
  UNSPECV_STMXCSR = 68,
  UNSPECV_CLFLUSH = 69,
  UNSPECV_MONITOR = 70,
  UNSPECV_MWAIT = 71,
  UNSPECV_VZEROALL = 72,
  UNSPECV_VZEROUPPER = 73,
  UNSPECV_CMPXCHG = 74,
  UNSPECV_XCHG = 75,
  UNSPECV_LOCK = 76
};

extern const char *const unspecv_strings[];
# 24 "./tm.h" 2
# 1 "../../gcc/config/vxworks-dummy.h" 1
# 25 "./tm.h" 2
# 1 "../../gcc/config/i386/biarch64.h" 1
# 26 "./tm.h" 2
# 1 "../../gcc/config/i386/i386.h" 1
# 194 "../../gcc/config/i386/i386.h"
# 1 "../../gcc/config/vxworks-dummy.h" 1
# 195 "../../gcc/config/i386/i386.h" 2
# 212 "../../gcc/config/i386/i386.h"
struct stringop_algs
{
  const enum stringop_alg unknown_size;
  const struct stringop_strategy {
    const int max;
    const enum stringop_alg alg;
    int noalign;
  } size [4];
};



struct processor_costs {
  const int add;
  const int lea;
  const int shift_var;
  const int shift_const;
  const int mult_init[5];

  const int mult_bit;
  const int divide[5];

  int movsx;
  int movzx;
  const int large_insn;
  const int move_ratio;

  const int movzbl_load;
  const int int_load[3];


  const int int_store[3];

  const int fp_move;
  const int fp_load[3];

  const int fp_store[3];

  const int mmx_move;
  const int mmx_load[2];

  const int mmx_store[2];

  const int xmm_move, ymm_move,
     zmm_move;
  const int sse_load[5];

  const int sse_unaligned_load[5];
  const int sse_store[5];

  const int sse_unaligned_store[5];
  const int mmxsse_to_integer;

  const int ssemmx_to_integer;
  const int gather_static, gather_per_elt;

  const int scatter_static, scatter_per_elt;

  const int l1_cache_size;
  const int l2_cache_size;
  const int prefetch_block;
  const int simultaneous_prefetches;

  const int branch_cost;
  const int fadd;
  const int fmul;
  const int fdiv;
  const int fabs;
  const int fchs;
  const int fsqrt;


  const int sse_op;
  const int addss;
  const int mulss;
  const int mulsd;
  const int fmass;
  const int fmasd;
  const int divss;
  const int divsd;
  const int sqrtss;
  const int sqrtsd;
  const int reassoc_int, reassoc_fp, reassoc_vec_int, reassoc_vec_fp;






  struct stringop_algs *memcpy, *memset;
  const int cond_taken_branch_cost;

  const int cond_not_taken_branch_cost;

};

extern const struct processor_costs *ix86_cost;
extern const struct processor_costs ix86_size_cost;
# 399 "../../gcc/config/i386/i386.h"
enum ix86_tune_indices {


# 1 "../../gcc/config/i386/x86-tune.def" 1
# 42 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_SCHEDULE,







X86_TUNE_PARTIAL_REG_DEPENDENCY,
# 61 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY,







X86_TUNE_SSE_SPLIT_REGS,
# 80 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_FLAG_REG_STALL,




X86_TUNE_MOVX,






X86_TUNE_MEMORY_MISMATCH_STALL,





X86_TUNE_FUSE_CMP_AND_BRANCH_32,




X86_TUNE_FUSE_CMP_AND_BRANCH_64,





X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS,





X86_TUNE_FUSE_ALU_AND_BRANCH,
# 131 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_ACCUMULATE_OUTGOING_ARGS,





X86_TUNE_PROLOGUE_USING_MOVE,




X86_TUNE_EPILOGUE_USING_MOVE,



X86_TUNE_USE_LEAVE,





X86_TUNE_PUSH_MEMORY,





X86_TUNE_SINGLE_PUSH,




X86_TUNE_DOUBLE_PUSH,




X86_TUNE_SINGLE_POP,




X86_TUNE_DOUBLE_POP,







X86_TUNE_PAD_SHORT_FUNCTION,






X86_TUNE_PAD_RETURNS,




X86_TUNE_FOUR_JUMP_LIMIT,
# 204 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL,




X86_TUNE_LCP_STALL,



X86_TUNE_READ_MODIFY,







X86_TUNE_USE_INCDEC,





X86_TUNE_INTEGER_DFMODE_MOVES,





X86_TUNE_OPT_AGU,



X86_TUNE_AVOID_LEA_FOR_ADDR,





X86_TUNE_SLOW_IMUL_IMM32_MEM,





X86_TUNE_SLOW_IMUL_IMM8,




X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE,




X86_TUNE_SINGLE_STRINGOP,






X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,




X86_TUNE_USE_SAHF,





X86_TUNE_USE_CLTD,




X86_TUNE_USE_BT,





X86_TUNE_AVOID_FALSE_DEP_FOR_BMI,






X86_TUNE_ADJUST_UNROLL,



X86_TUNE_ONE_IF_CONV_INSN,
# 309 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_USE_HIMODE_FIOP,




X86_TUNE_USE_SIMODE_FIOP,




X86_TUNE_USE_FFREEP,


X86_TUNE_EXT_80387_CONSTANTS,
# 332 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_GENERAL_REGS_SSE_SPILL,




X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL,





X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL,





X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL,



X86_TUNE_SSE_TYPELESS_STORES,




X86_TUNE_SSE_LOAD0_BY_PXOR,






X86_TUNE_INTER_UNIT_MOVES_TO_VEC,





X86_TUNE_INTER_UNIT_MOVES_FROM_VEC,




X86_TUNE_INTER_UNIT_CONVERSIONS,




X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS,





X86_TUNE_USE_VECTOR_FP_CONVERTS,




X86_TUNE_USE_VECTOR_CONVERTS,


X86_TUNE_SLOW_PSHUFB,



X86_TUNE_AVOID_4BYTE_PREFIXES,



X86_TUNE_USE_GATHER,




X86_TUNE_AVOID_128FMA_CHAINS,







X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL,




X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL,




X86_TUNE_AVX128_OPTIMAL,




X86_TUNE_AVX256_OPTIMAL,







X86_TUNE_DOUBLE_WITH_ADD,




X86_TUNE_ALWAYS_FANCY_MATH_387,






X86_TUNE_UNROLL_STRLEN,



X86_TUNE_SHIFT1,



X86_TUNE_ZERO_EXTEND_WITH_AND,




X86_TUNE_PROMOTE_HIMODE_IMUL,





X86_TUNE_FAST_PREFIX,




X86_TUNE_READ_MODIFY_WRITE,




X86_TUNE_MOVE_M1_VIA_OR,



X86_TUNE_NOT_UNPAIRABLE,
# 496 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_REG_STALL,



X86_TUNE_PROMOTE_QIMODE,




X86_TUNE_PROMOTE_HI_REGS,



X86_TUNE_HIMODE_MATH,



X86_TUNE_SPLIT_LONG_MOVES,


X86_TUNE_USE_XCHGB,



X86_TUNE_USE_MOV0,




X86_TUNE_NOT_VECTORMODE,



X86_TUNE_AVOID_VECTOR_DECODE,
# 540 "../../gcc/config/i386/x86-tune.def"
X86_TUNE_BRANCH_PREDICTION_HINTS,


X86_TUNE_QIMODE_MATH,




X86_TUNE_PROMOTE_QI_REGS,



X86_TUNE_EMIT_VZEROUPPER,
# 403 "../../gcc/config/i386/i386.h" 2

X86_TUNE_LAST
};

extern unsigned char ix86_tune_features[X86_TUNE_LAST];
# 538 "../../gcc/config/i386/i386.h"
enum ix86_arch_indices {
  X86_ARCH_CMOV,
  X86_ARCH_CMPXCHG,
  X86_ARCH_CMPXCHG8B,
  X86_ARCH_XADD,
  X86_ARCH_BSWAP,

  X86_ARCH_LAST
};

extern unsigned char ix86_arch_features[X86_ARCH_LAST];
# 563 "../../gcc/config/i386/i386.h"
extern unsigned char x86_prefetch_sse;
# 593 "../../gcc/config/i386/i386.h"
extern tree x86_mfence;
# 651 "../../gcc/config/i386/i386.h"
extern const char *host_detect_local_cpu (int argc, const char **argv);
# 1314 "../../gcc/config/i386/i386.h"
enum reg_class
{
  NO_REGS,
  AREG, DREG, CREG, BREG, SIREG, DIREG,
  AD_REGS,
  CLOBBERED_REGS,
  Q_REGS,
  NON_Q_REGS,
  TLS_GOTBASE_REGS,
  INDEX_REGS,
  LEGACY_REGS,
  GENERAL_REGS,

  FP_TOP_REG, FP_SECOND_REG,
  FLOAT_REGS,
  SSE_FIRST_REG,
  NO_REX_SSE_REGS,
  SSE_REGS,
  EVEX_SSE_REGS,
  BND_REGS,
  ALL_SSE_REGS,
  MMX_REGS,
  FP_TOP_SSE_REGS,
  FP_SECOND_SSE_REGS,
  FLOAT_SSE_REGS,
  FLOAT_INT_REGS,
  INT_SSE_REGS,
  FLOAT_INT_SSE_REGS,
  MASK_EVEX_REGS,
  MASK_REGS,
  MOD4_SSE_REGS,
  ALL_REGS, LIM_REG_CLASSES
};
# 1634 "../../gcc/config/i386/i386.h"
typedef struct ix86_args {
  int words;
  int nregs;
  int regno;
  int fastcall;

  int sse_words;
  int sse_nregs;
  int warn_avx512f;

  int warn_avx;
  int warn_sse;
  int warn_mmx;
  int warn_empty;

  int sse_regno;
  int mmx_words;
  int mmx_nregs;
  int mmx_regno;
  int maybe_vaarg;
  int caller;
  int float_in_sse;


  int bnd_regno;
  int bnds_in_bt;
  int force_bnd_pass;
  int stdarg;
  enum calling_abi call_abi;

  tree decl;
} CUMULATIVE_ARGS;
# 2090 "../../gcc/config/i386/i386.h"
extern int const dbx_register_map[81];
extern int const dbx64_register_map[81];
extern int const svr4_dbx_register_map[81];
# 2247 "../../gcc/config/i386/i386.h"
enum processor_type
{
  PROCESSOR_GENERIC = 0,
  PROCESSOR_I386,
  PROCESSOR_I486,
  PROCESSOR_PENTIUM,
  PROCESSOR_LAKEMONT,
  PROCESSOR_PENTIUMPRO,
  PROCESSOR_PENTIUM4,
  PROCESSOR_NOCONA,
  PROCESSOR_CORE2,
  PROCESSOR_NEHALEM,
  PROCESSOR_SANDYBRIDGE,
  PROCESSOR_HASWELL,
  PROCESSOR_BONNELL,
  PROCESSOR_SILVERMONT,
  PROCESSOR_KNL,
  PROCESSOR_KNM,
  PROCESSOR_SKYLAKE_AVX512,
  PROCESSOR_CANNONLAKE,
  PROCESSOR_ICELAKE,
  PROCESSOR_INTEL,
  PROCESSOR_GEODE,
  PROCESSOR_K6,
  PROCESSOR_ATHLON,
  PROCESSOR_K8,
  PROCESSOR_AMDFAM10,
  PROCESSOR_BDVER1,
  PROCESSOR_BDVER2,
  PROCESSOR_BDVER3,
  PROCESSOR_BDVER4,
  PROCESSOR_BTVER1,
  PROCESSOR_BTVER2,
  PROCESSOR_ZNVER1,
  PROCESSOR_max
};

extern enum processor_type ix86_tune;
extern enum processor_type ix86_arch;






extern unsigned int ix86_preferred_stack_boundary;
extern unsigned int ix86_incoming_stack_boundary;


extern enum reg_class const regclass_map[81];

enum ix86_fpcmp_strategy {
  IX86_FPCMP_SAHF,
  IX86_FPCMP_COMI,
  IX86_FPCMP_ARITH
};
# 2319 "../../gcc/config/i386/i386.h"
enum ix86_stack_slot
{
  SLOT_TEMP = 0,
  SLOT_CW_STORED,
  SLOT_CW_TRUNC,
  SLOT_CW_FLOOR,
  SLOT_CW_CEIL,
  SLOT_CW_MASK_PM,
  SLOT_STV_TEMP,
  MAX_386_STACK_LOCALS
};

enum ix86_entity
{
  X86_DIRFLAG = 0,
  AVX_U128,
  I387_TRUNC,
  I387_FLOOR,
  I387_CEIL,
  I387_MASK_PM,
  MAX_386_ENTITIES
};

enum x86_dirflag_state
{
  X86_DIRFLAG_RESET,
  X86_DIRFLAG_ANY
};

enum avx_u128_state
{
  AVX_U128_CLEAN,
  AVX_U128_DIRTY,
  AVX_U128_ANY
};
# 2432 "../../gcc/config/i386/i386.h"
struct ix86_frame
{
  int nsseregs;
  int nregs;
  int va_arg_size;
  int red_zone_size;
  int outgoing_arguments_size;


  long frame_pointer_offset;
  long hard_frame_pointer_offset;
  long stack_pointer_offset;
  long hfp_save_offset;
  long reg_save_offset;
  long stack_realign_allocate;
  long stack_realign_offset;
  long sse_reg_save_offset;



  bool save_regs_using_mov;
};





struct machine_frame_state
{



  rtx cfa_reg;
  long cfa_offset;





  long sp_offset;
  long fp_offset;





  int red_zone_offset;





  unsigned int sp_valid : 1;
  unsigned int fp_valid : 1;
  unsigned int drap_valid : 1;




  unsigned int realigned : 1;






  unsigned int sp_realigned : 1;



  long sp_realigned_fp_last;





  long sp_realigned_offset;
};


struct seh_frame_state;

enum function_type
{
  TYPE_UNKNOWN = 0,
  TYPE_NORMAL,


  TYPE_INTERRUPT,



  TYPE_EXCEPTION
};

struct machine_function {
  struct stack_local_entry *stack_locals;
  int varargs_gpr_size;
  int varargs_fpr_size;
  int optimize_mode_switching[MAX_386_ENTITIES];


  struct ix86_frame frame;






  rtx split_stack_varargs_pointer;



  enum calling_abi call_abi : 8;


  unsigned int accesses_prev_frame : 1;



  unsigned int use_fast_prologue_epilogue : 1;



  unsigned int pc_thunk_call_expanded : 1;
# 2567 "../../gcc/config/i386/i386.h"
  unsigned int tls_descriptor_call_expanded_p : 1;



  unsigned int static_chain_on_stack : 1;


  unsigned int no_drap_save_restore : 1;


  enum function_type func_type : 2;


  enum indirect_branch indirect_branch_type : 3;



  unsigned int has_local_indirect_jump : 1;


  enum indirect_branch function_return_type : 3;



  unsigned int no_caller_saved_registers : 1;






  unsigned int arg_reg_available : 1;



  unsigned int call_ms2sysv : 1;



  unsigned int call_ms2sysv_pad_in : 1;





  unsigned int call_ms2sysv_extra_regs:3;


  unsigned int outgoing_args_on_stack : 1;


  unsigned int max_used_stack_alignment;



  struct machine_frame_state fs;


  struct seh_frame_state * seh;
};
# 2669 "../../gcc/config/i386/i386.h"
extern void debug_ready_dispatch (void);
extern void debug_dispatch_window (int);
# 27 "./tm.h" 2
# 1 "../../gcc/config/i386/unix.h" 1
# 28 "./tm.h" 2
# 1 "../../gcc/config/i386/att.h" 1
# 29 "./tm.h" 2
# 1 "../../gcc/config/dbxelf.h" 1
# 30 "./tm.h" 2
# 1 "../../gcc/config/elfos.h" 1
# 31 "./tm.h" 2
# 1 "../../gcc/config/gnu-user.h" 1
# 32 "./tm.h" 2
# 1 "../../gcc/config/glibc-stdint.h" 1
# 33 "./tm.h" 2
# 1 "../../gcc/config/i386/x86-64.h" 1
# 34 "./tm.h" 2
# 1 "../../gcc/config/i386/gnu-user-common.h" 1
# 35 "./tm.h" 2
# 1 "../../gcc/config/i386/gnu-user64.h" 1
# 36 "./tm.h" 2
# 1 "../../gcc/config/linux.h" 1
# 37 "./tm.h" 2
# 1 "../../gcc/config/linux-android.h" 1
# 38 "./tm.h" 2
# 1 "../../gcc/config/i386/linux-common.h" 1
# 125 "../../gcc/config/i386/linux-common.h"
extern void file_end_indicate_exec_stack_and_cet (void);
# 39 "./tm.h" 2
# 1 "../../gcc/config/i386/linux64.h" 1
# 40 "./tm.h" 2
# 1 "../../gcc/config/initfini-array.h" 1
# 41 "./tm.h" 2


# 1 "./insn-flags.h" 1
# 6821 "./insn-flags.h"
extern rtx gen_x86_fnstsw_1 (rtx);
extern rtx gen_x86_sahf_1 (rtx);
extern rtx gen_insvhi_1 (rtx, rtx);
extern rtx gen_insvsi_1 (rtx, rtx);
extern rtx gen_insvdi_1 (rtx, rtx);
extern rtx gen_swapxf (rtx, rtx);
extern rtx gen_zero_extendqidi2 (rtx, rtx);
extern rtx gen_zero_extendhidi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2_and (rtx, rtx);
extern rtx gen_zero_extendhisi2_and (rtx, rtx);
extern rtx gen_zero_extendqihi2_and (rtx, rtx);
extern rtx gen_extendsidi2_1 (rtx, rtx);
extern rtx gen_extendqidi2 (rtx, rtx);
extern rtx gen_extendhidi2 (rtx, rtx);
extern rtx gen_extendhisi2 (rtx, rtx);
extern rtx gen_extendqisi2 (rtx, rtx);
extern rtx gen_extendqihi2 (rtx, rtx);
extern rtx gen_truncxfsf2_i387_noop (rtx, rtx);
extern rtx gen_truncxfdf2_i387_noop (rtx, rtx);
extern rtx gen_fix_truncsfsi_sse (rtx, rtx);
extern rtx gen_fix_truncsfdi_sse (rtx, rtx);
extern rtx gen_fix_truncdfsi_sse (rtx, rtx);
extern rtx gen_fix_truncdfdi_sse (rtx, rtx);
extern rtx gen_fix_trunchi_fisttp_i387_1 (rtx, rtx);
extern rtx gen_fix_truncsi_fisttp_i387_1 (rtx, rtx);
extern rtx gen_fix_truncdi_fisttp_i387_1 (rtx, rtx);
extern rtx gen_fix_trunchi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncsi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncdi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_trunchi_i387_fisttp_with_temp (rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387_fisttp_with_temp (rtx, rtx, rtx);
extern rtx gen_fix_truncdi_i387_fisttp_with_temp (rtx, rtx, rtx);
extern rtx gen_fix_truncdi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncdi_i387_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_i387_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_x86_fnstcw_1 (rtx);
extern rtx gen_x86_fldcw_1 (rtx);
extern rtx gen_floathisf2 (rtx, rtx);
extern rtx gen_floathidf2 (rtx, rtx);
extern rtx gen_floathixf2 (rtx, rtx);
extern rtx gen_floatsixf2 (rtx, rtx);
extern rtx gen_floatdixf2 (rtx, rtx);
extern rtx gen_floatdisf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatdidf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatdixf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_addsi_1_zext (rtx, rtx, rtx);
extern rtx gen_addqi_ext_1 (rtx, rtx, rtx);
extern rtx gen_addqi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addhi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addsi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_adddi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addcarrysi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addcarrydi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subqi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subhi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subdi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry_ccc (rtx, rtx, rtx);
extern rtx gen_subdi3_carry_ccc (rtx, rtx, rtx);
extern rtx gen_subsi3_carry_ccgz (rtx, rtx, rtx);
extern rtx gen_subdi3_carry_ccgz (rtx, rtx, rtx);
extern rtx gen_subborrowsi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subborrowdi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_divmoddi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4_zext_1 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4_zext_2 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodhiqi3 (rtx, rtx, rtx);
extern rtx gen_udivmodsi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmoddi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4_zext_1 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4_zext_2 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodhiqi3 (rtx, rtx, rtx);
extern rtx gen_andqi_ext_1 (rtx, rtx, rtx);
extern rtx gen_copysignsf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysigndf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysigntf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysignsf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysigndf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysigntf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_x86_64_shld (rtx, rtx, rtx);
extern rtx gen_x86_shld (rtx, rtx, rtx);
extern rtx gen_x86_64_shrd (rtx, rtx, rtx);
extern rtx gen_x86_shrd (rtx, rtx, rtx);
extern rtx gen_ashrdi3_cvt (rtx, rtx, rtx);
extern rtx gen_ashrsi3_cvt (rtx, rtx, rtx);
extern rtx gen_ix86_rotldi3_doubleword (rtx, rtx, rtx);
extern rtx gen_ix86_rotlti3_doubleword (rtx, rtx, rtx);
extern rtx gen_ix86_rotrdi3_doubleword (rtx, rtx, rtx);
extern rtx gen_ix86_rotrti3_doubleword (rtx, rtx, rtx);
extern rtx gen_setcc_sf_sse (rtx, rtx, rtx, rtx);
extern rtx gen_setcc_df_sse (rtx, rtx, rtx, rtx);
extern rtx gen_jump (rtx);
extern rtx gen_blockage (void);
extern rtx gen_prologue_use (rtx);
extern rtx gen_simple_return_internal (void);
extern rtx gen_interrupt_return (void);
extern rtx gen_simple_return_internal_long (void);
extern rtx gen_simple_return_pop_internal (rtx);
extern rtx gen_simple_return_indirect_internal (rtx);
extern rtx gen_nop (void);
extern rtx gen_nops (rtx);
extern rtx gen_pad (rtx);
extern rtx gen_set_got_rex64 (rtx);
extern rtx gen_set_rip_rex64 (rtx, rtx);
extern rtx gen_set_got_offset_rex64 (rtx, rtx);
extern rtx gen_eh_return_internal (void);
extern rtx gen_leave (void);
extern rtx gen_leave_rex64 (void);
extern rtx gen_split_stack_return (rtx);
extern rtx gen_ffssi2_no_cmove (rtx, rtx);
extern rtx gen_ctzsi2 (rtx, rtx);
extern rtx gen_ctzdi2 (rtx, rtx);
extern rtx gen_bsr_rex64 (rtx, rtx);
extern rtx gen_bsr (rtx, rtx);
extern rtx gen_clzsi2_lzcnt (rtx, rtx);
extern rtx gen_clzdi2_lzcnt (rtx, rtx);
extern rtx gen_tzcnt_si (rtx, rtx);
extern rtx gen_lzcnt_si (rtx, rtx);
extern rtx gen_tzcnt_di (rtx, rtx);
extern rtx gen_lzcnt_di (rtx, rtx);
extern rtx gen_tzcnt_hi (rtx, rtx);
extern rtx gen_lzcnt_hi (rtx, rtx);
extern rtx gen_bmi_bextr_si (rtx, rtx, rtx);
extern rtx gen_bmi_bextr_di (rtx, rtx, rtx);
extern rtx gen_bmi2_pdep_si3 (rtx, rtx, rtx);
extern rtx gen_bmi2_pdep_di3 (rtx, rtx, rtx);
extern rtx gen_bmi2_pext_si3 (rtx, rtx, rtx);
extern rtx gen_bmi2_pext_di3 (rtx, rtx, rtx);
extern rtx gen_tbm_bextri_si (rtx, rtx, rtx, rtx);
extern rtx gen_tbm_bextri_di (rtx, rtx, rtx, rtx);
extern rtx gen_popcountsi2 (rtx, rtx);
extern rtx gen_popcountdi2 (rtx, rtx);
extern rtx gen_popcounthi2 (rtx, rtx);
extern rtx gen_bswaphi_lowpart (rtx);
extern rtx gen_paritydi2_cmp (rtx, rtx, rtx, rtx);
extern rtx gen_paritysi2_cmp (rtx, rtx, rtx);
static inline rtx gen_tls_initial_exec_64_sun (rtx, rtx);
static inline rtx
gen_tls_initial_exec_64_sun(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_truncxfsf2_i387_noop_unspec (rtx, rtx);
extern rtx gen_truncxfdf2_i387_noop_unspec (rtx, rtx);
extern rtx gen_sqrtxf2 (rtx, rtx);
extern rtx gen_sqrt_extendsfxf2_i387 (rtx, rtx);
extern rtx gen_sqrt_extenddfxf2_i387 (rtx, rtx);
extern rtx gen_fpremxf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fprem1xf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_sincosxf3 (rtx, rtx, rtx);
extern rtx gen_sincos_extendsfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_sincos_extenddfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fptanxf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fptan_extendsfxf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fptan_extenddfxf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fpatan_extendsfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fpatan_extenddfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2xxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2x_extendsfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2x_extenddfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2xp1xf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2xp1_extendsfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2xp1_extenddfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fxtractxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fxtract_extendsfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fxtract_extenddfxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fscalexf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_roundsf2 (rtx, rtx, rtx);
extern rtx gen_sse4_1_rounddf2 (rtx, rtx, rtx);
extern rtx gen_rintxf2 (rtx, rtx);
extern rtx gen_rintsf2_frndint (rtx, rtx);
extern rtx gen_rintdf2_frndint (rtx, rtx);
extern rtx gen_fistdi2 (rtx, rtx);
extern rtx gen_fistdi2_with_temp (rtx, rtx, rtx);
extern rtx gen_fisthi2 (rtx, rtx);
extern rtx gen_fistsi2 (rtx, rtx);
extern rtx gen_fisthi2_with_temp (rtx, rtx, rtx);
extern rtx gen_fistsi2_with_temp (rtx, rtx, rtx);
extern rtx gen_frndintsf2_floor (rtx, rtx);
extern rtx gen_frndintsf2_ceil (rtx, rtx);
extern rtx gen_frndintsf2_trunc (rtx, rtx);
extern rtx gen_frndintdf2_floor (rtx, rtx);
extern rtx gen_frndintdf2_ceil (rtx, rtx);
extern rtx gen_frndintdf2_trunc (rtx, rtx);
extern rtx gen_frndintxf2_floor (rtx, rtx);
extern rtx gen_frndintxf2_ceil (rtx, rtx);
extern rtx gen_frndintxf2_trunc (rtx, rtx);
extern rtx gen_frndintsf2_floor_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintsf2_ceil_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintsf2_trunc_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintdf2_floor_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintdf2_ceil_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintdf2_trunc_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_floor_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_ceil_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_trunc_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_mask_pm (rtx, rtx);
extern rtx gen_frndintxf2_mask_pm_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_floor_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_ceil_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_floor_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_ceil_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_floor_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_ceil_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fxamsf2_i387 (rtx, rtx);
extern rtx gen_fxamdf2_i387 (rtx, rtx);
extern rtx gen_fxamxf2_i387 (rtx, rtx);
extern rtx gen_fxamsf2_i387_with_temp (rtx, rtx);
extern rtx gen_fxamdf2_i387_with_temp (rtx, rtx);
extern rtx gen_movmsk_df (rtx, rtx);
extern rtx gen_cld (void);
extern rtx gen_smaxsf3 (rtx, rtx, rtx);
extern rtx gen_sminsf3 (rtx, rtx, rtx);
extern rtx gen_smaxdf3 (rtx, rtx, rtx);
extern rtx gen_smindf3 (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_si_add (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_di_add (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_si_sub (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_di_sub (rtx, rtx, rtx);
extern rtx gen_allocate_stack_worker_probe_si (rtx, rtx);
extern rtx gen_allocate_stack_worker_probe_di (rtx, rtx);
extern rtx gen_probe_stack_si (rtx, rtx);
extern rtx gen_probe_stack_di (rtx, rtx);
extern rtx gen_adjust_stack_and_probesi (rtx, rtx, rtx);
extern rtx gen_adjust_stack_and_probedi (rtx, rtx, rtx);
extern rtx gen_probe_stack_rangesi (rtx, rtx, rtx);
extern rtx gen_probe_stack_rangedi (rtx, rtx, rtx);
extern rtx gen_trap (void);
extern rtx gen_ud2 (void);
extern rtx gen_stack_protect_set_si (rtx, rtx);
extern rtx gen_stack_protect_set_di (rtx, rtx);
extern rtx gen_stack_protect_test_si (rtx, rtx, rtx);
extern rtx gen_stack_protect_test_di (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32qi (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32hi (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32si (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32di (rtx, rtx, rtx);
extern rtx gen_rdpmc (rtx, rtx);
extern rtx gen_rdpmc_rex64 (rtx, rtx, rtx);
extern rtx gen_rdtsc (rtx);
extern rtx gen_rdtsc_rex64 (rtx, rtx);
extern rtx gen_rdtscp (rtx, rtx);
extern rtx gen_rdtscp_rex64 (rtx, rtx, rtx);
extern rtx gen_fxsave (rtx);
extern rtx gen_fxsave64 (rtx);
extern rtx gen_fxrstor (rtx);
extern rtx gen_fxrstor64 (rtx);
extern rtx gen_xsave (rtx, rtx);
extern rtx gen_xsaveopt (rtx, rtx);
extern rtx gen_xsavec (rtx, rtx);
extern rtx gen_xsaves (rtx, rtx);
extern rtx gen_xsave_rex64 (rtx, rtx, rtx);
extern rtx gen_xsaveopt_rex64 (rtx, rtx, rtx);
extern rtx gen_xsavec_rex64 (rtx, rtx, rtx);
extern rtx gen_xsaves_rex64 (rtx, rtx, rtx);
extern rtx gen_xsave64 (rtx, rtx, rtx);
extern rtx gen_xsaveopt64 (rtx, rtx, rtx);
extern rtx gen_xsavec64 (rtx, rtx, rtx);
extern rtx gen_xsaves64 (rtx, rtx, rtx);
extern rtx gen_xrstor (rtx, rtx);
extern rtx gen_xrstors (rtx, rtx);
extern rtx gen_xrstor_rex64 (rtx, rtx, rtx);
extern rtx gen_xrstors_rex64 (rtx, rtx, rtx);
extern rtx gen_xrstor64 (rtx, rtx, rtx);
extern rtx gen_xrstors64 (rtx, rtx, rtx);
extern rtx gen_xsetbv (rtx, rtx);
extern rtx gen_xsetbv_rex64 (rtx, rtx, rtx);
extern rtx gen_xgetbv (rtx, rtx);
extern rtx gen_xgetbv_rex64 (rtx, rtx, rtx);
extern rtx gen_fnstenv (rtx);
extern rtx gen_fldenv (rtx);
extern rtx gen_fnstsw (rtx);
extern rtx gen_fnclex (void);
extern rtx gen_lwp_slwpcbsi (rtx);
extern rtx gen_lwp_slwpcbdi (rtx);
extern rtx gen_rdfsbasesi (rtx);
extern rtx gen_rdgsbasesi (rtx);
extern rtx gen_rdfsbasedi (rtx);
extern rtx gen_rdgsbasedi (rtx);
extern rtx gen_wrfsbasesi (rtx);
extern rtx gen_wrgsbasesi (rtx);
extern rtx gen_wrfsbasedi (rtx);
extern rtx gen_wrgsbasedi (rtx);
extern rtx gen_rdrandhi_1 (rtx);
extern rtx gen_rdrandsi_1 (rtx);
extern rtx gen_rdranddi_1 (rtx);
extern rtx gen_rdseedhi_1 (rtx);
extern rtx gen_rdseedsi_1 (rtx);
extern rtx gen_rdseeddi_1 (rtx);
extern rtx gen_rdsspsi (rtx);
extern rtx gen_rdsspdi (rtx);
extern rtx gen_incsspsi (rtx);
extern rtx gen_incsspdi (rtx);
extern rtx gen_saveprevssp (void);
extern rtx gen_rstorssp (rtx);
extern rtx gen_wrsssi (rtx, rtx);
extern rtx gen_wrssdi (rtx, rtx);
extern rtx gen_wrusssi (rtx, rtx);
extern rtx gen_wrussdi (rtx, rtx);
extern rtx gen_setssbsy (void);
extern rtx gen_clrssbsy (rtx);
extern rtx gen_nop_endbr (void);
extern rtx gen_xbegin_1 (rtx, rtx);
extern rtx gen_xend (void);
extern rtx gen_xabort (rtx);
extern rtx gen_xtest_1 (void);
extern rtx gen_clwb (rtx);
extern rtx gen_clflushopt (rtx);
extern rtx gen_mwaitx (rtx, rtx, rtx);
extern rtx gen_monitorx_si (rtx, rtx, rtx);
extern rtx gen_monitorx_di (rtx, rtx, rtx);
extern rtx gen_clzero_si (rtx);
extern rtx gen_clzero_di (rtx);
extern rtx gen_move_size_reloc_si (rtx, rtx);
extern rtx gen_move_size_reloc_di (rtx, rtx);
extern rtx gen_rdpid (rtx);
extern rtx gen_rdpid_rex64 (rtx);
extern rtx gen_sse_movntq (rtx, rtx);
extern rtx gen_mmx_ieee_maxv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_ieee_minv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rcpv2sf2 (rtx, rtx);
extern rtx gen_mmx_rcpit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rcpit2v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rsqrtv2sf2 (rtx, rtx);
extern rtx gen_mmx_rsqit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_haddv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_hsubv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_addsubv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_gev2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_pf2id (rtx, rtx);
extern rtx gen_mmx_pf2iw (rtx, rtx);
extern rtx gen_mmx_pi2fw (rtx, rtx);
extern rtx gen_mmx_floatv2si2 (rtx, rtx);
extern rtx gen_mmx_pswapdv2sf2 (rtx, rtx);
extern rtx gen_mmx_ashrv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_andnotv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andnotv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andnotv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_packsswb (rtx, rtx, rtx);
extern rtx gen_mmx_packssdw (rtx, rtx, rtx);
extern rtx gen_mmx_packuswb (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhdq (rtx, rtx, rtx);
extern rtx gen_mmx_punpckldq (rtx, rtx, rtx);
extern rtx gen_mmx_pextrw (rtx, rtx, rtx);
extern rtx gen_mmx_pshufw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pswapdv2si2 (rtx, rtx);
extern rtx gen_mmx_psadbw (rtx, rtx, rtx);
extern rtx gen_mmx_pmovmskb (rtx, rtx);
extern rtx gen_movv64qi_internal (rtx, rtx);
extern rtx gen_movv32qi_internal (rtx, rtx);
extern rtx gen_movv16qi_internal (rtx, rtx);
extern rtx gen_movv32hi_internal (rtx, rtx);
extern rtx gen_movv16hi_internal (rtx, rtx);
extern rtx gen_movv8hi_internal (rtx, rtx);
extern rtx gen_movv16si_internal (rtx, rtx);
extern rtx gen_movv8si_internal (rtx, rtx);
extern rtx gen_movv4si_internal (rtx, rtx);
extern rtx gen_movv8di_internal (rtx, rtx);
extern rtx gen_movv4di_internal (rtx, rtx);
extern rtx gen_movv2di_internal (rtx, rtx);
extern rtx gen_movv4ti_internal (rtx, rtx);
extern rtx gen_movv2ti_internal (rtx, rtx);
extern rtx gen_movv1ti_internal (rtx, rtx);
extern rtx gen_movv16sf_internal (rtx, rtx);
extern rtx gen_movv8sf_internal (rtx, rtx);
extern rtx gen_movv4sf_internal (rtx, rtx);
extern rtx gen_movv8df_internal (rtx, rtx);
extern rtx gen_movv4df_internal (rtx, rtx);
extern rtx gen_movv2df_internal (rtx, rtx);
extern rtx gen_avx512f_loadv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loadv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loadv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loadv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_loadv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_loadv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv16si (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv8si (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4si (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv8di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv2di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv16sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv8sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv8df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_blendmv64qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_blendmv32hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_storev16si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev8si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4si_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev8di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev2di_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev16sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev8sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev8df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev2df_mask (rtx, rtx, rtx);
extern rtx gen_avx512bw_storev64qi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev16qi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev32qi_mask (rtx, rtx, rtx);
extern rtx gen_avx512bw_storev32hi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev16hi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev8hi_mask (rtx, rtx, rtx);
extern rtx gen_sse2_movq128 (rtx, rtx);
extern rtx gen_movdi_to_sse (rtx, rtx);
extern rtx gen_avx_lddqu256 (rtx, rtx);
extern rtx gen_sse3_lddqu (rtx, rtx);
extern rtx gen_sse2_movntisi (rtx, rtx);
extern rtx gen_sse2_movntidi (rtx, rtx);
extern rtx gen_avx512f_movntv16sf (rtx, rtx);
extern rtx gen_avx_movntv8sf (rtx, rtx);
extern rtx gen_sse_movntv4sf (rtx, rtx);
extern rtx gen_avx512f_movntv8df (rtx, rtx);
extern rtx gen_avx_movntv4df (rtx, rtx);
extern rtx gen_sse2_movntv2df (rtx, rtx);
extern rtx gen_avx512f_movntv8di (rtx, rtx);
extern rtx gen_avx_movntv4di (rtx, rtx);
extern rtx gen_sse2_movntv2di (rtx, rtx);
extern rtx gen_kandqi (rtx, rtx, rtx);
extern rtx gen_kiorqi (rtx, rtx, rtx);
extern rtx gen_kxorqi (rtx, rtx, rtx);
extern rtx gen_kandhi (rtx, rtx, rtx);
extern rtx gen_kiorhi (rtx, rtx, rtx);
extern rtx gen_kxorhi (rtx, rtx, rtx);
extern rtx gen_kandsi (rtx, rtx, rtx);
extern rtx gen_kiorsi (rtx, rtx, rtx);
extern rtx gen_kxorsi (rtx, rtx, rtx);
extern rtx gen_kanddi (rtx, rtx, rtx);
extern rtx gen_kiordi (rtx, rtx, rtx);
extern rtx gen_kxordi (rtx, rtx, rtx);
extern rtx gen_kandnqi (rtx, rtx, rtx);
extern rtx gen_kandnhi (rtx, rtx, rtx);
extern rtx gen_kandnsi (rtx, rtx, rtx);
extern rtx gen_kandndi (rtx, rtx, rtx);
extern rtx gen_kxnorqi (rtx, rtx, rtx);
extern rtx gen_kxnorhi (rtx, rtx, rtx);
extern rtx gen_kxnorsi (rtx, rtx, rtx);
extern rtx gen_kxnordi (rtx, rtx, rtx);
extern rtx gen_knotqi (rtx, rtx);
extern rtx gen_knothi (rtx, rtx);
extern rtx gen_knotsi (rtx, rtx);
extern rtx gen_knotdi (rtx, rtx);
extern rtx gen_kaddqi (rtx, rtx, rtx);
extern rtx gen_kaddhi (rtx, rtx, rtx);
extern rtx gen_kaddsi (rtx, rtx, rtx);
extern rtx gen_kadddi (rtx, rtx, rtx);
extern rtx gen_kashiftqi (rtx, rtx, rtx);
extern rtx gen_klshiftrtqi (rtx, rtx, rtx);
extern rtx gen_kashifthi (rtx, rtx, rtx);
extern rtx gen_klshiftrthi (rtx, rtx, rtx);
extern rtx gen_kashiftsi (rtx, rtx, rtx);
extern rtx gen_klshiftrtsi (rtx, rtx, rtx);
extern rtx gen_kashiftdi (rtx, rtx, rtx);
extern rtx gen_klshiftrtdi (rtx, rtx, rtx);
extern rtx gen_ktestqi (rtx, rtx);
extern rtx gen_ktesthi (rtx, rtx);
extern rtx gen_ktestsi (rtx, rtx);
extern rtx gen_ktestdi (rtx, rtx);
extern rtx gen_kortestqi (rtx, rtx);
extern rtx gen_kortesthi (rtx, rtx);
extern rtx gen_kortestsi (rtx, rtx);
extern rtx gen_kortestdi (rtx, rtx);
extern rtx gen_kunpckhi (rtx, rtx, rtx);
extern rtx gen_kunpcksi (rtx, rtx, rtx);
extern rtx gen_kunpckdi (rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3 (rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_divv8sf3 (rtx, rtx, rtx);
static inline rtx gen_avx_divv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_divv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx_divv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_divv4sf3 (rtx, rtx, rtx);
static inline rtx gen_sse_divv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sse_divv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_divv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sse_divv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse_divv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_divv8df3 (rtx, rtx, rtx);
extern rtx gen_avx512f_divv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_divv4df3 (rtx, rtx, rtx);
static inline rtx gen_avx_divv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_divv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx_divv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_divv2df3 (rtx, rtx, rtx);
static inline rtx gen_sse2_divv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sse2_divv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_divv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sse2_divv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse2_divv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_rcpv8sf2 (rtx, rtx);
extern rtx gen_sse_rcpv4sf2 (rtx, rtx);
extern rtx gen_sse_vmrcpv4sf2 (rtx, rtx, rtx);
extern rtx gen_rcp14v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_srcp14v4sf (rtx, rtx, rtx);
extern rtx gen_srcp14v2df (rtx, rtx, rtx);
extern rtx gen_srcp14v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_srcp14v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2 (rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2_round (rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_sqrtv8sf2 (rtx, rtx);
static inline rtx gen_avx_sqrtv8sf2_round (rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv8sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_sqrtv8sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx_sqrtv8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv8sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_sqrtv4sf2 (rtx, rtx);
static inline rtx gen_sse_sqrtv4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_sse_sqrtv4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_sqrtv4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_sse_sqrtv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse_sqrtv4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_sqrtv8df2 (rtx, rtx);
extern rtx gen_avx512f_sqrtv8df2_round (rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv8df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_sqrtv4df2 (rtx, rtx);
static inline rtx gen_avx_sqrtv4df2_round (rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv4df2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_sqrtv4df2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx_sqrtv4df2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv4df2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_sqrtv2df2 (rtx, rtx);
static inline rtx gen_sse2_sqrtv2df2_round (rtx, rtx, rtx);
static inline rtx
gen_sse2_sqrtv2df2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_sqrtv2df2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_sse2_sqrtv2df2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse2_sqrtv2df2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_vmsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_rsqrtv8sf2 (rtx, rtx);
extern rtx gen_sse_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_rsqrt14v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v4sf (rtx, rtx, rtx);
extern rtx gen_rsqrt14v2df (rtx, rtx, rtx);
extern rtx gen_rsqrt14_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmrsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3 (rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3 (rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv8sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv8sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv4sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv8df3 (rtx, rtx, rtx);
extern rtx gen_ieee_maxv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3 (rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv4df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv2df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv2df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_vmsmaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_addsubv4df3 (rtx, rtx, rtx);
extern rtx gen_sse3_addsubv2df3 (rtx, rtx, rtx);
extern rtx gen_avx_addsubv8sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_addsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_avx_haddv4df3 (rtx, rtx, rtx);
extern rtx gen_avx_hsubv4df3 (rtx, rtx, rtx);
extern rtx gen_sse3_hsubv2df3 (rtx, rtx, rtx);
extern rtx gen_avx_haddv8sf3 (rtx, rtx, rtx);
extern rtx gen_avx_hsubv8sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_haddv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_hsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_reducepv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducesv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_reducesv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducesv2df (rtx, rtx, rtx, rtx);
extern rtx gen_reducesv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vmcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vmcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_maskcmpv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_maskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_maskcmpv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_maskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmaskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmaskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8si3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8si3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8si3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv8si3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8si3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8si3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4si3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4si3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4si3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4si3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4si3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4si3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_cmpv8di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8di3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8di3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv4di3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4di3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4di3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4di3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4di3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4di3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2di3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2di3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2di3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2di3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2di3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2di3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_cmpv16sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16sf3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8sf3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8sf3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4sf3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4sf3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_cmpv8df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8df3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv4df3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4df3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2df3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2df3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512bw_cmpv64qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cmpv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv32qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cmpv32hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cmpv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv64qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv32qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv32hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv16si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv8di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_maskcmpv16sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_maskcmpv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_maskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_maskcmpv8df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_maskcmpv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_maskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_comi (rtx, rtx);
extern rtx gen_sse_comi_round (rtx, rtx, rtx);
extern rtx gen_sse_ucomi (rtx, rtx);
extern rtx gen_sse_ucomi_round (rtx, rtx, rtx);
extern rtx gen_sse2_comi (rtx, rtx);
extern rtx gen_sse2_comi_round (rtx, rtx, rtx);
extern rtx gen_sse2_ucomi (rtx, rtx);
extern rtx gen_sse2_ucomi_round (rtx, rtx, rtx);
extern rtx gen_avx_andnotv8sf3 (rtx, rtx, rtx);
extern rtx gen_avx_andnotv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_andnotv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_andnotv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_andnotv4df3 (rtx, rtx, rtx);
extern rtx gen_avx_andnotv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16sf3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8df3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmadd_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmadd_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmadd_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmadd_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsub_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsub_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsub_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmsub_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v8sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v4sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmsub_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v4df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v2df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v8sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v2df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmsub_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmsub_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmsub_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmsub_v2df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmsub_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmaddsub_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmaddsub_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmaddsub_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmaddsub_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsubadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsubadd_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsubadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmsubadd_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_cvtpi2ps (rtx, rtx, rtx);
extern rtx gen_sse_cvtps2pi (rtx, rtx);
extern rtx gen_sse_cvttps2pi (rtx, rtx);
extern rtx gen_sse_cvtsi2ss (rtx, rtx, rtx);
extern rtx gen_sse_cvtsi2ss_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_cvtsi2ssq (rtx, rtx, rtx);
extern rtx gen_sse_cvtsi2ssq_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_cvtss2si (rtx, rtx);
extern rtx gen_sse_cvtss2si_round (rtx, rtx, rtx);
extern rtx gen_sse_cvtss2si_2 (rtx, rtx);
extern rtx gen_sse_cvtss2siq (rtx, rtx);
extern rtx gen_sse_cvtss2siq_round (rtx, rtx, rtx);
extern rtx gen_sse_cvtss2siq_2 (rtx, rtx);
extern rtx gen_sse_cvttss2si (rtx, rtx);
extern rtx gen_sse_cvttss2si_round (rtx, rtx, rtx);
extern rtx gen_sse_cvttss2siq (rtx, rtx);
extern rtx gen_sse_cvttss2siq_round (rtx, rtx, rtx);
extern rtx gen_cvtusi2ss32 (rtx, rtx, rtx);
extern rtx gen_cvtusi2ss32_round (rtx, rtx, rtx, rtx);
extern rtx gen_cvtusi2sd32 (rtx, rtx, rtx);
static inline rtx gen_cvtusi2sd32_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_cvtusi2sd32_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cvtusi2ss64 (rtx, rtx, rtx);
extern rtx gen_cvtusi2ss64_round (rtx, rtx, rtx, rtx);
extern rtx gen_cvtusi2sd64 (rtx, rtx, rtx);
extern rtx gen_cvtusi2sd64_round (rtx, rtx, rtx, rtx);
extern rtx gen_floatv16siv16sf2 (rtx, rtx);
extern rtx gen_floatv16siv16sf2_round (rtx, rtx, rtx);
extern rtx gen_floatv16siv16sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv16siv16sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv8siv8sf2 (rtx, rtx);
static inline rtx gen_floatv8siv8sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatv8siv8sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv8siv8sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatv8siv8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatv8siv8sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv4siv4sf2 (rtx, rtx);
static inline rtx gen_floatv4siv4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatv4siv4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv4siv4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatv4siv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatv4siv4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufloatv16siv16sf2 (rtx, rtx);
extern rtx gen_ufloatv16siv16sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv16siv16sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv16siv16sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8sf2 (rtx, rtx);
extern rtx gen_ufloatv8siv8sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4sf2 (rtx, rtx);
extern rtx gen_ufloatv4siv4sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_fix_notruncv8sfv8si (rtx, rtx);
extern rtx gen_avx_fix_notruncv8sfv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_fix_notruncv4sfv4si (rtx, rtx);
extern rtx gen_sse2_fix_notruncv4sfv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si (rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si_round (rtx, rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ufix_notruncv16sfv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ufix_notruncv16sfv16si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv8sfv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv8sfv8si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv4sfv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv4sfv4si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2qqv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2qqv8di_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2qqv4di_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_cvtps2qqv4di_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_cvtps2qqv4di_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_cvtps2qqv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2uqqv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2uqqv8di_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2uqqv4di_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_cvtps2uqqv4di_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_cvtps2uqqv4di_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_cvtps2uqqv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2 (rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2 (rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8sfv8si2 (rtx, rtx);
extern rtx gen_fix_truncv8sfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4sfv4si2 (rtx, rtx);
extern rtx gen_fix_truncv4sfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtpi2pd (rtx, rtx);
extern rtx gen_sse2_cvtpd2pi (rtx, rtx);
extern rtx gen_sse2_cvttpd2pi (rtx, rtx);
extern rtx gen_sse2_cvtsi2sd (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsi2sdq (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsi2sdq_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtss2usi (rtx, rtx);
extern rtx gen_avx512f_vcvtss2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtss2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvtss2usiq_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttss2usi (rtx, rtx);
extern rtx gen_avx512f_vcvttss2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttss2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvttss2usiq_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usi (rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usiq_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usi (rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usiq_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2si (rtx, rtx);
extern rtx gen_sse2_cvtsd2si_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2si_2 (rtx, rtx);
extern rtx gen_sse2_cvtsd2siq (rtx, rtx);
extern rtx gen_sse2_cvtsd2siq_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2siq_2 (rtx, rtx);
extern rtx gen_sse2_cvttsd2si (rtx, rtx);
extern rtx gen_sse2_cvttsd2si_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvttsd2siq (rtx, rtx);
extern rtx gen_sse2_cvttsd2siq_round (rtx, rtx, rtx);
extern rtx gen_floatv8siv8df2 (rtx, rtx);
extern rtx gen_floatv8siv8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv4siv4df2 (rtx, rtx);
extern rtx gen_floatv4siv4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8df2 (rtx, rtx);
extern rtx gen_floatv8div8df2_round (rtx, rtx, rtx);
extern rtx gen_floatv8div8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8div8df2 (rtx, rtx);
extern rtx gen_ufloatv8div8df2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv8div8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8div8df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv4div4df2 (rtx, rtx);
extern rtx gen_floatv4div4df2_round (rtx, rtx, rtx);
extern rtx gen_floatv4div4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv4div4df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4div4df2 (rtx, rtx);
extern rtx gen_ufloatv4div4df2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv4div4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4div4df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv2div2df2 (rtx, rtx);
extern rtx gen_floatv2div2df2_round (rtx, rtx, rtx);
extern rtx gen_floatv2div2df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv2div2df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv2div2df2 (rtx, rtx);
extern rtx gen_ufloatv2div2df2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv2div2df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv2div2df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8sf2 (rtx, rtx);
extern rtx gen_floatv8div8sf2_round (rtx, rtx, rtx);
extern rtx gen_floatv8div8sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8div8sf2 (rtx, rtx);
extern rtx gen_ufloatv8div8sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv8div8sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8div8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv4div4sf2 (rtx, rtx);
static inline rtx gen_floatv4div4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatv4div4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv4div4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatv4div4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatv4div4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufloatv4div4sf2 (rtx, rtx);
static inline rtx gen_ufloatv4div4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_ufloatv4div4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufloatv4div4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufloatv4div4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufloatv4div4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv2div2sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv2div2sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8df2 (rtx, rtx);
extern rtx gen_ufloatv8siv8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4df2 (rtx, rtx);
extern rtx gen_ufloatv4siv4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv2siv2df2 (rtx, rtx);
extern rtx gen_ufloatv2siv2df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtdq2pd512_2 (rtx, rtx);
extern rtx gen_avx_cvtdq2pd256_2 (rtx, rtx);
extern rtx gen_sse2_cvtdq2pd (rtx, rtx);
extern rtx gen_sse2_cvtdq2pd_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512 (rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512_round (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtpd2dq256 (rtx, rtx);
extern rtx gen_avx_cvtpd2dq256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtpd2dq (rtx, rtx);
extern rtx gen_sse2_cvtpd2dq_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2 (rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2 (rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv2dfv2si2 (rtx, rtx);
extern rtx gen_ufix_notruncv2dfv2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2 (rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8dfv8si2 (rtx, rtx);
extern rtx gen_ufix_truncv8dfv8si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_truncv8dfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8dfv8si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv2dfv2si2 (rtx, rtx);
extern rtx gen_ufix_truncv2dfv2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4dfv4si2 (rtx, rtx);
extern rtx gen_fix_truncv4dfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv4dfv4si2 (rtx, rtx);
extern rtx gen_ufix_truncv4dfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2 (rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8dfv8di2 (rtx, rtx);
extern rtx gen_ufix_truncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_ufix_truncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4dfv4di2 (rtx, rtx);
static inline rtx gen_fix_truncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_truncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_truncv4dfv4di2 (rtx, rtx);
static inline rtx gen_ufix_truncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_truncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_truncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_truncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_truncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv2dfv2di2 (rtx, rtx);
static inline rtx gen_fix_truncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_truncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_truncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_truncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_truncv2dfv2di2 (rtx, rtx);
static inline rtx gen_ufix_truncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_truncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_truncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_truncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_truncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv8dfv8di2 (rtx, rtx);
extern rtx gen_fix_notruncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fix_notruncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_notruncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_notruncv4dfv4di2 (rtx, rtx);
static inline rtx gen_fix_notruncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_notruncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv2dfv2di2 (rtx, rtx);
static inline rtx gen_fix_notruncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_notruncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv8dfv8di2 (rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4di2 (rtx, rtx);
static inline rtx gen_ufix_notruncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_notruncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv2dfv2di2 (rtx, rtx);
static inline rtx gen_ufix_notruncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_notruncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv8sfv8di2 (rtx, rtx);
extern rtx gen_fix_truncv8sfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv8sfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8sfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8sfv8di2 (rtx, rtx);
extern rtx gen_ufix_truncv8sfv8di2_round (rtx, rtx, rtx);
extern rtx gen_ufix_truncv8sfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8sfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4sfv4di2 (rtx, rtx);
static inline rtx gen_fix_truncv4sfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4sfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv4sfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_truncv4sfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4sfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_truncv4sfv4di2 (rtx, rtx);
static inline rtx gen_ufix_truncv4sfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_truncv4sfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_truncv4sfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_truncv4sfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_truncv4sfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv2sfv2di2 (rtx, rtx);
extern rtx gen_fix_truncv2sfv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv2sfv2di2 (rtx, rtx);
extern rtx gen_ufix_truncv2sfv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8sfv8si2 (rtx, rtx);
extern rtx gen_ufix_truncv8sfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv4sfv4si2 (rtx, rtx);
extern rtx gen_ufix_truncv4sfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvttpd2dq (rtx, rtx);
extern rtx gen_sse2_cvttpd2dq_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2ss (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2ss_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtss2sd (rtx, rtx, rtx);
extern rtx gen_sse2_cvtss2sd_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2ps512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2ps512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtpd2ps256 (rtx, rtx);
extern rtx gen_avx_cvtpd2ps256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512 (rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512_round (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtps2pd256 (rtx, rtx);
static inline rtx gen_avx_cvtps2pd256_round (rtx, rtx, rtx);
static inline rtx
gen_avx_cvtps2pd256_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_cvtps2pd256_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx_cvtps2pd256_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_cvtps2pd256_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_vec_unpacks_lo_v16sf (rtx, rtx);
extern rtx gen_avx512bw_cvtb2maskv64qi (rtx, rtx);
extern rtx gen_avx512vl_cvtb2maskv16qi (rtx, rtx);
extern rtx gen_avx512vl_cvtb2maskv32qi (rtx, rtx);
extern rtx gen_avx512bw_cvtw2maskv32hi (rtx, rtx);
extern rtx gen_avx512vl_cvtw2maskv16hi (rtx, rtx);
extern rtx gen_avx512vl_cvtw2maskv8hi (rtx, rtx);
extern rtx gen_avx512f_cvtd2maskv16si (rtx, rtx);
extern rtx gen_avx512vl_cvtd2maskv8si (rtx, rtx);
extern rtx gen_avx512vl_cvtd2maskv4si (rtx, rtx);
extern rtx gen_avx512f_cvtq2maskv8di (rtx, rtx);
extern rtx gen_avx512vl_cvtq2maskv4di (rtx, rtx);
extern rtx gen_avx512vl_cvtq2maskv2di (rtx, rtx);
extern rtx gen_sse2_cvtps2pd (rtx, rtx);
extern rtx gen_sse2_cvtps2pd_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse_movhlps (rtx, rtx, rtx);
extern rtx gen_sse_movlhps (rtx, rtx, rtx);
extern rtx gen_avx512f_unpckhps512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpckhps256 (rtx, rtx, rtx);
extern rtx gen_avx_unpckhps256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4sf (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_unpcklps512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpcklps256 (rtx, rtx, rtx);
extern rtx gen_avx_unpcklps256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_unpcklps128_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4sf (rtx, rtx, rtx);
extern rtx gen_avx_movshdup256 (rtx, rtx);
extern rtx gen_avx_movshdup256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse3_movshdup (rtx, rtx);
extern rtx gen_sse3_movshdup_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movshdup512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_movsldup256 (rtx, rtx);
extern rtx gen_avx_movsldup256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse3_movsldup (rtx, rtx);
extern rtx gen_sse3_movsldup_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movsldup512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufps256_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufps256_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_v4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_v4si (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_v4sf (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_storehps (rtx, rtx);
extern rtx gen_sse_loadhps (rtx, rtx, rtx);
extern rtx gen_sse_storelps (rtx, rtx);
extern rtx gen_sse_loadlps (rtx, rtx, rtx);
extern rtx gen_sse_movss (rtx, rtx, rtx);
extern rtx gen_avx2_vec_dupv8sf (rtx, rtx);
extern rtx gen_avx2_vec_dupv4sf (rtx, rtx);
extern rtx gen_avx2_vec_dupv8sf_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16sf_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8df_1 (rtx, rtx);
extern rtx gen_vec_setv4si_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv4sf_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv8si_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv8sf_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv16si_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv16sf_0 (rtx, rtx, rtx);
extern rtx gen_sse4_1_insertps (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf64x2_1_maskm (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti64x2_1_maskm (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf32x4_1_maskm (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti32x4_1_maskm (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8df_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8di_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8df (rtx, rtx);
extern rtx gen_vec_extract_lo_v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8di (rtx, rtx);
extern rtx gen_vec_extract_lo_v8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8df_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8di_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8df (rtx, rtx);
extern rtx gen_vec_extract_hi_v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8di (rtx, rtx);
extern rtx gen_vec_extract_hi_v8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v16sf_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v16si_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v16sf (rtx, rtx);
extern rtx gen_vec_extract_hi_v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v16si (rtx, rtx);
extern rtx gen_vec_extract_hi_v16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v16sf (rtx, rtx);
extern rtx gen_vec_extract_lo_v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v16si (rtx, rtx);
extern rtx gen_vec_extract_lo_v16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v4di (rtx, rtx);
extern rtx gen_vec_extract_lo_v4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v4df (rtx, rtx);
extern rtx gen_vec_extract_lo_v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v4di (rtx, rtx);
extern rtx gen_vec_extract_hi_v4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v4df (rtx, rtx);
extern rtx gen_vec_extract_hi_v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8si (rtx, rtx);
extern rtx gen_vec_extract_lo_v8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8sf (rtx, rtx);
extern rtx gen_vec_extract_lo_v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8si_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8sf_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8si_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8sf_maskm (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8si (rtx, rtx);
extern rtx gen_vec_extract_hi_v8sf (rtx, rtx);
extern rtx gen_vec_extract_lo_v32hi (rtx, rtx);
extern rtx gen_vec_extract_hi_v32hi (rtx, rtx);
extern rtx gen_vec_extract_lo_v16hi (rtx, rtx);
extern rtx gen_vec_extract_hi_v16hi (rtx, rtx);
extern rtx gen_vec_extract_lo_v64qi (rtx, rtx);
extern rtx gen_vec_extract_hi_v64qi (rtx, rtx);
extern rtx gen_vec_extract_lo_v32qi (rtx, rtx);
extern rtx gen_vec_extract_hi_v32qi (rtx, rtx);
extern rtx gen_avx512f_unpckhpd512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpckhpd256 (rtx, rtx, rtx);
extern rtx gen_avx_unpckhpd256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_unpckhpd128_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_unpcklpd128_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf (rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv16sf (rtx, rtx);
extern rtx gen_avx512f_getexpv16sf_round (rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf (rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf (rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv8df (rtx, rtx);
extern rtx gen_avx512f_getexpv8df_round (rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4df (rtx, rtx);
extern rtx gen_avx512vl_getexpv4df_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv2df (rtx, rtx);
extern rtx gen_avx512vl_getexpv2df_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv2df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf (rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_alignv16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_alignv8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df (rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufps512_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufps512_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufpd512_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufpd512_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_v2df_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv4di (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_highv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv2di (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv4di (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_lowv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv2di (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_v2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_v2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_storehpd (rtx, rtx);
extern rtx gen_sse2_storelpd (rtx, rtx);
extern rtx gen_sse2_loadhpd (rtx, rtx, rtx);
extern rtx gen_sse2_loadlpd (rtx, rtx, rtx);
extern rtx gen_sse2_movsd (rtx, rtx, rtx);
extern rtx gen_vec_dupv2df (rtx, rtx);
extern rtx gen_vec_dupv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_concatv2df (rtx, rtx, rtx);
extern rtx gen_vec_setv8df_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv4df_0 (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ss_truncatev32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_truncatev32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_us_truncatev32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_ss_truncatev32hiv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_truncatev32hiv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_us_truncatev32hiv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev16hiv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev16hiv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev16hiv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8hiv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8hiv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8hiv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8hiv8qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8hiv8qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8hiv8qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v16hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v8hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv16hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv8si3 (rtx, rtx, rtx);
extern rtx gen_ashrv4si3 (rtx, rtx, rtx);
extern rtx gen_ashrv32hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv4di3 (rtx, rtx, rtx);
extern rtx gen_ashrv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv16si3 (rtx, rtx, rtx);
extern rtx gen_ashrv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv8di3 (rtx, rtx, rtx);
extern rtx gen_ashrv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv16hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv16hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv8si3 (rtx, rtx, rtx);
extern rtx gen_lshrv8si3 (rtx, rtx, rtx);
extern rtx gen_ashlv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv4si3 (rtx, rtx, rtx);
extern rtx gen_ashlv4di3 (rtx, rtx, rtx);
extern rtx gen_lshrv4di3 (rtx, rtx, rtx);
extern rtx gen_ashlv2di3 (rtx, rtx, rtx);
extern rtx gen_lshrv2di3 (rtx, rtx, rtx);
extern rtx gen_ashlv32hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv32hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv16si3 (rtx, rtx, rtx);
extern rtx gen_ashlv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv16si3 (rtx, rtx, rtx);
extern rtx gen_lshrv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv8di3 (rtx, rtx, rtx);
extern rtx gen_ashlv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv8di3 (rtx, rtx, rtx);
extern rtx gen_lshrv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlv4ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrv4ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlv2ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrv2ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlv1ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrv1ti3 (rtx, rtx, rtx);
extern rtx gen_avx2_ashlv2ti3 (rtx, rtx, rtx);
extern rtx gen_avx2_lshrv2ti3 (rtx, rtx, rtx);
extern rtx gen_sse2_ashlv1ti3 (rtx, rtx, rtx);
extern rtx gen_sse2_lshrv1ti3 (rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rolv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rolv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rorv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rolv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rolv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rorv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3_1 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3_1 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_gtv2di3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv8si3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_gtv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_gtv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gtv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_gtv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_andv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testmv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testmv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testmv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testmv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packsswb (rtx, rtx, rtx);
extern rtx gen_avx512bw_packsswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packsswb (rtx, rtx, rtx);
extern rtx gen_avx2_packsswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_packsswb (rtx, rtx, rtx);
extern rtx gen_sse2_packsswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packssdw (rtx, rtx, rtx);
extern rtx gen_avx512bw_packssdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packssdw (rtx, rtx, rtx);
extern rtx gen_avx2_packssdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_packssdw (rtx, rtx, rtx);
extern rtx gen_sse2_packssdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packuswb (rtx, rtx, rtx);
extern rtx gen_avx512bw_packuswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packuswb (rtx, rtx, rtx);
extern rtx gen_avx2_packuswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_packuswb (rtx, rtx, rtx);
extern rtx gen_sse2_packuswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv64qi (rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv32qi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv16qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_lowv64qi (rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_lowv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv32qi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv16qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv16hi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_lowv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv16hi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv8si (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_highv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv8si (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_lowv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pinsrb (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pinsrd (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pinsrq (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinsertf64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinserti64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinsertf32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinserti32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16sf (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16si (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16sf (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16si (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8df (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8di (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8df (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8di (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_i64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_f64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f64x2_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i64x2_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_i32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_i32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_f32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_f32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_pshufd_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufd_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pshuflwv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshuflw_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshuflw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pshufhwv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufhw_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufhw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_loadld (rtx, rtx, rtx);
extern rtx gen_vec_concatv2di (rtx, rtx, rtx);
extern rtx gen_vec_setv8di_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv4di_0 (rtx, rtx, rtx);
extern rtx gen_avx512f_psadbw (rtx, rtx, rtx);
extern rtx gen_avx2_psadbw (rtx, rtx, rtx);
extern rtx gen_sse2_psadbw (rtx, rtx, rtx);
extern rtx gen_avx_movmskps256 (rtx, rtx);
extern rtx gen_sse_movmskps (rtx, rtx);
extern rtx gen_avx_movmskpd256 (rtx, rtx);
extern rtx gen_sse2_movmskpd (rtx, rtx);
extern rtx gen_avx2_pmovmskb (rtx, rtx);
extern rtx gen_sse2_pmovmskb (rtx, rtx);
extern rtx gen_sse_ldmxcsr (rtx);
extern rtx gen_sse_stmxcsr (rtx);
extern rtx gen_sse2_clflush (rtx);
extern rtx gen_sse3_mwait (rtx, rtx);
extern rtx gen_sse3_monitor_si (rtx, rtx, rtx);
extern rtx gen_sse3_monitor_di (rtx, rtx, rtx);
extern rtx gen_avx2_phaddwv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phaddswv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phsubwv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phsubswv16hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddwv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddswv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubwv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubswv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddwv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddswv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubwv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubswv4hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phadddv8si3 (rtx, rtx, rtx);
extern rtx gen_avx2_phsubdv8si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phadddv4si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubdv4si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phadddv2si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubdv2si3 (rtx, rtx, rtx);
extern rtx gen_avx2_pmaddubsw256 (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v8hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v16hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_umulhrswv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_umulhrswv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pmaddubsw128 (rtx, rtx, rtx);
extern rtx gen_ssse3_pmaddubsw (rtx, rtx, rtx);
extern rtx gen_avx512bw_pshufbv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_pshufbv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufbv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_pshufbv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pshufbv16qi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_pshufbv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pshufbv8qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_psignv32qi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_psignv16hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_psignv8si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv4si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv8qi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv2si3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_palignrv64qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_palignrv32qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_palignrv16qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_palignrv4ti (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_palignrv2ti (rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_palignrti (rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_palignrdi (rtx, rtx, rtx, rtx);
extern rtx gen_absv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv64qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv32hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8qi2 (rtx, rtx);
extern rtx gen_absv4hi2 (rtx, rtx);
extern rtx gen_absv2si2 (rtx, rtx);
extern rtx gen_sse4a_movntsf (rtx, rtx);
extern rtx gen_sse4a_movntdf (rtx, rtx);
extern rtx gen_sse4a_vmmovntv4sf (rtx, rtx);
extern rtx gen_sse4a_vmmovntv2df (rtx, rtx);
extern rtx gen_sse4a_extrqi (rtx, rtx, rtx, rtx);
extern rtx gen_sse4a_extrq (rtx, rtx, rtx);
extern rtx gen_sse4a_insertqi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4a_insertq (rtx, rtx, rtx);
extern rtx gen_avx_blendps256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendps (rtx, rtx, rtx, rtx);
extern rtx gen_avx_blendpd256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendpd (rtx, rtx, rtx, rtx);
extern rtx gen_avx_blendvps256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendvps (rtx, rtx, rtx, rtx);
extern rtx gen_avx_blendvpd256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendvpd (rtx, rtx, rtx, rtx);
extern rtx gen_avx_dpps256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_dpps (rtx, rtx, rtx, rtx);
extern rtx gen_avx_dppd256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_dppd (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movntdqa (rtx, rtx);
extern rtx gen_avx2_movntdqa (rtx, rtx);
extern rtx gen_sse4_1_movntdqa (rtx, rtx);
extern rtx gen_avx2_mpsadbw (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_mpsadbw (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packusdw (rtx, rtx, rtx);
extern rtx gen_avx512bw_packusdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packusdw (rtx, rtx, rtx);
extern rtx gen_avx2_packusdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_packusdw (rtx, rtx, rtx);
extern rtx gen_sse4_1_packusdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pblendvb (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pblendvb (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pblendw (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pblenddv8si (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pblenddv4si (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_phminposuw (rtx, rtx);
extern rtx gen_avx2_sign_extendv16qiv16hi2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv16qiv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv16qiv16hi2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv16qiv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_sign_extendv32qiv32hi2 (rtx, rtx);
extern rtx gen_avx512bw_sign_extendv32qiv32hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_zero_extendv32qiv32hi2 (rtx, rtx);
extern rtx gen_avx512bw_zero_extendv32qiv32hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv8qiv8hi2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv8qiv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv8qiv8hi2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv8qiv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv16qiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv16qiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv8qiv8si2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv8qiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv8qiv8si2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv8qiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4qiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4qiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4qiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4qiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv16hiv16si2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv16hiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv16hiv16si2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv16hiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv8hiv8si2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv8hiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv8hiv8si2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv8hiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4hiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4hiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4hiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4hiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv8qiv8di2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv8qiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv8qiv8di2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv8qiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv4qiv4di2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv4qiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv4qiv4di2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv4qiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2qiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2qiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2qiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2qiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv8hiv8di2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv8hiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv8hiv8di2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv8hiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv4hiv4di2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv4hiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv4hiv4di2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv4hiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2hiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2hiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2hiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2hiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv8siv8di2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv8siv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv8siv8di2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv8siv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv4siv4di2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv4siv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv4siv4di2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv4siv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2siv2di2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2siv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2siv2di2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2siv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vtestps256 (rtx, rtx);
extern rtx gen_avx_vtestps (rtx, rtx);
extern rtx gen_avx_vtestpd256 (rtx, rtx);
extern rtx gen_avx_vtestpd (rtx, rtx);
extern rtx gen_sse4_1_ptestv16qi (rtx, rtx);
extern rtx gen_sse4_1_ptestv8hi (rtx, rtx);
extern rtx gen_sse4_1_ptestv4si (rtx, rtx);
extern rtx gen_sse4_1_ptestv2di (rtx, rtx);
extern rtx gen_sse4_1_ptestv4sf (rtx, rtx);
extern rtx gen_sse4_1_ptestv2df (rtx, rtx);
extern rtx gen_avx_ptestv32qi (rtx, rtx);
extern rtx gen_avx_ptestv16hi (rtx, rtx);
extern rtx gen_avx_ptestv8si (rtx, rtx);
extern rtx gen_avx_ptestv4di (rtx, rtx);
extern rtx gen_avx_ptestv8sf (rtx, rtx);
extern rtx gen_avx_ptestv4df (rtx, rtx);
extern rtx gen_ptesttf2 (rtx, rtx);
extern rtx gen_avx_roundps256 (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundps (rtx, rtx, rtx);
extern rtx gen_avx_roundpd256 (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundpd (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundss (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_roundsd (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestr (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestri (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestrm (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestr_cconly (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistr (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistri (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistrm (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistr_cconly (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v16sf (rtx, rtx);
extern rtx gen_avx512er_exp2v16sf_round (rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v8df (rtx, rtx);
extern rtx gen_avx512er_exp2v8df_round (rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v4sf (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v2df (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v4sf (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v2df (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsww (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssww (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsdd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssdd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsdql (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssdql (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsdqh (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssdqh (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmadcswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmadcsswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v32qi256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v16hi256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v16si512 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8si256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8di512 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4di256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v16sf512 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8sf256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8df512 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4df256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_xop_phaddbw (rtx, rtx);
extern rtx gen_xop_phaddubw (rtx, rtx);
extern rtx gen_xop_phaddbd (rtx, rtx);
extern rtx gen_xop_phaddubd (rtx, rtx);
extern rtx gen_xop_phaddbq (rtx, rtx);
extern rtx gen_xop_phaddubq (rtx, rtx);
extern rtx gen_xop_phaddwd (rtx, rtx);
extern rtx gen_xop_phadduwd (rtx, rtx);
extern rtx gen_xop_phaddwq (rtx, rtx);
extern rtx gen_xop_phadduwq (rtx, rtx);
extern rtx gen_xop_phadddq (rtx, rtx);
extern rtx gen_xop_phaddudq (rtx, rtx);
extern rtx gen_xop_phsubbw (rtx, rtx);
extern rtx gen_xop_phsubwd (rtx, rtx);
extern rtx gen_xop_phsubdq (rtx, rtx);
extern rtx gen_xop_pperm (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pperm_pack_v2di_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pperm_pack_v4si_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pperm_pack_v8hi_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_rotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotlv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_rotlv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_shav16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_shav8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_shav4si3 (rtx, rtx, rtx);
extern rtx gen_xop_shav2di3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_frczsf2 (rtx, rtx);
extern rtx gen_xop_frczdf2 (rtx, rtx);
extern rtx gen_xop_frczv4sf2 (rtx, rtx);
extern rtx gen_xop_frczv2df2 (rtx, rtx);
extern rtx gen_xop_frczv8sf2 (rtx, rtx);
extern rtx gen_xop_frczv4df2 (rtx, rtx);
extern rtx gen_xop_maskcmpv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmpv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmpv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmpv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v8sf3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v4sf3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v4df3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v2df3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_aesenc (rtx, rtx, rtx);
extern rtx gen_aesenclast (rtx, rtx, rtx);
extern rtx gen_aesdec (rtx, rtx, rtx);
extern rtx gen_aesdeclast (rtx, rtx, rtx);
extern rtx gen_aesimc (rtx, rtx);
extern rtx gen_aeskeygenassist (rtx, rtx, rtx);
extern rtx gen_pclmulqdq (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vzeroupper (void);
extern rtx gen_avx2_pbroadcastv16si (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8di (rtx, rtx);
extern rtx gen_avx2_pbroadcastv64qi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv32qi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv16qi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv32hi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv16hi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8hi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8si (rtx, rtx);
extern rtx gen_avx2_pbroadcastv4si (rtx, rtx);
extern rtx gen_avx2_pbroadcastv4di (rtx, rtx);
extern rtx gen_avx2_pbroadcastv2di (rtx, rtx);
extern rtx gen_avx2_pbroadcastv32qi_1 (rtx, rtx);
extern rtx gen_avx2_pbroadcastv16hi_1 (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8si_1 (rtx, rtx);
extern rtx gen_avx2_pbroadcastv4di_1 (rtx, rtx);
extern rtx gen_avx2_permvarv8si (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permvarv8sf (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4di (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4df (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv64qi (rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv32qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4di_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4di_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4df_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4df_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv2ti (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_vec_dupv4df (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16si_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8di_1 (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv32hi_1 (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv64qi_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16si (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8si (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4si (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dupv8di (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4di (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2di (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dupv16sf (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8sf (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4sf (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dupv8df (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4df (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2df (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dupv64qi (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16qi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv32qi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dupv32hi (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16hi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8hi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dup_gprv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dup_gprv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_dupv4sf (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v32qi (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v16hi (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v8si (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v4di (rtx, rtx);
extern rtx gen_vec_dupv8si (rtx, rtx);
extern rtx gen_vec_dupv8sf (rtx, rtx);
extern rtx gen_vec_dupv4di (rtx, rtx);
extern rtx gen_vec_dupv4df (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v32qi (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v16hi (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v8si (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v4di (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v8sf (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v4df (rtx, rtx);
extern rtx gen_avx512dq_broadcastv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_broadcastv8si_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_broadcastv8sf_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv16sf_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv16si_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8di_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8df_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv4di_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv4df_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512cd_maskb_vec_dupv8di (rtx, rtx);
extern rtx gen_avx512cd_maskb_vec_dupv4di (rtx, rtx);
extern rtx gen_avx512cd_maskb_vec_dupv2di (rtx, rtx);
extern rtx gen_avx512cd_maskw_vec_dupv16si (rtx, rtx);
extern rtx gen_avx512cd_maskw_vec_dupv8si (rtx, rtx);
extern rtx gen_avx512cd_maskw_vec_dupv4si (rtx, rtx);
extern rtx gen_avx512f_vpermilvarv16sf3 (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilvarv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv8sf3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4sf3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilvarv8df3 (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilvarv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4df3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv2df3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4di (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4df (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4di (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4df (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8si (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8sf (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8si (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8sf (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v32qi (rtx, rtx, rtx);
extern rtx gen_avx_maskloadps (rtx, rtx, rtx);
extern rtx gen_avx_maskloadpd (rtx, rtx, rtx);
extern rtx gen_avx_maskloadps256 (rtx, rtx, rtx);
extern rtx gen_avx_maskloadpd256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadd (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadq (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadd256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadq256 (rtx, rtx, rtx);
extern rtx gen_avx_maskstoreps (rtx, rtx, rtx);
extern rtx gen_avx_maskstorepd (rtx, rtx, rtx);
extern rtx gen_avx_maskstoreps256 (rtx, rtx, rtx);
extern rtx gen_avx_maskstorepd256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskstored (rtx, rtx, rtx);
extern rtx gen_avx2_maskstoreq (rtx, rtx, rtx);
extern rtx gen_avx2_maskstored256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskstoreq256 (rtx, rtx, rtx);
extern rtx gen_avx_si256_si (rtx, rtx);
extern rtx gen_avx_ps256_ps (rtx, rtx);
extern rtx gen_avx_pd256_pd (rtx, rtx);
extern rtx gen_avx2_ashrvv4si (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv8si (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv2di (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv4di (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ashrvv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashrvv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv8si (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv8si (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4si (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4si (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4di (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4di (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv2di (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv2di (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlvv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlvv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrvv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrvv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv32qi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv16hi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8si (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv4di (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8sf (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv4df (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv64qi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv32hi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv16si (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8di (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv16sf (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8df (rtx, rtx, rtx);
extern rtx gen_vcvtph2ps (rtx, rtx);
extern rtx gen_vcvtph2ps_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vcvtph2ps256 (rtx, rtx);
extern rtx gen_vcvtph2ps256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtph2ps512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtph2ps512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcvtps2ph256 (rtx, rtx, rtx);
extern rtx gen_vcvtps2ph256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtps2ph512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev16si_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev16sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev8di_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev8df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev8si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev8sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev2di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev2df_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev64qi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev16qi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev32qi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev32hi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev16hi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev8hi_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8sf (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv8sf_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv8sf_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv8sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv4sf (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4sf_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4sf_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv8df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv4df (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4df_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4df_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv4df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv2df (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv2df_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv2df_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangesv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv16sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8df (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4df (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv2df (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vmfpclassv4sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_vmfpclassv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_dbpsadbwv8hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_dbpsadbwv16hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_dbpsadbwv32hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_clzv16si2 (rtx, rtx);
extern rtx gen_clzv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv8si2 (rtx, rtx);
extern rtx gen_clzv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv4si2 (rtx, rtx);
extern rtx gen_clzv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv8di2 (rtx, rtx);
extern rtx gen_clzv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv4di2 (rtx, rtx);
extern rtx gen_clzv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv2di2 (rtx, rtx);
extern rtx gen_clzv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sha1msg1 (rtx, rtx, rtx);
extern rtx gen_sha1msg2 (rtx, rtx, rtx);
extern rtx gen_sha1nexte (rtx, rtx, rtx);
extern rtx gen_sha1rnds4 (rtx, rtx, rtx, rtx);
extern rtx gen_sha256msg1 (rtx, rtx, rtx);
extern rtx gen_sha256msg2 (rtx, rtx, rtx);
extern rtx gen_sha256rnds2 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_si512_si (rtx, rtx);
extern rtx gen_avx512f_ps512_ps (rtx, rtx);
extern rtx gen_avx512f_pd512_pd (rtx, rtx);
extern rtx gen_avx512f_si512_256si (rtx, rtx);
extern rtx gen_avx512f_ps512_256ps (rtx, rtx);
extern rtx gen_avx512f_pd512_256pd (rtx, rtx);
extern rtx gen_vpamdd52luqv8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv64qi (rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv16qi (rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv32qi (rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddps (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddps_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddps_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddss (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddss_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddss_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddps (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddps_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddps_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddss (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddss_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddss_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssd (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssd_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssd_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssds (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssds_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssds_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv16si (rtx, rtx);
extern rtx gen_vpopcountv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv8si (rtx, rtx);
extern rtx gen_vpopcountv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv4si (rtx, rtx);
extern rtx gen_vpopcountv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv8di (rtx, rtx);
extern rtx gen_vpopcountv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv4di (rtx, rtx);
extern rtx gen_vpopcountv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv2di (rtx, rtx);
extern rtx gen_vpopcountv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_save_multiplesi (rtx, rtx);
extern rtx gen_save_multipledi (rtx, rtx);
extern rtx gen_restore_multiplesi (rtx, rtx);
extern rtx gen_restore_multipledi (rtx, rtx);
extern rtx gen_restore_multiple_and_returnsi (rtx, rtx);
extern rtx gen_restore_multiple_and_returndi (rtx, rtx);
extern rtx gen_restore_multiple_leave_returnsi (rtx, rtx);
extern rtx gen_restore_multiple_leave_returndi (rtx, rtx);
extern rtx gen_vpopcountv64qi (rtx, rtx);
extern rtx gen_vpopcountv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv16qi (rtx, rtx);
extern rtx gen_vpopcountv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv32qi (rtx, rtx);
extern rtx gen_vpopcountv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv32hi (rtx, rtx);
extern rtx gen_vpopcountv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv16hi (rtx, rtx);
extern rtx gen_vpopcountv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv8hi (rtx, rtx);
extern rtx gen_vpopcountv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v64qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v64qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v32qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v16qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v64qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v64qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v32qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v16qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v64qi (rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v32qi (rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v16qi (rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v32hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v32hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v32hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vaesdec_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesdec_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesdec_v64qi (rtx, rtx, rtx);
extern rtx gen_vaesdeclast_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesdeclast_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesdeclast_v64qi (rtx, rtx, rtx);
extern rtx gen_vaesenc_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesenc_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesenc_v64qi (rtx, rtx, rtx);
extern rtx gen_vaesenclast_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesenclast_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesenclast_v64qi (rtx, rtx, rtx);
extern rtx gen_vpclmulqdq_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpclmulqdq_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpclmulqdq_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv64qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv32qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv16qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_mfence_sse2 (rtx);
extern rtx gen_mfence_nosse (rtx);
extern rtx gen_atomic_loaddi_fpu (rtx, rtx, rtx);
extern rtx gen_atomic_storeqi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storehi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storesi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storedi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storedi_fpu (rtx, rtx, rtx);
extern rtx gen_loaddi_via_fpu (rtx, rtx);
extern rtx gen_storedi_via_fpu (rtx, rtx);
extern rtx gen_loaddi_via_sse (rtx, rtx);
extern rtx gen_storedi_via_sse (rtx, rtx);
extern rtx gen_atomic_compare_and_swapdi_doubleword (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapti_doubleword (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapqi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swaphi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapsi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapdi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_addqi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_addhi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_addsi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_adddi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangeqi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangehi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangesi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangedi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_addqi (rtx, rtx, rtx);
extern rtx gen_atomic_addhi (rtx, rtx, rtx);
extern rtx gen_atomic_addsi (rtx, rtx, rtx);
extern rtx gen_atomic_adddi (rtx, rtx, rtx);
extern rtx gen_atomic_subqi (rtx, rtx, rtx);
extern rtx gen_atomic_subhi (rtx, rtx, rtx);
extern rtx gen_atomic_subsi (rtx, rtx, rtx);
extern rtx gen_atomic_subdi (rtx, rtx, rtx);
extern rtx gen_atomic_andqi (rtx, rtx, rtx);
extern rtx gen_atomic_orqi (rtx, rtx, rtx);
extern rtx gen_atomic_xorqi (rtx, rtx, rtx);
extern rtx gen_atomic_andhi (rtx, rtx, rtx);
extern rtx gen_atomic_orhi (rtx, rtx, rtx);
extern rtx gen_atomic_xorhi (rtx, rtx, rtx);
extern rtx gen_atomic_andsi (rtx, rtx, rtx);
extern rtx gen_atomic_orsi (rtx, rtx, rtx);
extern rtx gen_atomic_xorsi (rtx, rtx, rtx);
extern rtx gen_atomic_anddi (rtx, rtx, rtx);
extern rtx gen_atomic_ordi (rtx, rtx, rtx);
extern rtx gen_atomic_xordi (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_sethi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setsi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setdi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementhi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementsi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementdi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resethi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetsi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetdi_1 (rtx, rtx, rtx);
extern rtx gen_cbranchqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchti4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoreqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstorehi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoresi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoredi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cmpsi_1 (rtx, rtx);
extern rtx gen_cmpdi_1 (rtx, rtx);
extern rtx gen_cmpqi_ext_3 (rtx, rtx);
extern rtx gen_cbranchxf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstorexf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchsf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchdf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoresf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoredf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchcc4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstorecc4 (rtx, rtx, rtx, rtx);
extern rtx gen_reload_noff_store (rtx, rtx, rtx);
extern rtx gen_reload_noff_load (rtx, rtx, rtx);
extern rtx gen_movxi (rtx, rtx);
extern rtx gen_movoi (rtx, rtx);
extern rtx gen_movti (rtx, rtx);
extern rtx gen_movcdi (rtx, rtx);
extern rtx gen_movqi (rtx, rtx);
extern rtx gen_movhi (rtx, rtx);
extern rtx gen_movsi (rtx, rtx);
extern rtx gen_movdi (rtx, rtx);
extern rtx gen_movstrictqi (rtx, rtx);
extern rtx gen_movstricthi (rtx, rtx);
extern rtx gen_extvhi (rtx, rtx, rtx, rtx);
extern rtx gen_extvsi (rtx, rtx, rtx, rtx);
extern rtx gen_extzvhi (rtx, rtx, rtx, rtx);
extern rtx gen_extzvsi (rtx, rtx, rtx, rtx);
extern rtx gen_extzvdi (rtx, rtx, rtx, rtx);
extern rtx gen_insvhi (rtx, rtx, rtx, rtx);
extern rtx gen_insvsi (rtx, rtx, rtx, rtx);
extern rtx gen_insvdi (rtx, rtx, rtx, rtx);
extern rtx gen_movtf (rtx, rtx);
extern rtx gen_movsf (rtx, rtx);
extern rtx gen_movdf (rtx, rtx);
extern rtx gen_movxf (rtx, rtx);
extern rtx gen_zero_extendsidi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2 (rtx, rtx);
extern rtx gen_zero_extendhisi2 (rtx, rtx);
extern rtx gen_zero_extendqihi2 (rtx, rtx);
extern rtx gen_extendsidi2 (rtx, rtx);
extern rtx gen_extendsfdf2 (rtx, rtx);
extern rtx gen_extendsfxf2 (rtx, rtx);
extern rtx gen_extenddfxf2 (rtx, rtx);
extern rtx gen_truncdfsf2 (rtx, rtx);
extern rtx gen_truncdfsf2_with_temp (rtx, rtx, rtx);
extern rtx gen_truncxfsf2 (rtx, rtx);
extern rtx gen_truncxfdf2 (rtx, rtx);
extern rtx gen_fix_truncxfdi2 (rtx, rtx);
extern rtx gen_fix_truncsfdi2 (rtx, rtx);
extern rtx gen_fix_truncdfdi2 (rtx, rtx);
extern rtx gen_fix_truncxfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfsi2 (rtx, rtx);
extern rtx gen_fix_truncdfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfhi2 (rtx, rtx);
extern rtx gen_fix_truncdfhi2 (rtx, rtx);
extern rtx gen_fix_truncxfhi2 (rtx, rtx);
extern rtx gen_fixuns_truncsfsi2 (rtx, rtx);
extern rtx gen_fixuns_truncdfsi2 (rtx, rtx);
extern rtx gen_fixuns_truncsfhi2 (rtx, rtx);
extern rtx gen_fixuns_truncdfhi2 (rtx, rtx);
extern rtx gen_floatsisf2 (rtx, rtx);
extern rtx gen_floatdisf2 (rtx, rtx);
extern rtx gen_floatsidf2 (rtx, rtx);
extern rtx gen_floatdidf2 (rtx, rtx);
extern rtx gen_floatunsqisf2 (rtx, rtx);
extern rtx gen_floatunshisf2 (rtx, rtx);
extern rtx gen_floatunsqidf2 (rtx, rtx);
extern rtx gen_floatunshidf2 (rtx, rtx);
extern rtx gen_floatunssisf2 (rtx, rtx);
extern rtx gen_floatunssidf2 (rtx, rtx);
extern rtx gen_floatunssixf2 (rtx, rtx);
extern rtx gen_floatunsdisf2 (rtx, rtx);
extern rtx gen_floatunsdidf2 (rtx, rtx);
extern rtx gen_addqi3 (rtx, rtx, rtx);
extern rtx gen_addhi3 (rtx, rtx, rtx);
extern rtx gen_addsi3 (rtx, rtx, rtx);
extern rtx gen_adddi3 (rtx, rtx, rtx);
extern rtx gen_addti3 (rtx, rtx, rtx);
extern rtx gen_addvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subqi3 (rtx, rtx, rtx);
extern rtx gen_subhi3 (rtx, rtx, rtx);
extern rtx gen_subsi3 (rtx, rtx, rtx);
extern rtx gen_subdi3 (rtx, rtx, rtx);
extern rtx gen_subti3 (rtx, rtx, rtx);
extern rtx gen_subvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addcarrysi_0 (rtx, rtx, rtx);
extern rtx gen_addcarrydi_0 (rtx, rtx, rtx);
extern rtx gen_subborrowsi_0 (rtx, rtx, rtx);
extern rtx gen_subborrowdi_0 (rtx, rtx, rtx);
extern rtx gen_addqi3_cconly_overflow (rtx, rtx);
extern rtx gen_addxf3 (rtx, rtx, rtx);
extern rtx gen_subxf3 (rtx, rtx, rtx);
extern rtx gen_addsf3 (rtx, rtx, rtx);
extern rtx gen_subsf3 (rtx, rtx, rtx);
extern rtx gen_adddf3 (rtx, rtx, rtx);
extern rtx gen_subdf3 (rtx, rtx, rtx);
extern rtx gen_mulhi3 (rtx, rtx, rtx);
extern rtx gen_mulsi3 (rtx, rtx, rtx);
extern rtx gen_muldi3 (rtx, rtx, rtx);
extern rtx gen_mulqi3 (rtx, rtx, rtx);
extern rtx gen_mulvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulsidi3 (rtx, rtx, rtx);
extern rtx gen_umulsidi3 (rtx, rtx, rtx);
extern rtx gen_mulditi3 (rtx, rtx, rtx);
extern rtx gen_umulditi3 (rtx, rtx, rtx);
extern rtx gen_mulqihi3 (rtx, rtx, rtx);
extern rtx gen_umulqihi3 (rtx, rtx, rtx);
extern rtx gen_smulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_smuldi3_highpart (rtx, rtx, rtx);
extern rtx gen_umuldi3_highpart (rtx, rtx, rtx);
extern rtx gen_mulxf3 (rtx, rtx, rtx);
extern rtx gen_mulsf3 (rtx, rtx, rtx);
extern rtx gen_muldf3 (rtx, rtx, rtx);
extern rtx gen_divxf3 (rtx, rtx, rtx);
extern rtx gen_divsf3 (rtx, rtx, rtx);
extern rtx gen_divdf3 (rtx, rtx, rtx);
extern rtx gen_divmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmoddi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmoddi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_ccno_1 (rtx, rtx);
extern rtx gen_testqi_ccz_1 (rtx, rtx);
extern rtx gen_testdi_ccno_1 (rtx, rtx);
extern rtx gen_testqi_ext_1_ccno (rtx, rtx);
extern rtx gen_andqi3 (rtx, rtx, rtx);
extern rtx gen_andhi3 (rtx, rtx, rtx);
extern rtx gen_andsi3 (rtx, rtx, rtx);
extern rtx gen_anddi3 (rtx, rtx, rtx);
extern rtx gen_iorqi3 (rtx, rtx, rtx);
extern rtx gen_xorqi3 (rtx, rtx, rtx);
extern rtx gen_iorhi3 (rtx, rtx, rtx);
extern rtx gen_xorhi3 (rtx, rtx, rtx);
extern rtx gen_iorsi3 (rtx, rtx, rtx);
extern rtx gen_xorsi3 (rtx, rtx, rtx);
extern rtx gen_iordi3 (rtx, rtx, rtx);
extern rtx gen_xordi3 (rtx, rtx, rtx);
extern rtx gen_xorqi_ext_1_cc (rtx, rtx, rtx);
extern rtx gen_negqi2 (rtx, rtx);
extern rtx gen_neghi2 (rtx, rtx);
extern rtx gen_negsi2 (rtx, rtx);
extern rtx gen_negdi2 (rtx, rtx);
extern rtx gen_negti2 (rtx, rtx);
extern rtx gen_negvqi3 (rtx, rtx, rtx);
extern rtx gen_negvhi3 (rtx, rtx, rtx);
extern rtx gen_negvsi3 (rtx, rtx, rtx);
extern rtx gen_negvdi3 (rtx, rtx, rtx);
extern rtx gen_abssf2 (rtx, rtx);
extern rtx gen_negsf2 (rtx, rtx);
extern rtx gen_absdf2 (rtx, rtx);
extern rtx gen_negdf2 (rtx, rtx);
extern rtx gen_absxf2 (rtx, rtx);
extern rtx gen_negxf2 (rtx, rtx);
extern rtx gen_abstf2 (rtx, rtx);
extern rtx gen_negtf2 (rtx, rtx);
extern rtx gen_copysignsf3 (rtx, rtx, rtx);
extern rtx gen_copysigndf3 (rtx, rtx, rtx);
extern rtx gen_copysigntf3 (rtx, rtx, rtx);
extern rtx gen_one_cmplqi2 (rtx, rtx);
extern rtx gen_one_cmplhi2 (rtx, rtx);
extern rtx gen_one_cmplsi2 (rtx, rtx);
extern rtx gen_one_cmpldi2 (rtx, rtx);
extern rtx gen_ashlqi3 (rtx, rtx, rtx);
extern rtx gen_ashlhi3 (rtx, rtx, rtx);
extern rtx gen_ashlsi3 (rtx, rtx, rtx);
extern rtx gen_ashldi3 (rtx, rtx, rtx);
extern rtx gen_ashlti3 (rtx, rtx, rtx);
extern rtx gen_x86_shiftsi_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shiftdi_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shiftsi_adj_2 (rtx, rtx, rtx);
extern rtx gen_x86_shiftdi_adj_2 (rtx, rtx, rtx);
extern rtx gen_lshrqi3 (rtx, rtx, rtx);
extern rtx gen_ashrqi3 (rtx, rtx, rtx);
extern rtx gen_lshrhi3 (rtx, rtx, rtx);
extern rtx gen_ashrhi3 (rtx, rtx, rtx);
extern rtx gen_lshrsi3 (rtx, rtx, rtx);
extern rtx gen_ashrsi3 (rtx, rtx, rtx);
extern rtx gen_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_ashrdi3 (rtx, rtx, rtx);
extern rtx gen_lshrti3 (rtx, rtx, rtx);
extern rtx gen_ashrti3 (rtx, rtx, rtx);
extern rtx gen_x86_shiftsi_adj_3 (rtx, rtx, rtx);
extern rtx gen_x86_shiftdi_adj_3 (rtx, rtx, rtx);
extern rtx gen_rotlti3 (rtx, rtx, rtx);
extern rtx gen_rotrti3 (rtx, rtx, rtx);
extern rtx gen_rotldi3 (rtx, rtx, rtx);
extern rtx gen_rotrdi3 (rtx, rtx, rtx);
extern rtx gen_rotlqi3 (rtx, rtx, rtx);
extern rtx gen_rotrqi3 (rtx, rtx, rtx);
extern rtx gen_rotlhi3 (rtx, rtx, rtx);
extern rtx gen_rotrhi3 (rtx, rtx, rtx);
extern rtx gen_rotlsi3 (rtx, rtx, rtx);
extern rtx gen_rotrsi3 (rtx, rtx, rtx);
extern rtx gen_indirect_jump (rtx);
extern rtx gen_tablejump (rtx, rtx);
extern rtx gen_call (rtx, rtx, rtx);
extern rtx gen_sibcall (rtx, rtx, rtx);
extern rtx gen_call_pop (rtx, rtx, rtx, rtx);
extern rtx gen_call_value (rtx, rtx, rtx, rtx);
extern rtx gen_sibcall_value (rtx, rtx, rtx, rtx);
extern rtx gen_call_value_pop (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_untyped_call (rtx, rtx, rtx);
extern rtx gen_memory_blockage (void);
extern rtx gen_return (void);
extern rtx gen_simple_return (void);
extern rtx gen_prologue (void);
extern rtx gen_set_got (rtx);
extern rtx gen_set_got_labelled (rtx, rtx);
extern rtx gen_epilogue (void);
extern rtx gen_sibcall_epilogue (void);
extern rtx gen_eh_return (rtx);
extern rtx gen_split_stack_prologue (void);
extern rtx gen_split_stack_space_check (rtx, rtx);
extern rtx gen_ffssi2 (rtx, rtx);
extern rtx gen_ffsdi2 (rtx, rtx);
extern rtx gen_clzsi2 (rtx, rtx);
extern rtx gen_clzdi2 (rtx, rtx);
extern rtx gen_bmi2_bzhi_si3 (rtx, rtx, rtx);
extern rtx gen_bmi2_bzhi_di3 (rtx, rtx, rtx);
extern rtx gen_bswapdi2 (rtx, rtx);
extern rtx gen_bswapsi2 (rtx, rtx);
extern rtx gen_bswaphi2 (rtx, rtx);
extern rtx gen_paritydi2 (rtx, rtx);
extern rtx gen_paritysi2 (rtx, rtx);
extern rtx gen_tls_global_dynamic_32 (rtx, rtx, rtx, rtx);
extern rtx gen_tls_global_dynamic_64_si (rtx, rtx, rtx);
extern rtx gen_tls_global_dynamic_64_di (rtx, rtx, rtx);
extern rtx gen_tls_local_dynamic_base_32 (rtx, rtx, rtx);
extern rtx gen_tls_local_dynamic_base_64_si (rtx, rtx);
extern rtx gen_tls_local_dynamic_base_64_di (rtx, rtx);
extern rtx gen_tls_dynamic_gnu2_32 (rtx, rtx, rtx);
extern rtx gen_tls_dynamic_gnu2_64 (rtx, rtx);
extern rtx gen_rsqrtsf2 (rtx, rtx);
extern rtx gen_sqrtsf2 (rtx, rtx);
extern rtx gen_sqrtdf2 (rtx, rtx);
extern rtx gen_fmodxf3 (rtx, rtx, rtx);
extern rtx gen_fmodsf3 (rtx, rtx, rtx);
extern rtx gen_fmoddf3 (rtx, rtx, rtx);
extern rtx gen_remainderxf3 (rtx, rtx, rtx);
extern rtx gen_remaindersf3 (rtx, rtx, rtx);
extern rtx gen_remainderdf3 (rtx, rtx, rtx);
extern rtx gen_sincossf3 (rtx, rtx, rtx);
extern rtx gen_sincosdf3 (rtx, rtx, rtx);
extern rtx gen_tanxf2 (rtx, rtx);
extern rtx gen_tansf2 (rtx, rtx);
extern rtx gen_tandf2 (rtx, rtx);
extern rtx gen_atan2xf3 (rtx, rtx, rtx);
extern rtx gen_atan2sf3 (rtx, rtx, rtx);
extern rtx gen_atan2df3 (rtx, rtx, rtx);
extern rtx gen_atanxf2 (rtx, rtx);
extern rtx gen_atansf2 (rtx, rtx);
extern rtx gen_atandf2 (rtx, rtx);
extern rtx gen_asinxf2 (rtx, rtx);
extern rtx gen_asinsf2 (rtx, rtx);
extern rtx gen_asindf2 (rtx, rtx);
extern rtx gen_acosxf2 (rtx, rtx);
extern rtx gen_acossf2 (rtx, rtx);
extern rtx gen_acosdf2 (rtx, rtx);
extern rtx gen_logxf2 (rtx, rtx);
extern rtx gen_logsf2 (rtx, rtx);
extern rtx gen_logdf2 (rtx, rtx);
extern rtx gen_log10xf2 (rtx, rtx);
extern rtx gen_log10sf2 (rtx, rtx);
extern rtx gen_log10df2 (rtx, rtx);
extern rtx gen_log2xf2 (rtx, rtx);
extern rtx gen_log2sf2 (rtx, rtx);
extern rtx gen_log2df2 (rtx, rtx);
extern rtx gen_log1pxf2 (rtx, rtx);
extern rtx gen_log1psf2 (rtx, rtx);
extern rtx gen_log1pdf2 (rtx, rtx);
extern rtx gen_logbxf2 (rtx, rtx);
extern rtx gen_logbsf2 (rtx, rtx);
extern rtx gen_logbdf2 (rtx, rtx);
extern rtx gen_ilogbxf2 (rtx, rtx);
extern rtx gen_ilogbsf2 (rtx, rtx);
extern rtx gen_ilogbdf2 (rtx, rtx);
extern rtx gen_expNcorexf3 (rtx, rtx, rtx);
extern rtx gen_expxf2 (rtx, rtx);
extern rtx gen_expsf2 (rtx, rtx);
extern rtx gen_expdf2 (rtx, rtx);
extern rtx gen_exp10xf2 (rtx, rtx);
extern rtx gen_exp10sf2 (rtx, rtx);
extern rtx gen_exp10df2 (rtx, rtx);
extern rtx gen_exp2xf2 (rtx, rtx);
extern rtx gen_exp2sf2 (rtx, rtx);
extern rtx gen_exp2df2 (rtx, rtx);
extern rtx gen_expm1xf2 (rtx, rtx);
extern rtx gen_expm1sf2 (rtx, rtx);
extern rtx gen_expm1df2 (rtx, rtx);
extern rtx gen_ldexpxf3 (rtx, rtx, rtx);
extern rtx gen_ldexpsf3 (rtx, rtx, rtx);
extern rtx gen_ldexpdf3 (rtx, rtx, rtx);
extern rtx gen_scalbxf3 (rtx, rtx, rtx);
extern rtx gen_scalbsf3 (rtx, rtx, rtx);
extern rtx gen_scalbdf3 (rtx, rtx, rtx);
extern rtx gen_significandxf2 (rtx, rtx);
extern rtx gen_significandsf2 (rtx, rtx);
extern rtx gen_significanddf2 (rtx, rtx);
extern rtx gen_rintsf2 (rtx, rtx);
extern rtx gen_rintdf2 (rtx, rtx);
extern rtx gen_roundsf2 (rtx, rtx);
extern rtx gen_rounddf2 (rtx, rtx);
extern rtx gen_roundxf2 (rtx, rtx);
extern rtx gen_lrintxfhi2 (rtx, rtx);
extern rtx gen_lrintxfsi2 (rtx, rtx);
extern rtx gen_lrintxfdi2 (rtx, rtx);
extern rtx gen_lrintsfsi2 (rtx, rtx);
extern rtx gen_lrintsfdi2 (rtx, rtx);
extern rtx gen_lrintdfsi2 (rtx, rtx);
extern rtx gen_lrintdfdi2 (rtx, rtx);
extern rtx gen_lroundsfhi2 (rtx, rtx);
extern rtx gen_lrounddfhi2 (rtx, rtx);
extern rtx gen_lroundxfhi2 (rtx, rtx);
extern rtx gen_lroundsfsi2 (rtx, rtx);
extern rtx gen_lrounddfsi2 (rtx, rtx);
extern rtx gen_lroundxfsi2 (rtx, rtx);
extern rtx gen_lroundsfdi2 (rtx, rtx);
extern rtx gen_lrounddfdi2 (rtx, rtx);
extern rtx gen_lroundxfdi2 (rtx, rtx);
extern rtx gen_floorxf2 (rtx, rtx);
extern rtx gen_ceilxf2 (rtx, rtx);
extern rtx gen_btruncxf2 (rtx, rtx);
extern rtx gen_floorsf2 (rtx, rtx);
extern rtx gen_ceilsf2 (rtx, rtx);
extern rtx gen_btruncsf2 (rtx, rtx);
extern rtx gen_floordf2 (rtx, rtx);
extern rtx gen_ceildf2 (rtx, rtx);
extern rtx gen_btruncdf2 (rtx, rtx);
extern rtx gen_nearbyintxf2 (rtx, rtx);
extern rtx gen_nearbyintsf2 (rtx, rtx);
extern rtx gen_nearbyintdf2 (rtx, rtx);
extern rtx gen_lfloorxfhi2 (rtx, rtx);
extern rtx gen_lceilxfhi2 (rtx, rtx);
extern rtx gen_lfloorxfsi2 (rtx, rtx);
extern rtx gen_lceilxfsi2 (rtx, rtx);
extern rtx gen_lfloorxfdi2 (rtx, rtx);
extern rtx gen_lceilxfdi2 (rtx, rtx);
extern rtx gen_lfloorsfsi2 (rtx, rtx);
extern rtx gen_lceilsfsi2 (rtx, rtx);
extern rtx gen_lfloorsfdi2 (rtx, rtx);
extern rtx gen_lceilsfdi2 (rtx, rtx);
extern rtx gen_lfloordfsi2 (rtx, rtx);
extern rtx gen_lceildfsi2 (rtx, rtx);
extern rtx gen_lfloordfdi2 (rtx, rtx);
extern rtx gen_lceildfdi2 (rtx, rtx);
extern rtx gen_isinfxf2 (rtx, rtx);
extern rtx gen_isinfsf2 (rtx, rtx);
extern rtx gen_isinfdf2 (rtx, rtx);
extern rtx gen_signbittf2 (rtx, rtx);
extern rtx gen_signbitxf2 (rtx, rtx);
extern rtx gen_signbitdf2 (rtx, rtx);
extern rtx gen_signbitsf2 (rtx, rtx);
extern rtx gen_movmemsi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_movmemdi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strmov (rtx, rtx, rtx, rtx);
extern rtx gen_strmov_singleop (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rep_mov (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_setmemsi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_setmemdi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strset (rtx, rtx, rtx);
extern rtx gen_strset_singleop (rtx, rtx, rtx, rtx);
extern rtx gen_rep_stos (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrnsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpintqi (rtx);
extern rtx gen_cmpstrnqi_nz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrnqi_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strlensi (rtx, rtx, rtx, rtx);
extern rtx gen_strlendi (rtx, rtx, rtx, rtx);
extern rtx gen_strlenqi_1 (rtx, rtx, rtx);
extern rtx gen_movqicc (rtx, rtx, rtx, rtx);
extern rtx gen_movhicc (rtx, rtx, rtx, rtx);
extern rtx gen_movsicc (rtx, rtx, rtx, rtx);
extern rtx gen_movdicc (rtx, rtx, rtx, rtx);
extern rtx gen_x86_movsicc_0_m1 (rtx, rtx, rtx);
extern rtx gen_x86_movdicc_0_m1 (rtx, rtx, rtx);
extern rtx gen_movsfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movdfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movxfcc (rtx, rtx, rtx, rtx);
extern rtx gen_addqicc (rtx, rtx, rtx, rtx);
extern rtx gen_addhicc (rtx, rtx, rtx, rtx);
extern rtx gen_addsicc (rtx, rtx, rtx, rtx);
extern rtx gen_adddicc (rtx, rtx, rtx, rtx);
extern rtx gen_allocate_stack (rtx, rtx);
extern rtx gen_probe_stack (rtx);
extern rtx gen_builtin_setjmp_setup (rtx);
extern rtx gen_builtin_setjmp_receiver (rtx);
extern rtx gen_builtin_longjmp (rtx);
extern rtx gen_prefetch (rtx, rtx, rtx);
extern rtx gen_stack_protect_set (rtx, rtx);
extern rtx gen_stack_protect_test (rtx, rtx, rtx);
extern rtx gen_lwp_llwpcb (rtx);
extern rtx gen_lwp_slwpcb (rtx);
extern rtx gen_lwp_lwpvalsi3 (rtx, rtx, rtx, rtx);
extern rtx gen_lwp_lwpvaldi3 (rtx, rtx, rtx, rtx);
extern rtx gen_lwp_lwpinssi3 (rtx, rtx, rtx, rtx);
extern rtx gen_lwp_lwpinsdi3 (rtx, rtx, rtx, rtx);
extern rtx gen_pause (void);
extern rtx gen_xbegin (rtx);
extern rtx gen_xtest (rtx);
extern rtx gen_bnd32_mk (rtx, rtx, rtx);
extern rtx gen_bnd64_mk (rtx, rtx, rtx);
extern rtx gen_movbnd32 (rtx, rtx);
extern rtx gen_movbnd64 (rtx, rtx);
extern rtx gen_bnd32_cl (rtx, rtx);
extern rtx gen_bnd32_cu (rtx, rtx);
extern rtx gen_bnd32_cn (rtx, rtx);
extern rtx gen_bnd64_cl (rtx, rtx);
extern rtx gen_bnd64_cu (rtx, rtx);
extern rtx gen_bnd64_cn (rtx, rtx);
extern rtx gen_bnd32_ldx (rtx, rtx, rtx);
extern rtx gen_bnd64_ldx (rtx, rtx, rtx);
extern rtx gen_bnd32_stx (rtx, rtx, rtx);
extern rtx gen_bnd64_stx (rtx, rtx, rtx);
extern rtx gen_rdpkru (rtx);
extern rtx gen_wrpkru (rtx);
extern rtx gen_movv8qi (rtx, rtx);
extern rtx gen_movv4hi (rtx, rtx);
extern rtx gen_movv2si (rtx, rtx);
extern rtx gen_movv1di (rtx, rtx);
extern rtx gen_movv2sf (rtx, rtx);
extern rtx gen_movmisalignv8qi (rtx, rtx);
extern rtx gen_movmisalignv4hi (rtx, rtx);
extern rtx gen_movmisalignv2si (rtx, rtx);
extern rtx gen_movmisalignv1di (rtx, rtx);
extern rtx gen_movmisalignv2sf (rtx, rtx);
extern rtx gen_mmx_addv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_subrv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_mulv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_smaxv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_sminv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv2sf3 (rtx, rtx, rtx);
extern rtx gen_vec_setv2sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv2sfsf (rtx, rtx, rtx);
extern rtx gen_vec_initv2sfsf (rtx, rtx);
extern rtx gen_mmx_addv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_ssaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_usaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sssubv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ussubv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ssaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_usaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sssubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ussubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_mulv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_smulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_umulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mmx_pmulhrwv4hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_umulv1siv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_smaxv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sminv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_umaxv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uminv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pshufw (rtx, rtx, rtx);
extern rtx gen_vec_setv2si (rtx, rtx, rtx);
extern rtx gen_vec_extractv2sisi (rtx, rtx, rtx);
extern rtx gen_vec_initv2sisi (rtx, rtx);
extern rtx gen_vec_setv4hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4hihi (rtx, rtx, rtx);
extern rtx gen_vec_initv4hihi (rtx, rtx);
extern rtx gen_vec_setv8qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8qiqi (rtx, rtx, rtx);
extern rtx gen_vec_initv8qiqi (rtx, rtx);
extern rtx gen_mmx_uavgv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_maskmovq (rtx, rtx, rtx);
extern rtx gen_mmx_emms (void);
extern rtx gen_mmx_femms (void);
extern rtx gen_movv64qi (rtx, rtx);
extern rtx gen_movv32qi (rtx, rtx);
extern rtx gen_movv16qi (rtx, rtx);
extern rtx gen_movv32hi (rtx, rtx);
extern rtx gen_movv16hi (rtx, rtx);
extern rtx gen_movv8hi (rtx, rtx);
extern rtx gen_movv16si (rtx, rtx);
extern rtx gen_movv8si (rtx, rtx);
extern rtx gen_movv4si (rtx, rtx);
extern rtx gen_movv8di (rtx, rtx);
extern rtx gen_movv4di (rtx, rtx);
extern rtx gen_movv2di (rtx, rtx);
extern rtx gen_movv4ti (rtx, rtx);
extern rtx gen_movv2ti (rtx, rtx);
extern rtx gen_movv1ti (rtx, rtx);
extern rtx gen_movv16sf (rtx, rtx);
extern rtx gen_movv8sf (rtx, rtx);
extern rtx gen_movv4sf (rtx, rtx);
extern rtx gen_movv8df (rtx, rtx);
extern rtx gen_movv4df (rtx, rtx);
extern rtx gen_movv2df (rtx, rtx);
extern rtx gen_movmisalignv64qi (rtx, rtx);
extern rtx gen_movmisalignv32qi (rtx, rtx);
extern rtx gen_movmisalignv16qi (rtx, rtx);
extern rtx gen_movmisalignv32hi (rtx, rtx);
extern rtx gen_movmisalignv16hi (rtx, rtx);
extern rtx gen_movmisalignv8hi (rtx, rtx);
extern rtx gen_movmisalignv16si (rtx, rtx);
extern rtx gen_movmisalignv8si (rtx, rtx);
extern rtx gen_movmisalignv4si (rtx, rtx);
extern rtx gen_movmisalignv8di (rtx, rtx);
extern rtx gen_movmisalignv4di (rtx, rtx);
extern rtx gen_movmisalignv2di (rtx, rtx);
extern rtx gen_movmisalignv4ti (rtx, rtx);
extern rtx gen_movmisalignv2ti (rtx, rtx);
extern rtx gen_movmisalignv1ti (rtx, rtx);
extern rtx gen_movmisalignv16sf (rtx, rtx);
extern rtx gen_movmisalignv8sf (rtx, rtx);
extern rtx gen_movmisalignv4sf (rtx, rtx);
extern rtx gen_movmisalignv8df (rtx, rtx);
extern rtx gen_movmisalignv4df (rtx, rtx);
extern rtx gen_movmisalignv2df (rtx, rtx);
extern rtx gen_storentdi (rtx, rtx);
extern rtx gen_storentsi (rtx, rtx);
extern rtx gen_storentsf (rtx, rtx);
extern rtx gen_storentdf (rtx, rtx);
extern rtx gen_storentv8di (rtx, rtx);
extern rtx gen_storentv4di (rtx, rtx);
extern rtx gen_storentv2di (rtx, rtx);
extern rtx gen_storentv16sf (rtx, rtx);
extern rtx gen_storentv8sf (rtx, rtx);
extern rtx gen_storentv4sf (rtx, rtx);
extern rtx gen_storentv8df (rtx, rtx);
extern rtx gen_storentv4df (rtx, rtx);
extern rtx gen_storentv2df (rtx, rtx);
extern rtx gen_kmovb (rtx, rtx);
extern rtx gen_kmovw (rtx, rtx);
extern rtx gen_kmovd (rtx, rtx);
extern rtx gen_kmovq (rtx, rtx);
extern rtx gen_absv16sf2 (rtx, rtx);
extern rtx gen_negv16sf2 (rtx, rtx);
extern rtx gen_absv8sf2 (rtx, rtx);
extern rtx gen_negv8sf2 (rtx, rtx);
extern rtx gen_absv4sf2 (rtx, rtx);
extern rtx gen_negv4sf2 (rtx, rtx);
extern rtx gen_absv8df2 (rtx, rtx);
extern rtx gen_negv8df2 (rtx, rtx);
extern rtx gen_absv4df2 (rtx, rtx);
extern rtx gen_negv4df2 (rtx, rtx);
extern rtx gen_absv2df2 (rtx, rtx);
extern rtx gen_negv2df2 (rtx, rtx);
extern rtx gen_addv16sf3 (rtx, rtx, rtx);
extern rtx gen_addv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_addv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16sf3 (rtx, rtx, rtx);
extern rtx gen_subv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_subv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8sf3 (rtx, rtx, rtx);
static inline rtx gen_addv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv8sf3 (rtx, rtx, rtx);
static inline rtx gen_subv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv4sf3 (rtx, rtx, rtx);
static inline rtx gen_addv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4sf3 (rtx, rtx, rtx);
static inline rtx gen_subv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv8df3 (rtx, rtx, rtx);
extern rtx gen_addv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_addv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8df3 (rtx, rtx, rtx);
extern rtx gen_subv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_subv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv4df3 (rtx, rtx, rtx);
static inline rtx gen_addv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4df3 (rtx, rtx, rtx);
static inline rtx gen_subv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv2df3 (rtx, rtx, rtx);
static inline rtx gen_addv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv2df3 (rtx, rtx, rtx);
static inline rtx gen_subv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv16sf3 (rtx, rtx, rtx);
extern rtx gen_mulv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_mulv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8sf3 (rtx, rtx, rtx);
static inline rtx gen_mulv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv4sf3 (rtx, rtx, rtx);
static inline rtx gen_mulv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv8df3 (rtx, rtx, rtx);
extern rtx gen_mulv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_mulv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv4df3 (rtx, rtx, rtx);
static inline rtx gen_mulv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv2df3 (rtx, rtx, rtx);
static inline rtx gen_mulv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_divv8df3 (rtx, rtx, rtx);
extern rtx gen_divv4df3 (rtx, rtx, rtx);
extern rtx gen_divv2df3 (rtx, rtx, rtx);
extern rtx gen_divv16sf3 (rtx, rtx, rtx);
extern rtx gen_divv8sf3 (rtx, rtx, rtx);
extern rtx gen_divv4sf3 (rtx, rtx, rtx);
extern rtx gen_sqrtv8df2 (rtx, rtx);
extern rtx gen_sqrtv4df2 (rtx, rtx);
extern rtx gen_sqrtv2df2 (rtx, rtx);
extern rtx gen_sqrtv16sf2 (rtx, rtx);
extern rtx gen_sqrtv8sf2 (rtx, rtx);
extern rtx gen_sqrtv4sf2 (rtx, rtx);
extern rtx gen_rsqrtv8sf2 (rtx, rtx);
extern rtx gen_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_rsqrtv16sf2 (rtx, rtx);
extern rtx gen_smaxv16sf3 (rtx, rtx, rtx);
extern rtx gen_smaxv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16sf3 (rtx, rtx, rtx);
extern rtx gen_sminv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sminv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8sf3 (rtx, rtx, rtx);
static inline rtx gen_smaxv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv8sf3 (rtx, rtx, rtx);
static inline rtx gen_sminv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv4sf3 (rtx, rtx, rtx);
static inline rtx gen_smaxv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4sf3 (rtx, rtx, rtx);
static inline rtx gen_sminv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv8df3 (rtx, rtx, rtx);
extern rtx gen_smaxv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8df3 (rtx, rtx, rtx);
extern rtx gen_sminv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sminv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv4df3 (rtx, rtx, rtx);
static inline rtx gen_smaxv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4df3 (rtx, rtx, rtx);
static inline rtx gen_sminv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv2df3 (rtx, rtx, rtx);
static inline rtx gen_smaxv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv2df3 (rtx, rtx, rtx);
static inline rtx gen_sminv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse3_haddv2df3 (rtx, rtx, rtx);
extern rtx gen_reduc_plus_scal_v8df (rtx, rtx);
extern rtx gen_reduc_plus_scal_v4df (rtx, rtx);
extern rtx gen_reduc_plus_scal_v2df (rtx, rtx);
extern rtx gen_reduc_plus_scal_v16sf (rtx, rtx);
extern rtx gen_reduc_plus_scal_v8sf (rtx, rtx);
extern rtx gen_reduc_plus_scal_v4sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8si (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8si (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4di (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4di (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8sf (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4df (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4df (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4sf (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16si (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16si (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8di (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8di (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16sf (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8df (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8df (rtx, rtx);
extern rtx gen_reduc_umax_scal_v16si (rtx, rtx);
extern rtx gen_reduc_umin_scal_v16si (rtx, rtx);
extern rtx gen_reduc_umax_scal_v8di (rtx, rtx);
extern rtx gen_reduc_umin_scal_v8di (rtx, rtx);
extern rtx gen_reduc_umax_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v8si (rtx, rtx);
extern rtx gen_reduc_umin_scal_v8si (rtx, rtx);
extern rtx gen_reduc_umax_scal_v4di (rtx, rtx);
extern rtx gen_reduc_umin_scal_v4di (rtx, rtx);
extern rtx gen_reduc_umin_scal_v8hi (rtx, rtx);
extern rtx gen_vec_cmpv16sihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16sfhi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv64qidi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16qihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv32qisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv32hisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16hihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8hiqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv32qiv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16hiv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8siv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4div4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16qiv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8hiv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4siv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8sfv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4dfv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4sfv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2dfv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16sihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv2diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv64qidi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16qihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv32qisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv32hisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16hihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8hiqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv32qiv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16hiv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8siv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4div4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16qiv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8hiv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4siv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpeqv2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16sihi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16sfhi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v64qidi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16qihi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v32qisi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v32hisi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16hihi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8hiqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v32qiv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16hiv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8siv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4div4di (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16qiv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8hiv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4siv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8sfv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4dfv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4sfv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2dfv2di (rtx, rtx, rtx, rtx);
extern rtx gen_andv8sf3 (rtx, rtx, rtx);
extern rtx gen_andv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8sf3 (rtx, rtx, rtx);
extern rtx gen_iorv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8sf3 (rtx, rtx, rtx);
extern rtx gen_xorv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4sf3 (rtx, rtx, rtx);
extern rtx gen_andv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4sf3 (rtx, rtx, rtx);
extern rtx gen_iorv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4sf3 (rtx, rtx, rtx);
extern rtx gen_xorv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4df3 (rtx, rtx, rtx);
extern rtx gen_andv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4df3 (rtx, rtx, rtx);
extern rtx gen_iorv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4df3 (rtx, rtx, rtx);
extern rtx gen_xorv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv2df3 (rtx, rtx, rtx);
extern rtx gen_andv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv2df3 (rtx, rtx, rtx);
extern rtx gen_iorv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv2df3 (rtx, rtx, rtx);
extern rtx gen_xorv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv16sf3 (rtx, rtx, rtx);
extern rtx gen_andv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv16sf3 (rtx, rtx, rtx);
extern rtx gen_iorv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv16sf3 (rtx, rtx, rtx);
extern rtx gen_xorv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv8df3 (rtx, rtx, rtx);
extern rtx gen_andv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8df3 (rtx, rtx, rtx);
extern rtx gen_iorv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8df3 (rtx, rtx, rtx);
extern rtx gen_xorv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysignv16sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv8sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv4sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv8df3 (rtx, rtx, rtx);
extern rtx gen_copysignv4df3 (rtx, rtx, rtx);
extern rtx gen_copysignv2df3 (rtx, rtx, rtx);
extern rtx gen_andtf3 (rtx, rtx, rtx);
extern rtx gen_iortf3 (rtx, rtx, rtx);
extern rtx gen_xortf3 (rtx, rtx, rtx);
extern rtx gen_fmasf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmadf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmssf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsdf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmasf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmadf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmssf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsdf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_vmfmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_vmfmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv16siv16sf2 (rtx, rtx);
extern rtx gen_floatunsv8siv8sf2 (rtx, rtx);
extern rtx gen_floatunsv4siv4sf2 (rtx, rtx);
extern rtx gen_fixuns_truncv16sfv16si2 (rtx, rtx);
extern rtx gen_fixuns_truncv8sfv8si2 (rtx, rtx);
extern rtx gen_fixuns_truncv4sfv4si2 (rtx, rtx);
extern rtx gen_avx_cvtpd2dq256_2 (rtx, rtx);
extern rtx gen_avx_cvttpd2dq256_2 (rtx, rtx);
extern rtx gen_sse2_cvtpd2ps (rtx, rtx);
extern rtx gen_sse2_cvtpd2ps_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cvtmask2bv64qi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2bv16qi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2bv32qi (rtx, rtx);
extern rtx gen_avx512bw_cvtmask2wv32hi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2wv16hi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2wv8hi (rtx, rtx);
extern rtx gen_avx512f_cvtmask2dv16si (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2dv8si (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2dv4si (rtx, rtx);
extern rtx gen_avx512f_cvtmask2qv8di (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2qv4di (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2qv2di (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v4sf (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v8sf (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16sf (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v4sf (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v8sf (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v16si (rtx, rtx);
extern rtx gen_vec_pack_trunc_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v2df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_trunc_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_trunc_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_trunc_v2df (rtx, rtx, rtx);
extern rtx gen_vec_pack_ufix_trunc_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_ufix_trunc_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_ufix_trunc_v2df (rtx, rtx, rtx);
extern rtx gen_avx512f_vec_pack_sfix_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_v2df (rtx, rtx, rtx);
extern rtx gen_sse_movhlps_exp (rtx, rtx, rtx);
extern rtx gen_sse_movlhps_exp (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8sf (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8sf (rtx, rtx, rtx);
extern rtx gen_avx_shufps256 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufps256_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps (rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_loadhps_exp (rtx, rtx, rtx);
extern rtx gen_sse_loadlps_exp (rtx, rtx, rtx);
extern rtx gen_vec_setv32qi (rtx, rtx, rtx);
extern rtx gen_vec_setv16qi (rtx, rtx, rtx);
extern rtx gen_vec_setv16hi (rtx, rtx, rtx);
extern rtx gen_vec_setv8hi (rtx, rtx, rtx);
extern rtx gen_vec_setv16si (rtx, rtx, rtx);
extern rtx gen_vec_setv8si (rtx, rtx, rtx);
extern rtx gen_vec_setv4si (rtx, rtx, rtx);
extern rtx gen_vec_setv8di (rtx, rtx, rtx);
extern rtx gen_vec_setv4di (rtx, rtx, rtx);
extern rtx gen_vec_setv2di (rtx, rtx, rtx);
extern rtx gen_vec_setv16sf (rtx, rtx, rtx);
extern rtx gen_vec_setv8sf (rtx, rtx, rtx);
extern rtx gen_vec_setv4sf (rtx, rtx, rtx);
extern rtx gen_vec_setv8df (rtx, rtx, rtx);
extern rtx gen_vec_setv4df (rtx, rtx, rtx);
extern rtx gen_vec_setv2df (rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf64x2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti64x2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf32x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti32x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf32x8_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti32x8_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf64x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti64x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v32qi (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v16hi (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v8si (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v4di (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v8sf (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v4df (rtx, rtx, rtx);
extern rtx gen_vec_extractv64qiqi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32qiqi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16qiqi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32hihi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16hihi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8hihi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16sisi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8sisi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sisi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8didi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4didi (rtx, rtx, rtx);
extern rtx gen_vec_extractv2didi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16sfsf (rtx, rtx, rtx);
extern rtx gen_vec_extractv8sfsf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sfsf (rtx, rtx, rtx);
extern rtx gen_vec_extractv8dfdf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4dfdf (rtx, rtx, rtx);
extern rtx gen_vec_extractv2dfdf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4titi (rtx, rtx, rtx);
extern rtx gen_vec_extractv2titi (rtx, rtx, rtx);
extern rtx gen_vec_extractv64qiv32qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32hiv16hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16siv8si (rtx, rtx, rtx);
extern rtx gen_vec_extractv8div4di (rtx, rtx, rtx);
extern rtx gen_vec_extractv16sfv8sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv8dfv4df (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4df (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_movddup512 (rtx, rtx);
extern rtx gen_avx512f_movddup512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_unpcklpd512 (rtx, rtx, rtx);
extern rtx gen_avx512f_unpcklpd512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_movddup256 (rtx, rtx);
extern rtx gen_avx_movddup256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpcklpd256 (rtx, rtx, rtx);
extern rtx gen_avx_unpcklpd256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4df (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufps512_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufpd512_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_loadhpd_exp (rtx, rtx, rtx);
extern rtx gen_sse2_loadlpd_exp (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512bw_ss_truncatev32hiv32qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512bw_truncatev32hiv32qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512bw_us_truncatev32hiv32qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev16hiv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev16hiv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev16hiv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_negv64qi2 (rtx, rtx);
extern rtx gen_negv32qi2 (rtx, rtx);
extern rtx gen_negv16qi2 (rtx, rtx);
extern rtx gen_negv32hi2 (rtx, rtx);
extern rtx gen_negv16hi2 (rtx, rtx);
extern rtx gen_negv8hi2 (rtx, rtx);
extern rtx gen_negv16si2 (rtx, rtx);
extern rtx gen_negv8si2 (rtx, rtx);
extern rtx gen_negv4si2 (rtx, rtx);
extern rtx gen_negv8di2 (rtx, rtx);
extern rtx gen_negv4di2 (rtx, rtx);
extern rtx gen_negv2di2 (rtx, rtx);
extern rtx gen_addv64qi3 (rtx, rtx, rtx);
extern rtx gen_subv64qi3 (rtx, rtx, rtx);
extern rtx gen_addv32qi3 (rtx, rtx, rtx);
extern rtx gen_subv32qi3 (rtx, rtx, rtx);
extern rtx gen_addv16qi3 (rtx, rtx, rtx);
extern rtx gen_subv16qi3 (rtx, rtx, rtx);
extern rtx gen_addv32hi3 (rtx, rtx, rtx);
extern rtx gen_subv32hi3 (rtx, rtx, rtx);
extern rtx gen_addv16hi3 (rtx, rtx, rtx);
extern rtx gen_subv16hi3 (rtx, rtx, rtx);
extern rtx gen_addv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv8hi3 (rtx, rtx, rtx);
extern rtx gen_addv16si3 (rtx, rtx, rtx);
extern rtx gen_subv16si3 (rtx, rtx, rtx);
extern rtx gen_addv8si3 (rtx, rtx, rtx);
extern rtx gen_subv8si3 (rtx, rtx, rtx);
extern rtx gen_addv4si3 (rtx, rtx, rtx);
extern rtx gen_subv4si3 (rtx, rtx, rtx);
extern rtx gen_addv8di3 (rtx, rtx, rtx);
extern rtx gen_subv8di3 (rtx, rtx, rtx);
extern rtx gen_addv4di3 (rtx, rtx, rtx);
extern rtx gen_subv4di3 (rtx, rtx, rtx);
extern rtx gen_addv2di3 (rtx, rtx, rtx);
extern rtx gen_subv2di3 (rtx, rtx, rtx);
extern rtx gen_addv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_usaddv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_usaddv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sssubv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_sssubv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ussubv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ussubv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_usaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_usaddv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_sssubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_sssubv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ussubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ussubv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_usaddv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_usaddv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sssubv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_sssubv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ussubv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ussubv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_usaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_usaddv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_sssubv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_sssubv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ussubv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ussubv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv64qi3 (rtx, rtx, rtx);
extern rtx gen_mulv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv32qi3 (rtx, rtx, rtx);
extern rtx gen_mulv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv16qi3 (rtx, rtx, rtx);
extern rtx gen_mulv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv32hi3 (rtx, rtx, rtx);
extern rtx gen_mulv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv16hi3 (rtx, rtx, rtx);
extern rtx gen_mulv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8hi3 (rtx, rtx, rtx);
extern rtx gen_mulv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smulv32hi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulv32hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umulv32hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv32hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smulv16hi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulv16hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umulv16hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv16hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulv8hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv8hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_mulv2siv2di3 (rtx, rtx, rtx);
extern rtx gen_sse4_1_mulv2siv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_sse2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mulv16si3 (rtx, rtx, rtx);
extern rtx gen_mulv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8si3 (rtx, rtx, rtx);
extern rtx gen_mulv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv4si3 (rtx, rtx, rtx);
extern rtx gen_mulv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8di3 (rtx, rtx, rtx);
extern rtx gen_mulv4di3 (rtx, rtx, rtx);
extern rtx gen_mulv2di3 (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_odd_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_odd_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_odd_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_odd_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_odd_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_odd_v4si (rtx, rtx, rtx);
extern rtx gen_sdot_prodv32hi (rtx, rtx, rtx, rtx);
extern rtx gen_sdot_prodv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_sdot_prodv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_sdot_prodv4si (rtx, rtx, rtx, rtx);
extern rtx gen_usadv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_usadv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_shr_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_shr_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_shr_v4si (rtx, rtx, rtx);
extern rtx gen_vec_shr_v2di (rtx, rtx, rtx);
extern rtx gen_smaxv32qi3 (rtx, rtx, rtx);
extern rtx gen_sminv32qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv32qi3 (rtx, rtx, rtx);
extern rtx gen_uminv32qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv16hi3 (rtx, rtx, rtx);
extern rtx gen_sminv16hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv16hi3 (rtx, rtx, rtx);
extern rtx gen_uminv16hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8si3 (rtx, rtx, rtx);
extern rtx gen_sminv8si3 (rtx, rtx, rtx);
extern rtx gen_umaxv8si3 (rtx, rtx, rtx);
extern rtx gen_uminv8si3 (rtx, rtx, rtx);
extern rtx gen_smaxv64qi3 (rtx, rtx, rtx);
extern rtx gen_sminv64qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv64qi3 (rtx, rtx, rtx);
extern rtx gen_uminv64qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv32hi3 (rtx, rtx, rtx);
extern rtx gen_sminv32hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv32hi3 (rtx, rtx, rtx);
extern rtx gen_uminv32hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv16si3 (rtx, rtx, rtx);
extern rtx gen_sminv16si3 (rtx, rtx, rtx);
extern rtx gen_umaxv16si3 (rtx, rtx, rtx);
extern rtx gen_uminv16si3 (rtx, rtx, rtx);
extern rtx gen_smaxv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8di3 (rtx, rtx, rtx);
extern rtx gen_sminv8di3 (rtx, rtx, rtx);
extern rtx gen_umaxv8di3 (rtx, rtx, rtx);
extern rtx gen_uminv8di3 (rtx, rtx, rtx);
extern rtx gen_smaxv4di3 (rtx, rtx, rtx);
extern rtx gen_sminv4di3 (rtx, rtx, rtx);
extern rtx gen_umaxv4di3 (rtx, rtx, rtx);
extern rtx gen_uminv4di3 (rtx, rtx, rtx);
extern rtx gen_smaxv2di3 (rtx, rtx, rtx);
extern rtx gen_sminv2di3 (rtx, rtx, rtx);
extern rtx gen_umaxv2di3 (rtx, rtx, rtx);
extern rtx gen_uminv2di3 (rtx, rtx, rtx);
extern rtx gen_smaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_sminv16qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_sminv8hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv4si3 (rtx, rtx, rtx);
extern rtx gen_sminv4si3 (rtx, rtx, rtx);
extern rtx gen_umaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_uminv16qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_uminv8hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv4si3 (rtx, rtx, rtx);
extern rtx gen_uminv4si3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv8si3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_sse4_1_eqv2di3 (rtx, rtx, rtx);
extern rtx gen_vcondv64qiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4siv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4sfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4siv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4sfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4siv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4sfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondeqv2div2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondeqv2dfv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv2df (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8sf (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4df (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16sf (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8df (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv64qi (rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv16si2 (rtx, rtx);
extern rtx gen_one_cmplv8di2 (rtx, rtx);
extern rtx gen_one_cmplv64qi2 (rtx, rtx);
extern rtx gen_one_cmplv32qi2 (rtx, rtx);
extern rtx gen_one_cmplv16qi2 (rtx, rtx);
extern rtx gen_one_cmplv32hi2 (rtx, rtx);
extern rtx gen_one_cmplv16hi2 (rtx, rtx);
extern rtx gen_one_cmplv8hi2 (rtx, rtx);
extern rtx gen_one_cmplv8si2 (rtx, rtx);
extern rtx gen_one_cmplv4si2 (rtx, rtx);
extern rtx gen_one_cmplv4di2 (rtx, rtx);
extern rtx gen_one_cmplv2di2 (rtx, rtx);
extern rtx gen_avx512bw_andnotv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv32qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_andnotv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv16hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16si3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv8si3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8di3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv4di3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_andnotv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_andnotv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv16si3 (rtx, rtx, rtx);
extern rtx gen_iorv16si3 (rtx, rtx, rtx);
extern rtx gen_xorv16si3 (rtx, rtx, rtx);
extern rtx gen_andv8di3 (rtx, rtx, rtx);
extern rtx gen_iorv8di3 (rtx, rtx, rtx);
extern rtx gen_xorv8di3 (rtx, rtx, rtx);
extern rtx gen_andv64qi3 (rtx, rtx, rtx);
extern rtx gen_iorv64qi3 (rtx, rtx, rtx);
extern rtx gen_xorv64qi3 (rtx, rtx, rtx);
extern rtx gen_andv32qi3 (rtx, rtx, rtx);
extern rtx gen_iorv32qi3 (rtx, rtx, rtx);
extern rtx gen_xorv32qi3 (rtx, rtx, rtx);
extern rtx gen_andv16qi3 (rtx, rtx, rtx);
extern rtx gen_iorv16qi3 (rtx, rtx, rtx);
extern rtx gen_xorv16qi3 (rtx, rtx, rtx);
extern rtx gen_andv32hi3 (rtx, rtx, rtx);
extern rtx gen_iorv32hi3 (rtx, rtx, rtx);
extern rtx gen_xorv32hi3 (rtx, rtx, rtx);
extern rtx gen_andv16hi3 (rtx, rtx, rtx);
extern rtx gen_iorv16hi3 (rtx, rtx, rtx);
extern rtx gen_xorv16hi3 (rtx, rtx, rtx);
extern rtx gen_andv8hi3 (rtx, rtx, rtx);
extern rtx gen_iorv8hi3 (rtx, rtx, rtx);
extern rtx gen_xorv8hi3 (rtx, rtx, rtx);
extern rtx gen_andv8si3 (rtx, rtx, rtx);
extern rtx gen_iorv8si3 (rtx, rtx, rtx);
extern rtx gen_xorv8si3 (rtx, rtx, rtx);
extern rtx gen_andv4si3 (rtx, rtx, rtx);
extern rtx gen_iorv4si3 (rtx, rtx, rtx);
extern rtx gen_xorv4si3 (rtx, rtx, rtx);
extern rtx gen_andv4di3 (rtx, rtx, rtx);
extern rtx gen_iorv4di3 (rtx, rtx, rtx);
extern rtx gen_xorv4di3 (rtx, rtx, rtx);
extern rtx gen_andv2di3 (rtx, rtx, rtx);
extern rtx gen_iorv2di3 (rtx, rtx, rtx);
extern rtx gen_xorv2di3 (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v32hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v16si (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v8si (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v4si (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v8di (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v4di (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v2di (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_qi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv32qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv16hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4di (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv32qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv16hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4di (rtx, rtx, rtx);
extern rtx gen_avx512dq_vinsertf64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinserti64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinsertf32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinserti32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinsertf32x8_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinserti32x8_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinsertf64x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinserti64x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_i64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_f64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_i32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_f32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_pshufdv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufdv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufdv3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufd_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshuflwv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshuflwv3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshuflw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw (rtx, rtx, rtx);
extern rtx gen_avx2_pshufhwv3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufhwv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufhw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw (rtx, rtx, rtx);
extern rtx gen_sse2_loadd (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v64qi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v32qi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v16qi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v16si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v64qi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v32qi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16qi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v64qi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v32qi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v16qi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_di (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v64qi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v32qi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v16qi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_di (rtx, rtx);
extern rtx gen_avx512bw_uavgv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_uavgv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_uavgv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_uavgv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_uavgv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_uavgv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_uavgv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_uavgv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_uavgv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_maskmovdqu (rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv4hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pmulhrswv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_pmulhrswv16hi3 (rtx, rtx, rtx);
extern rtx gen_absv64qi2 (rtx, rtx);
extern rtx gen_absv32qi2 (rtx, rtx);
extern rtx gen_absv16qi2 (rtx, rtx);
extern rtx gen_absv32hi2 (rtx, rtx);
extern rtx gen_absv16hi2 (rtx, rtx);
extern rtx gen_absv8hi2 (rtx, rtx);
extern rtx gen_absv16si2 (rtx, rtx);
extern rtx gen_absv8si2 (rtx, rtx);
extern rtx gen_absv4si2 (rtx, rtx);
extern rtx gen_absv8di2 (rtx, rtx);
extern rtx gen_absv4di2 (rtx, rtx);
extern rtx gen_absv2di2 (rtx, rtx);
extern rtx gen_avx2_pblendw (rtx, rtx, rtx, rtx);
extern rtx gen_avx_roundps_sfix256 (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundps_sfix (rtx, rtx, rtx);
extern rtx gen_avx512f_roundps512 (rtx, rtx, rtx);
extern rtx gen_avx512f_roundpd512 (rtx, rtx, rtx);
extern rtx gen_avx512f_roundps512_sfix (rtx, rtx, rtx);
extern rtx gen_avx512f_roundpd_vec_pack_sfix512 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_roundpd_vec_pack_sfix256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_roundpd_vec_pack_sfix (rtx, rtx, rtx, rtx);
extern rtx gen_roundv16sf2 (rtx, rtx);
extern rtx gen_roundv8sf2 (rtx, rtx);
extern rtx gen_roundv4sf2 (rtx, rtx);
extern rtx gen_roundv8df2 (rtx, rtx);
extern rtx gen_roundv4df2 (rtx, rtx);
extern rtx gen_roundv2df2 (rtx, rtx);
extern rtx gen_roundv16sf2_sfix (rtx, rtx);
extern rtx gen_roundv8sf2_sfix (rtx, rtx);
extern rtx gen_roundv4sf2_sfix (rtx, rtx);
extern rtx gen_roundv8df2_vec_pack_sfix (rtx, rtx, rtx);
extern rtx gen_roundv4df2_vec_pack_sfix (rtx, rtx, rtx);
extern rtx gen_roundv2df2_vec_pack_sfix (rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv16sisf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv8disf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv8sidf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv8didf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv16sisf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv8disf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv8sidf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv8didf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_rotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_rotlv4si3 (rtx, rtx, rtx);
extern rtx gen_rotlv2di3 (rtx, rtx, rtx);
extern rtx gen_rotrv16qi3 (rtx, rtx, rtx);
extern rtx gen_rotrv8hi3 (rtx, rtx, rtx);
extern rtx gen_rotrv4si3 (rtx, rtx, rtx);
extern rtx gen_rotrv2di3 (rtx, rtx, rtx);
extern rtx gen_vrotrv16qi3 (rtx, rtx, rtx);
extern rtx gen_vrotrv8hi3 (rtx, rtx, rtx);
extern rtx gen_vrotrv4si3 (rtx, rtx, rtx);
extern rtx gen_vrotrv2di3 (rtx, rtx, rtx);
extern rtx gen_vrotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_vrotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_vrotlv4si3 (rtx, rtx, rtx);
extern rtx gen_vrotlv2di3 (rtx, rtx, rtx);
extern rtx gen_vlshrv16qi3 (rtx, rtx, rtx);
extern rtx gen_vlshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_vlshrv4si3 (rtx, rtx, rtx);
extern rtx gen_vlshrv2di3 (rtx, rtx, rtx);
extern rtx gen_vlshrv16si3 (rtx, rtx, rtx);
extern rtx gen_vlshrv8di3 (rtx, rtx, rtx);
extern rtx gen_vlshrv8si3 (rtx, rtx, rtx);
extern rtx gen_vlshrv4di3 (rtx, rtx, rtx);
extern rtx gen_vashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_vashrv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vashrv16qi3 (rtx, rtx, rtx);
extern rtx gen_vashrv2di3 (rtx, rtx, rtx);
extern rtx gen_vashrv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vashrv4si3 (rtx, rtx, rtx);
extern rtx gen_vashrv16si3 (rtx, rtx, rtx);
extern rtx gen_vashrv8si3 (rtx, rtx, rtx);
extern rtx gen_vashlv16qi3 (rtx, rtx, rtx);
extern rtx gen_vashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_vashlv4si3 (rtx, rtx, rtx);
extern rtx gen_vashlv2di3 (rtx, rtx, rtx);
extern rtx gen_vashlv16si3 (rtx, rtx, rtx);
extern rtx gen_vashlv8di3 (rtx, rtx, rtx);
extern rtx gen_vashlv8si3 (rtx, rtx, rtx);
extern rtx gen_vashlv4di3 (rtx, rtx, rtx);
extern rtx gen_ashlv64qi3 (rtx, rtx, rtx);
extern rtx gen_lshrv64qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv64qi3 (rtx, rtx, rtx);
extern rtx gen_ashlv32qi3 (rtx, rtx, rtx);
extern rtx gen_lshrv32qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv32qi3 (rtx, rtx, rtx);
extern rtx gen_ashlv16qi3 (rtx, rtx, rtx);
extern rtx gen_lshrv16qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv16qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_vmfrczv4sf2 (rtx, rtx);
extern rtx gen_xop_vmfrczv2df2 (rtx, rtx);
extern rtx gen_avx_vzeroall (void);
extern rtx gen_avx2_permv4di (rtx, rtx, rtx);
extern rtx gen_avx2_permv4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_permv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4df (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv2df (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv8sf (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4sf (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermi2varv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermi2varv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vperm2f128v8si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vperm2f128v8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vperm2f128v4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v32qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v8si (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v4di (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v4df (rtx, rtx, rtx, rtx);
extern rtx gen_maskloadv4sfv4si (rtx, rtx, rtx);
extern rtx gen_maskloadv2dfv2di (rtx, rtx, rtx);
extern rtx gen_maskloadv8sfv8si (rtx, rtx, rtx);
extern rtx gen_maskloadv4dfv4di (rtx, rtx, rtx);
extern rtx gen_maskloadv4siv4si (rtx, rtx, rtx);
extern rtx gen_maskloadv2div2di (rtx, rtx, rtx);
extern rtx gen_maskloadv8siv8si (rtx, rtx, rtx);
extern rtx gen_maskloadv4div4di (rtx, rtx, rtx);
extern rtx gen_maskloadv16sihi (rtx, rtx, rtx);
extern rtx gen_maskloadv8siqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4siqi (rtx, rtx, rtx);
extern rtx gen_maskloadv8diqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4diqi (rtx, rtx, rtx);
extern rtx gen_maskloadv2diqi (rtx, rtx, rtx);
extern rtx gen_maskloadv16sfhi (rtx, rtx, rtx);
extern rtx gen_maskloadv8sfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4sfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv8dfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4dfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv2dfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv64qidi (rtx, rtx, rtx);
extern rtx gen_maskloadv16qihi (rtx, rtx, rtx);
extern rtx gen_maskloadv32qisi (rtx, rtx, rtx);
extern rtx gen_maskloadv32hisi (rtx, rtx, rtx);
extern rtx gen_maskloadv16hihi (rtx, rtx, rtx);
extern rtx gen_maskloadv8hiqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4sfv4si (rtx, rtx, rtx);
extern rtx gen_maskstorev2dfv2di (rtx, rtx, rtx);
extern rtx gen_maskstorev8sfv8si (rtx, rtx, rtx);
extern rtx gen_maskstorev4dfv4di (rtx, rtx, rtx);
extern rtx gen_maskstorev4siv4si (rtx, rtx, rtx);
extern rtx gen_maskstorev2div2di (rtx, rtx, rtx);
extern rtx gen_maskstorev8siv8si (rtx, rtx, rtx);
extern rtx gen_maskstorev4div4di (rtx, rtx, rtx);
extern rtx gen_maskstorev16sihi (rtx, rtx, rtx);
extern rtx gen_maskstorev8siqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4siqi (rtx, rtx, rtx);
extern rtx gen_maskstorev8diqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4diqi (rtx, rtx, rtx);
extern rtx gen_maskstorev2diqi (rtx, rtx, rtx);
extern rtx gen_maskstorev16sfhi (rtx, rtx, rtx);
extern rtx gen_maskstorev8sfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4sfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev8dfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4dfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev2dfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev64qidi (rtx, rtx, rtx);
extern rtx gen_maskstorev16qihi (rtx, rtx, rtx);
extern rtx gen_maskstorev32qisi (rtx, rtx, rtx);
extern rtx gen_maskstorev32hisi (rtx, rtx, rtx);
extern rtx gen_maskstorev16hihi (rtx, rtx, rtx);
extern rtx gen_maskstorev8hiqi (rtx, rtx, rtx);
extern rtx gen_cbranchv4si4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchv2di4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchv8si4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchv4di4 (rtx, rtx, rtx, rtx);
extern rtx gen_vec_initv64qiqi (rtx, rtx);
extern rtx gen_vec_initv32qiqi (rtx, rtx);
extern rtx gen_vec_initv16qiqi (rtx, rtx);
extern rtx gen_vec_initv32hihi (rtx, rtx);
extern rtx gen_vec_initv16hihi (rtx, rtx);
extern rtx gen_vec_initv8hihi (rtx, rtx);
extern rtx gen_vec_initv16sisi (rtx, rtx);
extern rtx gen_vec_initv8sisi (rtx, rtx);
extern rtx gen_vec_initv4sisi (rtx, rtx);
extern rtx gen_vec_initv8didi (rtx, rtx);
extern rtx gen_vec_initv4didi (rtx, rtx);
extern rtx gen_vec_initv2didi (rtx, rtx);
extern rtx gen_vec_initv16sfsf (rtx, rtx);
extern rtx gen_vec_initv8sfsf (rtx, rtx);
extern rtx gen_vec_initv4sfsf (rtx, rtx);
extern rtx gen_vec_initv8dfdf (rtx, rtx);
extern rtx gen_vec_initv4dfdf (rtx, rtx);
extern rtx gen_vec_initv2dfdf (rtx, rtx);
extern rtx gen_vec_initv4titi (rtx, rtx);
extern rtx gen_vec_initv2titi (rtx, rtx);
extern rtx gen_vec_initv64qiv32qi (rtx, rtx);
extern rtx gen_vec_initv32qiv16qi (rtx, rtx);
extern rtx gen_vec_initv16qiv8qi (rtx, rtx);
extern rtx gen_vec_initv32hiv16hi (rtx, rtx);
extern rtx gen_vec_initv16hiv8hi (rtx, rtx);
extern rtx gen_vec_initv8hiv4hi (rtx, rtx);
extern rtx gen_vec_initv16siv8si (rtx, rtx);
extern rtx gen_vec_initv8siv4si (rtx, rtx);
extern rtx gen_vec_initv4siv2si (rtx, rtx);
extern rtx gen_vec_initv8div4di (rtx, rtx);
extern rtx gen_vec_initv4div2di (rtx, rtx);
extern rtx gen_vec_initv16sfv8sf (rtx, rtx);
extern rtx gen_vec_initv8sfv4sf (rtx, rtx);
extern rtx gen_vec_initv4sfv2sf (rtx, rtx);
extern rtx gen_vec_initv8dfv4df (rtx, rtx);
extern rtx gen_vec_initv4dfv2df (rtx, rtx);
extern rtx gen_vec_initv4tiv2ti (rtx, rtx);
extern rtx gen_vcvtps2ph_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcvtps2ph (rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv16si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv16sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv8di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv8df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv16si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv16sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv8di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv8df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16si_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16sf_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8di_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8df_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8si_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8sf_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4di_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4df_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4si_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4sf_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2di_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2df_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv64qi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16qi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32qi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv8hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_movv64sf (rtx, rtx);
extern rtx gen_movv64si (rtx, rtx);
extern rtx gen_vpshrdv_v32hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_lfence (void);
extern rtx gen_sse_sfence (void);
extern rtx gen_sse2_mfence (void);
extern rtx gen_mem_thread_fence (rtx);
extern rtx gen_atomic_loadqi (rtx, rtx, rtx);
extern rtx gen_atomic_loadhi (rtx, rtx, rtx);
extern rtx gen_atomic_loadsi (rtx, rtx, rtx);
extern rtx gen_atomic_loaddi (rtx, rtx, rtx);
extern rtx gen_atomic_storeqi (rtx, rtx, rtx);
extern rtx gen_atomic_storehi (rtx, rtx, rtx);
extern rtx gen_atomic_storesi (rtx, rtx, rtx);
extern rtx gen_atomic_storedi (rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapqi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swaphi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapsi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapdi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapti (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_sethi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setdi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementhi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementdi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resethi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetdi (rtx, rtx, rtx, rtx, rtx);
# 44 "./tm.h" 2


# 1 "./insn-modes.h" 1
# 47 "./tm.h" 2

# 1 "../../gcc/defaults.h" 1
# 49 "./tm.h" 2
# 29 "../../gcc/backend.h" 2
# 1 "../../gcc/function.h" 1
# 29 "../../gcc/function.h"
struct sequence_stack {

  rtx_insn *first;
  rtx_insn *last;
  struct sequence_stack *next;
};

struct emit_status {
  void ensure_regno_capacity ();



  int x_reg_rtx_no;


  int x_first_label_num;
# 56 "../../gcc/function.h"
  struct sequence_stack seq;



  int x_cur_insn_uid;



  int x_cur_debug_insn_uid;





  int regno_pointer_align_length;




  unsigned char * regno_pointer_align;
};
# 87 "../../gcc/function.h"
extern rtx * regno_reg_rtx;






struct expr_status {


  poly_int64_pod x_pending_stack_adjust;
# 114 "../../gcc/function.h"
  int x_inhibit_defer_pop;





  poly_int64_pod x_stack_pointer_delta;




  rtx x_saveregs_value;


  rtx x_apply_args_value;


  vec<rtx_insn *, va_gc> *x_forced_labels;
};

typedef struct call_site_record_d *call_site_record;


struct rtl_eh {
  rtx ehr_stackadj;
  rtx ehr_handler;
  rtx_code_label *ehr_label;

  rtx sjlj_fc;
  rtx_insn *sjlj_exit_after;

  vec<uchar, va_gc> *action_record_data;

  vec<call_site_record, va_gc> *call_site_record_v[2];
};
# 157 "../../gcc/function.h"
struct gimple_df;
struct call_site_record_d;
struct dw_fde_node;

struct varasm_status {

  struct rtx_constant_pool *pool;



  unsigned int deferred_constants;
};



struct function_subsections {




  const char *hot_section_label;
  const char *cold_section_label;
  const char *hot_section_end_label;
  const char *cold_section_end_label;
};




struct frame_space
{
  struct frame_space *next;

  poly_int64 start;
  poly_int64 length;
};

struct stack_usage
{

  long static_stack_size;



  long dynamic_stack_size;




  poly_int64 pushed_stack_size;



  unsigned int has_unbounded_dynamic_stack_size : 1;
};
# 225 "../../gcc/function.h"
struct function {
  struct eh_status *eh;


  struct control_flow_graph *cfg;


  gimple_seq gimple_body;


  struct gimple_df *gimple_df;


  struct loops *x_current_loops;


  char *pass_startwith;


  struct stack_usage *su;


  htab_t value_histograms;




  tree decl;



  tree static_chain_decl;




  tree nonlocal_goto_save_area;


  vec<tree, va_gc> *local_decls;




  struct machine_function * machine;


  struct language_function * language;


  hash_set<tree> * used_types_hash;




  struct dw_fde_node *fde;


  int last_stmt_uid;





  int debug_marker_count;


  int funcdef_no;


  location_t function_start_locus;


  location_t function_end_locus;


  unsigned int curr_properties;
  unsigned int last_verified;




  const char * cannot_be_copied_reason;


  unsigned short last_clique;






  unsigned int va_list_gpr_size : 8;



  unsigned int va_list_fpr_size : 8;


  unsigned int calls_setjmp : 1;



  unsigned int calls_alloca : 1;



  unsigned int has_nonlocal_label : 1;



  unsigned int has_forced_label_in_static : 1;




  unsigned int cannot_be_copied_set : 1;


  unsigned int stdarg : 1;

  unsigned int after_inlining : 1;
  unsigned int always_inline_functions_inlined : 1;



  unsigned int can_throw_non_call_exceptions : 1;



  unsigned int can_delete_dead_exceptions : 1;






  unsigned int returns_struct : 1;



  unsigned int returns_pcc_struct : 1;



  unsigned int has_local_explicit_reg_vars : 1;





  unsigned int is_thunk : 1;



  unsigned int has_force_vectorize_loops : 1;



  unsigned int has_simduid_loops : 1;


  unsigned int tail_call_marked : 1;


  unsigned int has_unroll : 1;



  unsigned int debug_nonbind_markers : 1;
};



void add_local_decl (struct function *fun, tree d);
# 410 "../../gcc/function.h"
extern struct function *cfun;







extern int virtuals_instantiated;


extern int trampolines_created;

struct types_used_by_vars_entry {
  tree type;
  tree var_decl;
};

struct used_type_hasher : ggc_ptr_hash<types_used_by_vars_entry>
{
  static hashval_t hash (types_used_by_vars_entry *);
  static bool equal (types_used_by_vars_entry *, types_used_by_vars_entry *);
};






extern hash_table<used_type_hasher> *types_used_by_vars_hash;

void types_used_by_var_decl_insert (tree type, tree var_decl);



extern vec<tree, va_gc> *types_used_by_cur_var_decl;




inline struct loops *
loops_for_fn (struct function *fn)
{
  return fn->x_current_loops;
}



inline void
set_loops_for_fn (struct function *fn, struct loops *loops)
{
  ((void)(!(fn->x_current_loops == 
# 461 "../../gcc/function.h" 3 4
 __null 
# 461 "../../gcc/function.h"
 || loops == 
# 461 "../../gcc/function.h" 3 4
 __null
# 461 "../../gcc/function.h"
 ) ? fancy_abort ("../../gcc/function.h", 461, __FUNCTION__), 0 : 0));
  fn->x_current_loops = loops;
}
# 475 "../../gcc/function.h"
extern struct machine_function * (*init_machine_status) (void);






struct args_size
{
  poly_int64_pod constant;
  tree var;
};



struct locate_and_pad_arg_data
{



  struct args_size size;

  struct args_size offset;


  struct args_size slot_offset;


  struct args_size alignment_pad;

  pad_direction where_pad;

  unsigned int boundary;
};
# 559 "../../gcc/function.h"
enum stack_clash_probes {
  NO_PROBE_NO_FRAME,
  NO_PROBE_SMALL_FRAME,
  PROBE_INLINE,
  PROBE_LOOP
};

extern void dump_stack_clash_frame_info (enum stack_clash_probes, bool);


extern void push_function_context (void);
extern void pop_function_context (void);


extern void free_after_parsing (struct function *);
extern void free_after_compilation (struct function *);




extern poly_int64 get_frame_size (void);




extern bool frame_offset_overflow (poly_int64, tree);

extern unsigned int spill_slot_alignment (machine_mode);

extern rtx assign_stack_local_1 (machine_mode, poly_int64, int, int);
extern rtx assign_stack_local (machine_mode, poly_int64, int);
extern rtx assign_stack_temp_for_type (machine_mode, poly_int64, tree);
extern rtx assign_stack_temp (machine_mode, poly_int64);
extern rtx assign_temp (tree, int, int);
extern void update_temp_slot_address (rtx, rtx);
extern void preserve_temp_slots (rtx);
extern void free_temp_slots (void);
extern void push_temp_slots (void);
extern void pop_temp_slots (void);
extern void init_temp_slots (void);
extern rtx get_hard_reg_initial_reg (rtx);
extern rtx get_hard_reg_initial_val (machine_mode, unsigned int);
extern rtx has_hard_reg_initial_val (machine_mode, unsigned int);


extern unsigned int emit_initial_value_sets (void);

extern bool initial_value_entry (int i, rtx *, rtx *);
extern void instantiate_decl_rtl (rtx x);
extern int aggregate_value_p (const_tree, const_tree);
extern bool use_register_for_decl (const_tree);
extern gimple_seq gimplify_parameters (gimple_seq *);
extern void locate_and_pad_parm (machine_mode, tree, int, int, int,
     tree, struct args_size *,
     struct locate_and_pad_arg_data *);
extern void generate_setjmp_warnings (void);



extern void reorder_blocks (void);
extern void clear_block_marks (tree);
extern tree blocks_nreverse (tree);
extern tree block_chainon (tree, tree);


extern void number_blocks (tree);


extern void set_cfun (struct function *new_cfun, bool force = false);
extern void push_cfun (struct function *new_cfun);
extern void pop_cfun (void);

extern int get_next_funcdef_no (void);
extern int get_last_funcdef_no (void);
extern void allocate_struct_function (tree, bool);
extern void push_struct_function (tree fndecl);
extern void push_dummy_function (bool);
extern void pop_dummy_function (void);
extern void init_dummy_function_start (void);
extern void init_function_start (tree);
extern void stack_protect_epilogue (void);
extern void expand_function_start (tree);
extern void expand_dummy_function_end (void);

extern void thread_prologue_and_epilogue_insns (void);
extern void diddle_return_value (void (*)(rtx, void*), void*);
extern void clobber_return_register (void);
extern void expand_function_end (void);
extern rtx get_arg_pointer_save_area (void);
extern void maybe_copy_prologue_epilogue_insn (rtx, rtx);
extern int prologue_contains (const rtx_insn *);
extern int epilogue_contains (const rtx_insn *);
extern int prologue_epilogue_contains (const rtx_insn *);
extern void record_prologue_seq (rtx_insn *);
extern void record_epilogue_seq (rtx_insn *);
extern void emit_return_into_block (bool simple_p, basic_block bb);
extern void set_return_jump_label (rtx_insn *);
extern bool active_insn_between (rtx_insn *head, rtx_insn *tail);
extern vec<edge> convert_jumps_to_returns (basic_block last_bb, bool simple_p,
        vec<edge> unconverted);
extern basic_block emit_return_for_exit (edge exit_fallthru_edge,
      bool simple_p);
extern void reposition_prologue_and_epilogue_notes (void);


extern const char *fndecl_name (tree);
extern const char *function_name (struct function *);
extern const char *current_function_name (void);

extern void used_types_insert (tree);
# 30 "../../gcc/backend.h" 2
# 1 "../../gcc/bitmap.h" 1
# 130 "../../gcc/bitmap.h"
# 1 "../../gcc/../include/obstack.h" 1
# 111 "../../gcc/../include/obstack.h"
# 1 "/usr/lib64/gcc/x86_64-suse-linux/7/include/stddef.h" 1 3 4
# 112 "../../gcc/../include/obstack.h" 2
# 153 "../../gcc/../include/obstack.h"
extern "C" {


struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};

struct obstack
{
  size_t chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  union
  {
    size_t i;
    void *p;
  } temp;
  size_t alignment_mask;


  union
  {
    void *(*plain) (size_t);
    void *(*extra) (void *, size_t);
  } chunkfun;
  union
  {
    void (*plain) (void *);
    void (*extra) (void *, void *);
  } freefun;

  void *extra_arg;
  unsigned use_extra_arg : 1;
  unsigned maybe_empty_object : 1;



  unsigned alloc_failed : 1;


};



extern void _obstack_newchunk (struct obstack *, size_t);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *,
                           size_t, size_t,
                           void *(*) (size_t), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *,
                             size_t, size_t,
                             void *(*) (void *, size_t),
                             void (*) (void *, void *), void *);
extern size_t _obstack_memory_used (struct obstack *)
  
# 212 "../../gcc/../include/obstack.h" 3 4
 __attribute__ ((__pure__))
# 212 "../../gcc/../include/obstack.h"
                   ;






extern void (*obstack_alloc_failed_handler) (void);


extern int obstack_exit_failure;
# 532 "../../gcc/../include/obstack.h"
}
# 131 "../../gcc/bitmap.h" 2


struct bitmap_usage: public mem_usage
{

  bitmap_usage (): m_nsearches (0), m_search_iter (0) {}

  bitmap_usage (size_t allocated, size_t times, size_t peak,
      uint64_t nsearches, uint64_t search_iter)
    : mem_usage (allocated, times, peak),
    m_nsearches (nsearches), m_search_iter (search_iter) {}


  bitmap_usage
  operator+ (const bitmap_usage &second)
  {
    return bitmap_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_nsearches + second.m_nsearches,
        m_search_iter + second.m_search_iter);
  }


  inline void
  dump (mem_location *loc, mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 160 "../../gcc/bitmap.h" 3 4
            stderr
# 160 "../../gcc/bitmap.h"
                  , "%-48s %10" 
# 160 "../../gcc/bitmap.h" 3 4
                                "l" "u" 
# 160 "../../gcc/bitmap.h"
                                       ":%5.1f%%"
      "%10" 
# 161 "../../gcc/bitmap.h" 3 4
           "l" "u" 
# 161 "../../gcc/bitmap.h"
                  "%10" 
# 161 "../../gcc/bitmap.h" 3 4
                        "l" "u" 
# 161 "../../gcc/bitmap.h"
                               ":%5.1f%%"
      "%12" 
# 162 "../../gcc/bitmap.h" 3 4
           "l" "u" 
# 162 "../../gcc/bitmap.h"
                  "%12" 
# 162 "../../gcc/bitmap.h" 3 4
                        "l" "u" 
# 162 "../../gcc/bitmap.h"
                               "%10s\n",
      location_string, (uint64_t)m_allocated,
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)m_peak, (uint64_t)m_times,
      get_percent (m_times, total.m_times),
      m_nsearches, m_search_iter,
      loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 177 "../../gcc/bitmap.h" 3 4
            stderr
# 177 "../../gcc/bitmap.h"
                  , "%-48s %11s%16s%17s%12s%12s%10s\n", name, "Leak", "Peak",
      "Times", "N searches", "Search iter", "Type");
    print_dash_line ();
  }


  uint64_t m_nsearches;

  uint64_t m_search_iter;
};


extern mem_alloc_description<bitmap_usage> bitmap_mem_desc;



typedef unsigned long BITMAP_WORD;
# 209 "../../gcc/bitmap.h"
struct bitmap_obstack {
  struct bitmap_element *elements;
  struct bitmap_head *heads;
  struct obstack obstack;
};
# 227 "../../gcc/bitmap.h"
struct bitmap_element {
  struct bitmap_element *next;
  struct bitmap_element *prev;
  unsigned int indx;
  BITMAP_WORD bits[((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u))];
};




struct bitmap_head {
  unsigned int indx;
  unsigned int descriptor_id;


  bitmap_element *first;
  bitmap_element * current;
  bitmap_obstack *obstack;

};


extern bitmap_element bitmap_zero_bits;
extern bitmap_obstack bitmap_default_obstack;


extern void bitmap_clear (bitmap);


extern void bitmap_copy (bitmap, const_bitmap);


extern void bitmap_move (bitmap, bitmap);


extern bool bitmap_equal_p (const_bitmap, const_bitmap);


extern bool bitmap_intersect_p (const_bitmap, const_bitmap);



extern bool bitmap_intersect_compl_p (const_bitmap, const_bitmap);


inline bool bitmap_empty_p (const_bitmap map)
{
  return !map->first;
}


extern bool bitmap_single_bit_set_p (const_bitmap);


extern unsigned long bitmap_count_bits (const_bitmap);


extern unsigned long bitmap_count_unique_bits (const_bitmap, const_bitmap);





extern void bitmap_and (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_and_into (bitmap, const_bitmap);
extern bool bitmap_and_compl (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_and_compl_into (bitmap, const_bitmap);

extern void bitmap_compl_and_into (bitmap, const_bitmap);
extern void bitmap_clear_range (bitmap, unsigned int, unsigned int);
extern void bitmap_set_range (bitmap, unsigned int, unsigned int);
extern bool bitmap_ior (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_ior_into (bitmap, const_bitmap);
extern void bitmap_xor (bitmap, const_bitmap, const_bitmap);
extern void bitmap_xor_into (bitmap, const_bitmap);


extern bool bitmap_ior_and_into (bitmap DST, const_bitmap B, const_bitmap C);

extern bool bitmap_ior_and_compl (bitmap DST, const_bitmap A,
      const_bitmap B, const_bitmap C);

extern bool bitmap_ior_and_compl_into (bitmap A,
           const_bitmap B, const_bitmap C);


extern bool bitmap_clear_bit (bitmap, int);


extern bool bitmap_set_bit (bitmap, int);


extern int bitmap_bit_p (bitmap, int);


extern void debug_bitmap (const_bitmap);
extern void debug_bitmap_file (FILE *, const_bitmap);


extern void bitmap_print (FILE *, const_bitmap, const char *, const char *);


extern void bitmap_obstack_initialize (bitmap_obstack *);
extern void bitmap_obstack_release (bitmap_obstack *);
extern void bitmap_register (bitmap );
extern void dump_bitmap_statistics (void);




static inline void
bitmap_initialize (bitmap head, bitmap_obstack *obstack )
{
  head->first = head->current = 
# 340 "../../gcc/bitmap.h" 3 4
                               __null
# 340 "../../gcc/bitmap.h"
                                   ;
  head->obstack = obstack;
  if (0)
    bitmap_register (head );
}


extern bitmap bitmap_alloc (bitmap_obstack *obstack );

extern bitmap bitmap_gc_alloc ();

extern void bitmap_obstack_free (bitmap);


inline void dump_bitmap (FILE *file, const_bitmap map)
{
  bitmap_print (file, map, "", "\n");
}
extern void debug (const bitmap_head &ref);
extern void debug (const bitmap_head *ptr);

extern unsigned bitmap_first_set_bit (const_bitmap);
extern unsigned bitmap_last_set_bit (const_bitmap);


extern hashval_t bitmap_hash (const_bitmap);







struct bitmap_iterator
{

  bitmap_element *elt1;


  bitmap_element *elt2;


  unsigned word_no;




  BITMAP_WORD bits;
};




static inline void
bmp_iter_set_init (bitmap_iterator *bi, const_bitmap map,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map->first;
  bi->elt2 = 
# 398 "../../gcc/bitmap.h" 3 4
            __null
# 398 "../../gcc/bitmap.h"
                ;


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));


  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 8 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_and_init (bitmap_iterator *bi, const_bitmap map1, const_bitmap map2,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;



  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt2 = 
# 448 "../../gcc/bitmap.h" 3 4
             __null
# 448 "../../gcc/bitmap.h"
                 ;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (1)
    {
      if (!bi->elt2)
 {
   bi->elt1 = bi->elt2 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt2->indx >= bi->elt1->indx)
 break;
      bi->elt2 = bi->elt2->next;
    }


  if (bi->elt1->indx == bi->elt2->indx)
    {


      if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));

      bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
      bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
      bi->bits >>= start_bit % (8 * 8 * 1u);
    }
  else
    {


      bi->word_no = ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) - 1;
      bi->bits = 0;
    }





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_and_compl_init (bitmap_iterator *bi,
    const_bitmap map1, const_bitmap map2,
    unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
    bi->elt2 = bi->elt2->next;



  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));

  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  if (bi->elt2 && bi->elt1->indx == bi->elt2->indx)
    bi->bits &= ~bi->elt2->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 8 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_next (bitmap_iterator *bi, unsigned *bit_no)
{
  bi->bits >>= 1;
  *bit_no += 1;
}



static inline void
bmp_iter_next_bit (bitmap_iterator * bi, unsigned *bit_no)
{

  {
    unsigned int n = __builtin_ctzl (bi->bits);
    ((void)(!(sizeof (unsigned long) == sizeof (BITMAP_WORD)) ? fancy_abort ("../../gcc/bitmap.h", 567, __FUNCTION__), 0 : 0));
    bi->bits >>= n;
    *bit_no += n;
  }







}





static inline bool
bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("../../gcc/bitmap.h", 615, __FUNCTION__), 0 : 0));


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return false;
      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}





static inline bool
bmp_iter_and (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      do
 {

   ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("../../gcc/bitmap.h", 664, __FUNCTION__), 0 : 0));



   do
     {
       bi->elt1 = bi->elt1->next;
       if (!bi->elt1)
  return false;
     }
   while (bi->elt1->indx < bi->elt2->indx);


   ((void)(!(bi->elt2->indx != -1U) ? fancy_abort ("../../gcc/bitmap.h", 677, __FUNCTION__), 0 : 0));



   while (bi->elt2->indx < bi->elt1->indx)
     {
       bi->elt2 = bi->elt2->next;
       if (!bi->elt2)
  return false;
     }
 }
      while (bi->elt1->indx != bi->elt2->indx);

      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}





static inline bool
bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->elt2 && bi->elt2->indx == bi->elt1->indx)
     bi->bits &= ~bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("../../gcc/bitmap.h", 732, __FUNCTION__), 0 : 0));


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return false;


      ((void)(!(! bi->elt2 || bi->elt2->indx != -1U) ? fancy_abort ("../../gcc/bitmap.h", 740, __FUNCTION__), 0 : 0));


      while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
 bi->elt2 = bi->elt2->next;

      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}
# 799 "../../gcc/bitmap.h"
class auto_bitmap
{
 public:
  auto_bitmap () { bitmap_initialize (&m_bits, &bitmap_default_obstack); }
  explicit auto_bitmap (bitmap_obstack *o) { bitmap_initialize (&m_bits, o); }
  ~auto_bitmap () { bitmap_clear (&m_bits); }

  operator bitmap () { return &m_bits; }

 private:

  auto_bitmap (const auto_bitmap &);
  auto_bitmap &operator = (const auto_bitmap &);

  auto_bitmap (auto_bitmap &&);
  auto_bitmap &operator = (auto_bitmap &&);


  bitmap_head m_bits;
};
# 31 "../../gcc/backend.h" 2
# 1 "../../gcc/sbitmap.h" 1
# 86 "../../gcc/sbitmap.h"
struct simple_bitmap_def
{
  unsigned int n_bits;
  unsigned int size;
  unsigned long elms[1];
};
# 101 "../../gcc/sbitmap.h"
static inline void
bitmap_check_index (const_sbitmap map, int index)
{
  ((void)(!(index >= 0) ? fancy_abort ("../../gcc/sbitmap.h", 104, __FUNCTION__), 0 : 0));
  ((void)(!((unsigned int)index < map->n_bits) ? fancy_abort ("../../gcc/sbitmap.h", 105, __FUNCTION__), 0 : 0));
}



static inline void
bitmap_check_sizes (const_sbitmap a, const_sbitmap b)
{
  ((void)(!(a->n_bits == b->n_bits) ? fancy_abort ("../../gcc/sbitmap.h", 113, __FUNCTION__), 0 : 0));
}


static inline unsigned long
bitmap_bit_p (const_sbitmap map, int bitno)
{
  bitmap_check_index (map, bitno);

  size_t i = bitno / ((8 * 8) * 1u);
  unsigned int s = bitno % ((8 * 8) * 1u);
  return (map->elms[i] >> s) & (unsigned long) 1;
}



static inline void
bitmap_set_bit (sbitmap map, int bitno)
{
  bitmap_check_index (map, bitno);

  map->elms[bitno / ((8 * 8) * 1u)]
    |= (unsigned long) 1 << (bitno) % ((8 * 8) * 1u);
}



static inline void
bitmap_clear_bit (sbitmap map, int bitno)
{
  bitmap_check_index (map, bitno);

  map->elms[bitno / ((8 * 8) * 1u)]
    &= ~((unsigned long) 1 << (bitno) % ((8 * 8) * 1u));
}


struct sbitmap_iterator {

  const unsigned long *ptr;


  unsigned int size;


  unsigned int word_num;


  unsigned int bit_num;


  unsigned long word;
};




static inline void
bmp_iter_set_init (sbitmap_iterator *i, const_sbitmap bmp,
     unsigned int min, unsigned *bit_no __attribute__ ((__unused__)))
{
  i->word_num = min / (unsigned int) ((8 * 8) * 1u);
  i->bit_num = min;
  i->size = bmp->size;
  i->ptr = bmp->elms;

  if (i->word_num >= i->size)
    i->word = 0;
  else
    i->word = (i->ptr[i->word_num]
        >> (i->bit_num % (unsigned int) ((8 * 8) * 1u)));
}





static inline bool
bmp_iter_set (sbitmap_iterator *i, unsigned int *n)
{

  for (; i->word == 0; i->word = i->ptr[i->word_num])
    {
      i->word_num++;


      if (i->word_num >= i->size)
 return false;

      i->bit_num = i->word_num * ((8 * 8) * 1u);
    }


  for (; (i->word & 1) == 0; i->word >>= 1)
    i->bit_num++;

  *n = i->bit_num;

  return true;
}



static inline void
bmp_iter_next (sbitmap_iterator *i, unsigned *bit_no __attribute__ ((__unused__)))
{
  i->word >>= 1;
  i->bit_num++;
}
# 235 "../../gcc/sbitmap.h"
inline void sbitmap_free (sbitmap map)
{
  free (map);
}

inline void sbitmap_vector_free (sbitmap * vec)
{
  free (vec);
}

extern void dump_bitmap (FILE *, const_sbitmap);
extern void debug_raw (const simple_bitmap_def &ref);
extern void debug_raw (const simple_bitmap_def *ptr);
extern void dump_bitmap_file (FILE *, const_sbitmap);
extern void debug (const simple_bitmap_def &ref);
extern void debug (const simple_bitmap_def *ptr);
extern void dump_bitmap_vector (FILE *, const char *, const char *, sbitmap *,
     int);
extern sbitmap sbitmap_alloc (unsigned int);
extern sbitmap *sbitmap_vector_alloc (unsigned int, unsigned int);
extern sbitmap sbitmap_resize (sbitmap, unsigned int, int);
extern void bitmap_copy (sbitmap, const_sbitmap);
extern int bitmap_equal_p (const_sbitmap, const_sbitmap);
extern unsigned int bitmap_count_bits (const_sbitmap);
extern bool bitmap_empty_p (const_sbitmap);
extern void bitmap_clear (sbitmap);
extern void bitmap_clear_range (sbitmap, unsigned, unsigned);
extern void bitmap_set_range (sbitmap, unsigned, unsigned);
extern void bitmap_ones (sbitmap);
extern void bitmap_vector_clear (sbitmap *, unsigned int);
extern void bitmap_vector_ones (sbitmap *, unsigned int);

extern bool bitmap_ior_and_compl (sbitmap, const_sbitmap,
          const_sbitmap, const_sbitmap);
extern void bitmap_and_compl (sbitmap, const_sbitmap, const_sbitmap);
extern void bitmap_not (sbitmap, const_sbitmap);
extern bool bitmap_or_and (sbitmap, const_sbitmap,
         const_sbitmap, const_sbitmap);
extern bool bitmap_and_or (sbitmap, const_sbitmap,
         const_sbitmap, const_sbitmap);
extern bool bitmap_intersect_p (const_sbitmap, const_sbitmap);
extern bool bitmap_and (sbitmap, const_sbitmap, const_sbitmap);
extern bool bitmap_ior (sbitmap, const_sbitmap, const_sbitmap);
extern bool bitmap_xor (sbitmap, const_sbitmap, const_sbitmap);
extern bool bitmap_subset_p (const_sbitmap, const_sbitmap);
extern bool bitmap_bit_in_range_p (const_sbitmap, unsigned int, unsigned int);

extern int bitmap_first_set_bit (const_sbitmap);
extern int bitmap_last_set_bit (const_sbitmap);

extern void debug_bitmap (const_sbitmap);
extern sbitmap sbitmap_realloc (sbitmap, unsigned int);


class auto_sbitmap
{
public:
  explicit auto_sbitmap (unsigned int size) :
    m_bitmap (sbitmap_alloc (size)) {}
  ~auto_sbitmap () { sbitmap_free (m_bitmap); }


  operator sbitmap () { return m_bitmap; }

private:

  auto_sbitmap (const auto_sbitmap &);
  auto_sbitmap &operator = (const auto_sbitmap &);

  auto_sbitmap (auto_sbitmap &&);
  auto_sbitmap &operator = (auto_sbitmap &&);



  sbitmap m_bitmap;
};
# 32 "../../gcc/backend.h" 2
# 1 "../../gcc/basic-block.h" 1
# 23 "../../gcc/basic-block.h"
# 1 "../../gcc/profile-count.h" 1
# 24 "../../gcc/profile-count.h"
struct function;
class profile_count;



enum profile_quality {

  profile_uninitialized,




  profile_guessed_local,



  profile_guessed_global0,


  profile_guessed_global0adjusted,






  profile_guessed,

  profile_afdo,



  profile_adjusted,


  profile_precise
};






bool slow_safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res);



inline bool
safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)
{

  uint64_t tmp;
  if (!__builtin_mul_overflow (a, b, &tmp)
      && !__builtin_add_overflow (tmp, c/2, &tmp))
    {
      *res = tmp / c;
      return true;
    }
  if (c == 1)
    {
      *res = (uint64_t) -1;
      return false;
    }
# 96 "../../gcc/profile-count.h"
  return slow_safe_scale_64bit (a, b, c, res);
}
# 136 "../../gcc/profile-count.h"
class profile_probability
{
  static const int n_bits = 29;


  static const uint32_t max_probability = (uint32_t) 1 << (n_bits - 2);
  static const uint32_t uninitialized_probability
   = ((uint32_t) 1 << (n_bits - 1)) - 1;

  uint32_t m_val : 29;
  enum profile_quality m_quality : 3;

  friend class profile_count;
public:


  static profile_probability never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = profile_precise;
      return ret;
    }
  static profile_probability guessed_never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = profile_guessed;
      return ret;
    }
  static profile_probability very_unlikely ()
    {

      profile_probability r
  = profile_probability::guessed_always ().apply_scale (1, 2000);
      r.m_val--;
      return r;
    }
  static profile_probability unlikely ()
    {

      profile_probability r
  = profile_probability::guessed_always ().apply_scale (1, 5);
      r.m_val--;
      return r;
    }
  static profile_probability even ()
    {
      return profile_probability::guessed_always ().apply_scale (1, 2);
    }
  static profile_probability very_likely ()
    {
      return profile_probability::always () - very_unlikely ();
    }
  static profile_probability likely ()
    {
      return profile_probability::always () - unlikely ();
    }
  static profile_probability guessed_always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = profile_guessed;
      return ret;
    }
  static profile_probability always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = profile_precise;
      return ret;
    }


  static profile_probability uninitialized ()
    {
      profile_probability c;
      c.m_val = uninitialized_probability;
      c.m_quality = profile_guessed;
      return c;
    }



  bool initialized_p () const
    {
      return m_val != uninitialized_probability;
    }

  bool reliable_p () const
    {
      return m_quality >= profile_adjusted;
    }



  static profile_probability from_reg_br_prob_base (int v)
    {
      profile_probability ret;
      ((void)(!(v >= 0 && v <= 10000) ? fancy_abort ("../../gcc/profile-count.h", 235, __FUNCTION__), 0 : 0));
      ret.m_val = (((v * (uint64_t) max_probability) + (10000) / 2) / (10000));
      ret.m_quality = profile_guessed;
      return ret;
    }
  int to_reg_br_prob_base () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("../../gcc/profile-count.h", 242, __FUNCTION__), 0 : 0));
      return (((m_val * (uint64_t) 10000) + (max_probability) / 2) / (max_probability));
    }


  static profile_probability from_reg_br_prob_note (int v)
    {
      profile_probability ret;
      ret.m_val = ((unsigned int)v) / 8;
      ret.m_quality = (enum profile_quality)(v & 7);
      return ret;
    }
  int to_reg_br_prob_note () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("../../gcc/profile-count.h", 256, __FUNCTION__), 0 : 0));
      int ret = m_val * 8 + m_quality;
      ((void)(!(profile_probability::from_reg_br_prob_note (ret) == *this) ? fancy_abort (
              "../../gcc/profile-count.h"
# 258 "../../gcc/profile-count.h"
      ,
              259
# 258 "../../gcc/profile-count.h"
      , __FUNCTION__), 0 : 0))
               ;
      return ret;
    }


  static profile_probability probability_in_gcov_type
     (gcov_type val1, gcov_type val2)
    {
      profile_probability ret;
      ((void)(!(val1 >= 0 && val2 > 0) ? fancy_abort ("../../gcc/profile-count.h", 268, __FUNCTION__), 0 : 0));
      if (val1 > val2)
 ret.m_val = max_probability;
      else
 {
   uint64_t tmp;
   safe_scale_64bit (val1, max_probability, val2, &tmp);
   ((void)(!(tmp <= max_probability) ? fancy_abort ("../../gcc/profile-count.h", 275, __FUNCTION__), 0 : 0));
   ret.m_val = tmp;
 }
      ret.m_quality = profile_precise;
      return ret;
    }


  bool operator== (const profile_probability &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }
  profile_probability operator+ (const profile_probability &other) const
    {
      if (other == profile_probability::never ())
 return *this;
      if (*this == profile_probability::never ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return profile_probability::uninitialized ();

      profile_probability ret;
      ret.m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }
  profile_probability &operator+= (const profile_probability &other)
    {
      if (other == profile_probability::never ())
 return *this;
      if (*this == profile_probability::never ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = profile_probability::uninitialized ();
      else
 {
   m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }
  profile_probability operator- (const profile_probability &other) const
    {
      if (*this == profile_probability::never ()
   || other == profile_probability::never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return profile_probability::uninitialized ();
      profile_probability ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }
  profile_probability &operator-= (const profile_probability &other)
    {
      if (*this == profile_probability::never ()
   || other == profile_probability::never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = profile_probability::uninitialized ();
      else
 {
   m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }
  profile_probability operator* (const profile_probability &other) const
    {
      if (*this == profile_probability::never ()
   || other == profile_probability::never ())
 return profile_probability::never ();
      if (!initialized_p () || !other.initialized_p ())
 return profile_probability::uninitialized ();
      profile_probability ret;
      ret.m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (profile_adjusted) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (profile_adjusted));
      return ret;
    }
  profile_probability &operator*= (const profile_probability &other)
    {
      if (*this == profile_probability::never ()
   || other == profile_probability::never ())
 return *this = profile_probability::never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = profile_probability::uninitialized ();
      else
 {
   m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (profile_adjusted) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (profile_adjusted));
 }
      return *this;
    }
  profile_probability operator/ (const profile_probability &other) const
    {
      if (*this == profile_probability::never ())
 return profile_probability::never ();
      if (!initialized_p () || !other.initialized_p ())
 return profile_probability::uninitialized ();
      profile_probability ret;

      if (m_val >= other.m_val)
 {
   ret.m_val = max_probability;
          ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (profile_guessed) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (profile_guessed))
                          ;
   return ret;
 }
      else if (!m_val)
 ret.m_val = 0;
      else
 {
   ((void)(!(other.m_val) ? fancy_abort ("../../gcc/profile-count.h", 390, __FUNCTION__), 0 : 0));
   ret.m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
 }
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (profile_adjusted) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (profile_adjusted));
      return ret;
    }
  profile_probability &operator/= (const profile_probability &other)
    {
      if (*this == profile_probability::never ())
 return *this = profile_probability::never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = profile_probability::uninitialized ();
      else
 {


   if (m_val > other.m_val)
     {
       m_val = max_probability;
              m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (profile_guessed) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (profile_guessed))
                          ;
       return *this;
     }
   else if (!m_val)
     ;
   else
     {
       ((void)(!(other.m_val) ? fancy_abort ("../../gcc/profile-count.h", 419, __FUNCTION__), 0 : 0));
       m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
     }
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (profile_adjusted) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (profile_adjusted));
 }
      return *this;
    }
# 444 "../../gcc/profile-count.h"
  profile_probability split (const profile_probability &cprob)
    {
      profile_probability ret = *this * cprob;


      *this = (*this - ret) / ret.invert ();
      return ret;
    }

  gcov_type apply (gcov_type val) const
    {
      if (*this == profile_probability::uninitialized ())
 return val / 2;
      return (((val * m_val) + (max_probability) / 2) / (max_probability));
    }


  profile_probability invert () const
    {
      return profile_probability::always() - *this;
    }


  profile_probability guessed () const
    {
      profile_probability ret = *this;
      ret.m_quality = profile_guessed;
      return ret;
    }


  profile_probability afdo () const
    {
      profile_probability ret = *this;
      ret.m_quality = profile_afdo;
      return ret;
    }


  profile_probability apply_scale (int64_t num, int64_t den) const
    {
      if (*this == profile_probability::never ())
 return *this;
      if (!initialized_p ())
 return profile_probability::uninitialized ();
      profile_probability ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_probability) ? (tmp) : (max_probability));
      ret.m_quality = ((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted));
      return ret;
    }
# 514 "../../gcc/profile-count.h"
  bool probably_reliable_p () const
    {
      if (m_quality >= profile_adjusted)
 return true;
      if (!initialized_p ())
 return false;
      return m_val < max_probability / 100
      || m_val > max_probability - max_probability / 100;
    }


  bool verify () const
    {
      ((void)(!(m_quality != profile_uninitialized) ? fancy_abort ("../../gcc/profile-count.h", 527, __FUNCTION__), 0 : 0));
      if (m_val == uninitialized_probability)
 return m_quality == profile_guessed;
      else if (m_quality < profile_guessed)
 return false;
      return m_val <= max_probability;
    }



  bool operator< (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val < other.m_val;
    }
  bool operator> (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator<= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val <= other.m_val;
    }
  bool operator>= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val >= other.m_val;
    }


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_probability other) const;

  bool differs_lot_from_p (profile_probability other) const;



  profile_probability combine_with_count (profile_count count1,
       profile_probability other,
       profile_count count2) const;


  static profile_probability stream_in (struct lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 632 "../../gcc/profile-count.h"
class sreal;

class profile_count
{
public:




  static const int n_bits = 61;
private:
  static const uint64_t max_count = ((uint64_t) 1 << n_bits) - 2;
  static const uint64_t uninitialized_count = ((uint64_t) 1 << n_bits) - 1;

  uint64_t m_val : n_bits;
  enum profile_quality m_quality : 3;




  bool compatible_p (const profile_count other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return true;
      if (*this == profile_count::zero ()
   || other == profile_count::zero ())
 return true;
      return ipa_p () == other.ipa_p ();
    }
public:


  static profile_count zero ()
    {
      return from_gcov_type (0);
    }
  static profile_count adjusted_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = profile_adjusted;
      return c;
    }
  static profile_count guessed_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = profile_guessed;
      return c;
    }
  static profile_count one ()
    {
      return from_gcov_type (1);
    }


  static profile_count uninitialized ()
    {
      profile_count c;
      c.m_val = uninitialized_count;
      c.m_quality = profile_guessed_local;
      return c;
    }


  gcov_type to_gcov_type () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("../../gcc/profile-count.h", 699, __FUNCTION__), 0 : 0));
      return m_val;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_count;
    }

  bool reliable_p () const
    {
      return m_quality >= profile_adjusted;
    }

  bool ipa_p () const
    {
      return !initialized_p () || m_quality >= profile_guessed_global0;
    }

  bool precise_p () const
    {
      return m_quality == profile_precise;
    }





  bool ok_for_merging (profile_count other) const
    {
      if (m_quality < profile_adjusted
   || other.m_quality < profile_adjusted)
 return true;
      return !(other < *this);
    }



  profile_count merge (profile_count other) const
    {
      if (*this == other || !other.initialized_p ()
   || m_quality > other.m_quality)
 return *this;
      if (other.m_quality > m_quality
   || other > *this)
 return other;
      return *this;
    }


  bool operator== (const profile_count &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }
  profile_count operator+ (const profile_count &other) const
    {
      if (other == profile_count::zero ())
 return *this;
      if (*this == profile_count::zero ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return profile_count::uninitialized ();

      profile_count ret;
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 764, __FUNCTION__), 0 : 0));
      ret.m_val = m_val + other.m_val;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }
  profile_count &operator+= (const profile_count &other)
    {
      if (other == profile_count::zero ())
 return *this;
      if (*this == profile_count::zero ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = profile_count::uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 782, __FUNCTION__), 0 : 0));
   m_val += other.m_val;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }
  profile_count operator- (const profile_count &other) const
    {
      if (*this == profile_count::zero () || other == profile_count::zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return profile_count::uninitialized ();
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 794, __FUNCTION__), 0 : 0));
      profile_count ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }
  profile_count &operator-= (const profile_count &other)
    {
      if (*this == profile_count::zero () || other == profile_count::zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = profile_count::uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 808, __FUNCTION__), 0 : 0));
   m_val = m_val >= other.m_val ? m_val - other.m_val: 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }


  bool verify () const
    {
      ((void)(!(m_quality != profile_uninitialized) ? fancy_abort ("../../gcc/profile-count.h", 818, __FUNCTION__), 0 : 0));
      return m_val != uninitialized_count || m_quality == profile_guessed_local;
    }



  bool operator< (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == profile_count::zero ())
 return !(other == profile_count::zero ());
      if (other == profile_count::zero ())
 return false;
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 832, __FUNCTION__), 0 : 0));
      return m_val < other.m_val;
    }
  bool operator> (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == profile_count::zero ())
 return false;
      if (other == profile_count::zero ())
 return !(*this == profile_count::zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 843, __FUNCTION__), 0 : 0));
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }
  bool operator< (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("../../gcc/profile-count.h", 848, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("../../gcc/profile-count.h", 849, __FUNCTION__), 0 : 0));
      return initialized_p () && m_val < (uint64_t) other;
    }
  bool operator> (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("../../gcc/profile-count.h", 854, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("../../gcc/profile-count.h", 855, __FUNCTION__), 0 : 0));
      return initialized_p () && m_val > (uint64_t) other;
    }

  bool operator<= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == profile_count::zero ())
 return true;
      if (other == profile_count::zero ())
 return (*this == profile_count::zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 867, __FUNCTION__), 0 : 0));
      return m_val <= other.m_val;
    }
  bool operator>= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (other == profile_count::zero ())
 return true;
      if (*this == profile_count::zero ())
 return !(other == profile_count::zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 878, __FUNCTION__), 0 : 0));
      return m_val >= other.m_val;
    }
  bool operator<= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("../../gcc/profile-count.h", 883, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("../../gcc/profile-count.h", 884, __FUNCTION__), 0 : 0));
      return initialized_p () && m_val <= (uint64_t) other;
    }
  bool operator>= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("../../gcc/profile-count.h", 889, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("../../gcc/profile-count.h", 890, __FUNCTION__), 0 : 0));
      return initialized_p () && m_val >= (uint64_t) other;
    }



  bool nonzero_p () const
    {
      return initialized_p () && m_val != 0;
    }


  profile_count force_nonzero () const
    {
      if (!initialized_p ())
 return *this;
      profile_count ret = *this;
      if (ret.m_val == 0)
 {
   ret.m_val = 1;
          ret.m_quality = ((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted));
 }
      return ret;
    }

  profile_count max (profile_count other) const
    {
      if (!initialized_p ())
 return other;
      if (!other.initialized_p ())
 return *this;
      if (*this == profile_count::zero ())
 return other;
      if (other == profile_count::zero ())
 return *this;
      ((void)(!(compatible_p (other)) ? fancy_abort ("../../gcc/profile-count.h", 925, __FUNCTION__), 0 : 0));
      if (m_val < other.m_val || (m_val == other.m_val
      && m_quality < other.m_quality))
 return other;
      return *this;
    }



  profile_count apply_probability (int prob) const
    {
      ((void)(!(prob >= 0 && prob <= 10000) ? fancy_abort ("../../gcc/profile-count.h", 936, __FUNCTION__), 0 : 0));
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return profile_count::uninitialized ();
      profile_count ret;
      ret.m_val = (((m_val * prob) + (10000) / 2) / (10000));
      ret.m_quality = ((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted));
      return ret;
    }


  profile_count apply_probability (profile_probability prob) const
    {
      if (*this == profile_count::zero ())
 return *this;
      if (prob == profile_probability::never ())
 return profile_count::zero ();
      if (!initialized_p ())
 return profile_count::uninitialized ();
      profile_count ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, prob.m_val, profile_probability::max_probability,
   &tmp);
      ret.m_val = tmp;
      ret.m_quality = ((m_quality) < (prob.m_quality) ? (m_quality) : (prob.m_quality));
      return ret;
    }

  profile_count apply_scale (int64_t num, int64_t den) const
    {
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return profile_count::uninitialized ();
      profile_count ret;
      uint64_t tmp;

      ((void)(!(num >= 0 && den > 0) ? fancy_abort ("../../gcc/profile-count.h", 974, __FUNCTION__), 0 : 0));
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_count) ? (tmp) : (max_count));
      ret.m_quality = ((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted));
      return ret;
    }
  profile_count apply_scale (profile_count num, profile_count den) const
    {
      if (*this == profile_count::zero ())
 return *this;
      if (num == profile_count::zero ())
 return num;
      if (!initialized_p () || !num.initialized_p () || !den.initialized_p ())
 return profile_count::uninitialized ();
      if (num == den)
 return *this;
      ((void)(!(den.m_val) ? fancy_abort ("../../gcc/profile-count.h", 990, __FUNCTION__), 0 : 0));

      profile_count ret;
      uint64_t val;
      safe_scale_64bit (m_val, num.m_val, den.m_val, &val);
      ret.m_val = ((val) < (max_count) ? (val) : (max_count));
      ret.m_quality = ((((((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted))) < (num.m_quality) ? (((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted))) : (num.m_quality))) < (den.m_quality) ? (((((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted))) < (num.m_quality) ? (((m_quality) < (profile_adjusted) ? (m_quality) : (profile_adjusted))) : (num.m_quality))) : (den.m_quality))
                                         ;
      if (num.ipa_p () && !ret.ipa_p ())
 ret.m_quality = ((num.m_quality) < (profile_guessed) ? (num.m_quality) : (profile_guessed));
      return ret;
    }


  profile_count guessed_local () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = profile_guessed_local;
      return ret;
    }


  profile_count global0 () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = profile_guessed_global0;
      return ret;
    }



  profile_count global0adjusted () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = profile_guessed_global0adjusted;
      return ret;
    }


  profile_count guessed () const
    {
      profile_count ret = *this;
      ret.m_quality = ((ret.m_quality) < (profile_guessed) ? (ret.m_quality) : (profile_guessed));
      return ret;
    }



  profile_count ipa () const
    {
      if (m_quality > profile_guessed_global0adjusted)
 return *this;
      if (m_quality == profile_guessed_global0)
 return profile_count::zero ();
      if (m_quality == profile_guessed_global0adjusted)
 return profile_count::adjusted_zero ();
      return profile_count::uninitialized ();
    }


  profile_count afdo () const
    {
      profile_count ret = *this;
      ret.m_quality = profile_afdo;
      return ret;
    }



  profile_probability probability_in (const profile_count overall) const
    {
      if (*this == profile_count::zero ()
   && !(overall == profile_count::zero ()))
 return profile_probability::never ();
      if (!initialized_p () || !overall.initialized_p ()
   || !overall.m_val)
 return profile_probability::uninitialized ();
      if (*this == overall && m_quality == profile_precise)
 return profile_probability::always ();
      profile_probability ret;
      ((void)(!(compatible_p (overall)) ? fancy_abort ("../../gcc/profile-count.h", 1076, __FUNCTION__), 0 : 0));

      if (overall.m_val < m_val)
 {
   ret.m_val = profile_probability::max_probability;
   ret.m_quality = profile_guessed;
   return ret;
 }
      else
 ret.m_val = (((m_val * profile_probability::max_probability) + (overall.m_val) / 2) / (overall.m_val))
                   ;
      ret.m_quality = ((((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (profile_guessed) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (profile_guessed))) < (profile_adjusted) ? (((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (profile_guessed) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (profile_guessed))) : (profile_adjusted))
                                       ;
      return ret;
    }

  int to_frequency (struct function *fun) const;
  int to_cgraph_frequency (profile_count entry_bb_count) const;
  sreal to_sreal_scale (profile_count in, bool *known = 
# 1094 "../../gcc/profile-count.h" 3 4
                                                       __null
# 1094 "../../gcc/profile-count.h"
                                                           ) const;


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_count other) const;




  static void adjust_for_ipa_scaling (profile_count *num, profile_count *den);






  profile_count combine_with_ipa_count (profile_count ipa);




  static profile_count from_gcov_type (gcov_type v);


  static profile_count stream_in (struct lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 24 "../../gcc/basic-block.h" 2


struct edge_def {

  basic_block src;
  basic_block dest;


  union edge_def_insns {
    gimple_seq g;
    rtx_insn *r;
  } insns;


  void * aux;


  location_t goto_locus;



  unsigned int dest_idx;

  int flags;
  profile_probability probability;


  inline profile_count count () const;
};



enum cfg_edge_flags {
# 1 "../../gcc/cfg-flags.def" 1
# 111 "../../gcc/cfg-flags.def"
EDGE_FALLTHRU = 1 << 0 ,



EDGE_ABNORMAL = 1 << 1 ,





EDGE_ABNORMAL_CALL = 1 << 2 ,




EDGE_EH = 1 << 3 ,




EDGE_PRESERVE = 1 << 4 ,




EDGE_FAKE = 1 << 5 ,



EDGE_DFS_BACK = 1 << 6 ,


EDGE_IRREDUCIBLE_LOOP = 1 << 7 ,



EDGE_TRUE_VALUE = 1 << 8 ,



EDGE_FALSE_VALUE = 1 << 9 ,



EDGE_EXECUTABLE = 1 << 10 ,



EDGE_CROSSING = 1 << 11 ,




EDGE_SIBCALL = 1 << 12 ,



EDGE_CAN_FALLTHRU = 1 << 13 ,



EDGE_LOOP_EXIT = 1 << 14 ,


EDGE_TM_UNINSTRUMENTED = 1 << 15 ,


EDGE_TM_ABORT = 1 << 16 ,




EDGE_IGNORE = 1 << 17 ,
# 58 "../../gcc/basic-block.h" 2
  LAST_CFG_EDGE_FLAG
};
# 71 "../../gcc/basic-block.h"
struct rtl_bb_info {


  rtx_insn *end_;



  rtx_insn *header_;
  rtx_insn *footer_;
};

struct gimple_bb_info {

  gimple_seq seq;


  gimple_seq phi_nodes;
};
# 116 "../../gcc/basic-block.h"
struct basic_block_def {

  vec<edge, va_gc> *preds;
  vec<edge, va_gc> *succs;


  void * aux;


  struct loop *loop_father;


  struct et_node * dom[2];


  basic_block prev_bb;
  basic_block next_bb;

  union basic_block_il_dependent {
      struct gimple_bb_info gimple;
      struct {
        rtx_insn *head_;
        struct rtl_bb_info * rtl;
      } x;
    } il;


  int flags;


  int index;


  profile_count count;




  int discriminator;
};




typedef int __assert_gimple_bb_smaller_rtl_bb
              [(int) sizeof (struct rtl_bb_info)
               - (int) sizeof (struct gimple_bb_info)];






enum cfg_bb_flags
{
# 1 "../../gcc/cfg-flags.def" 1
# 45 "../../gcc/cfg-flags.def"
BB_NEW = 1 << 0 ,



BB_REACHABLE = 1 << 1 ,


BB_IRREDUCIBLE_LOOP = 1 << 2 ,


BB_SUPERBLOCK = 1 << 3 ,



BB_DISABLE_SCHEDULE = 1 << 4 ,


BB_HOT_PARTITION = 1 << 5 ,


BB_COLD_PARTITION = 1 << 6 ,


BB_DUPLICATED = 1 << 7 ,


BB_NON_LOCAL_GOTO_TARGET = 1 << 8 ,


BB_RTL = 1 << 9 ,



BB_FORWARDER_BLOCK = 1 << 10 ,



BB_NONTHREADABLE_BLOCK = 1 << 11 ,




BB_MODIFIED = 1 << 12 ,


BB_VISITED = 1 << 13 ,



BB_IN_TRANSACTION = 1 << 14 ,
# 172 "../../gcc/basic-block.h" 2
  LAST_CFG_BB_FLAG
};
# 319 "../../gcc/basic-block.h"
static inline bool
single_succ_p (const_basic_block bb)
{
  return vec_safe_length (bb->succs) == 1;
}



static inline bool
single_pred_p (const_basic_block bb)
{
  return vec_safe_length (bb->preds) == 1;
}




static inline edge
single_succ_edge (const_basic_block bb)
{
  ((void)(!(single_succ_p (bb)) ? fancy_abort ("../../gcc/basic-block.h", 339, __FUNCTION__), 0 : 0));
  return (*(bb)->succs)[(0)];
}




static inline edge
single_pred_edge (const_basic_block bb)
{
  ((void)(!(single_pred_p (bb)) ? fancy_abort ("../../gcc/basic-block.h", 349, __FUNCTION__), 0 : 0));
  return (*(bb)->preds)[(0)];
}




static inline basic_block
single_succ (const_basic_block bb)
{
  return single_succ_edge (bb)->dest;
}




static inline basic_block
single_pred (const_basic_block bb)
{
  return single_pred_edge (bb)->src;
}



struct edge_iterator {
  unsigned index;
  vec<edge, va_gc> **container;
};

static inline vec<edge, va_gc> *
ei_container (edge_iterator i)
{
  ((void)(!(i.container) ? fancy_abort ("../../gcc/basic-block.h", 381, __FUNCTION__), 0 : 0));
  return *i.container;
}





static inline edge_iterator
ei_start_1 (vec<edge, va_gc> **ev)
{
  edge_iterator i;

  i.index = 0;
  i.container = ev;

  return i;
}



static inline edge_iterator
ei_last_1 (vec<edge, va_gc> **ev)
{
  edge_iterator i;

  i.index = vec_safe_length (*ev) - 1;
  i.container = ev;

  return i;
}


static inline bool
ei_end_p (edge_iterator i)
{
  return (i.index == vec_safe_length (ei_container (i)));
}



static inline bool
ei_one_before_end_p (edge_iterator i)
{
  return (i.index + 1 == vec_safe_length (ei_container (i)));
}


static inline void
ei_next (edge_iterator *i)
{
  ((void)(!(i->index < vec_safe_length (ei_container (*i))) ? fancy_abort ("../../gcc/basic-block.h", 432, __FUNCTION__), 0 : 0));
  i->index++;
}


static inline void
ei_prev (edge_iterator *i)
{
  ((void)(!(i->index > 0) ? fancy_abort ("../../gcc/basic-block.h", 440, __FUNCTION__), 0 : 0));
  i->index--;
}


static inline edge
ei_edge (edge_iterator i)
{
  return (*ei_container (i))[(i.index)];
}




static inline edge
ei_safe_edge (edge_iterator i)
{
  return !ei_end_p (i) ? ei_edge (i) : 
# 457 "../../gcc/basic-block.h" 3 4
                                      __null
# 457 "../../gcc/basic-block.h"
                                          ;
}





static inline bool
ei_cond (edge_iterator ei, edge *p)
{
  if (!ei_end_p (ei))
    {
      *p = ei_edge (ei);
      return 1;
    }
  else
    {
      *p = 
# 474 "../../gcc/basic-block.h" 3 4
          __null
# 474 "../../gcc/basic-block.h"
              ;
      return 0;
    }
}
# 513 "../../gcc/basic-block.h"
static inline bool
bb_in_transaction (basic_block bb)
{
  return bb->flags & BB_IN_TRANSACTION;
}


static inline bool
bb_has_eh_pred (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->preds))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    {
      if (e->flags & EDGE_EH)
 return true;
    }
  return false;
}


static inline bool
bb_has_abnormal_pred (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->preds))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    {
      if (e->flags & EDGE_ABNORMAL)
 return true;
    }
  return false;
}


static inline edge
find_fallthru_edge (vec<edge, va_gc> *edges)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((edges))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    if (e->flags & EDGE_FALLTHRU)
      break;

  return e;
}



static inline void
check_probability (int prob)
{
  ((void)(!(prob >= 0 && prob <= 10000) ? fancy_abort ("../../gcc/basic-block.h", 568, __FUNCTION__), 0 : 0));
}




static inline int
combine_probabilities (int prob1, int prob2)
{
  check_probability (prob1);
  check_probability (prob2);
  return (((prob1 * prob2) + (10000) / 2) / (10000));
}





static inline gcov_type
apply_scale (gcov_type freq, gcov_type scale)
{
  return (((freq * scale) + (10000) / 2) / (10000));
}



static inline gcov_type
apply_probability (gcov_type freq, int prob)
{
  check_probability (prob);
  return apply_scale (freq, prob);
}



static inline int
inverse_probability (int prob1)
{
  check_probability (prob1);
  return 10000 - prob1;
}



static inline bool
has_abnormal_or_eh_outgoing_edge_p (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->succs))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    if (e->flags & (EDGE_ABNORMAL | EDGE_EH))
      return true;

  return false;
}




static inline bool
has_abnormal_call_or_eh_pred_edge_p (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->preds))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))
      return true;

  return false;
}


inline profile_count edge_def::count () const
{
  return src->count.apply_probability (probability);
}
# 33 "../../gcc/backend.h" 2
# 1 "../../gcc/cfg.h" 1
# 23 "../../gcc/cfg.h"
# 1 "../../gcc/dominance.h" 1
# 23 "../../gcc/dominance.h"
enum cdi_direction
{
  CDI_DOMINATORS = 1,
  CDI_POST_DOMINATORS = 2
};



enum dom_state
{
  DOM_NONE,
  DOM_NO_FAST_QUERY,
  DOM_OK
};

extern void calculate_dominance_info (enum cdi_direction);
extern void calculate_dominance_info_for_region (enum cdi_direction,
       vec<basic_block>);
extern void free_dominance_info (function *, enum cdi_direction);
extern void free_dominance_info (enum cdi_direction);
extern void free_dominance_info_for_region (function *,
         enum cdi_direction,
         vec<basic_block>);
extern basic_block get_immediate_dominator (enum cdi_direction, basic_block);
extern void set_immediate_dominator (enum cdi_direction, basic_block,
         basic_block);
extern vec<basic_block> get_dominated_by (enum cdi_direction, basic_block);
extern vec<basic_block> get_dominated_by_region (enum cdi_direction,
        basic_block *,
        unsigned);
extern vec<basic_block> get_dominated_to_depth (enum cdi_direction,
       basic_block, int);
extern vec<basic_block> get_all_dominated_blocks (enum cdi_direction,
         basic_block);
extern void redirect_immediate_dominators (enum cdi_direction, basic_block,
        basic_block);
extern basic_block nearest_common_dominator (enum cdi_direction,
          basic_block, basic_block);
extern basic_block nearest_common_dominator_for_set (enum cdi_direction,
           bitmap);
extern bool dominated_by_p (enum cdi_direction, const_basic_block,
       const_basic_block);
unsigned bb_dom_dfs_in (enum cdi_direction, basic_block);
unsigned bb_dom_dfs_out (enum cdi_direction, basic_block);
extern void verify_dominators (enum cdi_direction);




static inline void
checking_verify_dominators (cdi_direction dir)
{
  if (global_options.x_flag_checking)
    verify_dominators (dir);
}

basic_block recompute_dominator (enum cdi_direction, basic_block);
extern void iterate_fix_dominators (enum cdi_direction,
        vec<basic_block> , bool);
extern void add_to_dominance_info (enum cdi_direction, basic_block);
extern void delete_from_dominance_info (enum cdi_direction, basic_block);
extern basic_block first_dom_son (enum cdi_direction, basic_block);
extern basic_block next_dom_son (enum cdi_direction, basic_block);
extern enum dom_state dom_info_state (function *, enum cdi_direction);
extern enum dom_state dom_info_state (enum cdi_direction);
extern void set_dom_info_availability (enum cdi_direction, enum dom_state);
extern bool dom_info_available_p (function *, enum cdi_direction);
extern bool dom_info_available_p (enum cdi_direction);
# 24 "../../gcc/cfg.h" 2


enum profile_status_d
{
  PROFILE_ABSENT,
  PROFILE_GUESSED,
  PROFILE_READ,
  PROFILE_LAST
};





struct control_flow_graph {


  basic_block x_entry_block_ptr;
  basic_block x_exit_block_ptr;


  vec<basic_block, va_gc> *x_basic_block_info;


  int x_n_basic_blocks;


  int x_n_edges;


  int x_last_basic_block;


  int last_label_uid;



  vec<basic_block, va_gc> *x_label_to_block_map;

  enum profile_status_d x_profile_status;


  enum dom_state x_dom_computed[2];


  unsigned x_n_bbs_in_dom_tree[2];



  int max_jumptable_ents;


  profile_count count_max;
};


extern void init_flow (function *);
extern void clear_edges (function *);
extern basic_block alloc_block (void);
extern void link_block (basic_block, basic_block);
extern void unlink_block (basic_block);
extern void compact_blocks (void);
extern void expunge_block (basic_block);
extern edge unchecked_make_edge (basic_block, basic_block, int);
extern edge cached_make_edge (sbitmap, basic_block, basic_block, int);
extern edge make_edge (basic_block, basic_block, int);
extern edge make_single_succ_edge (basic_block, basic_block, int);
extern void remove_edge_raw (edge);
extern void redirect_edge_succ (edge, basic_block);
extern void redirect_edge_pred (edge, basic_block);
extern void clear_bb_flags (void);
extern void dump_edge_info (FILE *, edge, dump_flags_t, int);
extern void debug (edge_def &ref);
extern void debug (edge_def *ptr);
extern void alloc_aux_for_blocks (int);
extern void clear_aux_for_blocks (void);
extern void free_aux_for_blocks (void);
extern void alloc_aux_for_edge (edge, int);
extern void alloc_aux_for_edges (int);
extern void clear_aux_for_edges (void);
extern void free_aux_for_edges (void);
extern void debug_bb (basic_block);
extern basic_block debug_bb_n (int);
extern void dump_bb_info (FILE *, basic_block, int, dump_flags_t, bool, bool);
extern void brief_dump_cfg (FILE *, dump_flags_t);
extern void update_bb_profile_for_threading (basic_block, profile_count, edge);
extern void scale_bbs_frequencies_profile_count (basic_block *, int,
          profile_count, profile_count);
extern void scale_bbs_frequencies (basic_block *, int, profile_probability);
extern void initialize_original_copy_tables (void);
extern void reset_original_copy_tables (void);
extern void free_original_copy_tables (void);
extern bool original_copy_tables_initialized_p (void);
extern void set_bb_original (basic_block, basic_block);
extern basic_block get_bb_original (basic_block);
extern void set_bb_copy (basic_block, basic_block);
extern basic_block get_bb_copy (basic_block);
void set_loop_copy (struct loop *, struct loop *);
struct loop *get_loop_copy (struct loop *);
# 34 "../../gcc/backend.h" 2
# 24 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/target.h" 1
# 51 "../../gcc/target.h"
# 1 "./insn-codes.h" 1






enum insn_code {
  CODE_FOR_nothing = 0,
  CODE_FOR_x86_fnstsw_1 = 51,
  CODE_FOR_x86_sahf_1 = 52,
  CODE_FOR_insvhi_1 = 113,
  CODE_FOR_insvsi_1 = 114,
  CODE_FOR_insvdi_1 = 115,
  CODE_FOR_swapxf = 132,
  CODE_FOR_zero_extendqidi2 = 136,
  CODE_FOR_zero_extendhidi2 = 137,
  CODE_FOR_zero_extendqisi2_and = 138,
  CODE_FOR_zero_extendhisi2_and = 139,
  CODE_FOR_zero_extendqihi2_and = 142,
  CODE_FOR_extendsidi2_1 = 150,
  CODE_FOR_extendqidi2 = 151,
  CODE_FOR_extendhidi2 = 152,
  CODE_FOR_extendhisi2 = 153,
  CODE_FOR_extendqisi2 = 155,
  CODE_FOR_extendqihi2 = 157,
  CODE_FOR_truncxfsf2_i387_noop = 168,
  CODE_FOR_truncxfdf2_i387_noop = 169,
  CODE_FOR_fix_truncsfsi_sse = 174,
  CODE_FOR_fix_truncsfdi_sse = 175,
  CODE_FOR_fix_truncdfsi_sse = 176,
  CODE_FOR_fix_truncdfdi_sse = 177,
  CODE_FOR_fix_trunchi_fisttp_i387_1 = 178,
  CODE_FOR_fix_truncsi_fisttp_i387_1 = 179,
  CODE_FOR_fix_truncdi_fisttp_i387_1 = 180,
  CODE_FOR_fix_trunchi_i387_fisttp = 181,
  CODE_FOR_fix_truncsi_i387_fisttp = 182,
  CODE_FOR_fix_truncdi_i387_fisttp = 183,
  CODE_FOR_fix_trunchi_i387_fisttp_with_temp = 184,
  CODE_FOR_fix_truncsi_i387_fisttp_with_temp = 185,
  CODE_FOR_fix_truncdi_i387_fisttp_with_temp = 186,
  CODE_FOR_fix_truncdi_i387 = 190,
  CODE_FOR_fix_truncdi_i387_with_temp = 191,
  CODE_FOR_fix_trunchi_i387 = 192,
  CODE_FOR_fix_truncsi_i387 = 193,
  CODE_FOR_fix_trunchi_i387_with_temp = 194,
  CODE_FOR_fix_truncsi_i387_with_temp = 195,
  CODE_FOR_x86_fnstcw_1 = 196,
  CODE_FOR_x86_fldcw_1 = 197,
  CODE_FOR_floathisf2 = 198,
  CODE_FOR_floathidf2 = 199,
  CODE_FOR_floathixf2 = 200,
  CODE_FOR_floatsixf2 = 201,
  CODE_FOR_floatdixf2 = 202,
  CODE_FOR_floatdisf2_i387_with_xmm = 211,
  CODE_FOR_floatdidf2_i387_with_xmm = 212,
  CODE_FOR_floatdixf2_i387_with_xmm = 213,
  CODE_FOR_addsi_1_zext = 223,
  CODE_FOR_addqi_ext_1 = 245,
  CODE_FOR_addqi3_carry = 299,
  CODE_FOR_addhi3_carry = 300,
  CODE_FOR_addsi3_carry = 301,
  CODE_FOR_adddi3_carry = 302,
  CODE_FOR_addcarrysi = 304,
  CODE_FOR_addcarrydi = 305,
  CODE_FOR_subqi3_carry = 306,
  CODE_FOR_subhi3_carry = 307,
  CODE_FOR_subsi3_carry = 308,
  CODE_FOR_subdi3_carry = 309,
  CODE_FOR_subsi3_carry_ccc = 311,
  CODE_FOR_subdi3_carry_ccc = 312,
  CODE_FOR_subsi3_carry_ccgz = 315,
  CODE_FOR_subdi3_carry_ccgz = 316,
  CODE_FOR_subborrowsi = 317,
  CODE_FOR_subborrowdi = 318,
  CODE_FOR_divmodsi4_1 = 367,
  CODE_FOR_divmoddi4_1 = 368,
  CODE_FOR_divmodsi4_zext_1 = 369,
  CODE_FOR_divmodsi4_zext_2 = 370,
  CODE_FOR_divmodhiqi3 = 381,
  CODE_FOR_udivmodsi4_1 = 382,
  CODE_FOR_udivmoddi4_1 = 383,
  CODE_FOR_udivmodsi4_zext_1 = 384,
  CODE_FOR_udivmodsi4_zext_2 = 385,
  CODE_FOR_udivmodhiqi3 = 400,
  CODE_FOR_andqi_ext_1 = 426,
  CODE_FOR_copysignsf3_const = 513,
  CODE_FOR_copysigndf3_const = 514,
  CODE_FOR_copysigntf3_const = 515,
  CODE_FOR_copysignsf3_var = 516,
  CODE_FOR_copysigndf3_var = 517,
  CODE_FOR_copysigntf3_var = 518,
  CODE_FOR_x86_64_shld = 532,
  CODE_FOR_x86_shld = 533,
  CODE_FOR_x86_64_shrd = 568,
  CODE_FOR_x86_shrd = 569,
  CODE_FOR_ashrdi3_cvt = 570,
  CODE_FOR_ashrsi3_cvt = 572,
  CODE_FOR_ix86_rotldi3_doubleword = 617,
  CODE_FOR_ix86_rotlti3_doubleword = 618,
  CODE_FOR_ix86_rotrdi3_doubleword = 619,
  CODE_FOR_ix86_rotrti3_doubleword = 620,
  CODE_FOR_setcc_sf_sse = 670,
  CODE_FOR_setcc_df_sse = 671,
  CODE_FOR_jump = 673,
  CODE_FOR_blockage = 700,
  CODE_FOR_prologue_use = 702,
  CODE_FOR_simple_return_internal = 703,
  CODE_FOR_interrupt_return = 704,
  CODE_FOR_simple_return_internal_long = 705,
  CODE_FOR_simple_return_pop_internal = 706,
  CODE_FOR_simple_return_indirect_internal = 707,
  CODE_FOR_nop = 708,
  CODE_FOR_nops = 709,
  CODE_FOR_pad = 710,
  CODE_FOR_set_got_rex64 = 713,
  CODE_FOR_set_rip_rex64 = 714,
  CODE_FOR_set_got_offset_rex64 = 715,
  CODE_FOR_eh_return_internal = 716,
  CODE_FOR_leave = 717,
  CODE_FOR_leave_rex64 = 718,
  CODE_FOR_split_stack_return = 719,
  CODE_FOR_ffssi2_no_cmove = 720,
  CODE_FOR_ctzsi2 = 727,
  CODE_FOR_ctzdi2 = 728,
  CODE_FOR_bsr_rex64 = 731,
  CODE_FOR_bsr = 732,
  CODE_FOR_clzsi2_lzcnt = 734,
  CODE_FOR_clzdi2_lzcnt = 735,
  CODE_FOR_tzcnt_si = 738,
  CODE_FOR_lzcnt_si = 739,
  CODE_FOR_tzcnt_di = 740,
  CODE_FOR_lzcnt_di = 741,
  CODE_FOR_tzcnt_hi = 746,
  CODE_FOR_lzcnt_hi = 747,
  CODE_FOR_bmi_bextr_si = 748,
  CODE_FOR_bmi_bextr_di = 749,
  CODE_FOR_bmi2_pdep_si3 = 764,
  CODE_FOR_bmi2_pdep_di3 = 765,
  CODE_FOR_bmi2_pext_si3 = 766,
  CODE_FOR_bmi2_pext_di3 = 767,
  CODE_FOR_tbm_bextri_si = 768,
  CODE_FOR_tbm_bextri_di = 769,
  CODE_FOR_popcountsi2 = 788,
  CODE_FOR_popcountdi2 = 789,
  CODE_FOR_popcounthi2 = 793,
  CODE_FOR_bswaphi_lowpart = 799,
  CODE_FOR_paritydi2_cmp = 800,
  CODE_FOR_paritysi2_cmp = 801,
   CODE_FOR_tls_initial_exec_64_sun = CODE_FOR_nothing,
  CODE_FOR_truncxfsf2_i387_noop_unspec = 852,
  CODE_FOR_truncxfdf2_i387_noop_unspec = 853,
  CODE_FOR_sqrtxf2 = 854,
  CODE_FOR_sqrt_extendsfxf2_i387 = 855,
  CODE_FOR_sqrt_extenddfxf2_i387 = 856,
  CODE_FOR_fpremxf4_i387 = 860,
  CODE_FOR_fprem1xf4_i387 = 861,
  CODE_FOR_sincosxf3 = 868,
  CODE_FOR_sincos_extendsfxf3_i387 = 869,
  CODE_FOR_sincos_extenddfxf3_i387 = 870,
  CODE_FOR_fptanxf4_i387 = 871,
  CODE_FOR_fptan_extendsfxf4_i387 = 872,
  CODE_FOR_fptan_extenddfxf4_i387 = 873,
  CODE_FOR_fpatan_extendsfxf3_i387 = 875,
  CODE_FOR_fpatan_extenddfxf3_i387 = 876,
  CODE_FOR_fyl2xxf3_i387 = 877,
  CODE_FOR_fyl2x_extendsfxf3_i387 = 878,
  CODE_FOR_fyl2x_extenddfxf3_i387 = 879,
  CODE_FOR_fyl2xp1xf3_i387 = 880,
  CODE_FOR_fyl2xp1_extendsfxf3_i387 = 881,
  CODE_FOR_fyl2xp1_extenddfxf3_i387 = 882,
  CODE_FOR_fxtractxf3_i387 = 883,
  CODE_FOR_fxtract_extendsfxf3_i387 = 884,
  CODE_FOR_fxtract_extenddfxf3_i387 = 885,
  CODE_FOR_fscalexf4_i387 = 887,
  CODE_FOR_sse4_1_roundsf2 = 888,
  CODE_FOR_sse4_1_rounddf2 = 889,
  CODE_FOR_rintxf2 = 890,
  CODE_FOR_rintsf2_frndint = 891,
  CODE_FOR_rintdf2_frndint = 892,
  CODE_FOR_fistdi2 = 894,
  CODE_FOR_fistdi2_with_temp = 895,
  CODE_FOR_fisthi2 = 898,
  CODE_FOR_fistsi2 = 899,
  CODE_FOR_fisthi2_with_temp = 900,
  CODE_FOR_fistsi2_with_temp = 901,
  CODE_FOR_frndintsf2_floor = 902,
  CODE_FOR_frndintsf2_ceil = 903,
  CODE_FOR_frndintsf2_trunc = 904,
  CODE_FOR_frndintdf2_floor = 905,
  CODE_FOR_frndintdf2_ceil = 906,
  CODE_FOR_frndintdf2_trunc = 907,
  CODE_FOR_frndintxf2_floor = 908,
  CODE_FOR_frndintxf2_ceil = 909,
  CODE_FOR_frndintxf2_trunc = 910,
  CODE_FOR_frndintsf2_floor_i387 = 911,
  CODE_FOR_frndintsf2_ceil_i387 = 912,
  CODE_FOR_frndintsf2_trunc_i387 = 913,
  CODE_FOR_frndintdf2_floor_i387 = 914,
  CODE_FOR_frndintdf2_ceil_i387 = 915,
  CODE_FOR_frndintdf2_trunc_i387 = 916,
  CODE_FOR_frndintxf2_floor_i387 = 917,
  CODE_FOR_frndintxf2_ceil_i387 = 918,
  CODE_FOR_frndintxf2_trunc_i387 = 919,
  CODE_FOR_frndintxf2_mask_pm = 920,
  CODE_FOR_frndintxf2_mask_pm_i387 = 921,
  CODE_FOR_fistdi2_floor = 928,
  CODE_FOR_fistdi2_ceil = 929,
  CODE_FOR_fistdi2_floor_with_temp = 930,
  CODE_FOR_fistdi2_ceil_with_temp = 931,
  CODE_FOR_fisthi2_floor = 932,
  CODE_FOR_fisthi2_ceil = 933,
  CODE_FOR_fistsi2_floor = 934,
  CODE_FOR_fistsi2_ceil = 935,
  CODE_FOR_fisthi2_floor_with_temp = 936,
  CODE_FOR_fisthi2_ceil_with_temp = 937,
  CODE_FOR_fistsi2_floor_with_temp = 938,
  CODE_FOR_fistsi2_ceil_with_temp = 939,
  CODE_FOR_fxamsf2_i387 = 940,
  CODE_FOR_fxamdf2_i387 = 941,
  CODE_FOR_fxamxf2_i387 = 942,
  CODE_FOR_fxamsf2_i387_with_temp = 943,
  CODE_FOR_fxamdf2_i387_with_temp = 944,
  CODE_FOR_movmsk_df = 945,
  CODE_FOR_cld = 946,
  CODE_FOR_smaxsf3 = 997,
  CODE_FOR_sminsf3 = 998,
  CODE_FOR_smaxdf3 = 999,
  CODE_FOR_smindf3 = 1000,
  CODE_FOR_pro_epilogue_adjust_stack_si_add = 1005,
  CODE_FOR_pro_epilogue_adjust_stack_di_add = 1006,
  CODE_FOR_pro_epilogue_adjust_stack_si_sub = 1007,
  CODE_FOR_pro_epilogue_adjust_stack_di_sub = 1008,
  CODE_FOR_allocate_stack_worker_probe_si = 1009,
  CODE_FOR_allocate_stack_worker_probe_di = 1010,
  CODE_FOR_probe_stack_si = 1011,
  CODE_FOR_probe_stack_di = 1012,
  CODE_FOR_adjust_stack_and_probesi = 1013,
  CODE_FOR_adjust_stack_and_probedi = 1014,
  CODE_FOR_probe_stack_rangesi = 1015,
  CODE_FOR_probe_stack_rangedi = 1016,
  CODE_FOR_trap = 1017,
  CODE_FOR_ud2 = 1018,
  CODE_FOR_stack_protect_set_si = 1022,
  CODE_FOR_stack_protect_set_di = 1023,
  CODE_FOR_stack_protect_test_si = 1024,
  CODE_FOR_stack_protect_test_di = 1025,
  CODE_FOR_sse4_2_crc32qi = 1026,
  CODE_FOR_sse4_2_crc32hi = 1027,
  CODE_FOR_sse4_2_crc32si = 1028,
  CODE_FOR_sse4_2_crc32di = 1029,
  CODE_FOR_rdpmc = 1030,
  CODE_FOR_rdpmc_rex64 = 1031,
  CODE_FOR_rdtsc = 1032,
  CODE_FOR_rdtsc_rex64 = 1033,
  CODE_FOR_rdtscp = 1034,
  CODE_FOR_rdtscp_rex64 = 1035,
  CODE_FOR_fxsave = 1036,
  CODE_FOR_fxsave64 = 1037,
  CODE_FOR_fxrstor = 1038,
  CODE_FOR_fxrstor64 = 1039,
  CODE_FOR_xsave = 1040,
  CODE_FOR_xsaveopt = 1041,
  CODE_FOR_xsavec = 1042,
  CODE_FOR_xsaves = 1043,
  CODE_FOR_xsave_rex64 = 1044,
  CODE_FOR_xsaveopt_rex64 = 1045,
  CODE_FOR_xsavec_rex64 = 1046,
  CODE_FOR_xsaves_rex64 = 1047,
  CODE_FOR_xsave64 = 1048,
  CODE_FOR_xsaveopt64 = 1049,
  CODE_FOR_xsavec64 = 1050,
  CODE_FOR_xsaves64 = 1051,
  CODE_FOR_xrstor = 1052,
  CODE_FOR_xrstors = 1053,
  CODE_FOR_xrstor_rex64 = 1054,
  CODE_FOR_xrstors_rex64 = 1055,
  CODE_FOR_xrstor64 = 1056,
  CODE_FOR_xrstors64 = 1057,
  CODE_FOR_xsetbv = 1058,
  CODE_FOR_xsetbv_rex64 = 1059,
  CODE_FOR_xgetbv = 1060,
  CODE_FOR_xgetbv_rex64 = 1061,
  CODE_FOR_fnstenv = 1062,
  CODE_FOR_fldenv = 1063,
  CODE_FOR_fnstsw = 1064,
  CODE_FOR_fnclex = 1065,
  CODE_FOR_lwp_slwpcbsi = 1068,
  CODE_FOR_lwp_slwpcbdi = 1069,
  CODE_FOR_rdfsbasesi = 1074,
  CODE_FOR_rdgsbasesi = 1075,
  CODE_FOR_rdfsbasedi = 1076,
  CODE_FOR_rdgsbasedi = 1077,
  CODE_FOR_wrfsbasesi = 1078,
  CODE_FOR_wrgsbasesi = 1079,
  CODE_FOR_wrfsbasedi = 1080,
  CODE_FOR_wrgsbasedi = 1081,
  CODE_FOR_rdrandhi_1 = 1082,
  CODE_FOR_rdrandsi_1 = 1083,
  CODE_FOR_rdranddi_1 = 1084,
  CODE_FOR_rdseedhi_1 = 1085,
  CODE_FOR_rdseedsi_1 = 1086,
  CODE_FOR_rdseeddi_1 = 1087,
  CODE_FOR_rdsspsi = 1089,
  CODE_FOR_rdsspdi = 1090,
  CODE_FOR_incsspsi = 1091,
  CODE_FOR_incsspdi = 1092,
  CODE_FOR_saveprevssp = 1093,
  CODE_FOR_rstorssp = 1094,
  CODE_FOR_wrsssi = 1095,
  CODE_FOR_wrssdi = 1096,
  CODE_FOR_wrusssi = 1097,
  CODE_FOR_wrussdi = 1098,
  CODE_FOR_setssbsy = 1099,
  CODE_FOR_clrssbsy = 1100,
  CODE_FOR_nop_endbr = 1101,
  CODE_FOR_xbegin_1 = 1102,
  CODE_FOR_xend = 1103,
  CODE_FOR_xabort = 1104,
  CODE_FOR_xtest_1 = 1105,
  CODE_FOR_clwb = 1106,
  CODE_FOR_clflushopt = 1107,
  CODE_FOR_mwaitx = 1108,
  CODE_FOR_monitorx_si = 1109,
  CODE_FOR_monitorx_di = 1110,
  CODE_FOR_clzero_si = 1111,
  CODE_FOR_clzero_di = 1112,
  CODE_FOR_move_size_reloc_si = 1127,
  CODE_FOR_move_size_reloc_di = 1128,
  CODE_FOR_rdpid = 1131,
  CODE_FOR_rdpid_rex64 = 1132,
  CODE_FOR_sse_movntq = 1138,
  CODE_FOR_mmx_ieee_maxv2sf3 = 1144,
  CODE_FOR_mmx_ieee_minv2sf3 = 1145,
  CODE_FOR_mmx_rcpv2sf2 = 1146,
  CODE_FOR_mmx_rcpit1v2sf3 = 1147,
  CODE_FOR_mmx_rcpit2v2sf3 = 1148,
  CODE_FOR_mmx_rsqrtv2sf2 = 1149,
  CODE_FOR_mmx_rsqit1v2sf3 = 1150,
  CODE_FOR_mmx_haddv2sf3 = 1151,
  CODE_FOR_mmx_hsubv2sf3 = 1152,
  CODE_FOR_mmx_addsubv2sf3 = 1153,
  CODE_FOR_mmx_gtv2sf3 = 1155,
  CODE_FOR_mmx_gev2sf3 = 1156,
  CODE_FOR_mmx_pf2id = 1157,
  CODE_FOR_mmx_pf2iw = 1158,
  CODE_FOR_mmx_pi2fw = 1159,
  CODE_FOR_mmx_floatv2si2 = 1160,
  CODE_FOR_mmx_pswapdv2sf2 = 1161,
  CODE_FOR_mmx_ashrv4hi3 = 1192,
  CODE_FOR_mmx_ashrv2si3 = 1193,
  CODE_FOR_mmx_ashlv4hi3 = 1194,
  CODE_FOR_mmx_lshrv4hi3 = 1195,
  CODE_FOR_mmx_ashlv2si3 = 1196,
  CODE_FOR_mmx_lshrv2si3 = 1197,
  CODE_FOR_mmx_ashlv1di3 = 1198,
  CODE_FOR_mmx_lshrv1di3 = 1199,
  CODE_FOR_mmx_gtv8qi3 = 1203,
  CODE_FOR_mmx_gtv4hi3 = 1204,
  CODE_FOR_mmx_gtv2si3 = 1205,
  CODE_FOR_mmx_andnotv8qi3 = 1206,
  CODE_FOR_mmx_andnotv4hi3 = 1207,
  CODE_FOR_mmx_andnotv2si3 = 1208,
  CODE_FOR_mmx_packsswb = 1218,
  CODE_FOR_mmx_packssdw = 1219,
  CODE_FOR_mmx_packuswb = 1220,
  CODE_FOR_mmx_punpckhbw = 1221,
  CODE_FOR_mmx_punpcklbw = 1222,
  CODE_FOR_mmx_punpckhwd = 1223,
  CODE_FOR_mmx_punpcklwd = 1224,
  CODE_FOR_mmx_punpckhdq = 1225,
  CODE_FOR_mmx_punpckldq = 1226,
  CODE_FOR_mmx_pextrw = 1228,
  CODE_FOR_mmx_pshufw_1 = 1229,
  CODE_FOR_mmx_pswapdv2si2 = 1230,
  CODE_FOR_mmx_psadbw = 1239,
  CODE_FOR_mmx_pmovmskb = 1240,
  CODE_FOR_movv64qi_internal = 1245,
  CODE_FOR_movv32qi_internal = 1246,
  CODE_FOR_movv16qi_internal = 1247,
  CODE_FOR_movv32hi_internal = 1248,
  CODE_FOR_movv16hi_internal = 1249,
  CODE_FOR_movv8hi_internal = 1250,
  CODE_FOR_movv16si_internal = 1251,
  CODE_FOR_movv8si_internal = 1252,
  CODE_FOR_movv4si_internal = 1253,
  CODE_FOR_movv8di_internal = 1254,
  CODE_FOR_movv4di_internal = 1255,
  CODE_FOR_movv2di_internal = 1256,
  CODE_FOR_movv4ti_internal = 1257,
  CODE_FOR_movv2ti_internal = 1258,
  CODE_FOR_movv1ti_internal = 1259,
  CODE_FOR_movv16sf_internal = 1260,
  CODE_FOR_movv8sf_internal = 1261,
  CODE_FOR_movv4sf_internal = 1262,
  CODE_FOR_movv8df_internal = 1263,
  CODE_FOR_movv4df_internal = 1264,
  CODE_FOR_movv2df_internal = 1265,
  CODE_FOR_avx512f_loadv16si_mask = 1266,
  CODE_FOR_avx512vl_loadv8si_mask = 1267,
  CODE_FOR_avx512vl_loadv4si_mask = 1268,
  CODE_FOR_avx512f_loadv8di_mask = 1269,
  CODE_FOR_avx512vl_loadv4di_mask = 1270,
  CODE_FOR_avx512vl_loadv2di_mask = 1271,
  CODE_FOR_avx512f_loadv16sf_mask = 1272,
  CODE_FOR_avx512vl_loadv8sf_mask = 1273,
  CODE_FOR_avx512vl_loadv4sf_mask = 1274,
  CODE_FOR_avx512f_loadv8df_mask = 1275,
  CODE_FOR_avx512vl_loadv4df_mask = 1276,
  CODE_FOR_avx512vl_loadv2df_mask = 1277,
  CODE_FOR_avx512bw_loadv64qi_mask = 1278,
  CODE_FOR_avx512vl_loadv16qi_mask = 1279,
  CODE_FOR_avx512vl_loadv32qi_mask = 1280,
  CODE_FOR_avx512bw_loadv32hi_mask = 1281,
  CODE_FOR_avx512vl_loadv16hi_mask = 1282,
  CODE_FOR_avx512vl_loadv8hi_mask = 1283,
  CODE_FOR_avx512f_blendmv16si = 1284,
  CODE_FOR_avx512vl_blendmv8si = 1285,
  CODE_FOR_avx512vl_blendmv4si = 1286,
  CODE_FOR_avx512f_blendmv8di = 1287,
  CODE_FOR_avx512vl_blendmv4di = 1288,
  CODE_FOR_avx512vl_blendmv2di = 1289,
  CODE_FOR_avx512f_blendmv16sf = 1290,
  CODE_FOR_avx512vl_blendmv8sf = 1291,
  CODE_FOR_avx512vl_blendmv4sf = 1292,
  CODE_FOR_avx512f_blendmv8df = 1293,
  CODE_FOR_avx512vl_blendmv4df = 1294,
  CODE_FOR_avx512vl_blendmv2df = 1295,
  CODE_FOR_avx512bw_blendmv64qi = 1296,
  CODE_FOR_avx512vl_blendmv16qi = 1297,
  CODE_FOR_avx512vl_blendmv32qi = 1298,
  CODE_FOR_avx512bw_blendmv32hi = 1299,
  CODE_FOR_avx512vl_blendmv16hi = 1300,
  CODE_FOR_avx512vl_blendmv8hi = 1301,
  CODE_FOR_avx512f_storev16si_mask = 1302,
  CODE_FOR_avx512vl_storev8si_mask = 1303,
  CODE_FOR_avx512vl_storev4si_mask = 1304,
  CODE_FOR_avx512f_storev8di_mask = 1305,
  CODE_FOR_avx512vl_storev4di_mask = 1306,
  CODE_FOR_avx512vl_storev2di_mask = 1307,
  CODE_FOR_avx512f_storev16sf_mask = 1308,
  CODE_FOR_avx512vl_storev8sf_mask = 1309,
  CODE_FOR_avx512vl_storev4sf_mask = 1310,
  CODE_FOR_avx512f_storev8df_mask = 1311,
  CODE_FOR_avx512vl_storev4df_mask = 1312,
  CODE_FOR_avx512vl_storev2df_mask = 1313,
  CODE_FOR_avx512bw_storev64qi_mask = 1314,
  CODE_FOR_avx512vl_storev16qi_mask = 1315,
  CODE_FOR_avx512vl_storev32qi_mask = 1316,
  CODE_FOR_avx512bw_storev32hi_mask = 1317,
  CODE_FOR_avx512vl_storev16hi_mask = 1318,
  CODE_FOR_avx512vl_storev8hi_mask = 1319,
  CODE_FOR_sse2_movq128 = 1320,
  CODE_FOR_movdi_to_sse = 1321,
  CODE_FOR_avx_lddqu256 = 1322,
  CODE_FOR_sse3_lddqu = 1323,
  CODE_FOR_sse2_movntisi = 1324,
  CODE_FOR_sse2_movntidi = 1325,
  CODE_FOR_avx512f_movntv16sf = 1326,
  CODE_FOR_avx_movntv8sf = 1327,
  CODE_FOR_sse_movntv4sf = 1328,
  CODE_FOR_avx512f_movntv8df = 1329,
  CODE_FOR_avx_movntv4df = 1330,
  CODE_FOR_sse2_movntv2df = 1331,
  CODE_FOR_avx512f_movntv8di = 1332,
  CODE_FOR_avx_movntv4di = 1333,
  CODE_FOR_sse2_movntv2di = 1334,
  CODE_FOR_kandqi = 1335,
  CODE_FOR_kiorqi = 1336,
  CODE_FOR_kxorqi = 1337,
  CODE_FOR_kandhi = 1338,
  CODE_FOR_kiorhi = 1339,
  CODE_FOR_kxorhi = 1340,
  CODE_FOR_kandsi = 1341,
  CODE_FOR_kiorsi = 1342,
  CODE_FOR_kxorsi = 1343,
  CODE_FOR_kanddi = 1344,
  CODE_FOR_kiordi = 1345,
  CODE_FOR_kxordi = 1346,
  CODE_FOR_kandnqi = 1347,
  CODE_FOR_kandnhi = 1348,
  CODE_FOR_kandnsi = 1349,
  CODE_FOR_kandndi = 1350,
  CODE_FOR_kxnorqi = 1351,
  CODE_FOR_kxnorhi = 1352,
  CODE_FOR_kxnorsi = 1353,
  CODE_FOR_kxnordi = 1354,
  CODE_FOR_knotqi = 1355,
  CODE_FOR_knothi = 1356,
  CODE_FOR_knotsi = 1357,
  CODE_FOR_knotdi = 1358,
  CODE_FOR_kaddqi = 1359,
  CODE_FOR_kaddhi = 1360,
  CODE_FOR_kaddsi = 1361,
  CODE_FOR_kadddi = 1362,
  CODE_FOR_kashiftqi = 1363,
  CODE_FOR_klshiftrtqi = 1364,
  CODE_FOR_kashifthi = 1365,
  CODE_FOR_klshiftrthi = 1366,
  CODE_FOR_kashiftsi = 1367,
  CODE_FOR_klshiftrtsi = 1368,
  CODE_FOR_kashiftdi = 1369,
  CODE_FOR_klshiftrtdi = 1370,
  CODE_FOR_ktestqi = 1371,
  CODE_FOR_ktesthi = 1372,
  CODE_FOR_ktestsi = 1373,
  CODE_FOR_ktestdi = 1374,
  CODE_FOR_kortestqi = 1375,
  CODE_FOR_kortesthi = 1376,
  CODE_FOR_kortestsi = 1377,
  CODE_FOR_kortestdi = 1378,
  CODE_FOR_kunpckhi = 1379,
  CODE_FOR_kunpcksi = 1380,
  CODE_FOR_kunpckdi = 1381,
  CODE_FOR_sse_vmaddv4sf3 = 1436,
  CODE_FOR_sse_vmaddv4sf3_round = 1437,
  CODE_FOR_sse_vmaddv4sf3_mask = 1438,
  CODE_FOR_sse_vmaddv4sf3_mask_round = 1439,
  CODE_FOR_sse_vmsubv4sf3 = 1440,
  CODE_FOR_sse_vmsubv4sf3_round = 1441,
  CODE_FOR_sse_vmsubv4sf3_mask = 1442,
  CODE_FOR_sse_vmsubv4sf3_mask_round = 1443,
  CODE_FOR_sse2_vmaddv2df3 = 1444,
  CODE_FOR_sse2_vmaddv2df3_round = 1445,
  CODE_FOR_sse2_vmaddv2df3_mask = 1446,
  CODE_FOR_sse2_vmaddv2df3_mask_round = 1447,
  CODE_FOR_sse2_vmsubv2df3 = 1448,
  CODE_FOR_sse2_vmsubv2df3_round = 1449,
  CODE_FOR_sse2_vmsubv2df3_mask = 1450,
  CODE_FOR_sse2_vmsubv2df3_mask_round = 1451,
  CODE_FOR_sse_vmmulv4sf3 = 1468,
  CODE_FOR_sse_vmmulv4sf3_round = 1469,
  CODE_FOR_sse_vmmulv4sf3_mask = 1470,
  CODE_FOR_sse_vmmulv4sf3_mask_round = 1471,
  CODE_FOR_sse_vmdivv4sf3 = 1472,
  CODE_FOR_sse_vmdivv4sf3_round = 1473,
  CODE_FOR_sse_vmdivv4sf3_mask = 1474,
  CODE_FOR_sse_vmdivv4sf3_mask_round = 1475,
  CODE_FOR_sse2_vmmulv2df3 = 1476,
  CODE_FOR_sse2_vmmulv2df3_round = 1477,
  CODE_FOR_sse2_vmmulv2df3_mask = 1478,
  CODE_FOR_sse2_vmmulv2df3_mask_round = 1479,
  CODE_FOR_sse2_vmdivv2df3 = 1480,
  CODE_FOR_sse2_vmdivv2df3_round = 1481,
  CODE_FOR_sse2_vmdivv2df3_mask = 1482,
  CODE_FOR_sse2_vmdivv2df3_mask_round = 1483,
  CODE_FOR_avx512f_divv16sf3 = 1484,
  CODE_FOR_avx512f_divv16sf3_round = 1485,
  CODE_FOR_avx512f_divv16sf3_mask = 1486,
  CODE_FOR_avx512f_divv16sf3_mask_round = 1487,
  CODE_FOR_avx_divv8sf3 = 1488,
   CODE_FOR_avx_divv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_avx_divv8sf3_mask = 1489,
   CODE_FOR_avx_divv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse_divv4sf3 = 1490,
   CODE_FOR_sse_divv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_sse_divv4sf3_mask = 1491,
   CODE_FOR_sse_divv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_divv8df3 = 1492,
  CODE_FOR_avx512f_divv8df3_round = 1493,
  CODE_FOR_avx512f_divv8df3_mask = 1494,
  CODE_FOR_avx512f_divv8df3_mask_round = 1495,
  CODE_FOR_avx_divv4df3 = 1496,
   CODE_FOR_avx_divv4df3_round = CODE_FOR_nothing,
  CODE_FOR_avx_divv4df3_mask = 1497,
   CODE_FOR_avx_divv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse2_divv2df3 = 1498,
   CODE_FOR_sse2_divv2df3_round = CODE_FOR_nothing,
  CODE_FOR_sse2_divv2df3_mask = 1499,
   CODE_FOR_sse2_divv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx_rcpv8sf2 = 1500,
  CODE_FOR_sse_rcpv4sf2 = 1501,
  CODE_FOR_sse_vmrcpv4sf2 = 1502,
  CODE_FOR_rcp14v16sf_mask = 1504,
  CODE_FOR_rcp14v8sf_mask = 1506,
  CODE_FOR_rcp14v4sf_mask = 1508,
  CODE_FOR_rcp14v8df_mask = 1510,
  CODE_FOR_rcp14v4df_mask = 1512,
  CODE_FOR_rcp14v2df_mask = 1514,
  CODE_FOR_srcp14v4sf = 1515,
  CODE_FOR_srcp14v2df = 1516,
  CODE_FOR_srcp14v4sf_mask = 1517,
  CODE_FOR_srcp14v2df_mask = 1518,
  CODE_FOR_avx512f_sqrtv16sf2 = 1519,
  CODE_FOR_avx512f_sqrtv16sf2_round = 1520,
  CODE_FOR_avx512f_sqrtv16sf2_mask = 1521,
  CODE_FOR_avx512f_sqrtv16sf2_mask_round = 1522,
  CODE_FOR_avx_sqrtv8sf2 = 1523,
   CODE_FOR_avx_sqrtv8sf2_round = CODE_FOR_nothing,
  CODE_FOR_avx_sqrtv8sf2_mask = 1524,
   CODE_FOR_avx_sqrtv8sf2_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse_sqrtv4sf2 = 1525,
   CODE_FOR_sse_sqrtv4sf2_round = CODE_FOR_nothing,
  CODE_FOR_sse_sqrtv4sf2_mask = 1526,
   CODE_FOR_sse_sqrtv4sf2_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_sqrtv8df2 = 1527,
  CODE_FOR_avx512f_sqrtv8df2_round = 1528,
  CODE_FOR_avx512f_sqrtv8df2_mask = 1529,
  CODE_FOR_avx512f_sqrtv8df2_mask_round = 1530,
  CODE_FOR_avx_sqrtv4df2 = 1531,
   CODE_FOR_avx_sqrtv4df2_round = CODE_FOR_nothing,
  CODE_FOR_avx_sqrtv4df2_mask = 1532,
   CODE_FOR_avx_sqrtv4df2_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse2_sqrtv2df2 = 1533,
   CODE_FOR_sse2_sqrtv2df2_round = CODE_FOR_nothing,
  CODE_FOR_sse2_sqrtv2df2_mask = 1534,
   CODE_FOR_sse2_sqrtv2df2_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse_vmsqrtv4sf2 = 1535,
  CODE_FOR_sse_vmsqrtv4sf2_round = 1536,
  CODE_FOR_sse_vmsqrtv4sf2_mask = 1537,
  CODE_FOR_sse_vmsqrtv4sf2_mask_round = 1538,
  CODE_FOR_sse2_vmsqrtv2df2 = 1539,
  CODE_FOR_sse2_vmsqrtv2df2_round = 1540,
  CODE_FOR_sse2_vmsqrtv2df2_mask = 1541,
  CODE_FOR_sse2_vmsqrtv2df2_mask_round = 1542,
  CODE_FOR_avx_rsqrtv8sf2 = 1543,
  CODE_FOR_sse_rsqrtv4sf2 = 1544,
  CODE_FOR_rsqrt14v16sf_mask = 1546,
  CODE_FOR_rsqrt14v8sf_mask = 1548,
  CODE_FOR_rsqrt14v4sf_mask = 1550,
  CODE_FOR_rsqrt14v8df_mask = 1552,
  CODE_FOR_rsqrt14v4df_mask = 1554,
  CODE_FOR_rsqrt14v2df_mask = 1556,
  CODE_FOR_rsqrt14v4sf = 1557,
  CODE_FOR_rsqrt14v2df = 1558,
  CODE_FOR_rsqrt14_v4sf_mask = 1559,
  CODE_FOR_rsqrt14_v2df_mask = 1560,
  CODE_FOR_sse_vmrsqrtv4sf2 = 1561,
  CODE_FOR_ieee_maxv16sf3 = 1594,
  CODE_FOR_ieee_maxv16sf3_round = 1595,
  CODE_FOR_ieee_maxv16sf3_mask = 1596,
  CODE_FOR_ieee_maxv16sf3_mask_round = 1597,
  CODE_FOR_ieee_minv16sf3 = 1598,
  CODE_FOR_ieee_minv16sf3_round = 1599,
  CODE_FOR_ieee_minv16sf3_mask = 1600,
  CODE_FOR_ieee_minv16sf3_mask_round = 1601,
  CODE_FOR_ieee_maxv8sf3 = 1602,
   CODE_FOR_ieee_maxv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv8sf3_mask = 1603,
   CODE_FOR_ieee_maxv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv8sf3 = 1604,
   CODE_FOR_ieee_minv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv8sf3_mask = 1605,
   CODE_FOR_ieee_minv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv4sf3 = 1606,
   CODE_FOR_ieee_maxv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv4sf3_mask = 1607,
   CODE_FOR_ieee_maxv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv4sf3 = 1608,
   CODE_FOR_ieee_minv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv4sf3_mask = 1609,
   CODE_FOR_ieee_minv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv8df3 = 1610,
  CODE_FOR_ieee_maxv8df3_round = 1611,
  CODE_FOR_ieee_maxv8df3_mask = 1612,
  CODE_FOR_ieee_maxv8df3_mask_round = 1613,
  CODE_FOR_ieee_minv8df3 = 1614,
  CODE_FOR_ieee_minv8df3_round = 1615,
  CODE_FOR_ieee_minv8df3_mask = 1616,
  CODE_FOR_ieee_minv8df3_mask_round = 1617,
  CODE_FOR_ieee_maxv4df3 = 1618,
   CODE_FOR_ieee_maxv4df3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv4df3_mask = 1619,
   CODE_FOR_ieee_maxv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv4df3 = 1620,
   CODE_FOR_ieee_minv4df3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv4df3_mask = 1621,
   CODE_FOR_ieee_minv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv2df3 = 1622,
   CODE_FOR_ieee_maxv2df3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_maxv2df3_mask = 1623,
   CODE_FOR_ieee_maxv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv2df3 = 1624,
   CODE_FOR_ieee_minv2df3_round = CODE_FOR_nothing,
  CODE_FOR_ieee_minv2df3_mask = 1625,
   CODE_FOR_ieee_minv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse_vmsmaxv4sf3 = 1626,
  CODE_FOR_sse_vmsmaxv4sf3_mask = 1627,
  CODE_FOR_sse_vmsmaxv4sf3_round = 1628,
  CODE_FOR_sse_vmsmaxv4sf3_mask_round = 1629,
  CODE_FOR_sse_vmsminv4sf3 = 1630,
  CODE_FOR_sse_vmsminv4sf3_mask = 1631,
  CODE_FOR_sse_vmsminv4sf3_round = 1632,
  CODE_FOR_sse_vmsminv4sf3_mask_round = 1633,
  CODE_FOR_sse2_vmsmaxv2df3 = 1634,
  CODE_FOR_sse2_vmsmaxv2df3_mask = 1635,
  CODE_FOR_sse2_vmsmaxv2df3_round = 1636,
  CODE_FOR_sse2_vmsmaxv2df3_mask_round = 1637,
  CODE_FOR_sse2_vmsminv2df3 = 1638,
  CODE_FOR_sse2_vmsminv2df3_mask = 1639,
  CODE_FOR_sse2_vmsminv2df3_round = 1640,
  CODE_FOR_sse2_vmsminv2df3_mask_round = 1641,
  CODE_FOR_avx_addsubv4df3 = 1642,
  CODE_FOR_sse3_addsubv2df3 = 1643,
  CODE_FOR_avx_addsubv8sf3 = 1644,
  CODE_FOR_sse3_addsubv4sf3 = 1645,
  CODE_FOR_avx_haddv4df3 = 1646,
  CODE_FOR_avx_hsubv4df3 = 1647,
  CODE_FOR_sse3_hsubv2df3 = 1649,
  CODE_FOR_avx_haddv8sf3 = 1652,
  CODE_FOR_avx_hsubv8sf3 = 1653,
  CODE_FOR_sse3_haddv4sf3 = 1654,
  CODE_FOR_sse3_hsubv4sf3 = 1655,
  CODE_FOR_reducepv16sf_mask = 1657,
  CODE_FOR_reducepv8sf_mask = 1659,
  CODE_FOR_reducepv4sf_mask = 1661,
  CODE_FOR_reducepv8df_mask = 1663,
  CODE_FOR_reducepv4df_mask = 1665,
  CODE_FOR_reducepv2df_mask = 1667,
  CODE_FOR_reducesv4sf = 1668,
  CODE_FOR_reducesv4sf_mask = 1669,
  CODE_FOR_reducesv2df = 1670,
  CODE_FOR_reducesv2df_mask = 1671,
  CODE_FOR_avx_cmpv8sf3 = 1672,
  CODE_FOR_avx_cmpv4sf3 = 1673,
  CODE_FOR_avx_cmpv4df3 = 1674,
  CODE_FOR_avx_cmpv2df3 = 1675,
  CODE_FOR_avx_vmcmpv4sf3 = 1676,
  CODE_FOR_avx_vmcmpv2df3 = 1677,
  CODE_FOR_avx_maskcmpv8sf3 = 1682,
  CODE_FOR_sse_maskcmpv4sf3 = 1683,
  CODE_FOR_avx_maskcmpv4df3 = 1684,
  CODE_FOR_sse2_maskcmpv2df3 = 1685,
  CODE_FOR_sse_vmmaskcmpv4sf3 = 1686,
  CODE_FOR_sse2_vmmaskcmpv2df3 = 1687,
  CODE_FOR_avx512f_cmpv16si3 = 1688,
  CODE_FOR_avx512f_cmpv16si3_round = 1689,
  CODE_FOR_avx512f_cmpv16si3_mask = 1690,
  CODE_FOR_avx512f_cmpv16si3_mask_round = 1691,
  CODE_FOR_avx512vl_cmpv8si3 = 1692,
   CODE_FOR_avx512vl_cmpv8si3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv8si3_mask = 1693,
   CODE_FOR_avx512vl_cmpv8si3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv4si3 = 1694,
   CODE_FOR_avx512vl_cmpv4si3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv4si3_mask = 1695,
   CODE_FOR_avx512vl_cmpv4si3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_cmpv8di3 = 1696,
  CODE_FOR_avx512f_cmpv8di3_round = 1697,
  CODE_FOR_avx512f_cmpv8di3_mask = 1698,
  CODE_FOR_avx512f_cmpv8di3_mask_round = 1699,
  CODE_FOR_avx512vl_cmpv4di3 = 1700,
   CODE_FOR_avx512vl_cmpv4di3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv4di3_mask = 1701,
   CODE_FOR_avx512vl_cmpv4di3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv2di3 = 1702,
   CODE_FOR_avx512vl_cmpv2di3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv2di3_mask = 1703,
   CODE_FOR_avx512vl_cmpv2di3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_cmpv16sf3 = 1704,
  CODE_FOR_avx512f_cmpv16sf3_round = 1705,
  CODE_FOR_avx512f_cmpv16sf3_mask = 1706,
  CODE_FOR_avx512f_cmpv16sf3_mask_round = 1707,
  CODE_FOR_avx512vl_cmpv8sf3 = 1708,
   CODE_FOR_avx512vl_cmpv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv8sf3_mask = 1709,
   CODE_FOR_avx512vl_cmpv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv4sf3 = 1710,
   CODE_FOR_avx512vl_cmpv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv4sf3_mask = 1711,
   CODE_FOR_avx512vl_cmpv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_cmpv8df3 = 1712,
  CODE_FOR_avx512f_cmpv8df3_round = 1713,
  CODE_FOR_avx512f_cmpv8df3_mask = 1714,
  CODE_FOR_avx512f_cmpv8df3_mask_round = 1715,
  CODE_FOR_avx512vl_cmpv4df3 = 1716,
   CODE_FOR_avx512vl_cmpv4df3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv4df3_mask = 1717,
   CODE_FOR_avx512vl_cmpv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv2df3 = 1718,
   CODE_FOR_avx512vl_cmpv2df3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_cmpv2df3_mask = 1719,
   CODE_FOR_avx512vl_cmpv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512bw_cmpv64qi3 = 1720,
  CODE_FOR_avx512bw_cmpv64qi3_mask = 1721,
  CODE_FOR_avx512vl_cmpv16qi3 = 1722,
  CODE_FOR_avx512vl_cmpv16qi3_mask = 1723,
  CODE_FOR_avx512vl_cmpv32qi3 = 1724,
  CODE_FOR_avx512vl_cmpv32qi3_mask = 1725,
  CODE_FOR_avx512bw_cmpv32hi3 = 1726,
  CODE_FOR_avx512bw_cmpv32hi3_mask = 1727,
  CODE_FOR_avx512vl_cmpv16hi3 = 1728,
  CODE_FOR_avx512vl_cmpv16hi3_mask = 1729,
  CODE_FOR_avx512vl_cmpv8hi3 = 1730,
  CODE_FOR_avx512vl_cmpv8hi3_mask = 1731,
  CODE_FOR_avx512bw_ucmpv64qi3 = 1732,
  CODE_FOR_avx512bw_ucmpv64qi3_mask = 1733,
  CODE_FOR_avx512vl_ucmpv16qi3 = 1734,
  CODE_FOR_avx512vl_ucmpv16qi3_mask = 1735,
  CODE_FOR_avx512vl_ucmpv32qi3 = 1736,
  CODE_FOR_avx512vl_ucmpv32qi3_mask = 1737,
  CODE_FOR_avx512bw_ucmpv32hi3 = 1738,
  CODE_FOR_avx512bw_ucmpv32hi3_mask = 1739,
  CODE_FOR_avx512vl_ucmpv16hi3 = 1740,
  CODE_FOR_avx512vl_ucmpv16hi3_mask = 1741,
  CODE_FOR_avx512vl_ucmpv8hi3 = 1742,
  CODE_FOR_avx512vl_ucmpv8hi3_mask = 1743,
  CODE_FOR_avx512f_ucmpv16si3 = 1744,
  CODE_FOR_avx512f_ucmpv16si3_mask = 1745,
  CODE_FOR_avx512vl_ucmpv8si3 = 1746,
  CODE_FOR_avx512vl_ucmpv8si3_mask = 1747,
  CODE_FOR_avx512vl_ucmpv4si3 = 1748,
  CODE_FOR_avx512vl_ucmpv4si3_mask = 1749,
  CODE_FOR_avx512f_ucmpv8di3 = 1750,
  CODE_FOR_avx512f_ucmpv8di3_mask = 1751,
  CODE_FOR_avx512vl_ucmpv4di3 = 1752,
  CODE_FOR_avx512vl_ucmpv4di3_mask = 1753,
  CODE_FOR_avx512vl_ucmpv2di3 = 1754,
  CODE_FOR_avx512vl_ucmpv2di3_mask = 1755,
  CODE_FOR_avx512f_vmcmpv4sf3 = 1756,
  CODE_FOR_avx512f_vmcmpv4sf3_round = 1757,
  CODE_FOR_avx512f_vmcmpv2df3 = 1758,
  CODE_FOR_avx512f_vmcmpv2df3_round = 1759,
  CODE_FOR_avx512f_vmcmpv4sf3_mask = 1760,
  CODE_FOR_avx512f_vmcmpv4sf3_mask_round = 1761,
  CODE_FOR_avx512f_vmcmpv2df3_mask = 1762,
  CODE_FOR_avx512f_vmcmpv2df3_mask_round = 1763,
  CODE_FOR_avx512f_maskcmpv16sf3 = 1764,
  CODE_FOR_avx512f_maskcmpv8sf3 = 1765,
  CODE_FOR_avx512f_maskcmpv4sf3 = 1766,
  CODE_FOR_avx512f_maskcmpv8df3 = 1767,
  CODE_FOR_avx512f_maskcmpv4df3 = 1768,
  CODE_FOR_avx512f_maskcmpv2df3 = 1769,
  CODE_FOR_sse_comi = 1770,
  CODE_FOR_sse_comi_round = 1771,
  CODE_FOR_sse_ucomi = 1772,
  CODE_FOR_sse_ucomi_round = 1773,
  CODE_FOR_sse2_comi = 1774,
  CODE_FOR_sse2_comi_round = 1775,
  CODE_FOR_sse2_ucomi = 1776,
  CODE_FOR_sse2_ucomi_round = 1777,
  CODE_FOR_avx_andnotv8sf3 = 1778,
  CODE_FOR_avx_andnotv8sf3_mask = 1779,
  CODE_FOR_sse_andnotv4sf3 = 1780,
  CODE_FOR_sse_andnotv4sf3_mask = 1781,
  CODE_FOR_avx_andnotv4df3 = 1782,
  CODE_FOR_avx_andnotv4df3_mask = 1783,
  CODE_FOR_sse2_andnotv2df3 = 1784,
  CODE_FOR_sse2_andnotv2df3_mask = 1785,
  CODE_FOR_avx512f_andnotv16sf3 = 1786,
  CODE_FOR_avx512f_andnotv16sf3_mask = 1787,
  CODE_FOR_avx512f_andnotv8df3 = 1788,
  CODE_FOR_avx512f_andnotv8df3_mask = 1789,
  CODE_FOR_fma_fmadd_v16sf_maskz_1 = 1846,
  CODE_FOR_fma_fmadd_v16sf_maskz_1_round = 1848,
  CODE_FOR_fma_fmadd_v8sf_maskz_1 = 1850,
   CODE_FOR_fma_fmadd_v8sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmadd_v4sf_maskz_1 = 1852,
   CODE_FOR_fma_fmadd_v4sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmadd_v8df_maskz_1 = 1855,
  CODE_FOR_fma_fmadd_v8df_maskz_1_round = 1857,
  CODE_FOR_fma_fmadd_v4df_maskz_1 = 1859,
   CODE_FOR_fma_fmadd_v4df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmadd_v2df_maskz_1 = 1861,
   CODE_FOR_fma_fmadd_v2df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmadd_v16sf_mask = 1862,
  CODE_FOR_avx512f_fmadd_v16sf_mask_round = 1863,
  CODE_FOR_avx512vl_fmadd_v8sf_mask = 1864,
   CODE_FOR_avx512vl_fmadd_v8sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fmadd_v4sf_mask = 1865,
   CODE_FOR_avx512vl_fmadd_v4sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmadd_v8df_mask = 1866,
  CODE_FOR_avx512f_fmadd_v8df_mask_round = 1867,
  CODE_FOR_avx512vl_fmadd_v4df_mask = 1868,
   CODE_FOR_avx512vl_fmadd_v4df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fmadd_v2df_mask = 1869,
   CODE_FOR_avx512vl_fmadd_v2df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmadd_v16sf_mask3 = 1870,
  CODE_FOR_avx512f_fmadd_v16sf_mask3_round = 1871,
  CODE_FOR_avx512vl_fmadd_v8sf_mask3 = 1872,
  CODE_FOR_avx512vl_fmadd_v8sf_mask3_round = 1873,
  CODE_FOR_avx512vl_fmadd_v4sf_mask3 = 1874,
  CODE_FOR_avx512vl_fmadd_v4sf_mask3_round = 1875,
  CODE_FOR_avx512f_fmadd_v8df_mask3 = 1876,
  CODE_FOR_avx512f_fmadd_v8df_mask3_round = 1877,
  CODE_FOR_avx512vl_fmadd_v4df_mask3 = 1878,
  CODE_FOR_avx512vl_fmadd_v4df_mask3_round = 1879,
  CODE_FOR_avx512vl_fmadd_v2df_mask3 = 1880,
  CODE_FOR_avx512vl_fmadd_v2df_mask3_round = 1881,
  CODE_FOR_fma_fmsub_v16sf_maskz_1 = 1890,
  CODE_FOR_fma_fmsub_v16sf_maskz_1_round = 1892,
  CODE_FOR_fma_fmsub_v8sf_maskz_1 = 1894,
   CODE_FOR_fma_fmsub_v8sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmsub_v4sf_maskz_1 = 1896,
   CODE_FOR_fma_fmsub_v4sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmsub_v8df_maskz_1 = 1899,
  CODE_FOR_fma_fmsub_v8df_maskz_1_round = 1901,
  CODE_FOR_fma_fmsub_v4df_maskz_1 = 1903,
   CODE_FOR_fma_fmsub_v4df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmsub_v2df_maskz_1 = 1905,
   CODE_FOR_fma_fmsub_v2df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmsub_v16sf_mask = 1906,
  CODE_FOR_avx512f_fmsub_v16sf_mask_round = 1907,
  CODE_FOR_avx512vl_fmsub_v8sf_mask = 1908,
  CODE_FOR_avx512vl_fmsub_v8sf_mask_round = 1909,
  CODE_FOR_avx512vl_fmsub_v4sf_mask = 1910,
  CODE_FOR_avx512vl_fmsub_v4sf_mask_round = 1911,
  CODE_FOR_avx512f_fmsub_v8df_mask = 1912,
  CODE_FOR_avx512f_fmsub_v8df_mask_round = 1913,
  CODE_FOR_avx512vl_fmsub_v4df_mask = 1914,
  CODE_FOR_avx512vl_fmsub_v4df_mask_round = 1915,
  CODE_FOR_avx512vl_fmsub_v2df_mask = 1916,
  CODE_FOR_avx512vl_fmsub_v2df_mask_round = 1917,
  CODE_FOR_avx512f_fmsub_v16sf_mask3 = 1918,
  CODE_FOR_avx512f_fmsub_v16sf_mask3_round = 1919,
  CODE_FOR_avx512vl_fmsub_v8sf_mask3 = 1920,
   CODE_FOR_avx512vl_fmsub_v8sf_mask3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fmsub_v4sf_mask3 = 1921,
   CODE_FOR_avx512vl_fmsub_v4sf_mask3_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmsub_v8df_mask3 = 1922,
  CODE_FOR_avx512f_fmsub_v8df_mask3_round = 1923,
  CODE_FOR_avx512vl_fmsub_v4df_mask3 = 1924,
   CODE_FOR_avx512vl_fmsub_v4df_mask3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fmsub_v2df_mask3 = 1925,
   CODE_FOR_avx512vl_fmsub_v2df_mask3_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmadd_v16sf_maskz_1 = 1934,
  CODE_FOR_fma_fnmadd_v16sf_maskz_1_round = 1936,
  CODE_FOR_fma_fnmadd_v8sf_maskz_1 = 1938,
   CODE_FOR_fma_fnmadd_v8sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmadd_v4sf_maskz_1 = 1940,
   CODE_FOR_fma_fnmadd_v4sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmadd_v8df_maskz_1 = 1943,
  CODE_FOR_fma_fnmadd_v8df_maskz_1_round = 1945,
  CODE_FOR_fma_fnmadd_v4df_maskz_1 = 1947,
   CODE_FOR_fma_fnmadd_v4df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmadd_v2df_maskz_1 = 1949,
   CODE_FOR_fma_fnmadd_v2df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmadd_v16sf_mask = 1950,
  CODE_FOR_avx512f_fnmadd_v16sf_mask_round = 1951,
  CODE_FOR_avx512vl_fnmadd_v8sf_mask = 1952,
   CODE_FOR_avx512vl_fnmadd_v8sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fnmadd_v4sf_mask = 1953,
   CODE_FOR_avx512vl_fnmadd_v4sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmadd_v8df_mask = 1954,
  CODE_FOR_avx512f_fnmadd_v8df_mask_round = 1955,
  CODE_FOR_avx512vl_fnmadd_v4df_mask = 1956,
   CODE_FOR_avx512vl_fnmadd_v4df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fnmadd_v2df_mask = 1957,
   CODE_FOR_avx512vl_fnmadd_v2df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmadd_v16sf_mask3 = 1958,
  CODE_FOR_avx512f_fnmadd_v16sf_mask3_round = 1959,
  CODE_FOR_avx512vl_fnmadd_v8sf_mask3 = 1960,
   CODE_FOR_avx512vl_fnmadd_v8sf_mask3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fnmadd_v4sf_mask3 = 1961,
   CODE_FOR_avx512vl_fnmadd_v4sf_mask3_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmadd_v8df_mask3 = 1962,
  CODE_FOR_avx512f_fnmadd_v8df_mask3_round = 1963,
  CODE_FOR_avx512vl_fnmadd_v4df_mask3 = 1964,
   CODE_FOR_avx512vl_fnmadd_v4df_mask3_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fnmadd_v2df_mask3 = 1965,
   CODE_FOR_avx512vl_fnmadd_v2df_mask3_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmsub_v16sf_maskz_1 = 1988,
  CODE_FOR_fma_fnmsub_v16sf_maskz_1_round = 1990,
  CODE_FOR_fma_fnmsub_v8sf_maskz_1 = 1992,
   CODE_FOR_fma_fnmsub_v8sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmsub_v4sf_maskz_1 = 1994,
   CODE_FOR_fma_fnmsub_v4sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmsub_v8df_maskz_1 = 1997,
  CODE_FOR_fma_fnmsub_v8df_maskz_1_round = 1999,
  CODE_FOR_fma_fnmsub_v4df_maskz_1 = 2001,
   CODE_FOR_fma_fnmsub_v4df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fnmsub_v2df_maskz_1 = 2003,
   CODE_FOR_fma_fnmsub_v2df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmsub_v16sf_mask = 2004,
  CODE_FOR_avx512f_fnmsub_v16sf_mask_round = 2005,
  CODE_FOR_avx512vl_fnmsub_v8sf_mask = 2006,
   CODE_FOR_avx512vl_fnmsub_v8sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fnmsub_v4sf_mask = 2007,
   CODE_FOR_avx512vl_fnmsub_v4sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmsub_v8df_mask = 2008,
  CODE_FOR_avx512f_fnmsub_v8df_mask_round = 2009,
  CODE_FOR_avx512vl_fnmsub_v4df_mask = 2010,
   CODE_FOR_avx512vl_fnmsub_v4df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512vl_fnmsub_v2df_mask = 2011,
   CODE_FOR_avx512vl_fnmsub_v2df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fnmsub_v16sf_mask3 = 2012,
  CODE_FOR_avx512f_fnmsub_v16sf_mask3_round = 2013,
  CODE_FOR_avx512vl_fnmsub_v8sf_mask3 = 2014,
  CODE_FOR_avx512vl_fnmsub_v8sf_mask3_round = 2015,
  CODE_FOR_avx512vl_fnmsub_v4sf_mask3 = 2016,
  CODE_FOR_avx512vl_fnmsub_v4sf_mask3_round = 2017,
  CODE_FOR_avx512f_fnmsub_v8df_mask3 = 2018,
  CODE_FOR_avx512f_fnmsub_v8df_mask3_round = 2019,
  CODE_FOR_avx512vl_fnmsub_v4df_mask3 = 2020,
  CODE_FOR_avx512vl_fnmsub_v4df_mask3_round = 2021,
  CODE_FOR_avx512vl_fnmsub_v2df_mask3 = 2022,
  CODE_FOR_avx512vl_fnmsub_v2df_mask3_round = 2023,
  CODE_FOR_fma_fmaddsub_v16sf_maskz_1 = 2030,
  CODE_FOR_fma_fmaddsub_v16sf_maskz_1_round = 2032,
  CODE_FOR_fma_fmaddsub_v8sf_maskz_1 = 2034,
   CODE_FOR_fma_fmaddsub_v8sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmaddsub_v4sf_maskz_1 = 2036,
   CODE_FOR_fma_fmaddsub_v4sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmaddsub_v8df_maskz_1 = 2039,
  CODE_FOR_fma_fmaddsub_v8df_maskz_1_round = 2041,
  CODE_FOR_fma_fmaddsub_v4df_maskz_1 = 2043,
   CODE_FOR_fma_fmaddsub_v4df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmaddsub_v2df_maskz_1 = 2045,
   CODE_FOR_fma_fmaddsub_v2df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmaddsub_v16sf_mask = 2046,
  CODE_FOR_avx512f_fmaddsub_v16sf_mask_round = 2047,
  CODE_FOR_avx512vl_fmaddsub_v8sf_mask = 2048,
  CODE_FOR_avx512vl_fmaddsub_v8sf_mask_round = 2049,
  CODE_FOR_avx512vl_fmaddsub_v4sf_mask = 2050,
  CODE_FOR_avx512vl_fmaddsub_v4sf_mask_round = 2051,
  CODE_FOR_avx512f_fmaddsub_v8df_mask = 2052,
  CODE_FOR_avx512f_fmaddsub_v8df_mask_round = 2053,
  CODE_FOR_avx512vl_fmaddsub_v4df_mask = 2054,
  CODE_FOR_avx512vl_fmaddsub_v4df_mask_round = 2055,
  CODE_FOR_avx512vl_fmaddsub_v2df_mask = 2056,
  CODE_FOR_avx512vl_fmaddsub_v2df_mask_round = 2057,
  CODE_FOR_avx512f_fmaddsub_v16sf_mask3 = 2058,
  CODE_FOR_avx512f_fmaddsub_v16sf_mask3_round = 2059,
  CODE_FOR_avx512vl_fmaddsub_v8sf_mask3 = 2060,
  CODE_FOR_avx512vl_fmaddsub_v8sf_mask3_round = 2061,
  CODE_FOR_avx512vl_fmaddsub_v4sf_mask3 = 2062,
  CODE_FOR_avx512vl_fmaddsub_v4sf_mask3_round = 2063,
  CODE_FOR_avx512f_fmaddsub_v8df_mask3 = 2064,
  CODE_FOR_avx512f_fmaddsub_v8df_mask3_round = 2065,
  CODE_FOR_avx512vl_fmaddsub_v4df_mask3 = 2066,
  CODE_FOR_avx512vl_fmaddsub_v4df_mask3_round = 2067,
  CODE_FOR_avx512vl_fmaddsub_v2df_mask3 = 2068,
  CODE_FOR_avx512vl_fmaddsub_v2df_mask3_round = 2069,
  CODE_FOR_fma_fmsubadd_v16sf_maskz_1 = 2076,
  CODE_FOR_fma_fmsubadd_v16sf_maskz_1_round = 2078,
  CODE_FOR_fma_fmsubadd_v8sf_maskz_1 = 2080,
   CODE_FOR_fma_fmsubadd_v8sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmsubadd_v4sf_maskz_1 = 2082,
   CODE_FOR_fma_fmsubadd_v4sf_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmsubadd_v8df_maskz_1 = 2085,
  CODE_FOR_fma_fmsubadd_v8df_maskz_1_round = 2087,
  CODE_FOR_fma_fmsubadd_v4df_maskz_1 = 2089,
   CODE_FOR_fma_fmsubadd_v4df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_fma_fmsubadd_v2df_maskz_1 = 2091,
   CODE_FOR_fma_fmsubadd_v2df_maskz_1_round = CODE_FOR_nothing,
  CODE_FOR_avx512f_fmsubadd_v16sf_mask = 2092,
  CODE_FOR_avx512f_fmsubadd_v16sf_mask_round = 2093,
  CODE_FOR_avx512vl_fmsubadd_v8sf_mask = 2094,
  CODE_FOR_avx512vl_fmsubadd_v8sf_mask_round = 2095,
  CODE_FOR_avx512vl_fmsubadd_v4sf_mask = 2096,
  CODE_FOR_avx512vl_fmsubadd_v4sf_mask_round = 2097,
  CODE_FOR_avx512f_fmsubadd_v8df_mask = 2098,
  CODE_FOR_avx512f_fmsubadd_v8df_mask_round = 2099,
  CODE_FOR_avx512vl_fmsubadd_v4df_mask = 2100,
  CODE_FOR_avx512vl_fmsubadd_v4df_mask_round = 2101,
  CODE_FOR_avx512vl_fmsubadd_v2df_mask = 2102,
  CODE_FOR_avx512vl_fmsubadd_v2df_mask_round = 2103,
  CODE_FOR_avx512f_fmsubadd_v16sf_mask3 = 2104,
  CODE_FOR_avx512f_fmsubadd_v16sf_mask3_round = 2105,
  CODE_FOR_avx512vl_fmsubadd_v8sf_mask3 = 2106,
  CODE_FOR_avx512vl_fmsubadd_v8sf_mask3_round = 2107,
  CODE_FOR_avx512vl_fmsubadd_v4sf_mask3 = 2108,
  CODE_FOR_avx512vl_fmsubadd_v4sf_mask3_round = 2109,
  CODE_FOR_avx512f_fmsubadd_v8df_mask3 = 2110,
  CODE_FOR_avx512f_fmsubadd_v8df_mask3_round = 2111,
  CODE_FOR_avx512vl_fmsubadd_v4df_mask3 = 2112,
  CODE_FOR_avx512vl_fmsubadd_v4df_mask3_round = 2113,
  CODE_FOR_avx512vl_fmsubadd_v2df_mask3 = 2114,
  CODE_FOR_avx512vl_fmsubadd_v2df_mask3_round = 2115,
  CODE_FOR_sse_cvtpi2ps = 2140,
  CODE_FOR_sse_cvtps2pi = 2141,
  CODE_FOR_sse_cvttps2pi = 2142,
  CODE_FOR_sse_cvtsi2ss = 2143,
  CODE_FOR_sse_cvtsi2ss_round = 2144,
  CODE_FOR_sse_cvtsi2ssq = 2145,
  CODE_FOR_sse_cvtsi2ssq_round = 2146,
  CODE_FOR_sse_cvtss2si = 2147,
  CODE_FOR_sse_cvtss2si_round = 2148,
  CODE_FOR_sse_cvtss2si_2 = 2149,
  CODE_FOR_sse_cvtss2siq = 2150,
  CODE_FOR_sse_cvtss2siq_round = 2151,
  CODE_FOR_sse_cvtss2siq_2 = 2152,
  CODE_FOR_sse_cvttss2si = 2153,
  CODE_FOR_sse_cvttss2si_round = 2154,
  CODE_FOR_sse_cvttss2siq = 2155,
  CODE_FOR_sse_cvttss2siq_round = 2156,
  CODE_FOR_cvtusi2ss32 = 2157,
  CODE_FOR_cvtusi2ss32_round = 2158,
  CODE_FOR_cvtusi2sd32 = 2159,
   CODE_FOR_cvtusi2sd32_round = CODE_FOR_nothing,
  CODE_FOR_cvtusi2ss64 = 2160,
  CODE_FOR_cvtusi2ss64_round = 2161,
  CODE_FOR_cvtusi2sd64 = 2162,
  CODE_FOR_cvtusi2sd64_round = 2163,
  CODE_FOR_floatv16siv16sf2 = 2164,
  CODE_FOR_floatv16siv16sf2_round = 2165,
  CODE_FOR_floatv16siv16sf2_mask = 2166,
  CODE_FOR_floatv16siv16sf2_mask_round = 2167,
  CODE_FOR_floatv8siv8sf2 = 2168,
   CODE_FOR_floatv8siv8sf2_round = CODE_FOR_nothing,
  CODE_FOR_floatv8siv8sf2_mask = 2169,
   CODE_FOR_floatv8siv8sf2_mask_round = CODE_FOR_nothing,
  CODE_FOR_floatv4siv4sf2 = 2170,
   CODE_FOR_floatv4siv4sf2_round = CODE_FOR_nothing,
  CODE_FOR_floatv4siv4sf2_mask = 2171,
   CODE_FOR_floatv4siv4sf2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufloatv16siv16sf2 = 2172,
  CODE_FOR_ufloatv16siv16sf2_round = 2173,
  CODE_FOR_ufloatv16siv16sf2_mask = 2174,
  CODE_FOR_ufloatv16siv16sf2_mask_round = 2175,
  CODE_FOR_ufloatv8siv8sf2 = 2176,
  CODE_FOR_ufloatv8siv8sf2_round = 2177,
  CODE_FOR_ufloatv8siv8sf2_mask = 2178,
  CODE_FOR_ufloatv8siv8sf2_mask_round = 2179,
  CODE_FOR_ufloatv4siv4sf2 = 2180,
  CODE_FOR_ufloatv4siv4sf2_round = 2181,
  CODE_FOR_ufloatv4siv4sf2_mask = 2182,
  CODE_FOR_ufloatv4siv4sf2_mask_round = 2183,
  CODE_FOR_avx_fix_notruncv8sfv8si = 2184,
  CODE_FOR_avx_fix_notruncv8sfv8si_mask = 2185,
  CODE_FOR_sse2_fix_notruncv4sfv4si = 2186,
  CODE_FOR_sse2_fix_notruncv4sfv4si_mask = 2187,
  CODE_FOR_avx512f_fix_notruncv16sfv16si = 2188,
  CODE_FOR_avx512f_fix_notruncv16sfv16si_round = 2189,
  CODE_FOR_avx512f_fix_notruncv16sfv16si_mask = 2190,
  CODE_FOR_avx512f_fix_notruncv16sfv16si_mask_round = 2191,
  CODE_FOR_avx512f_ufix_notruncv16sfv16si_mask = 2194,
  CODE_FOR_avx512f_ufix_notruncv16sfv16si_mask_round = 2195,
  CODE_FOR_avx512vl_ufix_notruncv8sfv8si_mask = 2198,
  CODE_FOR_avx512vl_ufix_notruncv8sfv8si_mask_round = 2199,
  CODE_FOR_avx512vl_ufix_notruncv4sfv4si_mask = 2202,
  CODE_FOR_avx512vl_ufix_notruncv4sfv4si_mask_round = 2203,
  CODE_FOR_avx512dq_cvtps2qqv8di_mask = 2206,
  CODE_FOR_avx512dq_cvtps2qqv8di_mask_round = 2207,
  CODE_FOR_avx512dq_cvtps2qqv4di_mask = 2209,
   CODE_FOR_avx512dq_cvtps2qqv4di_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_cvtps2qqv2di_mask = 2211,
  CODE_FOR_avx512dq_cvtps2uqqv8di_mask = 2214,
  CODE_FOR_avx512dq_cvtps2uqqv8di_mask_round = 2215,
  CODE_FOR_avx512dq_cvtps2uqqv4di_mask = 2217,
   CODE_FOR_avx512dq_cvtps2uqqv4di_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_cvtps2uqqv2di_mask = 2219,
  CODE_FOR_fix_truncv16sfv16si2 = 2220,
  CODE_FOR_fix_truncv16sfv16si2_round = 2221,
  CODE_FOR_fix_truncv16sfv16si2_mask = 2222,
  CODE_FOR_fix_truncv16sfv16si2_mask_round = 2223,
  CODE_FOR_ufix_truncv16sfv16si2 = 2224,
  CODE_FOR_ufix_truncv16sfv16si2_round = 2225,
  CODE_FOR_ufix_truncv16sfv16si2_mask = 2226,
  CODE_FOR_ufix_truncv16sfv16si2_mask_round = 2227,
  CODE_FOR_fix_truncv8sfv8si2 = 2228,
  CODE_FOR_fix_truncv8sfv8si2_mask = 2229,
  CODE_FOR_fix_truncv4sfv4si2 = 2230,
  CODE_FOR_fix_truncv4sfv4si2_mask = 2231,
  CODE_FOR_sse2_cvtpi2pd = 2232,
  CODE_FOR_sse2_cvtpd2pi = 2233,
  CODE_FOR_sse2_cvttpd2pi = 2234,
  CODE_FOR_sse2_cvtsi2sd = 2235,
  CODE_FOR_sse2_cvtsi2sdq = 2236,
  CODE_FOR_sse2_cvtsi2sdq_round = 2237,
  CODE_FOR_avx512f_vcvtss2usi = 2238,
  CODE_FOR_avx512f_vcvtss2usi_round = 2239,
  CODE_FOR_avx512f_vcvtss2usiq = 2240,
  CODE_FOR_avx512f_vcvtss2usiq_round = 2241,
  CODE_FOR_avx512f_vcvttss2usi = 2242,
  CODE_FOR_avx512f_vcvttss2usi_round = 2243,
  CODE_FOR_avx512f_vcvttss2usiq = 2244,
  CODE_FOR_avx512f_vcvttss2usiq_round = 2245,
  CODE_FOR_avx512f_vcvtsd2usi = 2246,
  CODE_FOR_avx512f_vcvtsd2usi_round = 2247,
  CODE_FOR_avx512f_vcvtsd2usiq = 2248,
  CODE_FOR_avx512f_vcvtsd2usiq_round = 2249,
  CODE_FOR_avx512f_vcvttsd2usi = 2250,
  CODE_FOR_avx512f_vcvttsd2usi_round = 2251,
  CODE_FOR_avx512f_vcvttsd2usiq = 2252,
  CODE_FOR_avx512f_vcvttsd2usiq_round = 2253,
  CODE_FOR_sse2_cvtsd2si = 2254,
  CODE_FOR_sse2_cvtsd2si_round = 2255,
  CODE_FOR_sse2_cvtsd2si_2 = 2256,
  CODE_FOR_sse2_cvtsd2siq = 2257,
  CODE_FOR_sse2_cvtsd2siq_round = 2258,
  CODE_FOR_sse2_cvtsd2siq_2 = 2259,
  CODE_FOR_sse2_cvttsd2si = 2260,
  CODE_FOR_sse2_cvttsd2si_round = 2261,
  CODE_FOR_sse2_cvttsd2siq = 2262,
  CODE_FOR_sse2_cvttsd2siq_round = 2263,
  CODE_FOR_floatv8siv8df2 = 2264,
  CODE_FOR_floatv8siv8df2_mask = 2265,
  CODE_FOR_floatv4siv4df2 = 2266,
  CODE_FOR_floatv4siv4df2_mask = 2267,
  CODE_FOR_floatv8div8df2 = 2268,
  CODE_FOR_floatv8div8df2_round = 2269,
  CODE_FOR_floatv8div8df2_mask = 2270,
  CODE_FOR_floatv8div8df2_mask_round = 2271,
  CODE_FOR_ufloatv8div8df2 = 2272,
  CODE_FOR_ufloatv8div8df2_round = 2273,
  CODE_FOR_ufloatv8div8df2_mask = 2274,
  CODE_FOR_ufloatv8div8df2_mask_round = 2275,
  CODE_FOR_floatv4div4df2 = 2276,
  CODE_FOR_floatv4div4df2_round = 2277,
  CODE_FOR_floatv4div4df2_mask = 2278,
  CODE_FOR_floatv4div4df2_mask_round = 2279,
  CODE_FOR_ufloatv4div4df2 = 2280,
  CODE_FOR_ufloatv4div4df2_round = 2281,
  CODE_FOR_ufloatv4div4df2_mask = 2282,
  CODE_FOR_ufloatv4div4df2_mask_round = 2283,
  CODE_FOR_floatv2div2df2 = 2284,
  CODE_FOR_floatv2div2df2_round = 2285,
  CODE_FOR_floatv2div2df2_mask = 2286,
  CODE_FOR_floatv2div2df2_mask_round = 2287,
  CODE_FOR_ufloatv2div2df2 = 2288,
  CODE_FOR_ufloatv2div2df2_round = 2289,
  CODE_FOR_ufloatv2div2df2_mask = 2290,
  CODE_FOR_ufloatv2div2df2_mask_round = 2291,
  CODE_FOR_floatv8div8sf2 = 2292,
  CODE_FOR_floatv8div8sf2_round = 2293,
  CODE_FOR_floatv8div8sf2_mask = 2294,
  CODE_FOR_floatv8div8sf2_mask_round = 2295,
  CODE_FOR_ufloatv8div8sf2 = 2296,
  CODE_FOR_ufloatv8div8sf2_round = 2297,
  CODE_FOR_ufloatv8div8sf2_mask = 2298,
  CODE_FOR_ufloatv8div8sf2_mask_round = 2299,
  CODE_FOR_floatv4div4sf2 = 2300,
   CODE_FOR_floatv4div4sf2_round = CODE_FOR_nothing,
  CODE_FOR_floatv4div4sf2_mask = 2301,
   CODE_FOR_floatv4div4sf2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufloatv4div4sf2 = 2302,
   CODE_FOR_ufloatv4div4sf2_round = CODE_FOR_nothing,
  CODE_FOR_ufloatv4div4sf2_mask = 2303,
   CODE_FOR_ufloatv4div4sf2_mask_round = CODE_FOR_nothing,
  CODE_FOR_floatv2div2sf2_mask = 2306,
  CODE_FOR_ufloatv2div2sf2_mask = 2307,
  CODE_FOR_ufloatv8siv8df2 = 2310,
  CODE_FOR_ufloatv8siv8df2_mask = 2311,
  CODE_FOR_ufloatv4siv4df2 = 2312,
  CODE_FOR_ufloatv4siv4df2_mask = 2313,
  CODE_FOR_ufloatv2siv2df2 = 2314,
  CODE_FOR_ufloatv2siv2df2_mask = 2315,
  CODE_FOR_avx512f_cvtdq2pd512_2 = 2316,
  CODE_FOR_avx_cvtdq2pd256_2 = 2317,
  CODE_FOR_sse2_cvtdq2pd = 2318,
  CODE_FOR_sse2_cvtdq2pd_mask = 2319,
  CODE_FOR_avx512f_cvtpd2dq512 = 2320,
  CODE_FOR_avx512f_cvtpd2dq512_round = 2321,
  CODE_FOR_avx512f_cvtpd2dq512_mask = 2322,
  CODE_FOR_avx512f_cvtpd2dq512_mask_round = 2323,
  CODE_FOR_avx_cvtpd2dq256 = 2324,
  CODE_FOR_avx_cvtpd2dq256_mask = 2325,
  CODE_FOR_sse2_cvtpd2dq = 2327,
  CODE_FOR_sse2_cvtpd2dq_mask = 2328,
  CODE_FOR_ufix_notruncv8dfv8si2 = 2329,
  CODE_FOR_ufix_notruncv8dfv8si2_round = 2330,
  CODE_FOR_ufix_notruncv8dfv8si2_mask = 2331,
  CODE_FOR_ufix_notruncv8dfv8si2_mask_round = 2332,
  CODE_FOR_ufix_notruncv4dfv4si2 = 2333,
  CODE_FOR_ufix_notruncv4dfv4si2_round = 2334,
  CODE_FOR_ufix_notruncv4dfv4si2_mask = 2335,
  CODE_FOR_ufix_notruncv4dfv4si2_mask_round = 2336,
  CODE_FOR_ufix_notruncv2dfv2si2 = 2337,
  CODE_FOR_ufix_notruncv2dfv2si2_mask = 2338,
  CODE_FOR_fix_truncv8dfv8si2 = 2339,
  CODE_FOR_fix_truncv8dfv8si2_round = 2340,
  CODE_FOR_fix_truncv8dfv8si2_mask = 2341,
  CODE_FOR_fix_truncv8dfv8si2_mask_round = 2342,
  CODE_FOR_ufix_truncv8dfv8si2 = 2343,
  CODE_FOR_ufix_truncv8dfv8si2_round = 2344,
  CODE_FOR_ufix_truncv8dfv8si2_mask = 2345,
  CODE_FOR_ufix_truncv8dfv8si2_mask_round = 2346,
  CODE_FOR_ufix_truncv2dfv2si2 = 2347,
  CODE_FOR_ufix_truncv2dfv2si2_mask = 2348,
  CODE_FOR_fix_truncv4dfv4si2 = 2349,
  CODE_FOR_fix_truncv4dfv4si2_mask = 2350,
  CODE_FOR_ufix_truncv4dfv4si2 = 2351,
  CODE_FOR_ufix_truncv4dfv4si2_mask = 2352,
  CODE_FOR_fix_truncv8dfv8di2 = 2353,
  CODE_FOR_fix_truncv8dfv8di2_round = 2354,
  CODE_FOR_fix_truncv8dfv8di2_mask = 2355,
  CODE_FOR_fix_truncv8dfv8di2_mask_round = 2356,
  CODE_FOR_ufix_truncv8dfv8di2 = 2357,
  CODE_FOR_ufix_truncv8dfv8di2_round = 2358,
  CODE_FOR_ufix_truncv8dfv8di2_mask = 2359,
  CODE_FOR_ufix_truncv8dfv8di2_mask_round = 2360,
  CODE_FOR_fix_truncv4dfv4di2 = 2361,
   CODE_FOR_fix_truncv4dfv4di2_round = CODE_FOR_nothing,
  CODE_FOR_fix_truncv4dfv4di2_mask = 2362,
   CODE_FOR_fix_truncv4dfv4di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufix_truncv4dfv4di2 = 2363,
   CODE_FOR_ufix_truncv4dfv4di2_round = CODE_FOR_nothing,
  CODE_FOR_ufix_truncv4dfv4di2_mask = 2364,
   CODE_FOR_ufix_truncv4dfv4di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_fix_truncv2dfv2di2 = 2365,
   CODE_FOR_fix_truncv2dfv2di2_round = CODE_FOR_nothing,
  CODE_FOR_fix_truncv2dfv2di2_mask = 2366,
   CODE_FOR_fix_truncv2dfv2di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufix_truncv2dfv2di2 = 2367,
   CODE_FOR_ufix_truncv2dfv2di2_round = CODE_FOR_nothing,
  CODE_FOR_ufix_truncv2dfv2di2_mask = 2368,
   CODE_FOR_ufix_truncv2dfv2di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_fix_notruncv8dfv8di2 = 2369,
  CODE_FOR_fix_notruncv8dfv8di2_round = 2370,
  CODE_FOR_fix_notruncv8dfv8di2_mask = 2371,
  CODE_FOR_fix_notruncv8dfv8di2_mask_round = 2372,
  CODE_FOR_fix_notruncv4dfv4di2 = 2373,
   CODE_FOR_fix_notruncv4dfv4di2_round = CODE_FOR_nothing,
  CODE_FOR_fix_notruncv4dfv4di2_mask = 2374,
   CODE_FOR_fix_notruncv4dfv4di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_fix_notruncv2dfv2di2 = 2375,
   CODE_FOR_fix_notruncv2dfv2di2_round = CODE_FOR_nothing,
  CODE_FOR_fix_notruncv2dfv2di2_mask = 2376,
   CODE_FOR_fix_notruncv2dfv2di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufix_notruncv8dfv8di2 = 2377,
  CODE_FOR_ufix_notruncv8dfv8di2_round = 2378,
  CODE_FOR_ufix_notruncv8dfv8di2_mask = 2379,
  CODE_FOR_ufix_notruncv8dfv8di2_mask_round = 2380,
  CODE_FOR_ufix_notruncv4dfv4di2 = 2381,
   CODE_FOR_ufix_notruncv4dfv4di2_round = CODE_FOR_nothing,
  CODE_FOR_ufix_notruncv4dfv4di2_mask = 2382,
   CODE_FOR_ufix_notruncv4dfv4di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufix_notruncv2dfv2di2 = 2383,
   CODE_FOR_ufix_notruncv2dfv2di2_round = CODE_FOR_nothing,
  CODE_FOR_ufix_notruncv2dfv2di2_mask = 2384,
   CODE_FOR_ufix_notruncv2dfv2di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_fix_truncv8sfv8di2 = 2385,
  CODE_FOR_fix_truncv8sfv8di2_round = 2386,
  CODE_FOR_fix_truncv8sfv8di2_mask = 2387,
  CODE_FOR_fix_truncv8sfv8di2_mask_round = 2388,
  CODE_FOR_ufix_truncv8sfv8di2 = 2389,
  CODE_FOR_ufix_truncv8sfv8di2_round = 2390,
  CODE_FOR_ufix_truncv8sfv8di2_mask = 2391,
  CODE_FOR_ufix_truncv8sfv8di2_mask_round = 2392,
  CODE_FOR_fix_truncv4sfv4di2 = 2393,
   CODE_FOR_fix_truncv4sfv4di2_round = CODE_FOR_nothing,
  CODE_FOR_fix_truncv4sfv4di2_mask = 2394,
   CODE_FOR_fix_truncv4sfv4di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_ufix_truncv4sfv4di2 = 2395,
   CODE_FOR_ufix_truncv4sfv4di2_round = CODE_FOR_nothing,
  CODE_FOR_ufix_truncv4sfv4di2_mask = 2396,
   CODE_FOR_ufix_truncv4sfv4di2_mask_round = CODE_FOR_nothing,
  CODE_FOR_fix_truncv2sfv2di2 = 2397,
  CODE_FOR_fix_truncv2sfv2di2_mask = 2398,
  CODE_FOR_ufix_truncv2sfv2di2 = 2399,
  CODE_FOR_ufix_truncv2sfv2di2_mask = 2400,
  CODE_FOR_ufix_truncv8sfv8si2 = 2401,
  CODE_FOR_ufix_truncv8sfv8si2_mask = 2402,
  CODE_FOR_ufix_truncv4sfv4si2 = 2403,
  CODE_FOR_ufix_truncv4sfv4si2_mask = 2404,
  CODE_FOR_sse2_cvttpd2dq = 2405,
  CODE_FOR_sse2_cvttpd2dq_mask = 2406,
  CODE_FOR_sse2_cvtsd2ss = 2407,
  CODE_FOR_sse2_cvtsd2ss_round = 2408,
  CODE_FOR_sse2_cvtss2sd = 2410,
  CODE_FOR_sse2_cvtss2sd_round = 2411,
  CODE_FOR_avx512f_cvtpd2ps512_mask = 2415,
  CODE_FOR_avx512f_cvtpd2ps512_mask_round = 2416,
  CODE_FOR_avx_cvtpd2ps256 = 2417,
  CODE_FOR_avx_cvtpd2ps256_mask = 2418,
  CODE_FOR_avx512f_cvtps2pd512 = 2421,
  CODE_FOR_avx512f_cvtps2pd512_round = 2422,
  CODE_FOR_avx512f_cvtps2pd512_mask = 2423,
  CODE_FOR_avx512f_cvtps2pd512_mask_round = 2424,
  CODE_FOR_avx_cvtps2pd256 = 2425,
   CODE_FOR_avx_cvtps2pd256_round = CODE_FOR_nothing,
  CODE_FOR_avx_cvtps2pd256_mask = 2426,
   CODE_FOR_avx_cvtps2pd256_mask_round = CODE_FOR_nothing,
  CODE_FOR_vec_unpacks_lo_v16sf = 2428,
  CODE_FOR_avx512bw_cvtb2maskv64qi = 2429,
  CODE_FOR_avx512vl_cvtb2maskv16qi = 2430,
  CODE_FOR_avx512vl_cvtb2maskv32qi = 2431,
  CODE_FOR_avx512bw_cvtw2maskv32hi = 2432,
  CODE_FOR_avx512vl_cvtw2maskv16hi = 2433,
  CODE_FOR_avx512vl_cvtw2maskv8hi = 2434,
  CODE_FOR_avx512f_cvtd2maskv16si = 2435,
  CODE_FOR_avx512vl_cvtd2maskv8si = 2436,
  CODE_FOR_avx512vl_cvtd2maskv4si = 2437,
  CODE_FOR_avx512f_cvtq2maskv8di = 2438,
  CODE_FOR_avx512vl_cvtq2maskv4di = 2439,
  CODE_FOR_avx512vl_cvtq2maskv2di = 2440,
  CODE_FOR_sse2_cvtps2pd = 2453,
  CODE_FOR_sse2_cvtps2pd_mask = 2454,
  CODE_FOR_sse_movhlps = 2455,
  CODE_FOR_sse_movlhps = 2456,
  CODE_FOR_avx512f_unpckhps512_mask = 2458,
  CODE_FOR_avx_unpckhps256 = 2459,
  CODE_FOR_avx_unpckhps256_mask = 2460,
  CODE_FOR_vec_interleave_highv4sf = 2461,
  CODE_FOR_vec_interleave_highv4sf_mask = 2462,
  CODE_FOR_avx512f_unpcklps512_mask = 2464,
  CODE_FOR_avx_unpcklps256 = 2465,
  CODE_FOR_avx_unpcklps256_mask = 2466,
  CODE_FOR_unpcklps128_mask = 2467,
  CODE_FOR_vec_interleave_lowv4sf = 2468,
  CODE_FOR_avx_movshdup256 = 2469,
  CODE_FOR_avx_movshdup256_mask = 2470,
  CODE_FOR_sse3_movshdup = 2471,
  CODE_FOR_sse3_movshdup_mask = 2472,
  CODE_FOR_avx512f_movshdup512_mask = 2474,
  CODE_FOR_avx_movsldup256 = 2475,
  CODE_FOR_avx_movsldup256_mask = 2476,
  CODE_FOR_sse3_movsldup = 2477,
  CODE_FOR_sse3_movsldup_mask = 2478,
  CODE_FOR_avx512f_movsldup512_mask = 2480,
  CODE_FOR_avx_shufps256_1 = 2481,
  CODE_FOR_avx_shufps256_1_mask = 2482,
  CODE_FOR_sse_shufps_v4sf_mask = 2483,
  CODE_FOR_sse_shufps_v4si = 2484,
  CODE_FOR_sse_shufps_v4sf = 2485,
  CODE_FOR_sse_storehps = 2486,
  CODE_FOR_sse_loadhps = 2487,
  CODE_FOR_sse_storelps = 2488,
  CODE_FOR_sse_loadlps = 2489,
  CODE_FOR_sse_movss = 2490,
  CODE_FOR_avx2_vec_dupv8sf = 2491,
  CODE_FOR_avx2_vec_dupv4sf = 2492,
  CODE_FOR_avx2_vec_dupv8sf_1 = 2493,
  CODE_FOR_avx512f_vec_dupv16sf_1 = 2494,
  CODE_FOR_avx512f_vec_dupv8df_1 = 2495,
  CODE_FOR_vec_setv4si_0 = 2499,
  CODE_FOR_vec_setv4sf_0 = 2500,
  CODE_FOR_vec_setv8si_0 = 2502,
  CODE_FOR_vec_setv8sf_0 = 2503,
  CODE_FOR_vec_setv16si_0 = 2504,
  CODE_FOR_vec_setv16sf_0 = 2505,
  CODE_FOR_sse4_1_insertps = 2506,
  CODE_FOR_avx512dq_vextractf64x2_1_maskm = 2510,
  CODE_FOR_avx512dq_vextracti64x2_1_maskm = 2511,
  CODE_FOR_avx512f_vextractf32x4_1_maskm = 2512,
  CODE_FOR_avx512f_vextracti32x4_1_maskm = 2513,
  CODE_FOR_avx512dq_vextractf64x2_1_mask = 2515,
  CODE_FOR_avx512dq_vextracti64x2_1_mask = 2517,
  CODE_FOR_avx512f_vextractf32x4_1_mask = 2519,
  CODE_FOR_avx512f_vextracti32x4_1_mask = 2521,
  CODE_FOR_vec_extract_lo_v8df_maskm = 2522,
  CODE_FOR_vec_extract_lo_v8di_maskm = 2523,
  CODE_FOR_vec_extract_lo_v8df = 2524,
  CODE_FOR_vec_extract_lo_v8df_mask = 2525,
  CODE_FOR_vec_extract_lo_v8di = 2526,
  CODE_FOR_vec_extract_lo_v8di_mask = 2527,
  CODE_FOR_vec_extract_hi_v8df_maskm = 2528,
  CODE_FOR_vec_extract_hi_v8di_maskm = 2529,
  CODE_FOR_vec_extract_hi_v8df = 2530,
  CODE_FOR_vec_extract_hi_v8df_mask = 2531,
  CODE_FOR_vec_extract_hi_v8di = 2532,
  CODE_FOR_vec_extract_hi_v8di_mask = 2533,
  CODE_FOR_vec_extract_hi_v16sf_maskm = 2534,
  CODE_FOR_vec_extract_hi_v16si_maskm = 2535,
  CODE_FOR_vec_extract_hi_v16sf = 2536,
  CODE_FOR_vec_extract_hi_v16sf_mask = 2537,
  CODE_FOR_vec_extract_hi_v16si = 2538,
  CODE_FOR_vec_extract_hi_v16si_mask = 2539,
  CODE_FOR_vec_extract_lo_v16sf = 2540,
  CODE_FOR_vec_extract_lo_v16sf_mask = 2541,
  CODE_FOR_vec_extract_lo_v16si = 2542,
  CODE_FOR_vec_extract_lo_v16si_mask = 2543,
  CODE_FOR_vec_extract_lo_v4di = 2544,
  CODE_FOR_vec_extract_lo_v4di_mask = 2545,
  CODE_FOR_vec_extract_lo_v4df = 2546,
  CODE_FOR_vec_extract_lo_v4df_mask = 2547,
  CODE_FOR_vec_extract_hi_v4di = 2548,
  CODE_FOR_vec_extract_hi_v4di_mask = 2549,
  CODE_FOR_vec_extract_hi_v4df = 2550,
  CODE_FOR_vec_extract_hi_v4df_mask = 2551,
  CODE_FOR_vec_extract_lo_v8si = 2552,
  CODE_FOR_vec_extract_lo_v8si_mask = 2553,
  CODE_FOR_vec_extract_lo_v8sf = 2554,
  CODE_FOR_vec_extract_lo_v8sf_mask = 2555,
  CODE_FOR_vec_extract_lo_v8si_maskm = 2556,
  CODE_FOR_vec_extract_lo_v8sf_maskm = 2557,
  CODE_FOR_vec_extract_hi_v8si_maskm = 2558,
  CODE_FOR_vec_extract_hi_v8sf_maskm = 2559,
  CODE_FOR_vec_extract_hi_v8si_mask = 2560,
  CODE_FOR_vec_extract_hi_v8sf_mask = 2561,
  CODE_FOR_vec_extract_hi_v8si = 2562,
  CODE_FOR_vec_extract_hi_v8sf = 2563,
  CODE_FOR_vec_extract_lo_v32hi = 2564,
  CODE_FOR_vec_extract_hi_v32hi = 2565,
  CODE_FOR_vec_extract_lo_v16hi = 2566,
  CODE_FOR_vec_extract_hi_v16hi = 2567,
  CODE_FOR_vec_extract_lo_v64qi = 2568,
  CODE_FOR_vec_extract_hi_v64qi = 2569,
  CODE_FOR_vec_extract_lo_v32qi = 2570,
  CODE_FOR_vec_extract_hi_v32qi = 2571,
  CODE_FOR_avx512f_unpckhpd512_mask = 2573,
  CODE_FOR_avx_unpckhpd256 = 2574,
  CODE_FOR_avx_unpckhpd256_mask = 2575,
  CODE_FOR_avx512vl_unpckhpd128_mask = 2576,
  CODE_FOR_avx512vl_unpcklpd128_mask = 2582,
  CODE_FOR_avx512f_vmscalefv4sf = 2584,
  CODE_FOR_avx512f_vmscalefv4sf_round = 2585,
  CODE_FOR_avx512f_vmscalefv4sf_mask = 2586,
  CODE_FOR_avx512f_vmscalefv4sf_mask_round = 2587,
  CODE_FOR_avx512f_vmscalefv2df = 2588,
  CODE_FOR_avx512f_vmscalefv2df_round = 2589,
  CODE_FOR_avx512f_vmscalefv2df_mask = 2590,
  CODE_FOR_avx512f_vmscalefv2df_mask_round = 2591,
  CODE_FOR_avx512f_scalefv16sf = 2592,
  CODE_FOR_avx512f_scalefv16sf_round = 2593,
  CODE_FOR_avx512f_scalefv16sf_mask = 2594,
  CODE_FOR_avx512f_scalefv16sf_mask_round = 2595,
  CODE_FOR_avx512vl_scalefv8sf = 2596,
  CODE_FOR_avx512vl_scalefv8sf_round = 2597,
  CODE_FOR_avx512vl_scalefv8sf_mask = 2598,
  CODE_FOR_avx512vl_scalefv8sf_mask_round = 2599,
  CODE_FOR_avx512vl_scalefv4sf = 2600,
  CODE_FOR_avx512vl_scalefv4sf_round = 2601,
  CODE_FOR_avx512vl_scalefv4sf_mask = 2602,
  CODE_FOR_avx512vl_scalefv4sf_mask_round = 2603,
  CODE_FOR_avx512f_scalefv8df = 2604,
  CODE_FOR_avx512f_scalefv8df_round = 2605,
  CODE_FOR_avx512f_scalefv8df_mask = 2606,
  CODE_FOR_avx512f_scalefv8df_mask_round = 2607,
  CODE_FOR_avx512vl_scalefv4df = 2608,
  CODE_FOR_avx512vl_scalefv4df_round = 2609,
  CODE_FOR_avx512vl_scalefv4df_mask = 2610,
  CODE_FOR_avx512vl_scalefv4df_mask_round = 2611,
  CODE_FOR_avx512vl_scalefv2df = 2612,
  CODE_FOR_avx512vl_scalefv2df_round = 2613,
  CODE_FOR_avx512vl_scalefv2df_mask = 2614,
  CODE_FOR_avx512vl_scalefv2df_mask_round = 2615,
  CODE_FOR_avx512f_vternlogv16si = 2616,
  CODE_FOR_avx512f_vternlogv16si_maskz_1 = 2617,
  CODE_FOR_avx512vl_vternlogv8si = 2618,
  CODE_FOR_avx512vl_vternlogv8si_maskz_1 = 2619,
  CODE_FOR_avx512vl_vternlogv4si = 2620,
  CODE_FOR_avx512vl_vternlogv4si_maskz_1 = 2621,
  CODE_FOR_avx512f_vternlogv8di = 2622,
  CODE_FOR_avx512f_vternlogv8di_maskz_1 = 2623,
  CODE_FOR_avx512vl_vternlogv4di = 2624,
  CODE_FOR_avx512vl_vternlogv4di_maskz_1 = 2625,
  CODE_FOR_avx512vl_vternlogv2di = 2626,
  CODE_FOR_avx512vl_vternlogv2di_maskz_1 = 2627,
  CODE_FOR_avx512f_vternlogv16si_mask = 2628,
  CODE_FOR_avx512vl_vternlogv8si_mask = 2629,
  CODE_FOR_avx512vl_vternlogv4si_mask = 2630,
  CODE_FOR_avx512f_vternlogv8di_mask = 2631,
  CODE_FOR_avx512vl_vternlogv4di_mask = 2632,
  CODE_FOR_avx512vl_vternlogv2di_mask = 2633,
  CODE_FOR_avx512f_getexpv16sf = 2634,
  CODE_FOR_avx512f_getexpv16sf_round = 2635,
  CODE_FOR_avx512f_getexpv16sf_mask = 2636,
  CODE_FOR_avx512f_getexpv16sf_mask_round = 2637,
  CODE_FOR_avx512vl_getexpv8sf = 2638,
  CODE_FOR_avx512vl_getexpv8sf_round = 2639,
  CODE_FOR_avx512vl_getexpv8sf_mask = 2640,
  CODE_FOR_avx512vl_getexpv8sf_mask_round = 2641,
  CODE_FOR_avx512vl_getexpv4sf = 2642,
  CODE_FOR_avx512vl_getexpv4sf_round = 2643,
  CODE_FOR_avx512vl_getexpv4sf_mask = 2644,
  CODE_FOR_avx512vl_getexpv4sf_mask_round = 2645,
  CODE_FOR_avx512f_getexpv8df = 2646,
  CODE_FOR_avx512f_getexpv8df_round = 2647,
  CODE_FOR_avx512f_getexpv8df_mask = 2648,
  CODE_FOR_avx512f_getexpv8df_mask_round = 2649,
  CODE_FOR_avx512vl_getexpv4df = 2650,
  CODE_FOR_avx512vl_getexpv4df_round = 2651,
  CODE_FOR_avx512vl_getexpv4df_mask = 2652,
  CODE_FOR_avx512vl_getexpv4df_mask_round = 2653,
  CODE_FOR_avx512vl_getexpv2df = 2654,
  CODE_FOR_avx512vl_getexpv2df_round = 2655,
  CODE_FOR_avx512vl_getexpv2df_mask = 2656,
  CODE_FOR_avx512vl_getexpv2df_mask_round = 2657,
  CODE_FOR_avx512f_sgetexpv4sf = 2658,
  CODE_FOR_avx512f_sgetexpv4sf_mask = 2659,
  CODE_FOR_avx512f_sgetexpv4sf_round = 2660,
  CODE_FOR_avx512f_sgetexpv4sf_mask_round = 2661,
  CODE_FOR_avx512f_sgetexpv2df = 2662,
  CODE_FOR_avx512f_sgetexpv2df_mask = 2663,
  CODE_FOR_avx512f_sgetexpv2df_round = 2664,
  CODE_FOR_avx512f_sgetexpv2df_mask_round = 2665,
  CODE_FOR_avx512f_alignv16si_mask = 2667,
  CODE_FOR_avx512vl_alignv8si_mask = 2669,
  CODE_FOR_avx512vl_alignv4si_mask = 2671,
  CODE_FOR_avx512f_alignv8di_mask = 2673,
  CODE_FOR_avx512vl_alignv4di_mask = 2675,
  CODE_FOR_avx512vl_alignv2di_mask = 2677,
  CODE_FOR_avx512f_fixupimmv16sf = 2678,
  CODE_FOR_avx512f_fixupimmv16sf_round = 2679,
  CODE_FOR_avx512f_fixupimmv16sf_maskz_1 = 2680,
  CODE_FOR_avx512f_fixupimmv16sf_maskz_1_round = 2681,
  CODE_FOR_avx512vl_fixupimmv8sf = 2682,
  CODE_FOR_avx512vl_fixupimmv8sf_round = 2683,
  CODE_FOR_avx512vl_fixupimmv8sf_maskz_1 = 2684,
  CODE_FOR_avx512vl_fixupimmv8sf_maskz_1_round = 2685,
  CODE_FOR_avx512vl_fixupimmv4sf = 2686,
  CODE_FOR_avx512vl_fixupimmv4sf_round = 2687,
  CODE_FOR_avx512vl_fixupimmv4sf_maskz_1 = 2688,
  CODE_FOR_avx512vl_fixupimmv4sf_maskz_1_round = 2689,
  CODE_FOR_avx512f_fixupimmv8df = 2690,
  CODE_FOR_avx512f_fixupimmv8df_round = 2691,
  CODE_FOR_avx512f_fixupimmv8df_maskz_1 = 2692,
  CODE_FOR_avx512f_fixupimmv8df_maskz_1_round = 2693,
  CODE_FOR_avx512vl_fixupimmv4df = 2694,
  CODE_FOR_avx512vl_fixupimmv4df_round = 2695,
  CODE_FOR_avx512vl_fixupimmv4df_maskz_1 = 2696,
  CODE_FOR_avx512vl_fixupimmv4df_maskz_1_round = 2697,
  CODE_FOR_avx512vl_fixupimmv2df = 2698,
  CODE_FOR_avx512vl_fixupimmv2df_round = 2699,
  CODE_FOR_avx512vl_fixupimmv2df_maskz_1 = 2700,
  CODE_FOR_avx512vl_fixupimmv2df_maskz_1_round = 2701,
  CODE_FOR_avx512f_fixupimmv16sf_mask = 2702,
  CODE_FOR_avx512f_fixupimmv16sf_mask_round = 2703,
  CODE_FOR_avx512vl_fixupimmv8sf_mask = 2704,
  CODE_FOR_avx512vl_fixupimmv8sf_mask_round = 2705,
  CODE_FOR_avx512vl_fixupimmv4sf_mask = 2706,
  CODE_FOR_avx512vl_fixupimmv4sf_mask_round = 2707,
  CODE_FOR_avx512f_fixupimmv8df_mask = 2708,
  CODE_FOR_avx512f_fixupimmv8df_mask_round = 2709,
  CODE_FOR_avx512vl_fixupimmv4df_mask = 2710,
  CODE_FOR_avx512vl_fixupimmv4df_mask_round = 2711,
  CODE_FOR_avx512vl_fixupimmv2df_mask = 2712,
  CODE_FOR_avx512vl_fixupimmv2df_mask_round = 2713,
  CODE_FOR_avx512f_sfixupimmv4sf = 2714,
  CODE_FOR_avx512f_sfixupimmv4sf_round = 2715,
  CODE_FOR_avx512f_sfixupimmv4sf_maskz_1 = 2716,
  CODE_FOR_avx512f_sfixupimmv4sf_maskz_1_round = 2717,
  CODE_FOR_avx512f_sfixupimmv2df = 2718,
  CODE_FOR_avx512f_sfixupimmv2df_round = 2719,
  CODE_FOR_avx512f_sfixupimmv2df_maskz_1 = 2720,
  CODE_FOR_avx512f_sfixupimmv2df_maskz_1_round = 2721,
  CODE_FOR_avx512f_sfixupimmv4sf_mask = 2722,
  CODE_FOR_avx512f_sfixupimmv4sf_mask_round = 2723,
  CODE_FOR_avx512f_sfixupimmv2df_mask = 2724,
  CODE_FOR_avx512f_sfixupimmv2df_mask_round = 2725,
  CODE_FOR_avx512f_rndscalev16sf = 2726,
  CODE_FOR_avx512f_rndscalev16sf_round = 2727,
  CODE_FOR_avx512f_rndscalev16sf_mask = 2728,
  CODE_FOR_avx512f_rndscalev16sf_mask_round = 2729,
  CODE_FOR_avx512vl_rndscalev8sf = 2730,
  CODE_FOR_avx512vl_rndscalev8sf_round = 2731,
  CODE_FOR_avx512vl_rndscalev8sf_mask = 2732,
  CODE_FOR_avx512vl_rndscalev8sf_mask_round = 2733,
  CODE_FOR_avx512vl_rndscalev4sf = 2734,
  CODE_FOR_avx512vl_rndscalev4sf_round = 2735,
  CODE_FOR_avx512vl_rndscalev4sf_mask = 2736,
  CODE_FOR_avx512vl_rndscalev4sf_mask_round = 2737,
  CODE_FOR_avx512f_rndscalev8df = 2738,
  CODE_FOR_avx512f_rndscalev8df_round = 2739,
  CODE_FOR_avx512f_rndscalev8df_mask = 2740,
  CODE_FOR_avx512f_rndscalev8df_mask_round = 2741,
  CODE_FOR_avx512vl_rndscalev4df = 2742,
  CODE_FOR_avx512vl_rndscalev4df_round = 2743,
  CODE_FOR_avx512vl_rndscalev4df_mask = 2744,
  CODE_FOR_avx512vl_rndscalev4df_mask_round = 2745,
  CODE_FOR_avx512vl_rndscalev2df = 2746,
  CODE_FOR_avx512vl_rndscalev2df_round = 2747,
  CODE_FOR_avx512vl_rndscalev2df_mask = 2748,
  CODE_FOR_avx512vl_rndscalev2df_mask_round = 2749,
  CODE_FOR_avx512f_rndscalev4sf = 2750,
  CODE_FOR_avx512f_rndscalev4sf_round = 2751,
  CODE_FOR_avx512f_rndscalev2df = 2752,
  CODE_FOR_avx512f_rndscalev2df_round = 2753,
  CODE_FOR_avx512f_shufps512_1 = 2754,
  CODE_FOR_avx512f_shufps512_1_mask = 2755,
  CODE_FOR_avx512f_shufpd512_1 = 2756,
  CODE_FOR_avx512f_shufpd512_1_mask = 2757,
  CODE_FOR_avx_shufpd256_1 = 2758,
  CODE_FOR_avx_shufpd256_1_mask = 2759,
  CODE_FOR_sse2_shufpd_v2df_mask = 2760,
  CODE_FOR_avx2_interleave_highv4di = 2761,
  CODE_FOR_avx2_interleave_highv4di_mask = 2762,
  CODE_FOR_avx512f_interleave_highv8di_mask = 2764,
  CODE_FOR_vec_interleave_highv2di = 2765,
  CODE_FOR_vec_interleave_highv2di_mask = 2766,
  CODE_FOR_avx2_interleave_lowv4di = 2767,
  CODE_FOR_avx2_interleave_lowv4di_mask = 2768,
  CODE_FOR_avx512f_interleave_lowv8di_mask = 2770,
  CODE_FOR_vec_interleave_lowv2di = 2771,
  CODE_FOR_vec_interleave_lowv2di_mask = 2772,
  CODE_FOR_sse2_shufpd_v2di = 2773,
  CODE_FOR_sse2_shufpd_v2df = 2774,
  CODE_FOR_sse2_storehpd = 2775,
  CODE_FOR_sse2_storelpd = 2777,
  CODE_FOR_sse2_loadhpd = 2779,
  CODE_FOR_sse2_loadlpd = 2780,
  CODE_FOR_sse2_movsd = 2781,
  CODE_FOR_vec_dupv2df = 2782,
  CODE_FOR_vec_dupv2df_mask = 2783,
  CODE_FOR_vec_concatv2df = 2784,
  CODE_FOR_vec_setv8df_0 = 2785,
  CODE_FOR_vec_setv4df_0 = 2786,
  CODE_FOR_avx512f_ss_truncatev16siv16qi2_mask = 2799,
  CODE_FOR_avx512f_truncatev16siv16qi2_mask = 2800,
  CODE_FOR_avx512f_us_truncatev16siv16qi2_mask = 2801,
  CODE_FOR_avx512f_ss_truncatev16siv16hi2_mask = 2802,
  CODE_FOR_avx512f_truncatev16siv16hi2_mask = 2803,
  CODE_FOR_avx512f_us_truncatev16siv16hi2_mask = 2804,
  CODE_FOR_avx512f_ss_truncatev8div8si2_mask = 2805,
  CODE_FOR_avx512f_truncatev8div8si2_mask = 2806,
  CODE_FOR_avx512f_us_truncatev8div8si2_mask = 2807,
  CODE_FOR_avx512f_ss_truncatev8div8hi2_mask = 2808,
  CODE_FOR_avx512f_truncatev8div8hi2_mask = 2809,
  CODE_FOR_avx512f_us_truncatev8div8hi2_mask = 2810,
  CODE_FOR_avx512bw_ss_truncatev32hiv32qi2 = 2811,
  CODE_FOR_avx512bw_truncatev32hiv32qi2 = 2812,
  CODE_FOR_avx512bw_us_truncatev32hiv32qi2 = 2813,
  CODE_FOR_avx512bw_ss_truncatev32hiv32qi2_mask = 2814,
  CODE_FOR_avx512bw_truncatev32hiv32qi2_mask = 2815,
  CODE_FOR_avx512bw_us_truncatev32hiv32qi2_mask = 2816,
  CODE_FOR_avx512vl_ss_truncatev4div4si2_mask = 2826,
  CODE_FOR_avx512vl_truncatev4div4si2_mask = 2827,
  CODE_FOR_avx512vl_us_truncatev4div4si2_mask = 2828,
  CODE_FOR_avx512vl_ss_truncatev8siv8hi2_mask = 2829,
  CODE_FOR_avx512vl_truncatev8siv8hi2_mask = 2830,
  CODE_FOR_avx512vl_us_truncatev8siv8hi2_mask = 2831,
  CODE_FOR_avx512vl_ss_truncatev16hiv16qi2_mask = 2832,
  CODE_FOR_avx512vl_truncatev16hiv16qi2_mask = 2833,
  CODE_FOR_avx512vl_us_truncatev16hiv16qi2_mask = 2834,
  CODE_FOR_avx512vl_ss_truncatev2div2qi2_mask = 2853,
  CODE_FOR_avx512vl_truncatev2div2qi2_mask = 2854,
  CODE_FOR_avx512vl_us_truncatev2div2qi2_mask = 2855,
  CODE_FOR_avx512vl_ss_truncatev2div2qi2_mask_store = 2859,
  CODE_FOR_avx512vl_truncatev2div2qi2_mask_store = 2860,
  CODE_FOR_avx512vl_us_truncatev2div2qi2_mask_store = 2861,
  CODE_FOR_avx512vl_ss_truncatev4siv4qi2_mask = 2868,
  CODE_FOR_avx512vl_truncatev4siv4qi2_mask = 2869,
  CODE_FOR_avx512vl_us_truncatev4siv4qi2_mask = 2870,
  CODE_FOR_avx512vl_ss_truncatev4div4qi2_mask = 2871,
  CODE_FOR_avx512vl_truncatev4div4qi2_mask = 2872,
  CODE_FOR_avx512vl_us_truncatev4div4qi2_mask = 2873,
  CODE_FOR_avx512vl_ss_truncatev4siv4qi2_mask_store = 2880,
  CODE_FOR_avx512vl_truncatev4siv4qi2_mask_store = 2881,
  CODE_FOR_avx512vl_us_truncatev4siv4qi2_mask_store = 2882,
  CODE_FOR_avx512vl_ss_truncatev4div4qi2_mask_store = 2883,
  CODE_FOR_avx512vl_truncatev4div4qi2_mask_store = 2884,
  CODE_FOR_avx512vl_us_truncatev4div4qi2_mask_store = 2885,
  CODE_FOR_avx512vl_ss_truncatev8hiv8qi2_mask = 2892,
  CODE_FOR_avx512vl_truncatev8hiv8qi2_mask = 2893,
  CODE_FOR_avx512vl_us_truncatev8hiv8qi2_mask = 2894,
  CODE_FOR_avx512vl_ss_truncatev8siv8qi2_mask = 2895,
  CODE_FOR_avx512vl_truncatev8siv8qi2_mask = 2896,
  CODE_FOR_avx512vl_us_truncatev8siv8qi2_mask = 2897,
  CODE_FOR_avx512vl_ss_truncatev8hiv8qi2_mask_store = 2904,
  CODE_FOR_avx512vl_truncatev8hiv8qi2_mask_store = 2905,
  CODE_FOR_avx512vl_us_truncatev8hiv8qi2_mask_store = 2906,
  CODE_FOR_avx512vl_ss_truncatev8siv8qi2_mask_store = 2907,
  CODE_FOR_avx512vl_truncatev8siv8qi2_mask_store = 2908,
  CODE_FOR_avx512vl_us_truncatev8siv8qi2_mask_store = 2909,
  CODE_FOR_avx512vl_ss_truncatev4siv4hi2_mask = 2925,
  CODE_FOR_avx512vl_truncatev4siv4hi2_mask = 2926,
  CODE_FOR_avx512vl_us_truncatev4siv4hi2_mask = 2927,
  CODE_FOR_avx512vl_ss_truncatev4div4hi2_mask = 2928,
  CODE_FOR_avx512vl_truncatev4div4hi2_mask = 2929,
  CODE_FOR_avx512vl_us_truncatev4div4hi2_mask = 2930,
  CODE_FOR_avx512vl_ss_truncatev4siv4hi2_mask_store = 2937,
  CODE_FOR_avx512vl_truncatev4siv4hi2_mask_store = 2938,
  CODE_FOR_avx512vl_us_truncatev4siv4hi2_mask_store = 2939,
  CODE_FOR_avx512vl_ss_truncatev4div4hi2_mask_store = 2940,
  CODE_FOR_avx512vl_truncatev4div4hi2_mask_store = 2941,
  CODE_FOR_avx512vl_us_truncatev4div4hi2_mask_store = 2942,
  CODE_FOR_avx512vl_ss_truncatev2div2hi2_mask = 2946,
  CODE_FOR_avx512vl_truncatev2div2hi2_mask = 2947,
  CODE_FOR_avx512vl_us_truncatev2div2hi2_mask = 2948,
  CODE_FOR_avx512vl_ss_truncatev2div2hi2_mask_store = 2952,
  CODE_FOR_avx512vl_truncatev2div2hi2_mask_store = 2953,
  CODE_FOR_avx512vl_us_truncatev2div2hi2_mask_store = 2954,
  CODE_FOR_avx512vl_ss_truncatev2div2si2_mask = 2961,
  CODE_FOR_avx512vl_truncatev2div2si2_mask = 2962,
  CODE_FOR_avx512vl_us_truncatev2div2si2_mask = 2963,
  CODE_FOR_avx512vl_ss_truncatev2div2si2_mask_store = 2967,
  CODE_FOR_avx512vl_truncatev2div2si2_mask_store = 2968,
  CODE_FOR_avx512vl_us_truncatev2div2si2_mask_store = 2969,
  CODE_FOR_avx512f_ss_truncatev8div16qi2_mask = 2976,
  CODE_FOR_avx512f_truncatev8div16qi2_mask = 2977,
  CODE_FOR_avx512f_us_truncatev8div16qi2_mask = 2978,
  CODE_FOR_avx512f_ss_truncatev8div16qi2_mask_store = 2982,
  CODE_FOR_avx512f_truncatev8div16qi2_mask_store = 2983,
  CODE_FOR_avx512f_us_truncatev8div16qi2_mask_store = 2984,
  CODE_FOR_avx512bw_pmaddwd512v32hi = 3135,
  CODE_FOR_avx512bw_pmaddwd512v32hi_mask = 3136,
  CODE_FOR_avx512bw_pmaddwd512v16hi = 3137,
  CODE_FOR_avx512bw_pmaddwd512v16hi_mask = 3138,
  CODE_FOR_avx512bw_pmaddwd512v8hi = 3139,
  CODE_FOR_avx512bw_pmaddwd512v8hi_mask = 3140,
  CODE_FOR_avx512dq_mulv8di3 = 3143,
  CODE_FOR_avx512dq_mulv8di3_mask = 3144,
  CODE_FOR_avx512dq_mulv4di3 = 3145,
  CODE_FOR_avx512dq_mulv4di3_mask = 3146,
  CODE_FOR_avx512dq_mulv2di3 = 3147,
  CODE_FOR_avx512dq_mulv2di3_mask = 3148,
  CODE_FOR_ashrv16hi3_mask = 3156,
  CODE_FOR_ashrv8hi3_mask = 3158,
  CODE_FOR_ashrv8si3_mask = 3160,
  CODE_FOR_ashrv4si3_mask = 3162,
  CODE_FOR_ashrv2di3_mask = 3164,
  CODE_FOR_ashrv16hi3 = 3165,
  CODE_FOR_ashrv8hi3 = 3166,
  CODE_FOR_ashrv8si3 = 3167,
  CODE_FOR_ashrv4si3 = 3168,
  CODE_FOR_ashrv32hi3 = 3169,
  CODE_FOR_ashrv32hi3_mask = 3170,
  CODE_FOR_ashrv4di3 = 3171,
  CODE_FOR_ashrv4di3_mask = 3172,
  CODE_FOR_ashrv16si3 = 3173,
  CODE_FOR_ashrv16si3_mask = 3174,
  CODE_FOR_ashrv8di3 = 3175,
  CODE_FOR_ashrv8di3_mask = 3176,
  CODE_FOR_ashlv16hi3_mask = 3178,
  CODE_FOR_lshrv16hi3_mask = 3180,
  CODE_FOR_ashlv8hi3_mask = 3182,
  CODE_FOR_lshrv8hi3_mask = 3184,
  CODE_FOR_ashlv8si3_mask = 3186,
  CODE_FOR_lshrv8si3_mask = 3188,
  CODE_FOR_ashlv4si3_mask = 3190,
  CODE_FOR_lshrv4si3_mask = 3192,
  CODE_FOR_ashlv4di3_mask = 3194,
  CODE_FOR_lshrv4di3_mask = 3196,
  CODE_FOR_ashlv2di3_mask = 3198,
  CODE_FOR_lshrv2di3_mask = 3200,
  CODE_FOR_ashlv16hi3 = 3201,
  CODE_FOR_lshrv16hi3 = 3202,
  CODE_FOR_ashlv8hi3 = 3203,
  CODE_FOR_lshrv8hi3 = 3204,
  CODE_FOR_ashlv8si3 = 3205,
  CODE_FOR_lshrv8si3 = 3206,
  CODE_FOR_ashlv4si3 = 3207,
  CODE_FOR_lshrv4si3 = 3208,
  CODE_FOR_ashlv4di3 = 3209,
  CODE_FOR_lshrv4di3 = 3210,
  CODE_FOR_ashlv2di3 = 3211,
  CODE_FOR_lshrv2di3 = 3212,
  CODE_FOR_ashlv32hi3 = 3213,
  CODE_FOR_ashlv32hi3_mask = 3214,
  CODE_FOR_lshrv32hi3 = 3215,
  CODE_FOR_lshrv32hi3_mask = 3216,
  CODE_FOR_ashlv16si3 = 3217,
  CODE_FOR_ashlv16si3_mask = 3218,
  CODE_FOR_lshrv16si3 = 3219,
  CODE_FOR_lshrv16si3_mask = 3220,
  CODE_FOR_ashlv8di3 = 3221,
  CODE_FOR_ashlv8di3_mask = 3222,
  CODE_FOR_lshrv8di3 = 3223,
  CODE_FOR_lshrv8di3_mask = 3224,
  CODE_FOR_avx512bw_ashlv4ti3 = 3225,
  CODE_FOR_avx512bw_lshrv4ti3 = 3226,
  CODE_FOR_avx512bw_ashlv2ti3 = 3227,
  CODE_FOR_avx512bw_lshrv2ti3 = 3228,
  CODE_FOR_avx512bw_ashlv1ti3 = 3229,
  CODE_FOR_avx512bw_lshrv1ti3 = 3230,
  CODE_FOR_avx2_ashlv2ti3 = 3231,
  CODE_FOR_avx2_lshrv2ti3 = 3232,
  CODE_FOR_sse2_ashlv1ti3 = 3233,
  CODE_FOR_sse2_lshrv1ti3 = 3234,
  CODE_FOR_avx512f_rolvv16si = 3235,
  CODE_FOR_avx512f_rolvv16si_mask = 3236,
  CODE_FOR_avx512f_rorvv16si = 3237,
  CODE_FOR_avx512f_rorvv16si_mask = 3238,
  CODE_FOR_avx512vl_rolvv8si = 3239,
  CODE_FOR_avx512vl_rolvv8si_mask = 3240,
  CODE_FOR_avx512vl_rorvv8si = 3241,
  CODE_FOR_avx512vl_rorvv8si_mask = 3242,
  CODE_FOR_avx512vl_rolvv4si = 3243,
  CODE_FOR_avx512vl_rolvv4si_mask = 3244,
  CODE_FOR_avx512vl_rorvv4si = 3245,
  CODE_FOR_avx512vl_rorvv4si_mask = 3246,
  CODE_FOR_avx512f_rolvv8di = 3247,
  CODE_FOR_avx512f_rolvv8di_mask = 3248,
  CODE_FOR_avx512f_rorvv8di = 3249,
  CODE_FOR_avx512f_rorvv8di_mask = 3250,
  CODE_FOR_avx512vl_rolvv4di = 3251,
  CODE_FOR_avx512vl_rolvv4di_mask = 3252,
  CODE_FOR_avx512vl_rorvv4di = 3253,
  CODE_FOR_avx512vl_rorvv4di_mask = 3254,
  CODE_FOR_avx512vl_rolvv2di = 3255,
  CODE_FOR_avx512vl_rolvv2di_mask = 3256,
  CODE_FOR_avx512vl_rorvv2di = 3257,
  CODE_FOR_avx512vl_rorvv2di_mask = 3258,
  CODE_FOR_avx512f_rolv16si = 3259,
  CODE_FOR_avx512f_rolv16si_mask = 3260,
  CODE_FOR_avx512f_rorv16si = 3261,
  CODE_FOR_avx512f_rorv16si_mask = 3262,
  CODE_FOR_avx512vl_rolv8si = 3263,
  CODE_FOR_avx512vl_rolv8si_mask = 3264,
  CODE_FOR_avx512vl_rorv8si = 3265,
  CODE_FOR_avx512vl_rorv8si_mask = 3266,
  CODE_FOR_avx512vl_rolv4si = 3267,
  CODE_FOR_avx512vl_rolv4si_mask = 3268,
  CODE_FOR_avx512vl_rorv4si = 3269,
  CODE_FOR_avx512vl_rorv4si_mask = 3270,
  CODE_FOR_avx512f_rolv8di = 3271,
  CODE_FOR_avx512f_rolv8di_mask = 3272,
  CODE_FOR_avx512f_rorv8di = 3273,
  CODE_FOR_avx512f_rorv8di_mask = 3274,
  CODE_FOR_avx512vl_rolv4di = 3275,
  CODE_FOR_avx512vl_rolv4di_mask = 3276,
  CODE_FOR_avx512vl_rorv4di = 3277,
  CODE_FOR_avx512vl_rorv4di_mask = 3278,
  CODE_FOR_avx512vl_rolv2di = 3279,
  CODE_FOR_avx512vl_rolv2di_mask = 3280,
  CODE_FOR_avx512vl_rorv2di = 3281,
  CODE_FOR_avx512vl_rorv2di_mask = 3282,
  CODE_FOR_smaxv64qi3_mask = 3344,
  CODE_FOR_sminv64qi3_mask = 3346,
  CODE_FOR_umaxv64qi3_mask = 3348,
  CODE_FOR_uminv64qi3_mask = 3350,
  CODE_FOR_smaxv16qi3_mask = 3352,
  CODE_FOR_sminv16qi3_mask = 3354,
  CODE_FOR_umaxv16qi3_mask = 3356,
  CODE_FOR_uminv16qi3_mask = 3358,
  CODE_FOR_smaxv32qi3_mask = 3360,
  CODE_FOR_sminv32qi3_mask = 3362,
  CODE_FOR_umaxv32qi3_mask = 3364,
  CODE_FOR_uminv32qi3_mask = 3366,
  CODE_FOR_smaxv32hi3_mask = 3368,
  CODE_FOR_sminv32hi3_mask = 3370,
  CODE_FOR_umaxv32hi3_mask = 3372,
  CODE_FOR_uminv32hi3_mask = 3374,
  CODE_FOR_smaxv16hi3_mask = 3376,
  CODE_FOR_sminv16hi3_mask = 3378,
  CODE_FOR_umaxv16hi3_mask = 3380,
  CODE_FOR_uminv16hi3_mask = 3382,
  CODE_FOR_smaxv8hi3_mask = 3384,
  CODE_FOR_sminv8hi3_mask = 3386,
  CODE_FOR_umaxv8hi3_mask = 3388,
  CODE_FOR_uminv8hi3_mask = 3390,
  CODE_FOR_avx512bw_eqv64qi3_1 = 3415,
  CODE_FOR_avx512bw_eqv64qi3_mask_1 = 3416,
  CODE_FOR_avx512vl_eqv16qi3_1 = 3417,
  CODE_FOR_avx512vl_eqv16qi3_mask_1 = 3418,
  CODE_FOR_avx512vl_eqv32qi3_1 = 3419,
  CODE_FOR_avx512vl_eqv32qi3_mask_1 = 3420,
  CODE_FOR_avx512bw_eqv32hi3_1 = 3421,
  CODE_FOR_avx512bw_eqv32hi3_mask_1 = 3422,
  CODE_FOR_avx512vl_eqv16hi3_1 = 3423,
  CODE_FOR_avx512vl_eqv16hi3_mask_1 = 3424,
  CODE_FOR_avx512vl_eqv8hi3_1 = 3425,
  CODE_FOR_avx512vl_eqv8hi3_mask_1 = 3426,
  CODE_FOR_avx512f_eqv16si3_1 = 3427,
  CODE_FOR_avx512f_eqv16si3_mask_1 = 3428,
  CODE_FOR_avx512vl_eqv8si3_1 = 3429,
  CODE_FOR_avx512vl_eqv8si3_mask_1 = 3430,
  CODE_FOR_avx512vl_eqv4si3_1 = 3431,
  CODE_FOR_avx512vl_eqv4si3_mask_1 = 3432,
  CODE_FOR_avx512f_eqv8di3_1 = 3433,
  CODE_FOR_avx512f_eqv8di3_mask_1 = 3434,
  CODE_FOR_avx512vl_eqv4di3_1 = 3435,
  CODE_FOR_avx512vl_eqv4di3_mask_1 = 3436,
  CODE_FOR_avx512vl_eqv2di3_1 = 3437,
  CODE_FOR_avx512vl_eqv2di3_mask_1 = 3438,
  CODE_FOR_sse4_2_gtv2di3 = 3443,
  CODE_FOR_avx2_gtv32qi3 = 3444,
  CODE_FOR_avx2_gtv16hi3 = 3445,
  CODE_FOR_avx2_gtv8si3 = 3446,
  CODE_FOR_avx2_gtv4di3 = 3447,
  CODE_FOR_avx512f_gtv16si3 = 3448,
  CODE_FOR_avx512f_gtv16si3_mask = 3449,
  CODE_FOR_avx512vl_gtv8si3 = 3450,
  CODE_FOR_avx512vl_gtv8si3_mask = 3451,
  CODE_FOR_avx512vl_gtv4si3 = 3452,
  CODE_FOR_avx512vl_gtv4si3_mask = 3453,
  CODE_FOR_avx512f_gtv8di3 = 3454,
  CODE_FOR_avx512f_gtv8di3_mask = 3455,
  CODE_FOR_avx512vl_gtv4di3 = 3456,
  CODE_FOR_avx512vl_gtv4di3_mask = 3457,
  CODE_FOR_avx512vl_gtv2di3 = 3458,
  CODE_FOR_avx512vl_gtv2di3_mask = 3459,
  CODE_FOR_avx512bw_gtv64qi3 = 3460,
  CODE_FOR_avx512bw_gtv64qi3_mask = 3461,
  CODE_FOR_avx512vl_gtv16qi3 = 3462,
  CODE_FOR_avx512vl_gtv16qi3_mask = 3463,
  CODE_FOR_avx512vl_gtv32qi3 = 3464,
  CODE_FOR_avx512vl_gtv32qi3_mask = 3465,
  CODE_FOR_avx512bw_gtv32hi3 = 3466,
  CODE_FOR_avx512bw_gtv32hi3_mask = 3467,
  CODE_FOR_avx512vl_gtv16hi3 = 3468,
  CODE_FOR_avx512vl_gtv16hi3_mask = 3469,
  CODE_FOR_avx512vl_gtv8hi3 = 3470,
  CODE_FOR_avx512vl_gtv8hi3_mask = 3471,
  CODE_FOR_sse2_gtv16qi3 = 3472,
  CODE_FOR_sse2_gtv8hi3 = 3473,
  CODE_FOR_sse2_gtv4si3 = 3474,
  CODE_FOR_andv16si3_mask = 3494,
  CODE_FOR_iorv16si3_mask = 3496,
  CODE_FOR_xorv16si3_mask = 3498,
  CODE_FOR_andv8si3_mask = 3500,
  CODE_FOR_iorv8si3_mask = 3502,
  CODE_FOR_xorv8si3_mask = 3504,
  CODE_FOR_andv4si3_mask = 3506,
  CODE_FOR_iorv4si3_mask = 3508,
  CODE_FOR_xorv4si3_mask = 3510,
  CODE_FOR_andv8di3_mask = 3512,
  CODE_FOR_iorv8di3_mask = 3514,
  CODE_FOR_xorv8di3_mask = 3516,
  CODE_FOR_andv4di3_mask = 3518,
  CODE_FOR_iorv4di3_mask = 3520,
  CODE_FOR_xorv4di3_mask = 3522,
  CODE_FOR_andv2di3_mask = 3524,
  CODE_FOR_iorv2di3_mask = 3526,
  CODE_FOR_xorv2di3_mask = 3528,
  CODE_FOR_avx512bw_testmv64qi3 = 3565,
  CODE_FOR_avx512bw_testmv64qi3_mask = 3566,
  CODE_FOR_avx512vl_testmv16qi3 = 3567,
  CODE_FOR_avx512vl_testmv16qi3_mask = 3568,
  CODE_FOR_avx512vl_testmv32qi3 = 3569,
  CODE_FOR_avx512vl_testmv32qi3_mask = 3570,
  CODE_FOR_avx512bw_testmv32hi3 = 3571,
  CODE_FOR_avx512bw_testmv32hi3_mask = 3572,
  CODE_FOR_avx512vl_testmv16hi3 = 3573,
  CODE_FOR_avx512vl_testmv16hi3_mask = 3574,
  CODE_FOR_avx512vl_testmv8hi3 = 3575,
  CODE_FOR_avx512vl_testmv8hi3_mask = 3576,
  CODE_FOR_avx512f_testmv16si3 = 3577,
  CODE_FOR_avx512f_testmv16si3_mask = 3578,
  CODE_FOR_avx512vl_testmv8si3 = 3579,
  CODE_FOR_avx512vl_testmv8si3_mask = 3580,
  CODE_FOR_avx512vl_testmv4si3 = 3581,
  CODE_FOR_avx512vl_testmv4si3_mask = 3582,
  CODE_FOR_avx512f_testmv8di3 = 3583,
  CODE_FOR_avx512f_testmv8di3_mask = 3584,
  CODE_FOR_avx512vl_testmv4di3 = 3585,
  CODE_FOR_avx512vl_testmv4di3_mask = 3586,
  CODE_FOR_avx512vl_testmv2di3 = 3587,
  CODE_FOR_avx512vl_testmv2di3_mask = 3588,
  CODE_FOR_avx512bw_testnmv64qi3 = 3589,
  CODE_FOR_avx512bw_testnmv64qi3_mask = 3590,
  CODE_FOR_avx512vl_testnmv16qi3 = 3591,
  CODE_FOR_avx512vl_testnmv16qi3_mask = 3592,
  CODE_FOR_avx512vl_testnmv32qi3 = 3593,
  CODE_FOR_avx512vl_testnmv32qi3_mask = 3594,
  CODE_FOR_avx512bw_testnmv32hi3 = 3595,
  CODE_FOR_avx512bw_testnmv32hi3_mask = 3596,
  CODE_FOR_avx512vl_testnmv16hi3 = 3597,
  CODE_FOR_avx512vl_testnmv16hi3_mask = 3598,
  CODE_FOR_avx512vl_testnmv8hi3 = 3599,
  CODE_FOR_avx512vl_testnmv8hi3_mask = 3600,
  CODE_FOR_avx512f_testnmv16si3 = 3601,
  CODE_FOR_avx512f_testnmv16si3_mask = 3602,
  CODE_FOR_avx512vl_testnmv8si3 = 3603,
  CODE_FOR_avx512vl_testnmv8si3_mask = 3604,
  CODE_FOR_avx512vl_testnmv4si3 = 3605,
  CODE_FOR_avx512vl_testnmv4si3_mask = 3606,
  CODE_FOR_avx512f_testnmv8di3 = 3607,
  CODE_FOR_avx512f_testnmv8di3_mask = 3608,
  CODE_FOR_avx512vl_testnmv4di3 = 3609,
  CODE_FOR_avx512vl_testnmv4di3_mask = 3610,
  CODE_FOR_avx512vl_testnmv2di3 = 3611,
  CODE_FOR_avx512vl_testnmv2di3_mask = 3612,
  CODE_FOR_avx512bw_packsswb = 3613,
  CODE_FOR_avx512bw_packsswb_mask = 3614,
  CODE_FOR_avx2_packsswb = 3615,
  CODE_FOR_avx2_packsswb_mask = 3616,
  CODE_FOR_sse2_packsswb = 3617,
  CODE_FOR_sse2_packsswb_mask = 3618,
  CODE_FOR_avx512bw_packssdw = 3619,
  CODE_FOR_avx512bw_packssdw_mask = 3620,
  CODE_FOR_avx2_packssdw = 3621,
  CODE_FOR_avx2_packssdw_mask = 3622,
  CODE_FOR_sse2_packssdw = 3623,
  CODE_FOR_sse2_packssdw_mask = 3624,
  CODE_FOR_avx512bw_packuswb = 3625,
  CODE_FOR_avx512bw_packuswb_mask = 3626,
  CODE_FOR_avx2_packuswb = 3627,
  CODE_FOR_avx2_packuswb_mask = 3628,
  CODE_FOR_sse2_packuswb = 3629,
  CODE_FOR_sse2_packuswb_mask = 3630,
  CODE_FOR_avx512bw_interleave_highv64qi = 3631,
  CODE_FOR_avx512bw_interleave_highv64qi_mask = 3632,
  CODE_FOR_avx2_interleave_highv32qi = 3633,
  CODE_FOR_avx2_interleave_highv32qi_mask = 3634,
  CODE_FOR_vec_interleave_highv16qi = 3635,
  CODE_FOR_vec_interleave_highv16qi_mask = 3636,
  CODE_FOR_avx512bw_interleave_lowv64qi = 3637,
  CODE_FOR_avx512bw_interleave_lowv64qi_mask = 3638,
  CODE_FOR_avx2_interleave_lowv32qi = 3639,
  CODE_FOR_avx2_interleave_lowv32qi_mask = 3640,
  CODE_FOR_vec_interleave_lowv16qi = 3641,
  CODE_FOR_vec_interleave_lowv16qi_mask = 3642,
  CODE_FOR_avx512bw_interleave_highv32hi = 3643,
  CODE_FOR_avx512bw_interleave_highv32hi_mask = 3644,
  CODE_FOR_avx2_interleave_highv16hi = 3645,
  CODE_FOR_avx2_interleave_highv16hi_mask = 3646,
  CODE_FOR_vec_interleave_highv8hi = 3647,
  CODE_FOR_vec_interleave_highv8hi_mask = 3648,
  CODE_FOR_avx512bw_interleave_lowv32hi_mask = 3650,
  CODE_FOR_avx2_interleave_lowv16hi = 3651,
  CODE_FOR_avx2_interleave_lowv16hi_mask = 3652,
  CODE_FOR_vec_interleave_lowv8hi = 3653,
  CODE_FOR_vec_interleave_lowv8hi_mask = 3654,
  CODE_FOR_avx2_interleave_highv8si = 3655,
  CODE_FOR_avx2_interleave_highv8si_mask = 3656,
  CODE_FOR_avx512f_interleave_highv16si_mask = 3658,
  CODE_FOR_vec_interleave_highv4si = 3659,
  CODE_FOR_vec_interleave_highv4si_mask = 3660,
  CODE_FOR_avx2_interleave_lowv8si = 3661,
  CODE_FOR_avx2_interleave_lowv8si_mask = 3662,
  CODE_FOR_avx512f_interleave_lowv16si_mask = 3664,
  CODE_FOR_vec_interleave_lowv4si = 3665,
  CODE_FOR_vec_interleave_lowv4si_mask = 3666,
  CODE_FOR_sse4_1_pinsrb = 3667,
  CODE_FOR_sse2_pinsrw = 3668,
  CODE_FOR_sse4_1_pinsrd = 3669,
  CODE_FOR_sse4_1_pinsrq = 3670,
  CODE_FOR_avx512dq_vinsertf64x2_1_mask = 3672,
  CODE_FOR_avx512dq_vinserti64x2_1_mask = 3674,
  CODE_FOR_avx512f_vinsertf32x4_1_mask = 3676,
  CODE_FOR_avx512f_vinserti32x4_1_mask = 3678,
  CODE_FOR_vec_set_lo_v16sf = 3679,
  CODE_FOR_vec_set_lo_v16sf_mask = 3680,
  CODE_FOR_vec_set_lo_v16si = 3681,
  CODE_FOR_vec_set_lo_v16si_mask = 3682,
  CODE_FOR_vec_set_hi_v16sf = 3683,
  CODE_FOR_vec_set_hi_v16sf_mask = 3684,
  CODE_FOR_vec_set_hi_v16si = 3685,
  CODE_FOR_vec_set_hi_v16si_mask = 3686,
  CODE_FOR_vec_set_lo_v8df = 3687,
  CODE_FOR_vec_set_lo_v8df_mask = 3688,
  CODE_FOR_vec_set_lo_v8di = 3689,
  CODE_FOR_vec_set_lo_v8di_mask = 3690,
  CODE_FOR_vec_set_hi_v8df = 3691,
  CODE_FOR_vec_set_hi_v8df_mask = 3692,
  CODE_FOR_vec_set_hi_v8di = 3693,
  CODE_FOR_vec_set_hi_v8di_mask = 3694,
  CODE_FOR_avx512dq_shuf_i64x2_1_mask = 3696,
  CODE_FOR_avx512dq_shuf_f64x2_1_mask = 3698,
  CODE_FOR_avx512f_shuf_f64x2_1 = 3699,
  CODE_FOR_avx512f_shuf_f64x2_1_mask = 3700,
  CODE_FOR_avx512f_shuf_i64x2_1 = 3701,
  CODE_FOR_avx512f_shuf_i64x2_1_mask = 3702,
  CODE_FOR_avx512vl_shuf_i32x4_1 = 3703,
  CODE_FOR_avx512vl_shuf_i32x4_1_mask = 3704,
  CODE_FOR_avx512vl_shuf_f32x4_1 = 3705,
  CODE_FOR_avx512vl_shuf_f32x4_1_mask = 3706,
  CODE_FOR_avx512f_shuf_f32x4_1 = 3707,
  CODE_FOR_avx512f_shuf_f32x4_1_mask = 3708,
  CODE_FOR_avx512f_shuf_i32x4_1 = 3709,
  CODE_FOR_avx512f_shuf_i32x4_1_mask = 3710,
  CODE_FOR_avx512f_pshufd_1 = 3711,
  CODE_FOR_avx512f_pshufd_1_mask = 3712,
  CODE_FOR_avx2_pshufd_1 = 3713,
  CODE_FOR_avx2_pshufd_1_mask = 3714,
  CODE_FOR_sse2_pshufd_1 = 3715,
  CODE_FOR_sse2_pshufd_1_mask = 3716,
  CODE_FOR_avx512bw_pshuflwv32hi_mask = 3718,
  CODE_FOR_avx2_pshuflw_1 = 3719,
  CODE_FOR_avx2_pshuflw_1_mask = 3720,
  CODE_FOR_sse2_pshuflw_1 = 3721,
  CODE_FOR_sse2_pshuflw_1_mask = 3722,
  CODE_FOR_avx512bw_pshufhwv32hi_mask = 3724,
  CODE_FOR_avx2_pshufhw_1 = 3725,
  CODE_FOR_avx2_pshufhw_1_mask = 3726,
  CODE_FOR_sse2_pshufhw_1 = 3727,
  CODE_FOR_sse2_pshufhw_1_mask = 3728,
  CODE_FOR_sse2_loadld = 3729,
  CODE_FOR_vec_concatv2di = 3753,
  CODE_FOR_vec_setv8di_0 = 3754,
  CODE_FOR_vec_setv4di_0 = 3755,
  CODE_FOR_avx512f_psadbw = 3768,
  CODE_FOR_avx2_psadbw = 3769,
  CODE_FOR_sse2_psadbw = 3770,
  CODE_FOR_avx_movmskps256 = 3771,
  CODE_FOR_sse_movmskps = 3772,
  CODE_FOR_avx_movmskpd256 = 3773,
  CODE_FOR_sse2_movmskpd = 3774,
  CODE_FOR_avx2_pmovmskb = 3779,
  CODE_FOR_sse2_pmovmskb = 3780,
  CODE_FOR_sse_ldmxcsr = 3785,
  CODE_FOR_sse_stmxcsr = 3786,
  CODE_FOR_sse2_clflush = 3787,
  CODE_FOR_sse3_mwait = 3788,
  CODE_FOR_sse3_monitor_si = 3789,
  CODE_FOR_sse3_monitor_di = 3790,
  CODE_FOR_avx2_phaddwv16hi3 = 3791,
  CODE_FOR_avx2_phaddswv16hi3 = 3792,
  CODE_FOR_avx2_phsubwv16hi3 = 3793,
  CODE_FOR_avx2_phsubswv16hi3 = 3794,
  CODE_FOR_ssse3_phaddwv8hi3 = 3795,
  CODE_FOR_ssse3_phaddswv8hi3 = 3796,
  CODE_FOR_ssse3_phsubwv8hi3 = 3797,
  CODE_FOR_ssse3_phsubswv8hi3 = 3798,
  CODE_FOR_ssse3_phaddwv4hi3 = 3799,
  CODE_FOR_ssse3_phaddswv4hi3 = 3800,
  CODE_FOR_ssse3_phsubwv4hi3 = 3801,
  CODE_FOR_ssse3_phsubswv4hi3 = 3802,
  CODE_FOR_avx2_phadddv8si3 = 3803,
  CODE_FOR_avx2_phsubdv8si3 = 3804,
  CODE_FOR_ssse3_phadddv4si3 = 3805,
  CODE_FOR_ssse3_phsubdv4si3 = 3806,
  CODE_FOR_ssse3_phadddv2si3 = 3807,
  CODE_FOR_ssse3_phsubdv2si3 = 3808,
  CODE_FOR_avx2_pmaddubsw256 = 3809,
  CODE_FOR_avx512bw_pmaddubsw512v8hi = 3810,
  CODE_FOR_avx512bw_pmaddubsw512v8hi_mask = 3811,
  CODE_FOR_avx512bw_pmaddubsw512v16hi = 3812,
  CODE_FOR_avx512bw_pmaddubsw512v16hi_mask = 3813,
  CODE_FOR_avx512bw_pmaddubsw512v32hi = 3814,
  CODE_FOR_avx512bw_pmaddubsw512v32hi_mask = 3815,
  CODE_FOR_avx512bw_umulhrswv32hi3 = 3816,
  CODE_FOR_avx512bw_umulhrswv32hi3_mask = 3817,
  CODE_FOR_ssse3_pmaddubsw128 = 3818,
  CODE_FOR_ssse3_pmaddubsw = 3819,
  CODE_FOR_avx512bw_pshufbv64qi3 = 3827,
  CODE_FOR_avx512bw_pshufbv64qi3_mask = 3828,
  CODE_FOR_avx2_pshufbv32qi3 = 3829,
  CODE_FOR_avx2_pshufbv32qi3_mask = 3830,
  CODE_FOR_ssse3_pshufbv16qi3 = 3831,
  CODE_FOR_ssse3_pshufbv16qi3_mask = 3832,
  CODE_FOR_ssse3_pshufbv8qi3 = 3833,
  CODE_FOR_avx2_psignv32qi3 = 3834,
  CODE_FOR_ssse3_psignv16qi3 = 3835,
  CODE_FOR_avx2_psignv16hi3 = 3836,
  CODE_FOR_ssse3_psignv8hi3 = 3837,
  CODE_FOR_avx2_psignv8si3 = 3838,
  CODE_FOR_ssse3_psignv4si3 = 3839,
  CODE_FOR_ssse3_psignv8qi3 = 3840,
  CODE_FOR_ssse3_psignv4hi3 = 3841,
  CODE_FOR_ssse3_psignv2si3 = 3842,
  CODE_FOR_avx512bw_palignrv64qi_mask = 3843,
  CODE_FOR_avx2_palignrv32qi_mask = 3844,
  CODE_FOR_ssse3_palignrv16qi_mask = 3845,
  CODE_FOR_avx512bw_palignrv4ti = 3846,
  CODE_FOR_avx2_palignrv2ti = 3847,
  CODE_FOR_ssse3_palignrti = 3848,
  CODE_FOR_ssse3_palignrdi = 3849,
  CODE_FOR_absv16si2_mask = 3862,
  CODE_FOR_absv8si2_mask = 3863,
  CODE_FOR_absv4si2_mask = 3864,
  CODE_FOR_absv8di2_mask = 3865,
  CODE_FOR_absv4di2_mask = 3866,
  CODE_FOR_absv2di2_mask = 3867,
  CODE_FOR_absv64qi2_mask = 3868,
  CODE_FOR_absv16qi2_mask = 3869,
  CODE_FOR_absv32qi2_mask = 3870,
  CODE_FOR_absv32hi2_mask = 3871,
  CODE_FOR_absv16hi2_mask = 3872,
  CODE_FOR_absv8hi2_mask = 3873,
  CODE_FOR_absv8qi2 = 3874,
  CODE_FOR_absv4hi2 = 3875,
  CODE_FOR_absv2si2 = 3876,
  CODE_FOR_sse4a_movntsf = 3877,
  CODE_FOR_sse4a_movntdf = 3878,
  CODE_FOR_sse4a_vmmovntv4sf = 3879,
  CODE_FOR_sse4a_vmmovntv2df = 3880,
  CODE_FOR_sse4a_extrqi = 3881,
  CODE_FOR_sse4a_extrq = 3882,
  CODE_FOR_sse4a_insertqi = 3883,
  CODE_FOR_sse4a_insertq = 3884,
  CODE_FOR_avx_blendps256 = 3885,
  CODE_FOR_sse4_1_blendps = 3886,
  CODE_FOR_avx_blendpd256 = 3887,
  CODE_FOR_sse4_1_blendpd = 3888,
  CODE_FOR_avx_blendvps256 = 3889,
  CODE_FOR_sse4_1_blendvps = 3890,
  CODE_FOR_avx_blendvpd256 = 3891,
  CODE_FOR_sse4_1_blendvpd = 3892,
  CODE_FOR_avx_dpps256 = 3893,
  CODE_FOR_sse4_1_dpps = 3894,
  CODE_FOR_avx_dppd256 = 3895,
  CODE_FOR_sse4_1_dppd = 3896,
  CODE_FOR_avx512f_movntdqa = 3897,
  CODE_FOR_avx2_movntdqa = 3898,
  CODE_FOR_sse4_1_movntdqa = 3899,
  CODE_FOR_avx2_mpsadbw = 3900,
  CODE_FOR_sse4_1_mpsadbw = 3901,
  CODE_FOR_avx512bw_packusdw = 3902,
  CODE_FOR_avx512bw_packusdw_mask = 3903,
  CODE_FOR_avx2_packusdw = 3904,
  CODE_FOR_avx2_packusdw_mask = 3905,
  CODE_FOR_sse4_1_packusdw = 3906,
  CODE_FOR_sse4_1_packusdw_mask = 3907,
  CODE_FOR_avx2_pblendvb = 3908,
  CODE_FOR_sse4_1_pblendvb = 3909,
  CODE_FOR_sse4_1_pblendw = 3910,
  CODE_FOR_avx2_pblenddv8si = 3912,
  CODE_FOR_avx2_pblenddv4si = 3913,
  CODE_FOR_sse4_1_phminposuw = 3914,
  CODE_FOR_avx2_sign_extendv16qiv16hi2 = 3915,
  CODE_FOR_avx2_sign_extendv16qiv16hi2_mask = 3916,
  CODE_FOR_avx2_zero_extendv16qiv16hi2 = 3917,
  CODE_FOR_avx2_zero_extendv16qiv16hi2_mask = 3918,
  CODE_FOR_avx512bw_sign_extendv32qiv32hi2 = 3919,
  CODE_FOR_avx512bw_sign_extendv32qiv32hi2_mask = 3920,
  CODE_FOR_avx512bw_zero_extendv32qiv32hi2 = 3921,
  CODE_FOR_avx512bw_zero_extendv32qiv32hi2_mask = 3922,
  CODE_FOR_sse4_1_sign_extendv8qiv8hi2 = 3923,
  CODE_FOR_sse4_1_sign_extendv8qiv8hi2_mask = 3924,
  CODE_FOR_sse4_1_zero_extendv8qiv8hi2 = 3925,
  CODE_FOR_sse4_1_zero_extendv8qiv8hi2_mask = 3926,
  CODE_FOR_avx512f_sign_extendv16qiv16si2_mask = 3928,
  CODE_FOR_avx512f_zero_extendv16qiv16si2_mask = 3930,
  CODE_FOR_avx2_sign_extendv8qiv8si2 = 3931,
  CODE_FOR_avx2_sign_extendv8qiv8si2_mask = 3932,
  CODE_FOR_avx2_zero_extendv8qiv8si2 = 3933,
  CODE_FOR_avx2_zero_extendv8qiv8si2_mask = 3934,
  CODE_FOR_sse4_1_sign_extendv4qiv4si2 = 3935,
  CODE_FOR_sse4_1_sign_extendv4qiv4si2_mask = 3936,
  CODE_FOR_sse4_1_zero_extendv4qiv4si2 = 3937,
  CODE_FOR_sse4_1_zero_extendv4qiv4si2_mask = 3938,
  CODE_FOR_avx512f_sign_extendv16hiv16si2 = 3939,
  CODE_FOR_avx512f_sign_extendv16hiv16si2_mask = 3940,
  CODE_FOR_avx512f_zero_extendv16hiv16si2 = 3941,
  CODE_FOR_avx512f_zero_extendv16hiv16si2_mask = 3942,
  CODE_FOR_avx2_sign_extendv8hiv8si2 = 3943,
  CODE_FOR_avx2_sign_extendv8hiv8si2_mask = 3944,
  CODE_FOR_avx2_zero_extendv8hiv8si2 = 3945,
  CODE_FOR_avx2_zero_extendv8hiv8si2_mask = 3946,
  CODE_FOR_sse4_1_sign_extendv4hiv4si2 = 3947,
  CODE_FOR_sse4_1_sign_extendv4hiv4si2_mask = 3948,
  CODE_FOR_sse4_1_zero_extendv4hiv4si2 = 3949,
  CODE_FOR_sse4_1_zero_extendv4hiv4si2_mask = 3950,
  CODE_FOR_avx512f_sign_extendv8qiv8di2 = 3951,
  CODE_FOR_avx512f_sign_extendv8qiv8di2_mask = 3952,
  CODE_FOR_avx512f_zero_extendv8qiv8di2 = 3953,
  CODE_FOR_avx512f_zero_extendv8qiv8di2_mask = 3954,
  CODE_FOR_avx2_sign_extendv4qiv4di2 = 3955,
  CODE_FOR_avx2_sign_extendv4qiv4di2_mask = 3956,
  CODE_FOR_avx2_zero_extendv4qiv4di2 = 3957,
  CODE_FOR_avx2_zero_extendv4qiv4di2_mask = 3958,
  CODE_FOR_sse4_1_sign_extendv2qiv2di2 = 3959,
  CODE_FOR_sse4_1_sign_extendv2qiv2di2_mask = 3960,
  CODE_FOR_sse4_1_zero_extendv2qiv2di2 = 3961,
  CODE_FOR_sse4_1_zero_extendv2qiv2di2_mask = 3962,
  CODE_FOR_avx512f_sign_extendv8hiv8di2 = 3963,
  CODE_FOR_avx512f_sign_extendv8hiv8di2_mask = 3964,
  CODE_FOR_avx512f_zero_extendv8hiv8di2 = 3965,
  CODE_FOR_avx512f_zero_extendv8hiv8di2_mask = 3966,
  CODE_FOR_avx2_sign_extendv4hiv4di2 = 3967,
  CODE_FOR_avx2_sign_extendv4hiv4di2_mask = 3968,
  CODE_FOR_avx2_zero_extendv4hiv4di2 = 3969,
  CODE_FOR_avx2_zero_extendv4hiv4di2_mask = 3970,
  CODE_FOR_sse4_1_sign_extendv2hiv2di2 = 3971,
  CODE_FOR_sse4_1_sign_extendv2hiv2di2_mask = 3972,
  CODE_FOR_sse4_1_zero_extendv2hiv2di2 = 3973,
  CODE_FOR_sse4_1_zero_extendv2hiv2di2_mask = 3974,
  CODE_FOR_avx512f_sign_extendv8siv8di2 = 3975,
  CODE_FOR_avx512f_sign_extendv8siv8di2_mask = 3976,
  CODE_FOR_avx512f_zero_extendv8siv8di2 = 3977,
  CODE_FOR_avx512f_zero_extendv8siv8di2_mask = 3978,
  CODE_FOR_avx2_sign_extendv4siv4di2 = 3979,
  CODE_FOR_avx2_sign_extendv4siv4di2_mask = 3980,
  CODE_FOR_avx2_zero_extendv4siv4di2 = 3981,
  CODE_FOR_avx2_zero_extendv4siv4di2_mask = 3982,
  CODE_FOR_sse4_1_sign_extendv2siv2di2 = 3983,
  CODE_FOR_sse4_1_sign_extendv2siv2di2_mask = 3984,
  CODE_FOR_sse4_1_zero_extendv2siv2di2 = 3985,
  CODE_FOR_sse4_1_zero_extendv2siv2di2_mask = 3986,
  CODE_FOR_avx_vtestps256 = 3987,
  CODE_FOR_avx_vtestps = 3988,
  CODE_FOR_avx_vtestpd256 = 3989,
  CODE_FOR_avx_vtestpd = 3990,
  CODE_FOR_sse4_1_ptestv16qi = 3991,
  CODE_FOR_sse4_1_ptestv8hi = 3992,
  CODE_FOR_sse4_1_ptestv4si = 3993,
  CODE_FOR_sse4_1_ptestv2di = 3994,
  CODE_FOR_sse4_1_ptestv4sf = 3995,
  CODE_FOR_sse4_1_ptestv2df = 3996,
  CODE_FOR_avx_ptestv32qi = 3997,
  CODE_FOR_avx_ptestv16hi = 3998,
  CODE_FOR_avx_ptestv8si = 3999,
  CODE_FOR_avx_ptestv4di = 4000,
  CODE_FOR_avx_ptestv8sf = 4001,
  CODE_FOR_avx_ptestv4df = 4002,
  CODE_FOR_ptesttf2 = 4003,
  CODE_FOR_avx_roundps256 = 4004,
  CODE_FOR_sse4_1_roundps = 4005,
  CODE_FOR_avx_roundpd256 = 4006,
  CODE_FOR_sse4_1_roundpd = 4007,
  CODE_FOR_sse4_1_roundss = 4008,
  CODE_FOR_sse4_1_roundsd = 4009,
  CODE_FOR_sse4_2_pcmpestr = 4010,
  CODE_FOR_sse4_2_pcmpestri = 4011,
  CODE_FOR_sse4_2_pcmpestrm = 4012,
  CODE_FOR_sse4_2_pcmpestr_cconly = 4013,
  CODE_FOR_sse4_2_pcmpistr = 4014,
  CODE_FOR_sse4_2_pcmpistri = 4015,
  CODE_FOR_sse4_2_pcmpistrm = 4016,
  CODE_FOR_sse4_2_pcmpistr_cconly = 4017,
  CODE_FOR_avx512er_exp2v16sf = 4034,
  CODE_FOR_avx512er_exp2v16sf_round = 4035,
  CODE_FOR_avx512er_exp2v16sf_mask = 4036,
  CODE_FOR_avx512er_exp2v16sf_mask_round = 4037,
  CODE_FOR_avx512er_exp2v8df = 4038,
  CODE_FOR_avx512er_exp2v8df_round = 4039,
  CODE_FOR_avx512er_exp2v8df_mask = 4040,
  CODE_FOR_avx512er_exp2v8df_mask_round = 4041,
  CODE_FOR_avx512er_rcp28v16sf_mask = 4044,
  CODE_FOR_avx512er_rcp28v16sf_mask_round = 4045,
  CODE_FOR_avx512er_rcp28v8df_mask = 4048,
  CODE_FOR_avx512er_rcp28v8df_mask_round = 4049,
  CODE_FOR_avx512er_vmrcp28v4sf = 4050,
  CODE_FOR_avx512er_vmrcp28v4sf_round = 4051,
  CODE_FOR_avx512er_vmrcp28v2df = 4052,
  CODE_FOR_avx512er_vmrcp28v2df_round = 4053,
  CODE_FOR_avx512er_rsqrt28v16sf_mask = 4056,
  CODE_FOR_avx512er_rsqrt28v16sf_mask_round = 4057,
  CODE_FOR_avx512er_rsqrt28v8df_mask = 4060,
  CODE_FOR_avx512er_rsqrt28v8df_mask_round = 4061,
  CODE_FOR_avx512er_vmrsqrt28v4sf = 4062,
  CODE_FOR_avx512er_vmrsqrt28v4sf_round = 4063,
  CODE_FOR_avx512er_vmrsqrt28v2df = 4064,
  CODE_FOR_avx512er_vmrsqrt28v2df_round = 4065,
  CODE_FOR_xop_pmacsww = 4066,
  CODE_FOR_xop_pmacssww = 4067,
  CODE_FOR_xop_pmacsdd = 4068,
  CODE_FOR_xop_pmacssdd = 4069,
  CODE_FOR_xop_pmacsdql = 4070,
  CODE_FOR_xop_pmacssdql = 4071,
  CODE_FOR_xop_pmacsdqh = 4072,
  CODE_FOR_xop_pmacssdqh = 4073,
  CODE_FOR_xop_pmacswd = 4074,
  CODE_FOR_xop_pmacsswd = 4075,
  CODE_FOR_xop_pmadcswd = 4076,
  CODE_FOR_xop_pmadcsswd = 4077,
  CODE_FOR_xop_pcmov_v32qi256 = 4078,
  CODE_FOR_xop_pcmov_v16qi = 4079,
  CODE_FOR_xop_pcmov_v16hi256 = 4080,
  CODE_FOR_xop_pcmov_v8hi = 4081,
  CODE_FOR_xop_pcmov_v16si512 = 4082,
  CODE_FOR_xop_pcmov_v8si256 = 4083,
  CODE_FOR_xop_pcmov_v4si = 4084,
  CODE_FOR_xop_pcmov_v8di512 = 4085,
  CODE_FOR_xop_pcmov_v4di256 = 4086,
  CODE_FOR_xop_pcmov_v2di = 4087,
  CODE_FOR_xop_pcmov_v16sf512 = 4088,
  CODE_FOR_xop_pcmov_v8sf256 = 4089,
  CODE_FOR_xop_pcmov_v4sf = 4090,
  CODE_FOR_xop_pcmov_v8df512 = 4091,
  CODE_FOR_xop_pcmov_v4df256 = 4092,
  CODE_FOR_xop_pcmov_v2df = 4093,
  CODE_FOR_xop_phaddbw = 4094,
  CODE_FOR_xop_phaddubw = 4095,
  CODE_FOR_xop_phaddbd = 4096,
  CODE_FOR_xop_phaddubd = 4097,
  CODE_FOR_xop_phaddbq = 4098,
  CODE_FOR_xop_phaddubq = 4099,
  CODE_FOR_xop_phaddwd = 4100,
  CODE_FOR_xop_phadduwd = 4101,
  CODE_FOR_xop_phaddwq = 4102,
  CODE_FOR_xop_phadduwq = 4103,
  CODE_FOR_xop_phadddq = 4104,
  CODE_FOR_xop_phaddudq = 4105,
  CODE_FOR_xop_phsubbw = 4106,
  CODE_FOR_xop_phsubwd = 4107,
  CODE_FOR_xop_phsubdq = 4108,
  CODE_FOR_xop_pperm = 4109,
  CODE_FOR_xop_pperm_pack_v2di_v4si = 4110,
  CODE_FOR_xop_pperm_pack_v4si_v8hi = 4111,
  CODE_FOR_xop_pperm_pack_v8hi_v16qi = 4112,
  CODE_FOR_xop_rotlv16qi3 = 4113,
  CODE_FOR_xop_rotlv8hi3 = 4114,
  CODE_FOR_xop_rotlv4si3 = 4115,
  CODE_FOR_xop_rotlv2di3 = 4116,
  CODE_FOR_xop_rotrv16qi3 = 4117,
  CODE_FOR_xop_rotrv8hi3 = 4118,
  CODE_FOR_xop_rotrv4si3 = 4119,
  CODE_FOR_xop_rotrv2di3 = 4120,
  CODE_FOR_xop_vrotlv16qi3 = 4121,
  CODE_FOR_xop_vrotlv8hi3 = 4122,
  CODE_FOR_xop_vrotlv4si3 = 4123,
  CODE_FOR_xop_vrotlv2di3 = 4124,
  CODE_FOR_xop_shav16qi3 = 4125,
  CODE_FOR_xop_shav8hi3 = 4126,
  CODE_FOR_xop_shav4si3 = 4127,
  CODE_FOR_xop_shav2di3 = 4128,
  CODE_FOR_xop_shlv16qi3 = 4129,
  CODE_FOR_xop_shlv8hi3 = 4130,
  CODE_FOR_xop_shlv4si3 = 4131,
  CODE_FOR_xop_shlv2di3 = 4132,
  CODE_FOR_xop_frczsf2 = 4133,
  CODE_FOR_xop_frczdf2 = 4134,
  CODE_FOR_xop_frczv4sf2 = 4135,
  CODE_FOR_xop_frczv2df2 = 4136,
  CODE_FOR_xop_frczv8sf2 = 4137,
  CODE_FOR_xop_frczv4df2 = 4138,
  CODE_FOR_xop_maskcmpv16qi3 = 4141,
  CODE_FOR_xop_maskcmpv8hi3 = 4142,
  CODE_FOR_xop_maskcmpv4si3 = 4143,
  CODE_FOR_xop_maskcmpv2di3 = 4144,
  CODE_FOR_xop_maskcmp_unsv16qi3 = 4145,
  CODE_FOR_xop_maskcmp_unsv8hi3 = 4146,
  CODE_FOR_xop_maskcmp_unsv4si3 = 4147,
  CODE_FOR_xop_maskcmp_unsv2di3 = 4148,
  CODE_FOR_xop_maskcmp_uns2v16qi3 = 4149,
  CODE_FOR_xop_maskcmp_uns2v8hi3 = 4150,
  CODE_FOR_xop_maskcmp_uns2v4si3 = 4151,
  CODE_FOR_xop_maskcmp_uns2v2di3 = 4152,
  CODE_FOR_xop_pcom_tfv16qi3 = 4153,
  CODE_FOR_xop_pcom_tfv8hi3 = 4154,
  CODE_FOR_xop_pcom_tfv4si3 = 4155,
  CODE_FOR_xop_pcom_tfv2di3 = 4156,
  CODE_FOR_xop_vpermil2v8sf3 = 4157,
  CODE_FOR_xop_vpermil2v4sf3 = 4158,
  CODE_FOR_xop_vpermil2v4df3 = 4159,
  CODE_FOR_xop_vpermil2v2df3 = 4160,
  CODE_FOR_aesenc = 4161,
  CODE_FOR_aesenclast = 4162,
  CODE_FOR_aesdec = 4163,
  CODE_FOR_aesdeclast = 4164,
  CODE_FOR_aesimc = 4165,
  CODE_FOR_aeskeygenassist = 4166,
  CODE_FOR_pclmulqdq = 4167,
  CODE_FOR_avx_vzeroupper = 4169,
  CODE_FOR_avx2_pbroadcastv16si = 4170,
  CODE_FOR_avx2_pbroadcastv8di = 4171,
  CODE_FOR_avx2_pbroadcastv64qi = 4172,
  CODE_FOR_avx2_pbroadcastv32qi = 4173,
  CODE_FOR_avx2_pbroadcastv16qi = 4174,
  CODE_FOR_avx2_pbroadcastv32hi = 4175,
  CODE_FOR_avx2_pbroadcastv16hi = 4176,
  CODE_FOR_avx2_pbroadcastv8hi = 4177,
  CODE_FOR_avx2_pbroadcastv8si = 4178,
  CODE_FOR_avx2_pbroadcastv4si = 4179,
  CODE_FOR_avx2_pbroadcastv4di = 4180,
  CODE_FOR_avx2_pbroadcastv2di = 4181,
  CODE_FOR_avx2_pbroadcastv32qi_1 = 4182,
  CODE_FOR_avx2_pbroadcastv16hi_1 = 4183,
  CODE_FOR_avx2_pbroadcastv8si_1 = 4184,
  CODE_FOR_avx2_pbroadcastv4di_1 = 4185,
  CODE_FOR_avx2_permvarv8si = 4186,
  CODE_FOR_avx2_permvarv8si_mask = 4187,
  CODE_FOR_avx2_permvarv8sf = 4188,
  CODE_FOR_avx2_permvarv8sf_mask = 4189,
  CODE_FOR_avx512f_permvarv16si = 4190,
  CODE_FOR_avx512f_permvarv16si_mask = 4191,
  CODE_FOR_avx512f_permvarv16sf = 4192,
  CODE_FOR_avx512f_permvarv16sf_mask = 4193,
  CODE_FOR_avx512f_permvarv8di = 4194,
  CODE_FOR_avx512f_permvarv8di_mask = 4195,
  CODE_FOR_avx512f_permvarv8df = 4196,
  CODE_FOR_avx512f_permvarv8df_mask = 4197,
  CODE_FOR_avx2_permvarv4di = 4198,
  CODE_FOR_avx2_permvarv4di_mask = 4199,
  CODE_FOR_avx2_permvarv4df = 4200,
  CODE_FOR_avx2_permvarv4df_mask = 4201,
  CODE_FOR_avx512bw_permvarv64qi = 4202,
  CODE_FOR_avx512bw_permvarv64qi_mask = 4203,
  CODE_FOR_avx512vl_permvarv16qi = 4204,
  CODE_FOR_avx512vl_permvarv16qi_mask = 4205,
  CODE_FOR_avx512vl_permvarv32qi = 4206,
  CODE_FOR_avx512vl_permvarv32qi_mask = 4207,
  CODE_FOR_avx512vl_permvarv8hi = 4208,
  CODE_FOR_avx512vl_permvarv8hi_mask = 4209,
  CODE_FOR_avx512vl_permvarv16hi = 4210,
  CODE_FOR_avx512vl_permvarv16hi_mask = 4211,
  CODE_FOR_avx512bw_permvarv32hi = 4212,
  CODE_FOR_avx512bw_permvarv32hi_mask = 4213,
  CODE_FOR_avx2_permv4di_1 = 4214,
  CODE_FOR_avx2_permv4di_1_mask = 4215,
  CODE_FOR_avx2_permv4df_1 = 4216,
  CODE_FOR_avx2_permv4df_1_mask = 4217,
  CODE_FOR_avx512f_permv8df_1 = 4218,
  CODE_FOR_avx512f_permv8df_1_mask = 4219,
  CODE_FOR_avx512f_permv8di_1 = 4220,
  CODE_FOR_avx512f_permv8di_1_mask = 4221,
  CODE_FOR_avx2_permv2ti = 4222,
  CODE_FOR_avx2_vec_dupv4df = 4223,
  CODE_FOR_avx512f_vec_dupv16si_1 = 4224,
  CODE_FOR_avx512f_vec_dupv8di_1 = 4225,
  CODE_FOR_avx512bw_vec_dupv32hi_1 = 4226,
  CODE_FOR_avx512bw_vec_dupv64qi_1 = 4227,
  CODE_FOR_avx512f_vec_dupv16si = 4228,
  CODE_FOR_avx512f_vec_dupv16si_mask = 4229,
  CODE_FOR_avx512vl_vec_dupv8si = 4230,
  CODE_FOR_avx512vl_vec_dupv8si_mask = 4231,
  CODE_FOR_avx512vl_vec_dupv4si = 4232,
  CODE_FOR_avx512vl_vec_dupv4si_mask = 4233,
  CODE_FOR_avx512f_vec_dupv8di = 4234,
  CODE_FOR_avx512f_vec_dupv8di_mask = 4235,
  CODE_FOR_avx512vl_vec_dupv4di = 4236,
  CODE_FOR_avx512vl_vec_dupv4di_mask = 4237,
  CODE_FOR_avx512vl_vec_dupv2di = 4238,
  CODE_FOR_avx512vl_vec_dupv2di_mask = 4239,
  CODE_FOR_avx512f_vec_dupv16sf = 4240,
  CODE_FOR_avx512f_vec_dupv16sf_mask = 4241,
  CODE_FOR_avx512vl_vec_dupv8sf = 4242,
  CODE_FOR_avx512vl_vec_dupv8sf_mask = 4243,
  CODE_FOR_avx512vl_vec_dupv4sf = 4244,
  CODE_FOR_avx512vl_vec_dupv4sf_mask = 4245,
  CODE_FOR_avx512f_vec_dupv8df = 4246,
  CODE_FOR_avx512f_vec_dupv8df_mask = 4247,
  CODE_FOR_avx512vl_vec_dupv4df = 4248,
  CODE_FOR_avx512vl_vec_dupv4df_mask = 4249,
  CODE_FOR_avx512vl_vec_dupv2df = 4250,
  CODE_FOR_avx512vl_vec_dupv2df_mask = 4251,
  CODE_FOR_avx512bw_vec_dupv64qi = 4252,
  CODE_FOR_avx512bw_vec_dupv64qi_mask = 4253,
  CODE_FOR_avx512vl_vec_dupv16qi = 4254,
  CODE_FOR_avx512vl_vec_dupv16qi_mask = 4255,
  CODE_FOR_avx512vl_vec_dupv32qi = 4256,
  CODE_FOR_avx512vl_vec_dupv32qi_mask = 4257,
  CODE_FOR_avx512bw_vec_dupv32hi = 4258,
  CODE_FOR_avx512bw_vec_dupv32hi_mask = 4259,
  CODE_FOR_avx512vl_vec_dupv16hi = 4260,
  CODE_FOR_avx512vl_vec_dupv16hi_mask = 4261,
  CODE_FOR_avx512vl_vec_dupv8hi = 4262,
  CODE_FOR_avx512vl_vec_dupv8hi_mask = 4263,
  CODE_FOR_avx512f_broadcastv16sf_mask = 4265,
  CODE_FOR_avx512f_broadcastv16si_mask = 4267,
  CODE_FOR_avx512f_broadcastv8df_mask = 4269,
  CODE_FOR_avx512f_broadcastv8di_mask = 4271,
  CODE_FOR_avx512bw_vec_dup_gprv64qi_mask = 4273,
  CODE_FOR_avx512vl_vec_dup_gprv16qi_mask = 4275,
  CODE_FOR_avx512vl_vec_dup_gprv32qi_mask = 4277,
  CODE_FOR_avx512bw_vec_dup_gprv32hi_mask = 4279,
  CODE_FOR_avx512vl_vec_dup_gprv16hi_mask = 4281,
  CODE_FOR_avx512vl_vec_dup_gprv8hi_mask = 4283,
  CODE_FOR_avx512f_vec_dup_gprv16si_mask = 4285,
  CODE_FOR_avx512vl_vec_dup_gprv8si_mask = 4287,
  CODE_FOR_avx512vl_vec_dup_gprv4si_mask = 4289,
  CODE_FOR_avx512f_vec_dup_gprv8di_mask = 4291,
  CODE_FOR_avx512vl_vec_dup_gprv4di_mask = 4293,
  CODE_FOR_avx512vl_vec_dup_gprv2di_mask = 4295,
  CODE_FOR_avx512f_vec_dup_gprv16sf_mask = 4297,
  CODE_FOR_avx512vl_vec_dup_gprv8sf_mask = 4299,
  CODE_FOR_avx512vl_vec_dup_gprv4sf_mask = 4301,
  CODE_FOR_avx512f_vec_dup_gprv8df_mask = 4303,
  CODE_FOR_avx512vl_vec_dup_gprv4df_mask = 4305,
  CODE_FOR_avx512vl_vec_dup_gprv2df_mask = 4307,
  CODE_FOR_vec_dupv4sf = 4308,
  CODE_FOR_avx2_vbroadcasti128_v32qi = 4311,
  CODE_FOR_avx2_vbroadcasti128_v16hi = 4312,
  CODE_FOR_avx2_vbroadcasti128_v8si = 4313,
  CODE_FOR_avx2_vbroadcasti128_v4di = 4314,
  CODE_FOR_vec_dupv8si = 4321,
  CODE_FOR_vec_dupv8sf = 4322,
  CODE_FOR_vec_dupv4di = 4323,
  CODE_FOR_vec_dupv4df = 4324,
  CODE_FOR_avx_vbroadcastf128_v32qi = 4325,
  CODE_FOR_avx_vbroadcastf128_v16hi = 4326,
  CODE_FOR_avx_vbroadcastf128_v8si = 4327,
  CODE_FOR_avx_vbroadcastf128_v4di = 4328,
  CODE_FOR_avx_vbroadcastf128_v8sf = 4329,
  CODE_FOR_avx_vbroadcastf128_v4df = 4330,
  CODE_FOR_avx512dq_broadcastv16si_mask = 4332,
  CODE_FOR_avx512dq_broadcastv8si_mask = 4334,
  CODE_FOR_avx512dq_broadcastv4si_mask = 4336,
  CODE_FOR_avx512dq_broadcastv16sf_mask = 4338,
  CODE_FOR_avx512dq_broadcastv8sf_mask = 4340,
  CODE_FOR_avx512vl_broadcastv8si_mask_1 = 4342,
  CODE_FOR_avx512vl_broadcastv8sf_mask_1 = 4344,
  CODE_FOR_avx512dq_broadcastv16sf_mask_1 = 4346,
  CODE_FOR_avx512dq_broadcastv16si_mask_1 = 4348,
  CODE_FOR_avx512dq_broadcastv8di_mask_1 = 4350,
  CODE_FOR_avx512dq_broadcastv8df_mask_1 = 4352,
  CODE_FOR_avx512dq_broadcastv4di_mask_1 = 4354,
  CODE_FOR_avx512dq_broadcastv4df_mask_1 = 4356,
  CODE_FOR_avx512cd_maskb_vec_dupv8di = 4357,
  CODE_FOR_avx512cd_maskb_vec_dupv4di = 4358,
  CODE_FOR_avx512cd_maskb_vec_dupv2di = 4359,
  CODE_FOR_avx512cd_maskw_vec_dupv16si = 4360,
  CODE_FOR_avx512cd_maskw_vec_dupv8si = 4361,
  CODE_FOR_avx512cd_maskw_vec_dupv4si = 4362,
  CODE_FOR_avx512f_vpermilvarv16sf3 = 4378,
  CODE_FOR_avx512f_vpermilvarv16sf3_mask = 4379,
  CODE_FOR_avx_vpermilvarv8sf3 = 4380,
  CODE_FOR_avx_vpermilvarv8sf3_mask = 4381,
  CODE_FOR_avx_vpermilvarv4sf3 = 4382,
  CODE_FOR_avx_vpermilvarv4sf3_mask = 4383,
  CODE_FOR_avx512f_vpermilvarv8df3 = 4384,
  CODE_FOR_avx512f_vpermilvarv8df3_mask = 4385,
  CODE_FOR_avx_vpermilvarv4df3 = 4386,
  CODE_FOR_avx_vpermilvarv4df3_mask = 4387,
  CODE_FOR_avx_vpermilvarv2df3 = 4388,
  CODE_FOR_avx_vpermilvarv2df3_mask = 4389,
  CODE_FOR_avx512f_vpermt2varv16si3 = 4408,
  CODE_FOR_avx512f_vpermt2varv16si3_maskz_1 = 4409,
  CODE_FOR_avx512f_vpermt2varv16sf3 = 4410,
  CODE_FOR_avx512f_vpermt2varv16sf3_maskz_1 = 4411,
  CODE_FOR_avx512f_vpermt2varv8di3 = 4412,
  CODE_FOR_avx512f_vpermt2varv8di3_maskz_1 = 4413,
  CODE_FOR_avx512f_vpermt2varv8df3 = 4414,
  CODE_FOR_avx512f_vpermt2varv8df3_maskz_1 = 4415,
  CODE_FOR_avx512vl_vpermt2varv8si3 = 4416,
  CODE_FOR_avx512vl_vpermt2varv8si3_maskz_1 = 4417,
  CODE_FOR_avx512vl_vpermt2varv8sf3 = 4418,
  CODE_FOR_avx512vl_vpermt2varv8sf3_maskz_1 = 4419,
  CODE_FOR_avx512vl_vpermt2varv4di3 = 4420,
  CODE_FOR_avx512vl_vpermt2varv4di3_maskz_1 = 4421,
  CODE_FOR_avx512vl_vpermt2varv4df3 = 4422,
  CODE_FOR_avx512vl_vpermt2varv4df3_maskz_1 = 4423,
  CODE_FOR_avx512vl_vpermt2varv4si3 = 4424,
  CODE_FOR_avx512vl_vpermt2varv4si3_maskz_1 = 4425,
  CODE_FOR_avx512vl_vpermt2varv4sf3 = 4426,
  CODE_FOR_avx512vl_vpermt2varv4sf3_maskz_1 = 4427,
  CODE_FOR_avx512vl_vpermt2varv2di3 = 4428,
  CODE_FOR_avx512vl_vpermt2varv2di3_maskz_1 = 4429,
  CODE_FOR_avx512vl_vpermt2varv2df3 = 4430,
  CODE_FOR_avx512vl_vpermt2varv2df3_maskz_1 = 4431,
  CODE_FOR_avx512bw_vpermt2varv32hi3 = 4432,
  CODE_FOR_avx512bw_vpermt2varv32hi3_maskz_1 = 4433,
  CODE_FOR_avx512vl_vpermt2varv16hi3 = 4434,
  CODE_FOR_avx512vl_vpermt2varv16hi3_maskz_1 = 4435,
  CODE_FOR_avx512vl_vpermt2varv8hi3 = 4436,
  CODE_FOR_avx512vl_vpermt2varv8hi3_maskz_1 = 4437,
  CODE_FOR_avx512bw_vpermt2varv64qi3 = 4438,
  CODE_FOR_avx512bw_vpermt2varv64qi3_maskz_1 = 4439,
  CODE_FOR_avx512vl_vpermt2varv32qi3 = 4440,
  CODE_FOR_avx512vl_vpermt2varv32qi3_maskz_1 = 4441,
  CODE_FOR_avx512vl_vpermt2varv16qi3 = 4442,
  CODE_FOR_avx512vl_vpermt2varv16qi3_maskz_1 = 4443,
  CODE_FOR_avx512f_vpermt2varv16si3_mask = 4444,
  CODE_FOR_avx512f_vpermt2varv16sf3_mask = 4445,
  CODE_FOR_avx512f_vpermt2varv8di3_mask = 4446,
  CODE_FOR_avx512f_vpermt2varv8df3_mask = 4447,
  CODE_FOR_avx512vl_vpermt2varv8si3_mask = 4448,
  CODE_FOR_avx512vl_vpermt2varv8sf3_mask = 4449,
  CODE_FOR_avx512vl_vpermt2varv4di3_mask = 4450,
  CODE_FOR_avx512vl_vpermt2varv4df3_mask = 4451,
  CODE_FOR_avx512vl_vpermt2varv4si3_mask = 4452,
  CODE_FOR_avx512vl_vpermt2varv4sf3_mask = 4453,
  CODE_FOR_avx512vl_vpermt2varv2di3_mask = 4454,
  CODE_FOR_avx512vl_vpermt2varv2df3_mask = 4455,
  CODE_FOR_avx512bw_vpermt2varv32hi3_mask = 4456,
  CODE_FOR_avx512vl_vpermt2varv16hi3_mask = 4457,
  CODE_FOR_avx512vl_vpermt2varv8hi3_mask = 4458,
  CODE_FOR_avx512bw_vpermt2varv64qi3_mask = 4459,
  CODE_FOR_avx512vl_vpermt2varv32qi3_mask = 4460,
  CODE_FOR_avx512vl_vpermt2varv16qi3_mask = 4461,
  CODE_FOR_vec_set_lo_v4di = 4474,
  CODE_FOR_vec_set_lo_v4di_mask = 4475,
  CODE_FOR_vec_set_lo_v4df = 4476,
  CODE_FOR_vec_set_lo_v4df_mask = 4477,
  CODE_FOR_vec_set_hi_v4di = 4478,
  CODE_FOR_vec_set_hi_v4di_mask = 4479,
  CODE_FOR_vec_set_hi_v4df = 4480,
  CODE_FOR_vec_set_hi_v4df_mask = 4481,
  CODE_FOR_vec_set_lo_v8si = 4482,
  CODE_FOR_vec_set_lo_v8si_mask = 4483,
  CODE_FOR_vec_set_lo_v8sf = 4484,
  CODE_FOR_vec_set_lo_v8sf_mask = 4485,
  CODE_FOR_vec_set_hi_v8si = 4486,
  CODE_FOR_vec_set_hi_v8si_mask = 4487,
  CODE_FOR_vec_set_hi_v8sf = 4488,
  CODE_FOR_vec_set_hi_v8sf_mask = 4489,
  CODE_FOR_vec_set_lo_v16hi = 4490,
  CODE_FOR_vec_set_hi_v16hi = 4491,
  CODE_FOR_vec_set_lo_v32qi = 4492,
  CODE_FOR_vec_set_hi_v32qi = 4493,
  CODE_FOR_avx_maskloadps = 4494,
  CODE_FOR_avx_maskloadpd = 4495,
  CODE_FOR_avx_maskloadps256 = 4496,
  CODE_FOR_avx_maskloadpd256 = 4497,
  CODE_FOR_avx2_maskloadd = 4498,
  CODE_FOR_avx2_maskloadq = 4499,
  CODE_FOR_avx2_maskloadd256 = 4500,
  CODE_FOR_avx2_maskloadq256 = 4501,
  CODE_FOR_avx_maskstoreps = 4502,
  CODE_FOR_avx_maskstorepd = 4503,
  CODE_FOR_avx_maskstoreps256 = 4504,
  CODE_FOR_avx_maskstorepd256 = 4505,
  CODE_FOR_avx2_maskstored = 4506,
  CODE_FOR_avx2_maskstoreq = 4507,
  CODE_FOR_avx2_maskstored256 = 4508,
  CODE_FOR_avx2_maskstoreq256 = 4509,
  CODE_FOR_avx_si256_si = 4510,
  CODE_FOR_avx_ps256_ps = 4511,
  CODE_FOR_avx_pd256_pd = 4512,
  CODE_FOR_avx2_ashrvv4si = 4513,
  CODE_FOR_avx2_ashrvv4si_mask = 4514,
  CODE_FOR_avx2_ashrvv8si = 4515,
  CODE_FOR_avx2_ashrvv8si_mask = 4516,
  CODE_FOR_avx512f_ashrvv16si = 4517,
  CODE_FOR_avx512f_ashrvv16si_mask = 4518,
  CODE_FOR_avx2_ashrvv2di = 4519,
  CODE_FOR_avx2_ashrvv2di_mask = 4520,
  CODE_FOR_avx2_ashrvv4di = 4521,
  CODE_FOR_avx2_ashrvv4di_mask = 4522,
  CODE_FOR_avx512f_ashrvv8di = 4523,
  CODE_FOR_avx512f_ashrvv8di_mask = 4524,
  CODE_FOR_avx512vl_ashrvv8hi = 4525,
  CODE_FOR_avx512vl_ashrvv8hi_mask = 4526,
  CODE_FOR_avx512vl_ashrvv16hi = 4527,
  CODE_FOR_avx512vl_ashrvv16hi_mask = 4528,
  CODE_FOR_avx512bw_ashrvv32hi = 4529,
  CODE_FOR_avx512bw_ashrvv32hi_mask = 4530,
  CODE_FOR_avx512f_ashlvv16si = 4531,
  CODE_FOR_avx512f_ashlvv16si_mask = 4532,
  CODE_FOR_avx512f_lshrvv16si = 4533,
  CODE_FOR_avx512f_lshrvv16si_mask = 4534,
  CODE_FOR_avx2_ashlvv8si = 4535,
  CODE_FOR_avx2_ashlvv8si_mask = 4536,
  CODE_FOR_avx2_lshrvv8si = 4537,
  CODE_FOR_avx2_lshrvv8si_mask = 4538,
  CODE_FOR_avx2_ashlvv4si = 4539,
  CODE_FOR_avx2_ashlvv4si_mask = 4540,
  CODE_FOR_avx2_lshrvv4si = 4541,
  CODE_FOR_avx2_lshrvv4si_mask = 4542,
  CODE_FOR_avx512f_ashlvv8di = 4543,
  CODE_FOR_avx512f_ashlvv8di_mask = 4544,
  CODE_FOR_avx512f_lshrvv8di = 4545,
  CODE_FOR_avx512f_lshrvv8di_mask = 4546,
  CODE_FOR_avx2_ashlvv4di = 4547,
  CODE_FOR_avx2_ashlvv4di_mask = 4548,
  CODE_FOR_avx2_lshrvv4di = 4549,
  CODE_FOR_avx2_lshrvv4di_mask = 4550,
  CODE_FOR_avx2_ashlvv2di = 4551,
  CODE_FOR_avx2_ashlvv2di_mask = 4552,
  CODE_FOR_avx2_lshrvv2di = 4553,
  CODE_FOR_avx2_lshrvv2di_mask = 4554,
  CODE_FOR_avx512vl_ashlvv8hi = 4555,
  CODE_FOR_avx512vl_ashlvv8hi_mask = 4556,
  CODE_FOR_avx512vl_lshrvv8hi = 4557,
  CODE_FOR_avx512vl_lshrvv8hi_mask = 4558,
  CODE_FOR_avx512vl_ashlvv16hi = 4559,
  CODE_FOR_avx512vl_ashlvv16hi_mask = 4560,
  CODE_FOR_avx512vl_lshrvv16hi = 4561,
  CODE_FOR_avx512vl_lshrvv16hi_mask = 4562,
  CODE_FOR_avx512bw_ashlvv32hi = 4563,
  CODE_FOR_avx512bw_ashlvv32hi_mask = 4564,
  CODE_FOR_avx512bw_lshrvv32hi = 4565,
  CODE_FOR_avx512bw_lshrvv32hi_mask = 4566,
  CODE_FOR_avx_vec_concatv32qi = 4567,
  CODE_FOR_avx_vec_concatv16hi = 4568,
  CODE_FOR_avx_vec_concatv8si = 4569,
  CODE_FOR_avx_vec_concatv4di = 4570,
  CODE_FOR_avx_vec_concatv8sf = 4571,
  CODE_FOR_avx_vec_concatv4df = 4572,
  CODE_FOR_avx_vec_concatv64qi = 4573,
  CODE_FOR_avx_vec_concatv32hi = 4574,
  CODE_FOR_avx_vec_concatv16si = 4575,
  CODE_FOR_avx_vec_concatv8di = 4576,
  CODE_FOR_avx_vec_concatv16sf = 4577,
  CODE_FOR_avx_vec_concatv8df = 4578,
  CODE_FOR_vcvtph2ps = 4579,
  CODE_FOR_vcvtph2ps_mask = 4580,
  CODE_FOR_vcvtph2ps256 = 4583,
  CODE_FOR_vcvtph2ps256_mask = 4584,
  CODE_FOR_avx512f_vcvtph2ps512_mask = 4587,
  CODE_FOR_avx512f_vcvtph2ps512_mask_round = 4588,
  CODE_FOR_vcvtps2ph256 = 4592,
  CODE_FOR_vcvtps2ph256_mask = 4593,
  CODE_FOR_avx512f_vcvtps2ph512_mask = 4595,
  CODE_FOR_avx512f_compressv16si_mask = 4812,
  CODE_FOR_avx512f_compressv16sf_mask = 4813,
  CODE_FOR_avx512f_compressv8di_mask = 4814,
  CODE_FOR_avx512f_compressv8df_mask = 4815,
  CODE_FOR_avx512vl_compressv8si_mask = 4816,
  CODE_FOR_avx512vl_compressv8sf_mask = 4817,
  CODE_FOR_avx512vl_compressv4di_mask = 4818,
  CODE_FOR_avx512vl_compressv4df_mask = 4819,
  CODE_FOR_avx512vl_compressv4si_mask = 4820,
  CODE_FOR_avx512vl_compressv4sf_mask = 4821,
  CODE_FOR_avx512vl_compressv2di_mask = 4822,
  CODE_FOR_avx512vl_compressv2df_mask = 4823,
  CODE_FOR_compressv64qi_mask = 4824,
  CODE_FOR_compressv16qi_mask = 4825,
  CODE_FOR_compressv32qi_mask = 4826,
  CODE_FOR_compressv32hi_mask = 4827,
  CODE_FOR_compressv16hi_mask = 4828,
  CODE_FOR_compressv8hi_mask = 4829,
  CODE_FOR_avx512f_compressstorev16si_mask = 4830,
  CODE_FOR_avx512f_compressstorev16sf_mask = 4831,
  CODE_FOR_avx512f_compressstorev8di_mask = 4832,
  CODE_FOR_avx512f_compressstorev8df_mask = 4833,
  CODE_FOR_avx512vl_compressstorev8si_mask = 4834,
  CODE_FOR_avx512vl_compressstorev8sf_mask = 4835,
  CODE_FOR_avx512vl_compressstorev4di_mask = 4836,
  CODE_FOR_avx512vl_compressstorev4df_mask = 4837,
  CODE_FOR_avx512vl_compressstorev4si_mask = 4838,
  CODE_FOR_avx512vl_compressstorev4sf_mask = 4839,
  CODE_FOR_avx512vl_compressstorev2di_mask = 4840,
  CODE_FOR_avx512vl_compressstorev2df_mask = 4841,
  CODE_FOR_compressstorev64qi_mask = 4842,
  CODE_FOR_compressstorev16qi_mask = 4843,
  CODE_FOR_compressstorev32qi_mask = 4844,
  CODE_FOR_compressstorev32hi_mask = 4845,
  CODE_FOR_compressstorev16hi_mask = 4846,
  CODE_FOR_compressstorev8hi_mask = 4847,
  CODE_FOR_avx512f_expandv16si_mask = 4848,
  CODE_FOR_avx512f_expandv16sf_mask = 4849,
  CODE_FOR_avx512f_expandv8di_mask = 4850,
  CODE_FOR_avx512f_expandv8df_mask = 4851,
  CODE_FOR_avx512vl_expandv8si_mask = 4852,
  CODE_FOR_avx512vl_expandv8sf_mask = 4853,
  CODE_FOR_avx512vl_expandv4di_mask = 4854,
  CODE_FOR_avx512vl_expandv4df_mask = 4855,
  CODE_FOR_avx512vl_expandv4si_mask = 4856,
  CODE_FOR_avx512vl_expandv4sf_mask = 4857,
  CODE_FOR_avx512vl_expandv2di_mask = 4858,
  CODE_FOR_avx512vl_expandv2df_mask = 4859,
  CODE_FOR_expandv64qi_mask = 4860,
  CODE_FOR_expandv16qi_mask = 4861,
  CODE_FOR_expandv32qi_mask = 4862,
  CODE_FOR_expandv32hi_mask = 4863,
  CODE_FOR_expandv16hi_mask = 4864,
  CODE_FOR_expandv8hi_mask = 4865,
  CODE_FOR_avx512dq_rangepv16sf = 4866,
  CODE_FOR_avx512dq_rangepv16sf_round = 4867,
  CODE_FOR_avx512dq_rangepv16sf_mask = 4868,
  CODE_FOR_avx512dq_rangepv16sf_mask_round = 4869,
  CODE_FOR_avx512dq_rangepv8sf = 4870,
   CODE_FOR_avx512dq_rangepv8sf_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv8sf_mask = 4871,
   CODE_FOR_avx512dq_rangepv8sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv4sf = 4872,
   CODE_FOR_avx512dq_rangepv4sf_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv4sf_mask = 4873,
   CODE_FOR_avx512dq_rangepv4sf_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv8df = 4874,
  CODE_FOR_avx512dq_rangepv8df_round = 4875,
  CODE_FOR_avx512dq_rangepv8df_mask = 4876,
  CODE_FOR_avx512dq_rangepv8df_mask_round = 4877,
  CODE_FOR_avx512dq_rangepv4df = 4878,
   CODE_FOR_avx512dq_rangepv4df_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv4df_mask = 4879,
   CODE_FOR_avx512dq_rangepv4df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv2df = 4880,
   CODE_FOR_avx512dq_rangepv2df_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangepv2df_mask = 4881,
   CODE_FOR_avx512dq_rangepv2df_mask_round = CODE_FOR_nothing,
  CODE_FOR_avx512dq_rangesv4sf = 4882,
  CODE_FOR_avx512dq_rangesv4sf_mask = 4883,
  CODE_FOR_avx512dq_rangesv4sf_round = 4884,
  CODE_FOR_avx512dq_rangesv4sf_mask_round = 4885,
  CODE_FOR_avx512dq_rangesv2df = 4886,
  CODE_FOR_avx512dq_rangesv2df_mask = 4887,
  CODE_FOR_avx512dq_rangesv2df_round = 4888,
  CODE_FOR_avx512dq_rangesv2df_mask_round = 4889,
  CODE_FOR_avx512dq_fpclassv16sf = 4890,
  CODE_FOR_avx512dq_fpclassv16sf_mask = 4891,
  CODE_FOR_avx512dq_fpclassv8sf = 4892,
  CODE_FOR_avx512dq_fpclassv8sf_mask = 4893,
  CODE_FOR_avx512dq_fpclassv4sf = 4894,
  CODE_FOR_avx512dq_fpclassv4sf_mask = 4895,
  CODE_FOR_avx512dq_fpclassv8df = 4896,
  CODE_FOR_avx512dq_fpclassv8df_mask = 4897,
  CODE_FOR_avx512dq_fpclassv4df = 4898,
  CODE_FOR_avx512dq_fpclassv4df_mask = 4899,
  CODE_FOR_avx512dq_fpclassv2df = 4900,
  CODE_FOR_avx512dq_fpclassv2df_mask = 4901,
  CODE_FOR_avx512dq_vmfpclassv4sf = 4902,
  CODE_FOR_avx512dq_vmfpclassv2df = 4903,
  CODE_FOR_avx512f_getmantv16sf = 4904,
  CODE_FOR_avx512f_getmantv16sf_round = 4905,
  CODE_FOR_avx512f_getmantv16sf_mask = 4906,
  CODE_FOR_avx512f_getmantv16sf_mask_round = 4907,
  CODE_FOR_avx512vl_getmantv8sf = 4908,
  CODE_FOR_avx512vl_getmantv8sf_round = 4909,
  CODE_FOR_avx512vl_getmantv8sf_mask = 4910,
  CODE_FOR_avx512vl_getmantv8sf_mask_round = 4911,
  CODE_FOR_avx512vl_getmantv4sf = 4912,
  CODE_FOR_avx512vl_getmantv4sf_round = 4913,
  CODE_FOR_avx512vl_getmantv4sf_mask = 4914,
  CODE_FOR_avx512vl_getmantv4sf_mask_round = 4915,
  CODE_FOR_avx512f_getmantv8df = 4916,
  CODE_FOR_avx512f_getmantv8df_round = 4917,
  CODE_FOR_avx512f_getmantv8df_mask = 4918,
  CODE_FOR_avx512f_getmantv8df_mask_round = 4919,
  CODE_FOR_avx512vl_getmantv4df = 4920,
  CODE_FOR_avx512vl_getmantv4df_round = 4921,
  CODE_FOR_avx512vl_getmantv4df_mask = 4922,
  CODE_FOR_avx512vl_getmantv4df_mask_round = 4923,
  CODE_FOR_avx512vl_getmantv2df = 4924,
  CODE_FOR_avx512vl_getmantv2df_round = 4925,
  CODE_FOR_avx512vl_getmantv2df_mask = 4926,
  CODE_FOR_avx512vl_getmantv2df_mask_round = 4927,
  CODE_FOR_avx512f_vgetmantv4sf = 4928,
  CODE_FOR_avx512f_vgetmantv4sf_mask = 4929,
  CODE_FOR_avx512f_vgetmantv4sf_round = 4930,
  CODE_FOR_avx512f_vgetmantv4sf_mask_round = 4931,
  CODE_FOR_avx512f_vgetmantv2df = 4932,
  CODE_FOR_avx512f_vgetmantv2df_mask = 4933,
  CODE_FOR_avx512f_vgetmantv2df_round = 4934,
  CODE_FOR_avx512f_vgetmantv2df_mask_round = 4935,
  CODE_FOR_avx512bw_dbpsadbwv8hi_mask = 4937,
  CODE_FOR_avx512bw_dbpsadbwv16hi_mask = 4939,
  CODE_FOR_avx512bw_dbpsadbwv32hi_mask = 4941,
  CODE_FOR_clzv16si2 = 4942,
  CODE_FOR_clzv16si2_mask = 4943,
  CODE_FOR_clzv8si2 = 4944,
  CODE_FOR_clzv8si2_mask = 4945,
  CODE_FOR_clzv4si2 = 4946,
  CODE_FOR_clzv4si2_mask = 4947,
  CODE_FOR_clzv8di2 = 4948,
  CODE_FOR_clzv8di2_mask = 4949,
  CODE_FOR_clzv4di2 = 4950,
  CODE_FOR_clzv4di2_mask = 4951,
  CODE_FOR_clzv2di2 = 4952,
  CODE_FOR_clzv2di2_mask = 4953,
  CODE_FOR_conflictv16si_mask = 4955,
  CODE_FOR_conflictv8si_mask = 4957,
  CODE_FOR_conflictv4si_mask = 4959,
  CODE_FOR_conflictv8di_mask = 4961,
  CODE_FOR_conflictv4di_mask = 4963,
  CODE_FOR_conflictv2di_mask = 4965,
  CODE_FOR_sha1msg1 = 4966,
  CODE_FOR_sha1msg2 = 4967,
  CODE_FOR_sha1nexte = 4968,
  CODE_FOR_sha1rnds4 = 4969,
  CODE_FOR_sha256msg1 = 4970,
  CODE_FOR_sha256msg2 = 4971,
  CODE_FOR_sha256rnds2 = 4972,
  CODE_FOR_avx512f_si512_si = 4973,
  CODE_FOR_avx512f_ps512_ps = 4974,
  CODE_FOR_avx512f_pd512_pd = 4975,
  CODE_FOR_avx512f_si512_256si = 4976,
  CODE_FOR_avx512f_ps512_256ps = 4977,
  CODE_FOR_avx512f_pd512_256pd = 4978,
  CODE_FOR_vpamdd52luqv8di = 4979,
  CODE_FOR_vpamdd52luqv8di_maskz_1 = 4980,
  CODE_FOR_vpamdd52huqv8di = 4981,
  CODE_FOR_vpamdd52huqv8di_maskz_1 = 4982,
  CODE_FOR_vpamdd52luqv4di = 4983,
  CODE_FOR_vpamdd52luqv4di_maskz_1 = 4984,
  CODE_FOR_vpamdd52huqv4di = 4985,
  CODE_FOR_vpamdd52huqv4di_maskz_1 = 4986,
  CODE_FOR_vpamdd52luqv2di = 4987,
  CODE_FOR_vpamdd52luqv2di_maskz_1 = 4988,
  CODE_FOR_vpamdd52huqv2di = 4989,
  CODE_FOR_vpamdd52huqv2di_maskz_1 = 4990,
  CODE_FOR_vpamdd52luqv8di_mask = 4991,
  CODE_FOR_vpamdd52huqv8di_mask = 4992,
  CODE_FOR_vpamdd52luqv4di_mask = 4993,
  CODE_FOR_vpamdd52huqv4di_mask = 4994,
  CODE_FOR_vpamdd52luqv2di_mask = 4995,
  CODE_FOR_vpamdd52huqv2di_mask = 4996,
  CODE_FOR_vpmultishiftqbv64qi = 4997,
  CODE_FOR_vpmultishiftqbv64qi_mask = 4998,
  CODE_FOR_vpmultishiftqbv16qi = 4999,
  CODE_FOR_vpmultishiftqbv16qi_mask = 5000,
  CODE_FOR_vpmultishiftqbv32qi = 5001,
  CODE_FOR_vpmultishiftqbv32qi_mask = 5002,
  CODE_FOR_avx5124fmaddps_4fmaddps = 5005,
  CODE_FOR_avx5124fmaddps_4fmaddps_mask = 5006,
  CODE_FOR_avx5124fmaddps_4fmaddps_maskz = 5007,
  CODE_FOR_avx5124fmaddps_4fmaddss = 5008,
  CODE_FOR_avx5124fmaddps_4fmaddss_mask = 5009,
  CODE_FOR_avx5124fmaddps_4fmaddss_maskz = 5010,
  CODE_FOR_avx5124fmaddps_4fnmaddps = 5011,
  CODE_FOR_avx5124fmaddps_4fnmaddps_mask = 5012,
  CODE_FOR_avx5124fmaddps_4fnmaddps_maskz = 5013,
  CODE_FOR_avx5124fmaddps_4fnmaddss = 5014,
  CODE_FOR_avx5124fmaddps_4fnmaddss_mask = 5015,
  CODE_FOR_avx5124fmaddps_4fnmaddss_maskz = 5016,
  CODE_FOR_avx5124vnniw_vp4dpwssd = 5017,
  CODE_FOR_avx5124vnniw_vp4dpwssd_mask = 5018,
  CODE_FOR_avx5124vnniw_vp4dpwssd_maskz = 5019,
  CODE_FOR_avx5124vnniw_vp4dpwssds = 5020,
  CODE_FOR_avx5124vnniw_vp4dpwssds_mask = 5021,
  CODE_FOR_avx5124vnniw_vp4dpwssds_maskz = 5022,
  CODE_FOR_vpopcountv16si = 5023,
  CODE_FOR_vpopcountv16si_mask = 5024,
  CODE_FOR_vpopcountv8si = 5025,
  CODE_FOR_vpopcountv8si_mask = 5026,
  CODE_FOR_vpopcountv4si = 5027,
  CODE_FOR_vpopcountv4si_mask = 5028,
  CODE_FOR_vpopcountv8di = 5029,
  CODE_FOR_vpopcountv8di_mask = 5030,
  CODE_FOR_vpopcountv4di = 5031,
  CODE_FOR_vpopcountv4di_mask = 5032,
  CODE_FOR_vpopcountv2di = 5033,
  CODE_FOR_vpopcountv2di_mask = 5034,
  CODE_FOR_save_multiplesi = 5035,
  CODE_FOR_save_multipledi = 5036,
  CODE_FOR_restore_multiplesi = 5037,
  CODE_FOR_restore_multipledi = 5038,
  CODE_FOR_restore_multiple_and_returnsi = 5039,
  CODE_FOR_restore_multiple_and_returndi = 5040,
  CODE_FOR_restore_multiple_leave_returnsi = 5041,
  CODE_FOR_restore_multiple_leave_returndi = 5042,
  CODE_FOR_vpopcountv64qi = 5043,
  CODE_FOR_vpopcountv64qi_mask = 5044,
  CODE_FOR_vpopcountv16qi = 5045,
  CODE_FOR_vpopcountv16qi_mask = 5046,
  CODE_FOR_vpopcountv32qi = 5047,
  CODE_FOR_vpopcountv32qi_mask = 5048,
  CODE_FOR_vpopcountv32hi = 5049,
  CODE_FOR_vpopcountv32hi_mask = 5050,
  CODE_FOR_vpopcountv16hi = 5051,
  CODE_FOR_vpopcountv16hi_mask = 5052,
  CODE_FOR_vpopcountv8hi = 5053,
  CODE_FOR_vpopcountv8hi_mask = 5054,
  CODE_FOR_vgf2p8affineinvqb_v64qi = 5055,
  CODE_FOR_vgf2p8affineinvqb_v64qi_mask = 5056,
  CODE_FOR_vgf2p8affineinvqb_v32qi = 5057,
  CODE_FOR_vgf2p8affineinvqb_v32qi_mask = 5058,
  CODE_FOR_vgf2p8affineinvqb_v16qi = 5059,
  CODE_FOR_vgf2p8affineinvqb_v16qi_mask = 5060,
  CODE_FOR_vgf2p8affineqb_v64qi = 5061,
  CODE_FOR_vgf2p8affineqb_v64qi_mask = 5062,
  CODE_FOR_vgf2p8affineqb_v32qi = 5063,
  CODE_FOR_vgf2p8affineqb_v32qi_mask = 5064,
  CODE_FOR_vgf2p8affineqb_v16qi = 5065,
  CODE_FOR_vgf2p8affineqb_v16qi_mask = 5066,
  CODE_FOR_vgf2p8mulb_v64qi = 5067,
  CODE_FOR_vgf2p8mulb_v64qi_mask = 5068,
  CODE_FOR_vgf2p8mulb_v32qi = 5069,
  CODE_FOR_vgf2p8mulb_v32qi_mask = 5070,
  CODE_FOR_vgf2p8mulb_v16qi = 5071,
  CODE_FOR_vgf2p8mulb_v16qi_mask = 5072,
  CODE_FOR_vpshrd_v32hi = 5073,
  CODE_FOR_vpshrd_v32hi_mask = 5074,
  CODE_FOR_vpshrd_v16si = 5075,
  CODE_FOR_vpshrd_v16si_mask = 5076,
  CODE_FOR_vpshrd_v8di = 5077,
  CODE_FOR_vpshrd_v8di_mask = 5078,
  CODE_FOR_vpshrd_v16hi = 5079,
  CODE_FOR_vpshrd_v16hi_mask = 5080,
  CODE_FOR_vpshrd_v8si = 5081,
  CODE_FOR_vpshrd_v8si_mask = 5082,
  CODE_FOR_vpshrd_v4di = 5083,
  CODE_FOR_vpshrd_v4di_mask = 5084,
  CODE_FOR_vpshrd_v8hi = 5085,
  CODE_FOR_vpshrd_v8hi_mask = 5086,
  CODE_FOR_vpshrd_v4si = 5087,
  CODE_FOR_vpshrd_v4si_mask = 5088,
  CODE_FOR_vpshrd_v2di = 5089,
  CODE_FOR_vpshrd_v2di_mask = 5090,
  CODE_FOR_vpshld_v32hi = 5091,
  CODE_FOR_vpshld_v32hi_mask = 5092,
  CODE_FOR_vpshld_v16si = 5093,
  CODE_FOR_vpshld_v16si_mask = 5094,
  CODE_FOR_vpshld_v8di = 5095,
  CODE_FOR_vpshld_v8di_mask = 5096,
  CODE_FOR_vpshld_v16hi = 5097,
  CODE_FOR_vpshld_v16hi_mask = 5098,
  CODE_FOR_vpshld_v8si = 5099,
  CODE_FOR_vpshld_v8si_mask = 5100,
  CODE_FOR_vpshld_v4di = 5101,
  CODE_FOR_vpshld_v4di_mask = 5102,
  CODE_FOR_vpshld_v8hi = 5103,
  CODE_FOR_vpshld_v8hi_mask = 5104,
  CODE_FOR_vpshld_v4si = 5105,
  CODE_FOR_vpshld_v4si_mask = 5106,
  CODE_FOR_vpshld_v2di = 5107,
  CODE_FOR_vpshld_v2di_mask = 5108,
  CODE_FOR_vpshrdv_v32hi = 5109,
  CODE_FOR_vpshrdv_v16si = 5110,
  CODE_FOR_vpshrdv_v8di = 5111,
  CODE_FOR_vpshrdv_v16hi = 5112,
  CODE_FOR_vpshrdv_v8si = 5113,
  CODE_FOR_vpshrdv_v4di = 5114,
  CODE_FOR_vpshrdv_v8hi = 5115,
  CODE_FOR_vpshrdv_v4si = 5116,
  CODE_FOR_vpshrdv_v2di = 5117,
  CODE_FOR_vpshrdv_v32hi_mask = 5118,
  CODE_FOR_vpshrdv_v16si_mask = 5119,
  CODE_FOR_vpshrdv_v8di_mask = 5120,
  CODE_FOR_vpshrdv_v16hi_mask = 5121,
  CODE_FOR_vpshrdv_v8si_mask = 5122,
  CODE_FOR_vpshrdv_v4di_mask = 5123,
  CODE_FOR_vpshrdv_v8hi_mask = 5124,
  CODE_FOR_vpshrdv_v4si_mask = 5125,
  CODE_FOR_vpshrdv_v2di_mask = 5126,
  CODE_FOR_vpshrdv_v32hi_maskz_1 = 5127,
  CODE_FOR_vpshrdv_v16si_maskz_1 = 5128,
  CODE_FOR_vpshrdv_v8di_maskz_1 = 5129,
  CODE_FOR_vpshrdv_v16hi_maskz_1 = 5130,
  CODE_FOR_vpshrdv_v8si_maskz_1 = 5131,
  CODE_FOR_vpshrdv_v4di_maskz_1 = 5132,
  CODE_FOR_vpshrdv_v8hi_maskz_1 = 5133,
  CODE_FOR_vpshrdv_v4si_maskz_1 = 5134,
  CODE_FOR_vpshrdv_v2di_maskz_1 = 5135,
  CODE_FOR_vpshldv_v32hi = 5136,
  CODE_FOR_vpshldv_v16si = 5137,
  CODE_FOR_vpshldv_v8di = 5138,
  CODE_FOR_vpshldv_v16hi = 5139,
  CODE_FOR_vpshldv_v8si = 5140,
  CODE_FOR_vpshldv_v4di = 5141,
  CODE_FOR_vpshldv_v8hi = 5142,
  CODE_FOR_vpshldv_v4si = 5143,
  CODE_FOR_vpshldv_v2di = 5144,
  CODE_FOR_vpshldv_v32hi_mask = 5145,
  CODE_FOR_vpshldv_v16si_mask = 5146,
  CODE_FOR_vpshldv_v8di_mask = 5147,
  CODE_FOR_vpshldv_v16hi_mask = 5148,
  CODE_FOR_vpshldv_v8si_mask = 5149,
  CODE_FOR_vpshldv_v4di_mask = 5150,
  CODE_FOR_vpshldv_v8hi_mask = 5151,
  CODE_FOR_vpshldv_v4si_mask = 5152,
  CODE_FOR_vpshldv_v2di_mask = 5153,
  CODE_FOR_vpshldv_v32hi_maskz_1 = 5154,
  CODE_FOR_vpshldv_v16si_maskz_1 = 5155,
  CODE_FOR_vpshldv_v8di_maskz_1 = 5156,
  CODE_FOR_vpshldv_v16hi_maskz_1 = 5157,
  CODE_FOR_vpshldv_v8si_maskz_1 = 5158,
  CODE_FOR_vpshldv_v4di_maskz_1 = 5159,
  CODE_FOR_vpshldv_v8hi_maskz_1 = 5160,
  CODE_FOR_vpshldv_v4si_maskz_1 = 5161,
  CODE_FOR_vpshldv_v2di_maskz_1 = 5162,
  CODE_FOR_vpdpbusd_v16si = 5163,
  CODE_FOR_vpdpbusd_v8si = 5164,
  CODE_FOR_vpdpbusd_v4si = 5165,
  CODE_FOR_vpdpbusd_v16si_mask = 5166,
  CODE_FOR_vpdpbusd_v8si_mask = 5167,
  CODE_FOR_vpdpbusd_v4si_mask = 5168,
  CODE_FOR_vpdpbusd_v16si_maskz_1 = 5169,
  CODE_FOR_vpdpbusd_v8si_maskz_1 = 5170,
  CODE_FOR_vpdpbusd_v4si_maskz_1 = 5171,
  CODE_FOR_vpdpbusds_v16si = 5172,
  CODE_FOR_vpdpbusds_v8si = 5173,
  CODE_FOR_vpdpbusds_v4si = 5174,
  CODE_FOR_vpdpbusds_v16si_mask = 5175,
  CODE_FOR_vpdpbusds_v8si_mask = 5176,
  CODE_FOR_vpdpbusds_v4si_mask = 5177,
  CODE_FOR_vpdpbusds_v16si_maskz_1 = 5178,
  CODE_FOR_vpdpbusds_v8si_maskz_1 = 5179,
  CODE_FOR_vpdpbusds_v4si_maskz_1 = 5180,
  CODE_FOR_vpdpwssd_v16si = 5181,
  CODE_FOR_vpdpwssd_v8si = 5182,
  CODE_FOR_vpdpwssd_v4si = 5183,
  CODE_FOR_vpdpwssd_v16si_mask = 5184,
  CODE_FOR_vpdpwssd_v8si_mask = 5185,
  CODE_FOR_vpdpwssd_v4si_mask = 5186,
  CODE_FOR_vpdpwssd_v16si_maskz_1 = 5187,
  CODE_FOR_vpdpwssd_v8si_maskz_1 = 5188,
  CODE_FOR_vpdpwssd_v4si_maskz_1 = 5189,
  CODE_FOR_vpdpwssds_v16si = 5190,
  CODE_FOR_vpdpwssds_v8si = 5191,
  CODE_FOR_vpdpwssds_v4si = 5192,
  CODE_FOR_vpdpwssds_v16si_mask = 5193,
  CODE_FOR_vpdpwssds_v8si_mask = 5194,
  CODE_FOR_vpdpwssds_v4si_mask = 5195,
  CODE_FOR_vpdpwssds_v16si_maskz_1 = 5196,
  CODE_FOR_vpdpwssds_v8si_maskz_1 = 5197,
  CODE_FOR_vpdpwssds_v4si_maskz_1 = 5198,
  CODE_FOR_vaesdec_v32qi = 5199,
  CODE_FOR_vaesdec_v16qi = 5200,
  CODE_FOR_vaesdec_v64qi = 5201,
  CODE_FOR_vaesdeclast_v32qi = 5202,
  CODE_FOR_vaesdeclast_v16qi = 5203,
  CODE_FOR_vaesdeclast_v64qi = 5204,
  CODE_FOR_vaesenc_v32qi = 5205,
  CODE_FOR_vaesenc_v16qi = 5206,
  CODE_FOR_vaesenc_v64qi = 5207,
  CODE_FOR_vaesenclast_v32qi = 5208,
  CODE_FOR_vaesenclast_v16qi = 5209,
  CODE_FOR_vaesenclast_v64qi = 5210,
  CODE_FOR_vpclmulqdq_v8di = 5211,
  CODE_FOR_vpclmulqdq_v4di = 5212,
  CODE_FOR_vpclmulqdq_v2di = 5213,
  CODE_FOR_avx512vl_vpshufbitqmbv64qi = 5214,
  CODE_FOR_avx512vl_vpshufbitqmbv64qi_mask = 5215,
  CODE_FOR_avx512vl_vpshufbitqmbv32qi = 5216,
  CODE_FOR_avx512vl_vpshufbitqmbv32qi_mask = 5217,
  CODE_FOR_avx512vl_vpshufbitqmbv16qi = 5218,
  CODE_FOR_avx512vl_vpshufbitqmbv16qi_mask = 5219,
  CODE_FOR_mfence_sse2 = 5222,
  CODE_FOR_mfence_nosse = 5223,
  CODE_FOR_atomic_loaddi_fpu = 5224,
  CODE_FOR_atomic_storeqi_1 = 5225,
  CODE_FOR_atomic_storehi_1 = 5226,
  CODE_FOR_atomic_storesi_1 = 5227,
  CODE_FOR_atomic_storedi_1 = 5228,
  CODE_FOR_atomic_storedi_fpu = 5229,
  CODE_FOR_loaddi_via_fpu = 5230,
  CODE_FOR_storedi_via_fpu = 5231,
  CODE_FOR_loaddi_via_sse = 5232,
  CODE_FOR_storedi_via_sse = 5233,
  CODE_FOR_atomic_compare_and_swapdi_doubleword = 5234,
  CODE_FOR_atomic_compare_and_swapti_doubleword = 5235,
  CODE_FOR_atomic_compare_and_swapqi_1 = 5236,
  CODE_FOR_atomic_compare_and_swaphi_1 = 5237,
  CODE_FOR_atomic_compare_and_swapsi_1 = 5238,
  CODE_FOR_atomic_compare_and_swapdi_1 = 5239,
  CODE_FOR_atomic_fetch_addqi = 5240,
  CODE_FOR_atomic_fetch_addhi = 5241,
  CODE_FOR_atomic_fetch_addsi = 5242,
  CODE_FOR_atomic_fetch_adddi = 5243,
  CODE_FOR_atomic_exchangeqi = 5248,
  CODE_FOR_atomic_exchangehi = 5249,
  CODE_FOR_atomic_exchangesi = 5250,
  CODE_FOR_atomic_exchangedi = 5251,
  CODE_FOR_atomic_addqi = 5252,
  CODE_FOR_atomic_addhi = 5253,
  CODE_FOR_atomic_addsi = 5254,
  CODE_FOR_atomic_adddi = 5255,
  CODE_FOR_atomic_subqi = 5256,
  CODE_FOR_atomic_subhi = 5257,
  CODE_FOR_atomic_subsi = 5258,
  CODE_FOR_atomic_subdi = 5259,
  CODE_FOR_atomic_andqi = 5260,
  CODE_FOR_atomic_orqi = 5261,
  CODE_FOR_atomic_xorqi = 5262,
  CODE_FOR_atomic_andhi = 5263,
  CODE_FOR_atomic_orhi = 5264,
  CODE_FOR_atomic_xorhi = 5265,
  CODE_FOR_atomic_andsi = 5266,
  CODE_FOR_atomic_orsi = 5267,
  CODE_FOR_atomic_xorsi = 5268,
  CODE_FOR_atomic_anddi = 5269,
  CODE_FOR_atomic_ordi = 5270,
  CODE_FOR_atomic_xordi = 5271,
  CODE_FOR_atomic_bit_test_and_sethi_1 = 5272,
  CODE_FOR_atomic_bit_test_and_setsi_1 = 5273,
  CODE_FOR_atomic_bit_test_and_setdi_1 = 5274,
  CODE_FOR_atomic_bit_test_and_complementhi_1 = 5275,
  CODE_FOR_atomic_bit_test_and_complementsi_1 = 5276,
  CODE_FOR_atomic_bit_test_and_complementdi_1 = 5277,
  CODE_FOR_atomic_bit_test_and_resethi_1 = 5278,
  CODE_FOR_atomic_bit_test_and_resetsi_1 = 5279,
  CODE_FOR_atomic_bit_test_and_resetdi_1 = 5280,
  CODE_FOR_cbranchqi4 = 5281,
  CODE_FOR_cbranchhi4 = 5282,
  CODE_FOR_cbranchsi4 = 5283,
  CODE_FOR_cbranchdi4 = 5284,
  CODE_FOR_cbranchti4 = 5285,
  CODE_FOR_cstoreqi4 = 5286,
  CODE_FOR_cstorehi4 = 5287,
  CODE_FOR_cstoresi4 = 5288,
  CODE_FOR_cstoredi4 = 5289,
  CODE_FOR_cmpsi_1 = 5290,
  CODE_FOR_cmpdi_1 = 5291,
  CODE_FOR_cmpqi_ext_3 = 5292,
  CODE_FOR_cbranchxf4 = 5293,
  CODE_FOR_cstorexf4 = 5294,
  CODE_FOR_cbranchsf4 = 5295,
  CODE_FOR_cbranchdf4 = 5296,
  CODE_FOR_cstoresf4 = 5297,
  CODE_FOR_cstoredf4 = 5298,
  CODE_FOR_cbranchcc4 = 5299,
  CODE_FOR_cstorecc4 = 5300,
  CODE_FOR_reload_noff_store = 5301,
  CODE_FOR_reload_noff_load = 5302,
  CODE_FOR_movxi = 5303,
  CODE_FOR_movoi = 5304,
  CODE_FOR_movti = 5305,
  CODE_FOR_movcdi = 5306,
  CODE_FOR_movqi = 5307,
  CODE_FOR_movhi = 5308,
  CODE_FOR_movsi = 5309,
  CODE_FOR_movdi = 5310,
  CODE_FOR_movstrictqi = 5311,
  CODE_FOR_movstricthi = 5312,
  CODE_FOR_extvhi = 5313,
  CODE_FOR_extvsi = 5314,
  CODE_FOR_extzvhi = 5315,
  CODE_FOR_extzvsi = 5316,
  CODE_FOR_extzvdi = 5317,
  CODE_FOR_insvhi = 5318,
  CODE_FOR_insvsi = 5319,
  CODE_FOR_insvdi = 5320,
  CODE_FOR_movtf = 5321,
  CODE_FOR_movsf = 5322,
  CODE_FOR_movdf = 5323,
  CODE_FOR_movxf = 5324,
  CODE_FOR_zero_extendsidi2 = 5325,
  CODE_FOR_zero_extendqisi2 = 5326,
  CODE_FOR_zero_extendhisi2 = 5327,
  CODE_FOR_zero_extendqihi2 = 5328,
  CODE_FOR_extendsidi2 = 5329,
  CODE_FOR_extendsfdf2 = 5330,
  CODE_FOR_extendsfxf2 = 5331,
  CODE_FOR_extenddfxf2 = 5332,
  CODE_FOR_truncdfsf2 = 5333,
  CODE_FOR_truncdfsf2_with_temp = 5334,
  CODE_FOR_truncxfsf2 = 5335,
  CODE_FOR_truncxfdf2 = 5336,
  CODE_FOR_fix_truncxfdi2 = 5337,
  CODE_FOR_fix_truncsfdi2 = 5338,
  CODE_FOR_fix_truncdfdi2 = 5339,
  CODE_FOR_fix_truncxfsi2 = 5340,
  CODE_FOR_fix_truncsfsi2 = 5341,
  CODE_FOR_fix_truncdfsi2 = 5342,
  CODE_FOR_fix_truncsfhi2 = 5343,
  CODE_FOR_fix_truncdfhi2 = 5344,
  CODE_FOR_fix_truncxfhi2 = 5345,
  CODE_FOR_fixuns_truncsfsi2 = 5346,
  CODE_FOR_fixuns_truncdfsi2 = 5347,
  CODE_FOR_fixuns_truncsfhi2 = 5348,
  CODE_FOR_fixuns_truncdfhi2 = 5349,
  CODE_FOR_floatsisf2 = 5350,
  CODE_FOR_floatdisf2 = 5351,
  CODE_FOR_floatsidf2 = 5352,
  CODE_FOR_floatdidf2 = 5353,
  CODE_FOR_floatunsqisf2 = 5354,
  CODE_FOR_floatunshisf2 = 5355,
  CODE_FOR_floatunsqidf2 = 5356,
  CODE_FOR_floatunshidf2 = 5357,
  CODE_FOR_floatunssisf2 = 5358,
  CODE_FOR_floatunssidf2 = 5359,
  CODE_FOR_floatunssixf2 = 5360,
  CODE_FOR_floatunsdisf2 = 5361,
  CODE_FOR_floatunsdidf2 = 5362,
  CODE_FOR_addqi3 = 5363,
  CODE_FOR_addhi3 = 5364,
  CODE_FOR_addsi3 = 5365,
  CODE_FOR_adddi3 = 5366,
  CODE_FOR_addti3 = 5367,
  CODE_FOR_addvqi4 = 5368,
  CODE_FOR_addvhi4 = 5369,
  CODE_FOR_addvsi4 = 5370,
  CODE_FOR_addvdi4 = 5371,
  CODE_FOR_uaddvqi4 = 5372,
  CODE_FOR_uaddvhi4 = 5373,
  CODE_FOR_uaddvsi4 = 5374,
  CODE_FOR_uaddvdi4 = 5375,
  CODE_FOR_subqi3 = 5376,
  CODE_FOR_subhi3 = 5377,
  CODE_FOR_subsi3 = 5378,
  CODE_FOR_subdi3 = 5379,
  CODE_FOR_subti3 = 5380,
  CODE_FOR_subvqi4 = 5381,
  CODE_FOR_subvhi4 = 5382,
  CODE_FOR_subvsi4 = 5383,
  CODE_FOR_subvdi4 = 5384,
  CODE_FOR_usubvqi4 = 5385,
  CODE_FOR_usubvhi4 = 5386,
  CODE_FOR_usubvsi4 = 5387,
  CODE_FOR_usubvdi4 = 5388,
  CODE_FOR_addcarrysi_0 = 5389,
  CODE_FOR_addcarrydi_0 = 5390,
  CODE_FOR_subborrowsi_0 = 5391,
  CODE_FOR_subborrowdi_0 = 5392,
  CODE_FOR_addqi3_cconly_overflow = 5393,
  CODE_FOR_addxf3 = 5394,
  CODE_FOR_subxf3 = 5395,
  CODE_FOR_addsf3 = 5396,
  CODE_FOR_subsf3 = 5397,
  CODE_FOR_adddf3 = 5398,
  CODE_FOR_subdf3 = 5399,
  CODE_FOR_mulhi3 = 5400,
  CODE_FOR_mulsi3 = 5401,
  CODE_FOR_muldi3 = 5402,
  CODE_FOR_mulqi3 = 5403,
  CODE_FOR_mulvhi4 = 5404,
  CODE_FOR_mulvsi4 = 5405,
  CODE_FOR_mulvdi4 = 5406,
  CODE_FOR_umulvhi4 = 5407,
  CODE_FOR_umulvsi4 = 5408,
  CODE_FOR_umulvdi4 = 5409,
  CODE_FOR_mulvqi4 = 5410,
  CODE_FOR_umulvqi4 = 5411,
  CODE_FOR_mulsidi3 = 5412,
  CODE_FOR_umulsidi3 = 5413,
  CODE_FOR_mulditi3 = 5414,
  CODE_FOR_umulditi3 = 5415,
  CODE_FOR_mulqihi3 = 5416,
  CODE_FOR_umulqihi3 = 5417,
  CODE_FOR_smulsi3_highpart = 5418,
  CODE_FOR_umulsi3_highpart = 5419,
  CODE_FOR_smuldi3_highpart = 5420,
  CODE_FOR_umuldi3_highpart = 5421,
  CODE_FOR_mulxf3 = 5422,
  CODE_FOR_mulsf3 = 5423,
  CODE_FOR_muldf3 = 5424,
  CODE_FOR_divxf3 = 5425,
  CODE_FOR_divsf3 = 5426,
  CODE_FOR_divdf3 = 5427,
  CODE_FOR_divmodhi4 = 5428,
  CODE_FOR_divmodsi4 = 5429,
  CODE_FOR_divmoddi4 = 5430,
  CODE_FOR_divmodqi4 = 5431,
  CODE_FOR_udivmodhi4 = 5432,
  CODE_FOR_udivmodsi4 = 5433,
  CODE_FOR_udivmoddi4 = 5434,
  CODE_FOR_udivmodqi4 = 5435,
  CODE_FOR_testsi_ccno_1 = 5436,
  CODE_FOR_testqi_ccz_1 = 5437,
  CODE_FOR_testdi_ccno_1 = 5438,
  CODE_FOR_testqi_ext_1_ccno = 5439,
  CODE_FOR_andqi3 = 5440,
  CODE_FOR_andhi3 = 5441,
  CODE_FOR_andsi3 = 5442,
  CODE_FOR_anddi3 = 5443,
  CODE_FOR_iorqi3 = 5444,
  CODE_FOR_xorqi3 = 5445,
  CODE_FOR_iorhi3 = 5446,
  CODE_FOR_xorhi3 = 5447,
  CODE_FOR_iorsi3 = 5448,
  CODE_FOR_xorsi3 = 5449,
  CODE_FOR_iordi3 = 5450,
  CODE_FOR_xordi3 = 5451,
  CODE_FOR_xorqi_ext_1_cc = 5452,
  CODE_FOR_negqi2 = 5453,
  CODE_FOR_neghi2 = 5454,
  CODE_FOR_negsi2 = 5455,
  CODE_FOR_negdi2 = 5456,
  CODE_FOR_negti2 = 5457,
  CODE_FOR_negvqi3 = 5458,
  CODE_FOR_negvhi3 = 5459,
  CODE_FOR_negvsi3 = 5460,
  CODE_FOR_negvdi3 = 5461,
  CODE_FOR_abssf2 = 5462,
  CODE_FOR_negsf2 = 5463,
  CODE_FOR_absdf2 = 5464,
  CODE_FOR_negdf2 = 5465,
  CODE_FOR_absxf2 = 5466,
  CODE_FOR_negxf2 = 5467,
  CODE_FOR_abstf2 = 5468,
  CODE_FOR_negtf2 = 5469,
  CODE_FOR_copysignsf3 = 5470,
  CODE_FOR_copysigndf3 = 5471,
  CODE_FOR_copysigntf3 = 5472,
  CODE_FOR_one_cmplqi2 = 5473,
  CODE_FOR_one_cmplhi2 = 5474,
  CODE_FOR_one_cmplsi2 = 5475,
  CODE_FOR_one_cmpldi2 = 5476,
  CODE_FOR_ashlqi3 = 5477,
  CODE_FOR_ashlhi3 = 5478,
  CODE_FOR_ashlsi3 = 5479,
  CODE_FOR_ashldi3 = 5480,
  CODE_FOR_ashlti3 = 5481,
  CODE_FOR_x86_shiftsi_adj_1 = 5482,
  CODE_FOR_x86_shiftdi_adj_1 = 5483,
  CODE_FOR_x86_shiftsi_adj_2 = 5484,
  CODE_FOR_x86_shiftdi_adj_2 = 5485,
  CODE_FOR_lshrqi3 = 5486,
  CODE_FOR_ashrqi3 = 5487,
  CODE_FOR_lshrhi3 = 5488,
  CODE_FOR_ashrhi3 = 5489,
  CODE_FOR_lshrsi3 = 5490,
  CODE_FOR_ashrsi3 = 5491,
  CODE_FOR_lshrdi3 = 5492,
  CODE_FOR_ashrdi3 = 5493,
  CODE_FOR_lshrti3 = 5494,
  CODE_FOR_ashrti3 = 5495,
  CODE_FOR_x86_shiftsi_adj_3 = 5496,
  CODE_FOR_x86_shiftdi_adj_3 = 5497,
  CODE_FOR_rotlti3 = 5498,
  CODE_FOR_rotrti3 = 5499,
  CODE_FOR_rotldi3 = 5500,
  CODE_FOR_rotrdi3 = 5501,
  CODE_FOR_rotlqi3 = 5502,
  CODE_FOR_rotrqi3 = 5503,
  CODE_FOR_rotlhi3 = 5504,
  CODE_FOR_rotrhi3 = 5505,
  CODE_FOR_rotlsi3 = 5506,
  CODE_FOR_rotrsi3 = 5507,
  CODE_FOR_indirect_jump = 5508,
  CODE_FOR_tablejump = 5509,
  CODE_FOR_call = 5510,
  CODE_FOR_sibcall = 5511,
  CODE_FOR_call_pop = 5512,
  CODE_FOR_call_value = 5513,
  CODE_FOR_sibcall_value = 5514,
  CODE_FOR_call_value_pop = 5515,
  CODE_FOR_untyped_call = 5516,
  CODE_FOR_memory_blockage = 5517,
  CODE_FOR_return = 5518,
  CODE_FOR_simple_return = 5519,
  CODE_FOR_prologue = 5520,
  CODE_FOR_set_got = 5521,
  CODE_FOR_set_got_labelled = 5522,
  CODE_FOR_epilogue = 5523,
  CODE_FOR_sibcall_epilogue = 5524,
  CODE_FOR_eh_return = 5525,
  CODE_FOR_split_stack_prologue = 5526,
  CODE_FOR_split_stack_space_check = 5527,
  CODE_FOR_ffssi2 = 5528,
  CODE_FOR_ffsdi2 = 5529,
  CODE_FOR_clzsi2 = 5530,
  CODE_FOR_clzdi2 = 5531,
  CODE_FOR_bmi2_bzhi_si3 = 5532,
  CODE_FOR_bmi2_bzhi_di3 = 5533,
  CODE_FOR_bswapdi2 = 5534,
  CODE_FOR_bswapsi2 = 5535,
  CODE_FOR_bswaphi2 = 5536,
  CODE_FOR_paritydi2 = 5537,
  CODE_FOR_paritysi2 = 5538,
  CODE_FOR_tls_global_dynamic_32 = 5539,
  CODE_FOR_tls_global_dynamic_64_si = 5540,
  CODE_FOR_tls_global_dynamic_64_di = 5541,
  CODE_FOR_tls_local_dynamic_base_32 = 5542,
  CODE_FOR_tls_local_dynamic_base_64_si = 5543,
  CODE_FOR_tls_local_dynamic_base_64_di = 5544,
  CODE_FOR_tls_dynamic_gnu2_32 = 5545,
  CODE_FOR_tls_dynamic_gnu2_64 = 5546,
  CODE_FOR_rsqrtsf2 = 5547,
  CODE_FOR_sqrtsf2 = 5548,
  CODE_FOR_sqrtdf2 = 5549,
  CODE_FOR_fmodxf3 = 5550,
  CODE_FOR_fmodsf3 = 5551,
  CODE_FOR_fmoddf3 = 5552,
  CODE_FOR_remainderxf3 = 5553,
  CODE_FOR_remaindersf3 = 5554,
  CODE_FOR_remainderdf3 = 5555,
  CODE_FOR_sincossf3 = 5556,
  CODE_FOR_sincosdf3 = 5557,
  CODE_FOR_tanxf2 = 5558,
  CODE_FOR_tansf2 = 5559,
  CODE_FOR_tandf2 = 5560,
  CODE_FOR_atan2xf3 = 5561,
  CODE_FOR_atan2sf3 = 5562,
  CODE_FOR_atan2df3 = 5563,
  CODE_FOR_atanxf2 = 5564,
  CODE_FOR_atansf2 = 5565,
  CODE_FOR_atandf2 = 5566,
  CODE_FOR_asinxf2 = 5567,
  CODE_FOR_asinsf2 = 5568,
  CODE_FOR_asindf2 = 5569,
  CODE_FOR_acosxf2 = 5570,
  CODE_FOR_acossf2 = 5571,
  CODE_FOR_acosdf2 = 5572,
  CODE_FOR_logxf2 = 5573,
  CODE_FOR_logsf2 = 5574,
  CODE_FOR_logdf2 = 5575,
  CODE_FOR_log10xf2 = 5576,
  CODE_FOR_log10sf2 = 5577,
  CODE_FOR_log10df2 = 5578,
  CODE_FOR_log2xf2 = 5579,
  CODE_FOR_log2sf2 = 5580,
  CODE_FOR_log2df2 = 5581,
  CODE_FOR_log1pxf2 = 5582,
  CODE_FOR_log1psf2 = 5583,
  CODE_FOR_log1pdf2 = 5584,
  CODE_FOR_logbxf2 = 5585,
  CODE_FOR_logbsf2 = 5586,
  CODE_FOR_logbdf2 = 5587,
  CODE_FOR_ilogbxf2 = 5588,
  CODE_FOR_ilogbsf2 = 5589,
  CODE_FOR_ilogbdf2 = 5590,
  CODE_FOR_expNcorexf3 = 5591,
  CODE_FOR_expxf2 = 5592,
  CODE_FOR_expsf2 = 5593,
  CODE_FOR_expdf2 = 5594,
  CODE_FOR_exp10xf2 = 5595,
  CODE_FOR_exp10sf2 = 5596,
  CODE_FOR_exp10df2 = 5597,
  CODE_FOR_exp2xf2 = 5598,
  CODE_FOR_exp2sf2 = 5599,
  CODE_FOR_exp2df2 = 5600,
  CODE_FOR_expm1xf2 = 5601,
  CODE_FOR_expm1sf2 = 5602,
  CODE_FOR_expm1df2 = 5603,
  CODE_FOR_ldexpxf3 = 5604,
  CODE_FOR_ldexpsf3 = 5605,
  CODE_FOR_ldexpdf3 = 5606,
  CODE_FOR_scalbxf3 = 5607,
  CODE_FOR_scalbsf3 = 5608,
  CODE_FOR_scalbdf3 = 5609,
  CODE_FOR_significandxf2 = 5610,
  CODE_FOR_significandsf2 = 5611,
  CODE_FOR_significanddf2 = 5612,
  CODE_FOR_rintsf2 = 5613,
  CODE_FOR_rintdf2 = 5614,
  CODE_FOR_roundsf2 = 5615,
  CODE_FOR_rounddf2 = 5616,
  CODE_FOR_roundxf2 = 5617,
  CODE_FOR_lrintxfhi2 = 5618,
  CODE_FOR_lrintxfsi2 = 5619,
  CODE_FOR_lrintxfdi2 = 5620,
  CODE_FOR_lrintsfsi2 = 5621,
  CODE_FOR_lrintsfdi2 = 5622,
  CODE_FOR_lrintdfsi2 = 5623,
  CODE_FOR_lrintdfdi2 = 5624,
  CODE_FOR_lroundsfhi2 = 5625,
  CODE_FOR_lrounddfhi2 = 5626,
  CODE_FOR_lroundxfhi2 = 5627,
  CODE_FOR_lroundsfsi2 = 5628,
  CODE_FOR_lrounddfsi2 = 5629,
  CODE_FOR_lroundxfsi2 = 5630,
  CODE_FOR_lroundsfdi2 = 5631,
  CODE_FOR_lrounddfdi2 = 5632,
  CODE_FOR_lroundxfdi2 = 5633,
  CODE_FOR_floorxf2 = 5634,
  CODE_FOR_ceilxf2 = 5635,
  CODE_FOR_btruncxf2 = 5636,
  CODE_FOR_floorsf2 = 5637,
  CODE_FOR_ceilsf2 = 5638,
  CODE_FOR_btruncsf2 = 5639,
  CODE_FOR_floordf2 = 5640,
  CODE_FOR_ceildf2 = 5641,
  CODE_FOR_btruncdf2 = 5642,
  CODE_FOR_nearbyintxf2 = 5643,
  CODE_FOR_nearbyintsf2 = 5644,
  CODE_FOR_nearbyintdf2 = 5645,
  CODE_FOR_lfloorxfhi2 = 5646,
  CODE_FOR_lceilxfhi2 = 5647,
  CODE_FOR_lfloorxfsi2 = 5648,
  CODE_FOR_lceilxfsi2 = 5649,
  CODE_FOR_lfloorxfdi2 = 5650,
  CODE_FOR_lceilxfdi2 = 5651,
  CODE_FOR_lfloorsfsi2 = 5652,
  CODE_FOR_lceilsfsi2 = 5653,
  CODE_FOR_lfloorsfdi2 = 5654,
  CODE_FOR_lceilsfdi2 = 5655,
  CODE_FOR_lfloordfsi2 = 5656,
  CODE_FOR_lceildfsi2 = 5657,
  CODE_FOR_lfloordfdi2 = 5658,
  CODE_FOR_lceildfdi2 = 5659,
  CODE_FOR_isinfxf2 = 5660,
  CODE_FOR_isinfsf2 = 5661,
  CODE_FOR_isinfdf2 = 5662,
  CODE_FOR_signbittf2 = 5663,
  CODE_FOR_signbitxf2 = 5664,
  CODE_FOR_signbitdf2 = 5665,
  CODE_FOR_signbitsf2 = 5666,
  CODE_FOR_movmemsi = 5667,
  CODE_FOR_movmemdi = 5668,
  CODE_FOR_strmov = 5669,
  CODE_FOR_strmov_singleop = 5670,
  CODE_FOR_rep_mov = 5671,
  CODE_FOR_setmemsi = 5672,
  CODE_FOR_setmemdi = 5673,
  CODE_FOR_strset = 5674,
  CODE_FOR_strset_singleop = 5675,
  CODE_FOR_rep_stos = 5676,
  CODE_FOR_cmpstrnsi = 5677,
  CODE_FOR_cmpintqi = 5678,
  CODE_FOR_cmpstrnqi_nz_1 = 5679,
  CODE_FOR_cmpstrnqi_1 = 5680,
  CODE_FOR_strlensi = 5681,
  CODE_FOR_strlendi = 5682,
  CODE_FOR_strlenqi_1 = 5683,
  CODE_FOR_movqicc = 5684,
  CODE_FOR_movhicc = 5685,
  CODE_FOR_movsicc = 5686,
  CODE_FOR_movdicc = 5687,
  CODE_FOR_x86_movsicc_0_m1 = 5688,
  CODE_FOR_x86_movdicc_0_m1 = 5689,
  CODE_FOR_movsfcc = 5690,
  CODE_FOR_movdfcc = 5691,
  CODE_FOR_movxfcc = 5692,
  CODE_FOR_addqicc = 5693,
  CODE_FOR_addhicc = 5694,
  CODE_FOR_addsicc = 5695,
  CODE_FOR_adddicc = 5696,
  CODE_FOR_allocate_stack = 5697,
  CODE_FOR_probe_stack = 5698,
  CODE_FOR_builtin_setjmp_setup = 5699,
  CODE_FOR_builtin_setjmp_receiver = 5700,
  CODE_FOR_builtin_longjmp = 5701,
  CODE_FOR_prefetch = 5702,
  CODE_FOR_stack_protect_set = 5703,
  CODE_FOR_stack_protect_test = 5704,
  CODE_FOR_lwp_llwpcb = 5705,
  CODE_FOR_lwp_slwpcb = 5706,
  CODE_FOR_lwp_lwpvalsi3 = 5707,
  CODE_FOR_lwp_lwpvaldi3 = 5708,
  CODE_FOR_lwp_lwpinssi3 = 5709,
  CODE_FOR_lwp_lwpinsdi3 = 5710,
  CODE_FOR_pause = 5711,
  CODE_FOR_xbegin = 5712,
  CODE_FOR_xtest = 5713,
  CODE_FOR_bnd32_mk = 5714,
  CODE_FOR_bnd64_mk = 5715,
  CODE_FOR_movbnd32 = 5716,
  CODE_FOR_movbnd64 = 5717,
  CODE_FOR_bnd32_cl = 5718,
  CODE_FOR_bnd32_cu = 5719,
  CODE_FOR_bnd32_cn = 5720,
  CODE_FOR_bnd64_cl = 5721,
  CODE_FOR_bnd64_cu = 5722,
  CODE_FOR_bnd64_cn = 5723,
  CODE_FOR_bnd32_ldx = 5724,
  CODE_FOR_bnd64_ldx = 5725,
  CODE_FOR_bnd32_stx = 5726,
  CODE_FOR_bnd64_stx = 5727,
  CODE_FOR_rdpkru = 5728,
  CODE_FOR_wrpkru = 5729,
  CODE_FOR_movv8qi = 5730,
  CODE_FOR_movv4hi = 5731,
  CODE_FOR_movv2si = 5732,
  CODE_FOR_movv1di = 5733,
  CODE_FOR_movv2sf = 5734,
  CODE_FOR_movmisalignv8qi = 5735,
  CODE_FOR_movmisalignv4hi = 5736,
  CODE_FOR_movmisalignv2si = 5737,
  CODE_FOR_movmisalignv1di = 5738,
  CODE_FOR_movmisalignv2sf = 5739,
  CODE_FOR_mmx_addv2sf3 = 5740,
  CODE_FOR_mmx_subv2sf3 = 5741,
  CODE_FOR_mmx_subrv2sf3 = 5742,
  CODE_FOR_mmx_mulv2sf3 = 5743,
  CODE_FOR_mmx_smaxv2sf3 = 5744,
  CODE_FOR_mmx_sminv2sf3 = 5745,
  CODE_FOR_mmx_eqv2sf3 = 5746,
  CODE_FOR_vec_setv2sf = 5747,
  CODE_FOR_vec_extractv2sfsf = 5748,
  CODE_FOR_vec_initv2sfsf = 5749,
  CODE_FOR_mmx_addv8qi3 = 5750,
  CODE_FOR_mmx_subv8qi3 = 5751,
  CODE_FOR_mmx_addv4hi3 = 5752,
  CODE_FOR_mmx_subv4hi3 = 5753,
  CODE_FOR_mmx_addv2si3 = 5754,
  CODE_FOR_mmx_subv2si3 = 5755,
  CODE_FOR_mmx_addv1di3 = 5756,
  CODE_FOR_mmx_subv1di3 = 5757,
  CODE_FOR_mmx_ssaddv8qi3 = 5758,
  CODE_FOR_mmx_usaddv8qi3 = 5759,
  CODE_FOR_mmx_sssubv8qi3 = 5760,
  CODE_FOR_mmx_ussubv8qi3 = 5761,
  CODE_FOR_mmx_ssaddv4hi3 = 5762,
  CODE_FOR_mmx_usaddv4hi3 = 5763,
  CODE_FOR_mmx_sssubv4hi3 = 5764,
  CODE_FOR_mmx_ussubv4hi3 = 5765,
  CODE_FOR_mmx_mulv4hi3 = 5766,
  CODE_FOR_mmx_smulv4hi3_highpart = 5767,
  CODE_FOR_mmx_umulv4hi3_highpart = 5768,
  CODE_FOR_mmx_pmaddwd = 5769,
  CODE_FOR_mmx_pmulhrwv4hi3 = 5770,
  CODE_FOR_sse2_umulv1siv1di3 = 5771,
  CODE_FOR_mmx_smaxv4hi3 = 5772,
  CODE_FOR_mmx_sminv4hi3 = 5773,
  CODE_FOR_mmx_umaxv8qi3 = 5774,
  CODE_FOR_mmx_uminv8qi3 = 5775,
  CODE_FOR_mmx_eqv8qi3 = 5776,
  CODE_FOR_mmx_eqv4hi3 = 5777,
  CODE_FOR_mmx_eqv2si3 = 5778,
  CODE_FOR_mmx_andv8qi3 = 5779,
  CODE_FOR_mmx_iorv8qi3 = 5780,
  CODE_FOR_mmx_xorv8qi3 = 5781,
  CODE_FOR_mmx_andv4hi3 = 5782,
  CODE_FOR_mmx_iorv4hi3 = 5783,
  CODE_FOR_mmx_xorv4hi3 = 5784,
  CODE_FOR_mmx_andv2si3 = 5785,
  CODE_FOR_mmx_iorv2si3 = 5786,
  CODE_FOR_mmx_xorv2si3 = 5787,
  CODE_FOR_mmx_pinsrw = 5788,
  CODE_FOR_mmx_pshufw = 5789,
  CODE_FOR_vec_setv2si = 5790,
  CODE_FOR_vec_extractv2sisi = 5791,
  CODE_FOR_vec_initv2sisi = 5792,
  CODE_FOR_vec_setv4hi = 5793,
  CODE_FOR_vec_extractv4hihi = 5794,
  CODE_FOR_vec_initv4hihi = 5795,
  CODE_FOR_vec_setv8qi = 5796,
  CODE_FOR_vec_extractv8qiqi = 5797,
  CODE_FOR_vec_initv8qiqi = 5798,
  CODE_FOR_mmx_uavgv8qi3 = 5799,
  CODE_FOR_mmx_uavgv4hi3 = 5800,
  CODE_FOR_mmx_maskmovq = 5801,
  CODE_FOR_mmx_emms = 5802,
  CODE_FOR_mmx_femms = 5803,
  CODE_FOR_movv64qi = 5804,
  CODE_FOR_movv32qi = 5805,
  CODE_FOR_movv16qi = 5806,
  CODE_FOR_movv32hi = 5807,
  CODE_FOR_movv16hi = 5808,
  CODE_FOR_movv8hi = 5809,
  CODE_FOR_movv16si = 5810,
  CODE_FOR_movv8si = 5811,
  CODE_FOR_movv4si = 5812,
  CODE_FOR_movv8di = 5813,
  CODE_FOR_movv4di = 5814,
  CODE_FOR_movv2di = 5815,
  CODE_FOR_movv4ti = 5816,
  CODE_FOR_movv2ti = 5817,
  CODE_FOR_movv1ti = 5818,
  CODE_FOR_movv16sf = 5819,
  CODE_FOR_movv8sf = 5820,
  CODE_FOR_movv4sf = 5821,
  CODE_FOR_movv8df = 5822,
  CODE_FOR_movv4df = 5823,
  CODE_FOR_movv2df = 5824,
  CODE_FOR_movmisalignv64qi = 5825,
  CODE_FOR_movmisalignv32qi = 5826,
  CODE_FOR_movmisalignv16qi = 5827,
  CODE_FOR_movmisalignv32hi = 5828,
  CODE_FOR_movmisalignv16hi = 5829,
  CODE_FOR_movmisalignv8hi = 5830,
  CODE_FOR_movmisalignv16si = 5831,
  CODE_FOR_movmisalignv8si = 5832,
  CODE_FOR_movmisalignv4si = 5833,
  CODE_FOR_movmisalignv8di = 5834,
  CODE_FOR_movmisalignv4di = 5835,
  CODE_FOR_movmisalignv2di = 5836,
  CODE_FOR_movmisalignv4ti = 5837,
  CODE_FOR_movmisalignv2ti = 5838,
  CODE_FOR_movmisalignv1ti = 5839,
  CODE_FOR_movmisalignv16sf = 5840,
  CODE_FOR_movmisalignv8sf = 5841,
  CODE_FOR_movmisalignv4sf = 5842,
  CODE_FOR_movmisalignv8df = 5843,
  CODE_FOR_movmisalignv4df = 5844,
  CODE_FOR_movmisalignv2df = 5845,
  CODE_FOR_storentdi = 5846,
  CODE_FOR_storentsi = 5847,
  CODE_FOR_storentsf = 5848,
  CODE_FOR_storentdf = 5849,
  CODE_FOR_storentv8di = 5850,
  CODE_FOR_storentv4di = 5851,
  CODE_FOR_storentv2di = 5852,
  CODE_FOR_storentv16sf = 5853,
  CODE_FOR_storentv8sf = 5854,
  CODE_FOR_storentv4sf = 5855,
  CODE_FOR_storentv8df = 5856,
  CODE_FOR_storentv4df = 5857,
  CODE_FOR_storentv2df = 5858,
  CODE_FOR_kmovb = 5859,
  CODE_FOR_kmovw = 5860,
  CODE_FOR_kmovd = 5861,
  CODE_FOR_kmovq = 5862,
  CODE_FOR_absv16sf2 = 5863,
  CODE_FOR_negv16sf2 = 5864,
  CODE_FOR_absv8sf2 = 5865,
  CODE_FOR_negv8sf2 = 5866,
  CODE_FOR_absv4sf2 = 5867,
  CODE_FOR_negv4sf2 = 5868,
  CODE_FOR_absv8df2 = 5869,
  CODE_FOR_negv8df2 = 5870,
  CODE_FOR_absv4df2 = 5871,
  CODE_FOR_negv4df2 = 5872,
  CODE_FOR_absv2df2 = 5873,
  CODE_FOR_negv2df2 = 5874,
  CODE_FOR_addv16sf3 = 5875,
  CODE_FOR_addv16sf3_round = 5876,
  CODE_FOR_addv16sf3_mask = 5877,
  CODE_FOR_addv16sf3_mask_round = 5878,
  CODE_FOR_subv16sf3 = 5879,
  CODE_FOR_subv16sf3_round = 5880,
  CODE_FOR_subv16sf3_mask = 5881,
  CODE_FOR_subv16sf3_mask_round = 5882,
  CODE_FOR_addv8sf3 = 5883,
   CODE_FOR_addv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_addv8sf3_mask = 5884,
   CODE_FOR_addv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_subv8sf3 = 5885,
   CODE_FOR_subv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_subv8sf3_mask = 5886,
   CODE_FOR_subv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_addv4sf3 = 5887,
   CODE_FOR_addv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_addv4sf3_mask = 5888,
   CODE_FOR_addv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_subv4sf3 = 5889,
   CODE_FOR_subv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_subv4sf3_mask = 5890,
   CODE_FOR_subv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_addv8df3 = 5891,
  CODE_FOR_addv8df3_round = 5892,
  CODE_FOR_addv8df3_mask = 5893,
  CODE_FOR_addv8df3_mask_round = 5894,
  CODE_FOR_subv8df3 = 5895,
  CODE_FOR_subv8df3_round = 5896,
  CODE_FOR_subv8df3_mask = 5897,
  CODE_FOR_subv8df3_mask_round = 5898,
  CODE_FOR_addv4df3 = 5899,
   CODE_FOR_addv4df3_round = CODE_FOR_nothing,
  CODE_FOR_addv4df3_mask = 5900,
   CODE_FOR_addv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_subv4df3 = 5901,
   CODE_FOR_subv4df3_round = CODE_FOR_nothing,
  CODE_FOR_subv4df3_mask = 5902,
   CODE_FOR_subv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_addv2df3 = 5903,
   CODE_FOR_addv2df3_round = CODE_FOR_nothing,
  CODE_FOR_addv2df3_mask = 5904,
   CODE_FOR_addv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_subv2df3 = 5905,
   CODE_FOR_subv2df3_round = CODE_FOR_nothing,
  CODE_FOR_subv2df3_mask = 5906,
   CODE_FOR_subv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_mulv16sf3 = 5907,
  CODE_FOR_mulv16sf3_round = 5908,
  CODE_FOR_mulv16sf3_mask = 5909,
  CODE_FOR_mulv16sf3_mask_round = 5910,
  CODE_FOR_mulv8sf3 = 5911,
   CODE_FOR_mulv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_mulv8sf3_mask = 5912,
   CODE_FOR_mulv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_mulv4sf3 = 5913,
   CODE_FOR_mulv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_mulv4sf3_mask = 5914,
   CODE_FOR_mulv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_mulv8df3 = 5915,
  CODE_FOR_mulv8df3_round = 5916,
  CODE_FOR_mulv8df3_mask = 5917,
  CODE_FOR_mulv8df3_mask_round = 5918,
  CODE_FOR_mulv4df3 = 5919,
   CODE_FOR_mulv4df3_round = CODE_FOR_nothing,
  CODE_FOR_mulv4df3_mask = 5920,
   CODE_FOR_mulv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_mulv2df3 = 5921,
   CODE_FOR_mulv2df3_round = CODE_FOR_nothing,
  CODE_FOR_mulv2df3_mask = 5922,
   CODE_FOR_mulv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_divv8df3 = 5923,
  CODE_FOR_divv4df3 = 5924,
  CODE_FOR_divv2df3 = 5925,
  CODE_FOR_divv16sf3 = 5926,
  CODE_FOR_divv8sf3 = 5927,
  CODE_FOR_divv4sf3 = 5928,
  CODE_FOR_sqrtv8df2 = 5929,
  CODE_FOR_sqrtv4df2 = 5930,
  CODE_FOR_sqrtv2df2 = 5931,
  CODE_FOR_sqrtv16sf2 = 5932,
  CODE_FOR_sqrtv8sf2 = 5933,
  CODE_FOR_sqrtv4sf2 = 5934,
  CODE_FOR_rsqrtv8sf2 = 5935,
  CODE_FOR_rsqrtv4sf2 = 5936,
  CODE_FOR_rsqrtv16sf2 = 5937,
  CODE_FOR_smaxv16sf3 = 5938,
  CODE_FOR_smaxv16sf3_round = 5939,
  CODE_FOR_smaxv16sf3_mask = 5940,
  CODE_FOR_smaxv16sf3_mask_round = 5941,
  CODE_FOR_sminv16sf3 = 5942,
  CODE_FOR_sminv16sf3_round = 5943,
  CODE_FOR_sminv16sf3_mask = 5944,
  CODE_FOR_sminv16sf3_mask_round = 5945,
  CODE_FOR_smaxv8sf3 = 5946,
   CODE_FOR_smaxv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_smaxv8sf3_mask = 5947,
   CODE_FOR_smaxv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sminv8sf3 = 5948,
   CODE_FOR_sminv8sf3_round = CODE_FOR_nothing,
  CODE_FOR_sminv8sf3_mask = 5949,
   CODE_FOR_sminv8sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_smaxv4sf3 = 5950,
   CODE_FOR_smaxv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_smaxv4sf3_mask = 5951,
   CODE_FOR_smaxv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sminv4sf3 = 5952,
   CODE_FOR_sminv4sf3_round = CODE_FOR_nothing,
  CODE_FOR_sminv4sf3_mask = 5953,
   CODE_FOR_sminv4sf3_mask_round = CODE_FOR_nothing,
  CODE_FOR_smaxv8df3 = 5954,
  CODE_FOR_smaxv8df3_round = 5955,
  CODE_FOR_smaxv8df3_mask = 5956,
  CODE_FOR_smaxv8df3_mask_round = 5957,
  CODE_FOR_sminv8df3 = 5958,
  CODE_FOR_sminv8df3_round = 5959,
  CODE_FOR_sminv8df3_mask = 5960,
  CODE_FOR_sminv8df3_mask_round = 5961,
  CODE_FOR_smaxv4df3 = 5962,
   CODE_FOR_smaxv4df3_round = CODE_FOR_nothing,
  CODE_FOR_smaxv4df3_mask = 5963,
   CODE_FOR_smaxv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sminv4df3 = 5964,
   CODE_FOR_sminv4df3_round = CODE_FOR_nothing,
  CODE_FOR_sminv4df3_mask = 5965,
   CODE_FOR_sminv4df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_smaxv2df3 = 5966,
   CODE_FOR_smaxv2df3_round = CODE_FOR_nothing,
  CODE_FOR_smaxv2df3_mask = 5967,
   CODE_FOR_smaxv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sminv2df3 = 5968,
   CODE_FOR_sminv2df3_round = CODE_FOR_nothing,
  CODE_FOR_sminv2df3_mask = 5969,
   CODE_FOR_sminv2df3_mask_round = CODE_FOR_nothing,
  CODE_FOR_sse3_haddv2df3 = 5970,
  CODE_FOR_reduc_plus_scal_v8df = 5971,
  CODE_FOR_reduc_plus_scal_v4df = 5972,
  CODE_FOR_reduc_plus_scal_v2df = 5973,
  CODE_FOR_reduc_plus_scal_v16sf = 5974,
  CODE_FOR_reduc_plus_scal_v8sf = 5975,
  CODE_FOR_reduc_plus_scal_v4sf = 5976,
  CODE_FOR_reduc_smax_scal_v32qi = 5977,
  CODE_FOR_reduc_smin_scal_v32qi = 5978,
  CODE_FOR_reduc_smax_scal_v16hi = 5979,
  CODE_FOR_reduc_smin_scal_v16hi = 5980,
  CODE_FOR_reduc_smax_scal_v8si = 5981,
  CODE_FOR_reduc_smin_scal_v8si = 5982,
  CODE_FOR_reduc_smax_scal_v4di = 5983,
  CODE_FOR_reduc_smin_scal_v4di = 5984,
  CODE_FOR_reduc_smax_scal_v8sf = 5985,
  CODE_FOR_reduc_smin_scal_v8sf = 5986,
  CODE_FOR_reduc_smax_scal_v4df = 5987,
  CODE_FOR_reduc_smin_scal_v4df = 5988,
  CODE_FOR_reduc_smax_scal_v4sf = 5989,
  CODE_FOR_reduc_smin_scal_v4sf = 5990,
  CODE_FOR_reduc_smax_scal_v64qi = 5991,
  CODE_FOR_reduc_smin_scal_v64qi = 5992,
  CODE_FOR_reduc_smax_scal_v32hi = 5993,
  CODE_FOR_reduc_smin_scal_v32hi = 5994,
  CODE_FOR_reduc_smax_scal_v16si = 5995,
  CODE_FOR_reduc_smin_scal_v16si = 5996,
  CODE_FOR_reduc_smax_scal_v8di = 5997,
  CODE_FOR_reduc_smin_scal_v8di = 5998,
  CODE_FOR_reduc_smax_scal_v16sf = 5999,
  CODE_FOR_reduc_smin_scal_v16sf = 6000,
  CODE_FOR_reduc_smax_scal_v8df = 6001,
  CODE_FOR_reduc_smin_scal_v8df = 6002,
  CODE_FOR_reduc_umax_scal_v16si = 6003,
  CODE_FOR_reduc_umin_scal_v16si = 6004,
  CODE_FOR_reduc_umax_scal_v8di = 6005,
  CODE_FOR_reduc_umin_scal_v8di = 6006,
  CODE_FOR_reduc_umax_scal_v32hi = 6007,
  CODE_FOR_reduc_umin_scal_v32hi = 6008,
  CODE_FOR_reduc_umax_scal_v64qi = 6009,
  CODE_FOR_reduc_umin_scal_v64qi = 6010,
  CODE_FOR_reduc_umax_scal_v32qi = 6011,
  CODE_FOR_reduc_umin_scal_v32qi = 6012,
  CODE_FOR_reduc_umax_scal_v16hi = 6013,
  CODE_FOR_reduc_umin_scal_v16hi = 6014,
  CODE_FOR_reduc_umax_scal_v8si = 6015,
  CODE_FOR_reduc_umin_scal_v8si = 6016,
  CODE_FOR_reduc_umax_scal_v4di = 6017,
  CODE_FOR_reduc_umin_scal_v4di = 6018,
  CODE_FOR_reduc_umin_scal_v8hi = 6019,
  CODE_FOR_vec_cmpv16sihi = 6020,
  CODE_FOR_vec_cmpv8siqi = 6021,
  CODE_FOR_vec_cmpv4siqi = 6022,
  CODE_FOR_vec_cmpv8diqi = 6023,
  CODE_FOR_vec_cmpv4diqi = 6024,
  CODE_FOR_vec_cmpv2diqi = 6025,
  CODE_FOR_vec_cmpv16sfhi = 6026,
  CODE_FOR_vec_cmpv8sfqi = 6027,
  CODE_FOR_vec_cmpv4sfqi = 6028,
  CODE_FOR_vec_cmpv8dfqi = 6029,
  CODE_FOR_vec_cmpv4dfqi = 6030,
  CODE_FOR_vec_cmpv2dfqi = 6031,
  CODE_FOR_vec_cmpv64qidi = 6032,
  CODE_FOR_vec_cmpv16qihi = 6033,
  CODE_FOR_vec_cmpv32qisi = 6034,
  CODE_FOR_vec_cmpv32hisi = 6035,
  CODE_FOR_vec_cmpv16hihi = 6036,
  CODE_FOR_vec_cmpv8hiqi = 6037,
  CODE_FOR_vec_cmpv32qiv32qi = 6038,
  CODE_FOR_vec_cmpv16hiv16hi = 6039,
  CODE_FOR_vec_cmpv8siv8si = 6040,
  CODE_FOR_vec_cmpv4div4di = 6041,
  CODE_FOR_vec_cmpv16qiv16qi = 6042,
  CODE_FOR_vec_cmpv8hiv8hi = 6043,
  CODE_FOR_vec_cmpv4siv4si = 6044,
  CODE_FOR_vec_cmpv2div2di = 6045,
  CODE_FOR_vec_cmpv8sfv8si = 6046,
  CODE_FOR_vec_cmpv4dfv4di = 6047,
  CODE_FOR_vec_cmpv4sfv4si = 6048,
  CODE_FOR_vec_cmpv2dfv2di = 6049,
  CODE_FOR_vec_cmpuv16sihi = 6050,
  CODE_FOR_vec_cmpuv8siqi = 6051,
  CODE_FOR_vec_cmpuv4siqi = 6052,
  CODE_FOR_vec_cmpuv8diqi = 6053,
  CODE_FOR_vec_cmpuv4diqi = 6054,
  CODE_FOR_vec_cmpuv2diqi = 6055,
  CODE_FOR_vec_cmpuv64qidi = 6056,
  CODE_FOR_vec_cmpuv16qihi = 6057,
  CODE_FOR_vec_cmpuv32qisi = 6058,
  CODE_FOR_vec_cmpuv32hisi = 6059,
  CODE_FOR_vec_cmpuv16hihi = 6060,
  CODE_FOR_vec_cmpuv8hiqi = 6061,
  CODE_FOR_vec_cmpuv32qiv32qi = 6062,
  CODE_FOR_vec_cmpuv16hiv16hi = 6063,
  CODE_FOR_vec_cmpuv8siv8si = 6064,
  CODE_FOR_vec_cmpuv4div4di = 6065,
  CODE_FOR_vec_cmpuv16qiv16qi = 6066,
  CODE_FOR_vec_cmpuv8hiv8hi = 6067,
  CODE_FOR_vec_cmpuv4siv4si = 6068,
  CODE_FOR_vec_cmpuv2div2di = 6069,
  CODE_FOR_vec_cmpeqv2div2di = 6070,
  CODE_FOR_vcondv64qiv16sf = 6071,
  CODE_FOR_vcondv32hiv16sf = 6072,
  CODE_FOR_vcondv16siv16sf = 6073,
  CODE_FOR_vcondv8div16sf = 6074,
  CODE_FOR_vcondv16sfv16sf = 6075,
  CODE_FOR_vcondv8dfv16sf = 6076,
  CODE_FOR_vcondv64qiv8df = 6077,
  CODE_FOR_vcondv32hiv8df = 6078,
  CODE_FOR_vcondv16siv8df = 6079,
  CODE_FOR_vcondv8div8df = 6080,
  CODE_FOR_vcondv16sfv8df = 6081,
  CODE_FOR_vcondv8dfv8df = 6082,
  CODE_FOR_vcondv32qiv8sf = 6083,
  CODE_FOR_vcondv32qiv4df = 6084,
  CODE_FOR_vcondv16hiv8sf = 6085,
  CODE_FOR_vcondv16hiv4df = 6086,
  CODE_FOR_vcondv8siv8sf = 6087,
  CODE_FOR_vcondv8siv4df = 6088,
  CODE_FOR_vcondv4div8sf = 6089,
  CODE_FOR_vcondv4div4df = 6090,
  CODE_FOR_vcondv8sfv8sf = 6091,
  CODE_FOR_vcondv8sfv4df = 6092,
  CODE_FOR_vcondv4dfv8sf = 6093,
  CODE_FOR_vcondv4dfv4df = 6094,
  CODE_FOR_vcondv16qiv4sf = 6095,
  CODE_FOR_vcondv16qiv2df = 6096,
  CODE_FOR_vcondv8hiv4sf = 6097,
  CODE_FOR_vcondv8hiv2df = 6098,
  CODE_FOR_vcondv4siv4sf = 6099,
  CODE_FOR_vcondv4siv2df = 6100,
  CODE_FOR_vcondv2div4sf = 6101,
  CODE_FOR_vcondv2div2df = 6102,
  CODE_FOR_vcondv4sfv4sf = 6103,
  CODE_FOR_vcondv4sfv2df = 6104,
  CODE_FOR_vcondv2dfv4sf = 6105,
  CODE_FOR_vcondv2dfv2df = 6106,
  CODE_FOR_vcond_mask_v16sihi = 6107,
  CODE_FOR_vcond_mask_v8siqi = 6108,
  CODE_FOR_vcond_mask_v4siqi = 6109,
  CODE_FOR_vcond_mask_v8diqi = 6110,
  CODE_FOR_vcond_mask_v4diqi = 6111,
  CODE_FOR_vcond_mask_v2diqi = 6112,
  CODE_FOR_vcond_mask_v16sfhi = 6113,
  CODE_FOR_vcond_mask_v8sfqi = 6114,
  CODE_FOR_vcond_mask_v4sfqi = 6115,
  CODE_FOR_vcond_mask_v8dfqi = 6116,
  CODE_FOR_vcond_mask_v4dfqi = 6117,
  CODE_FOR_vcond_mask_v2dfqi = 6118,
  CODE_FOR_vcond_mask_v64qidi = 6119,
  CODE_FOR_vcond_mask_v16qihi = 6120,
  CODE_FOR_vcond_mask_v32qisi = 6121,
  CODE_FOR_vcond_mask_v32hisi = 6122,
  CODE_FOR_vcond_mask_v16hihi = 6123,
  CODE_FOR_vcond_mask_v8hiqi = 6124,
  CODE_FOR_vcond_mask_v32qiv32qi = 6125,
  CODE_FOR_vcond_mask_v16hiv16hi = 6126,
  CODE_FOR_vcond_mask_v8siv8si = 6127,
  CODE_FOR_vcond_mask_v4div4di = 6128,
  CODE_FOR_vcond_mask_v16qiv16qi = 6129,
  CODE_FOR_vcond_mask_v8hiv8hi = 6130,
  CODE_FOR_vcond_mask_v4siv4si = 6131,
  CODE_FOR_vcond_mask_v2div2di = 6132,
  CODE_FOR_vcond_mask_v8sfv8si = 6133,
  CODE_FOR_vcond_mask_v4dfv4di = 6134,
  CODE_FOR_vcond_mask_v4sfv4si = 6135,
  CODE_FOR_vcond_mask_v2dfv2di = 6136,
  CODE_FOR_andv8sf3 = 6137,
  CODE_FOR_andv8sf3_mask = 6138,
  CODE_FOR_iorv8sf3 = 6139,
  CODE_FOR_iorv8sf3_mask = 6140,
  CODE_FOR_xorv8sf3 = 6141,
  CODE_FOR_xorv8sf3_mask = 6142,
  CODE_FOR_andv4sf3 = 6143,
  CODE_FOR_andv4sf3_mask = 6144,
  CODE_FOR_iorv4sf3 = 6145,
  CODE_FOR_iorv4sf3_mask = 6146,
  CODE_FOR_xorv4sf3 = 6147,
  CODE_FOR_xorv4sf3_mask = 6148,
  CODE_FOR_andv4df3 = 6149,
  CODE_FOR_andv4df3_mask = 6150,
  CODE_FOR_iorv4df3 = 6151,
  CODE_FOR_iorv4df3_mask = 6152,
  CODE_FOR_xorv4df3 = 6153,
  CODE_FOR_xorv4df3_mask = 6154,
  CODE_FOR_andv2df3 = 6155,
  CODE_FOR_andv2df3_mask = 6156,
  CODE_FOR_iorv2df3 = 6157,
  CODE_FOR_iorv2df3_mask = 6158,
  CODE_FOR_xorv2df3 = 6159,
  CODE_FOR_xorv2df3_mask = 6160,
  CODE_FOR_andv16sf3 = 6161,
  CODE_FOR_andv16sf3_mask = 6162,
  CODE_FOR_iorv16sf3 = 6163,
  CODE_FOR_iorv16sf3_mask = 6164,
  CODE_FOR_xorv16sf3 = 6165,
  CODE_FOR_xorv16sf3_mask = 6166,
  CODE_FOR_andv8df3 = 6167,
  CODE_FOR_andv8df3_mask = 6168,
  CODE_FOR_iorv8df3 = 6169,
  CODE_FOR_iorv8df3_mask = 6170,
  CODE_FOR_xorv8df3 = 6171,
  CODE_FOR_xorv8df3_mask = 6172,
  CODE_FOR_copysignv16sf3 = 6173,
  CODE_FOR_copysignv8sf3 = 6174,
  CODE_FOR_copysignv4sf3 = 6175,
  CODE_FOR_copysignv8df3 = 6176,
  CODE_FOR_copysignv4df3 = 6177,
  CODE_FOR_copysignv2df3 = 6178,
  CODE_FOR_andtf3 = 6179,
  CODE_FOR_iortf3 = 6180,
  CODE_FOR_xortf3 = 6181,
  CODE_FOR_fmasf4 = 6182,
  CODE_FOR_fmadf4 = 6183,
  CODE_FOR_fmav4sf4 = 6184,
  CODE_FOR_fmav2df4 = 6185,
  CODE_FOR_fmav8sf4 = 6186,
  CODE_FOR_fmav4df4 = 6187,
  CODE_FOR_fmav16sf4 = 6188,
  CODE_FOR_fmav8df4 = 6189,
  CODE_FOR_fmssf4 = 6190,
  CODE_FOR_fmsdf4 = 6191,
  CODE_FOR_fmsv4sf4 = 6192,
  CODE_FOR_fmsv2df4 = 6193,
  CODE_FOR_fmsv8sf4 = 6194,
  CODE_FOR_fmsv4df4 = 6195,
  CODE_FOR_fmsv16sf4 = 6196,
  CODE_FOR_fmsv8df4 = 6197,
  CODE_FOR_fnmasf4 = 6198,
  CODE_FOR_fnmadf4 = 6199,
  CODE_FOR_fnmav4sf4 = 6200,
  CODE_FOR_fnmav2df4 = 6201,
  CODE_FOR_fnmav8sf4 = 6202,
  CODE_FOR_fnmav4df4 = 6203,
  CODE_FOR_fnmav16sf4 = 6204,
  CODE_FOR_fnmav8df4 = 6205,
  CODE_FOR_fnmssf4 = 6206,
  CODE_FOR_fnmsdf4 = 6207,
  CODE_FOR_fnmsv4sf4 = 6208,
  CODE_FOR_fnmsv2df4 = 6209,
  CODE_FOR_fnmsv8sf4 = 6210,
  CODE_FOR_fnmsv4df4 = 6211,
  CODE_FOR_fnmsv16sf4 = 6212,
  CODE_FOR_fnmsv8df4 = 6213,
  CODE_FOR_fma4i_fmadd_sf = 6214,
  CODE_FOR_fma4i_fmadd_df = 6215,
  CODE_FOR_fma4i_fmadd_v4sf = 6216,
  CODE_FOR_fma4i_fmadd_v2df = 6217,
  CODE_FOR_fma4i_fmadd_v8sf = 6218,
  CODE_FOR_fma4i_fmadd_v4df = 6219,
  CODE_FOR_fma4i_fmadd_v16sf = 6220,
  CODE_FOR_fma4i_fmadd_v8df = 6221,
  CODE_FOR_avx512f_fmadd_v16sf_maskz = 6222,
  CODE_FOR_avx512f_fmadd_v16sf_maskz_round = 6223,
  CODE_FOR_avx512vl_fmadd_v8sf_maskz = 6224,
  CODE_FOR_avx512vl_fmadd_v8sf_maskz_round = 6225,
  CODE_FOR_avx512vl_fmadd_v4sf_maskz = 6226,
  CODE_FOR_avx512vl_fmadd_v4sf_maskz_round = 6227,
  CODE_FOR_avx512f_fmadd_v8df_maskz = 6228,
  CODE_FOR_avx512f_fmadd_v8df_maskz_round = 6229,
  CODE_FOR_avx512vl_fmadd_v4df_maskz = 6230,
  CODE_FOR_avx512vl_fmadd_v4df_maskz_round = 6231,
  CODE_FOR_avx512vl_fmadd_v2df_maskz = 6232,
  CODE_FOR_avx512vl_fmadd_v2df_maskz_round = 6233,
  CODE_FOR_fmaddsub_v16sf = 6234,
  CODE_FOR_fmaddsub_v8sf = 6235,
  CODE_FOR_fmaddsub_v4sf = 6236,
  CODE_FOR_fmaddsub_v8df = 6237,
  CODE_FOR_fmaddsub_v4df = 6238,
  CODE_FOR_fmaddsub_v2df = 6239,
  CODE_FOR_avx512f_fmaddsub_v16sf_maskz = 6240,
  CODE_FOR_avx512f_fmaddsub_v16sf_maskz_round = 6241,
  CODE_FOR_avx512vl_fmaddsub_v8sf_maskz = 6242,
  CODE_FOR_avx512vl_fmaddsub_v8sf_maskz_round = 6243,
  CODE_FOR_avx512vl_fmaddsub_v4sf_maskz = 6244,
  CODE_FOR_avx512vl_fmaddsub_v4sf_maskz_round = 6245,
  CODE_FOR_avx512f_fmaddsub_v8df_maskz = 6246,
  CODE_FOR_avx512f_fmaddsub_v8df_maskz_round = 6247,
  CODE_FOR_avx512vl_fmaddsub_v4df_maskz = 6248,
  CODE_FOR_avx512vl_fmaddsub_v4df_maskz_round = 6249,
  CODE_FOR_avx512vl_fmaddsub_v2df_maskz = 6250,
  CODE_FOR_avx512vl_fmaddsub_v2df_maskz_round = 6251,
  CODE_FOR_fmai_vmfmadd_v4sf = 6252,
  CODE_FOR_fmai_vmfmadd_v4sf_round = 6253,
  CODE_FOR_fmai_vmfmadd_v2df = 6254,
  CODE_FOR_fmai_vmfmadd_v2df_round = 6255,
  CODE_FOR_fma4i_vmfmadd_v4sf = 6256,
  CODE_FOR_fma4i_vmfmadd_v2df = 6257,
  CODE_FOR_floatunsv16siv16sf2 = 6258,
  CODE_FOR_floatunsv8siv8sf2 = 6259,
  CODE_FOR_floatunsv4siv4sf2 = 6260,
  CODE_FOR_fixuns_truncv16sfv16si2 = 6261,
  CODE_FOR_fixuns_truncv8sfv8si2 = 6262,
  CODE_FOR_fixuns_truncv4sfv4si2 = 6263,
  CODE_FOR_avx_cvtpd2dq256_2 = 6264,
  CODE_FOR_avx_cvttpd2dq256_2 = 6265,
  CODE_FOR_sse2_cvtpd2ps = 6266,
  CODE_FOR_sse2_cvtpd2ps_mask = 6267,
  CODE_FOR_avx512bw_cvtmask2bv64qi = 6268,
  CODE_FOR_avx512vl_cvtmask2bv16qi = 6269,
  CODE_FOR_avx512vl_cvtmask2bv32qi = 6270,
  CODE_FOR_avx512bw_cvtmask2wv32hi = 6271,
  CODE_FOR_avx512vl_cvtmask2wv16hi = 6272,
  CODE_FOR_avx512vl_cvtmask2wv8hi = 6273,
  CODE_FOR_avx512f_cvtmask2dv16si = 6274,
  CODE_FOR_avx512vl_cvtmask2dv8si = 6275,
  CODE_FOR_avx512vl_cvtmask2dv4si = 6276,
  CODE_FOR_avx512f_cvtmask2qv8di = 6277,
  CODE_FOR_avx512vl_cvtmask2qv4di = 6278,
  CODE_FOR_avx512vl_cvtmask2qv2di = 6279,
  CODE_FOR_vec_unpacks_hi_v4sf = 6280,
  CODE_FOR_vec_unpacks_hi_v8sf = 6281,
  CODE_FOR_vec_unpacks_hi_v16sf = 6282,
  CODE_FOR_vec_unpacks_lo_v4sf = 6283,
  CODE_FOR_vec_unpacks_lo_v8sf = 6284,
  CODE_FOR_vec_unpacks_float_hi_v32hi = 6285,
  CODE_FOR_vec_unpacks_float_hi_v16hi = 6286,
  CODE_FOR_vec_unpacks_float_hi_v8hi = 6287,
  CODE_FOR_vec_unpacks_float_lo_v32hi = 6288,
  CODE_FOR_vec_unpacks_float_lo_v16hi = 6289,
  CODE_FOR_vec_unpacks_float_lo_v8hi = 6290,
  CODE_FOR_vec_unpacku_float_hi_v32hi = 6291,
  CODE_FOR_vec_unpacku_float_hi_v16hi = 6292,
  CODE_FOR_vec_unpacku_float_hi_v8hi = 6293,
  CODE_FOR_vec_unpacku_float_lo_v32hi = 6294,
  CODE_FOR_vec_unpacku_float_lo_v16hi = 6295,
  CODE_FOR_vec_unpacku_float_lo_v8hi = 6296,
  CODE_FOR_vec_unpacks_float_hi_v4si = 6297,
  CODE_FOR_vec_unpacks_float_lo_v4si = 6298,
  CODE_FOR_vec_unpacks_float_hi_v8si = 6299,
  CODE_FOR_vec_unpacks_float_lo_v8si = 6300,
  CODE_FOR_vec_unpacks_float_hi_v16si = 6301,
  CODE_FOR_vec_unpacks_float_lo_v16si = 6302,
  CODE_FOR_vec_unpacku_float_hi_v4si = 6303,
  CODE_FOR_vec_unpacku_float_lo_v4si = 6304,
  CODE_FOR_vec_unpacku_float_hi_v8si = 6305,
  CODE_FOR_vec_unpacku_float_hi_v16si = 6306,
  CODE_FOR_vec_unpacku_float_lo_v8si = 6307,
  CODE_FOR_vec_unpacku_float_lo_v16si = 6308,
  CODE_FOR_vec_pack_trunc_v8df = 6309,
  CODE_FOR_vec_pack_trunc_v4df = 6310,
  CODE_FOR_vec_pack_trunc_v2df = 6311,
  CODE_FOR_vec_pack_sfix_trunc_v8df = 6312,
  CODE_FOR_vec_pack_sfix_trunc_v4df = 6313,
  CODE_FOR_vec_pack_sfix_trunc_v2df = 6314,
  CODE_FOR_vec_pack_ufix_trunc_v8df = 6315,
  CODE_FOR_vec_pack_ufix_trunc_v4df = 6316,
  CODE_FOR_vec_pack_ufix_trunc_v2df = 6317,
  CODE_FOR_avx512f_vec_pack_sfix_v8df = 6318,
  CODE_FOR_vec_pack_sfix_v4df = 6319,
  CODE_FOR_vec_pack_sfix_v2df = 6320,
  CODE_FOR_sse_movhlps_exp = 6321,
  CODE_FOR_sse_movlhps_exp = 6322,
  CODE_FOR_vec_interleave_highv8sf = 6323,
  CODE_FOR_vec_interleave_lowv8sf = 6324,
  CODE_FOR_avx_shufps256 = 6325,
  CODE_FOR_avx_shufps256_mask = 6326,
  CODE_FOR_sse_shufps = 6327,
  CODE_FOR_sse_shufps_mask = 6328,
  CODE_FOR_sse_loadhps_exp = 6329,
  CODE_FOR_sse_loadlps_exp = 6330,
  CODE_FOR_vec_setv32qi = 6331,
  CODE_FOR_vec_setv16qi = 6332,
  CODE_FOR_vec_setv16hi = 6333,
  CODE_FOR_vec_setv8hi = 6334,
  CODE_FOR_vec_setv16si = 6335,
  CODE_FOR_vec_setv8si = 6336,
  CODE_FOR_vec_setv4si = 6337,
  CODE_FOR_vec_setv8di = 6338,
  CODE_FOR_vec_setv4di = 6339,
  CODE_FOR_vec_setv2di = 6340,
  CODE_FOR_vec_setv16sf = 6341,
  CODE_FOR_vec_setv8sf = 6342,
  CODE_FOR_vec_setv4sf = 6343,
  CODE_FOR_vec_setv8df = 6344,
  CODE_FOR_vec_setv4df = 6345,
  CODE_FOR_vec_setv2df = 6346,
  CODE_FOR_avx512dq_vextractf64x2_mask = 6347,
  CODE_FOR_avx512dq_vextracti64x2_mask = 6348,
  CODE_FOR_avx512f_vextractf32x4_mask = 6349,
  CODE_FOR_avx512f_vextracti32x4_mask = 6350,
  CODE_FOR_avx512dq_vextractf32x8_mask = 6351,
  CODE_FOR_avx512dq_vextracti32x8_mask = 6352,
  CODE_FOR_avx512f_vextractf64x4_mask = 6353,
  CODE_FOR_avx512f_vextracti64x4_mask = 6354,
  CODE_FOR_avx512vl_vextractf128v8si = 6355,
  CODE_FOR_avx512vl_vextractf128v8sf = 6356,
  CODE_FOR_avx512vl_vextractf128v4di = 6357,
  CODE_FOR_avx512vl_vextractf128v4df = 6358,
  CODE_FOR_avx_vextractf128v32qi = 6359,
  CODE_FOR_avx_vextractf128v16hi = 6360,
  CODE_FOR_avx_vextractf128v8si = 6361,
  CODE_FOR_avx_vextractf128v4di = 6362,
  CODE_FOR_avx_vextractf128v8sf = 6363,
  CODE_FOR_avx_vextractf128v4df = 6364,
  CODE_FOR_vec_extractv64qiqi = 6365,
  CODE_FOR_vec_extractv32qiqi = 6366,
  CODE_FOR_vec_extractv16qiqi = 6367,
  CODE_FOR_vec_extractv32hihi = 6368,
  CODE_FOR_vec_extractv16hihi = 6369,
  CODE_FOR_vec_extractv8hihi = 6370,
  CODE_FOR_vec_extractv16sisi = 6371,
  CODE_FOR_vec_extractv8sisi = 6372,
  CODE_FOR_vec_extractv4sisi = 6373,
  CODE_FOR_vec_extractv8didi = 6374,
  CODE_FOR_vec_extractv4didi = 6375,
  CODE_FOR_vec_extractv2didi = 6376,
  CODE_FOR_vec_extractv16sfsf = 6377,
  CODE_FOR_vec_extractv8sfsf = 6378,
  CODE_FOR_vec_extractv4sfsf = 6379,
  CODE_FOR_vec_extractv8dfdf = 6380,
  CODE_FOR_vec_extractv4dfdf = 6381,
  CODE_FOR_vec_extractv2dfdf = 6382,
  CODE_FOR_vec_extractv4titi = 6383,
  CODE_FOR_vec_extractv2titi = 6384,
  CODE_FOR_vec_extractv64qiv32qi = 6385,
  CODE_FOR_vec_extractv32hiv16hi = 6386,
  CODE_FOR_vec_extractv16siv8si = 6387,
  CODE_FOR_vec_extractv8div4di = 6388,
  CODE_FOR_vec_extractv16sfv8sf = 6389,
  CODE_FOR_vec_extractv8dfv4df = 6390,
  CODE_FOR_vec_interleave_highv4df = 6391,
  CODE_FOR_vec_interleave_highv2df = 6392,
  CODE_FOR_avx512f_movddup512 = 6393,
  CODE_FOR_avx512f_movddup512_mask = 6394,
  CODE_FOR_avx512f_unpcklpd512 = 6395,
  CODE_FOR_avx512f_unpcklpd512_mask = 6396,
  CODE_FOR_avx_movddup256 = 6397,
  CODE_FOR_avx_movddup256_mask = 6398,
  CODE_FOR_avx_unpcklpd256 = 6399,
  CODE_FOR_avx_unpcklpd256_mask = 6400,
  CODE_FOR_vec_interleave_lowv4df = 6401,
  CODE_FOR_vec_interleave_lowv2df = 6402,
  CODE_FOR_avx512f_vternlogv16si_maskz = 6403,
  CODE_FOR_avx512vl_vternlogv8si_maskz = 6404,
  CODE_FOR_avx512vl_vternlogv4si_maskz = 6405,
  CODE_FOR_avx512f_vternlogv8di_maskz = 6406,
  CODE_FOR_avx512vl_vternlogv4di_maskz = 6407,
  CODE_FOR_avx512vl_vternlogv2di_maskz = 6408,
  CODE_FOR_avx512f_shufps512_mask = 6409,
  CODE_FOR_avx512f_fixupimmv16sf_maskz = 6410,
  CODE_FOR_avx512f_fixupimmv16sf_maskz_round = 6411,
  CODE_FOR_avx512vl_fixupimmv8sf_maskz = 6412,
  CODE_FOR_avx512vl_fixupimmv8sf_maskz_round = 6413,
  CODE_FOR_avx512vl_fixupimmv4sf_maskz = 6414,
  CODE_FOR_avx512vl_fixupimmv4sf_maskz_round = 6415,
  CODE_FOR_avx512f_fixupimmv8df_maskz = 6416,
  CODE_FOR_avx512f_fixupimmv8df_maskz_round = 6417,
  CODE_FOR_avx512vl_fixupimmv4df_maskz = 6418,
  CODE_FOR_avx512vl_fixupimmv4df_maskz_round = 6419,
  CODE_FOR_avx512vl_fixupimmv2df_maskz = 6420,
  CODE_FOR_avx512vl_fixupimmv2df_maskz_round = 6421,
  CODE_FOR_avx512f_sfixupimmv4sf_maskz = 6422,
  CODE_FOR_avx512f_sfixupimmv4sf_maskz_round = 6423,
  CODE_FOR_avx512f_sfixupimmv2df_maskz = 6424,
  CODE_FOR_avx512f_sfixupimmv2df_maskz_round = 6425,
  CODE_FOR_avx512f_shufpd512_mask = 6426,
  CODE_FOR_avx_shufpd256 = 6427,
  CODE_FOR_avx_shufpd256_mask = 6428,
  CODE_FOR_sse2_shufpd = 6429,
  CODE_FOR_sse2_shufpd_mask = 6430,
  CODE_FOR_sse2_loadhpd_exp = 6431,
  CODE_FOR_sse2_loadlpd_exp = 6432,
  CODE_FOR_avx512f_ss_truncatev16siv16qi2_mask_store = 6433,
  CODE_FOR_avx512f_truncatev16siv16qi2_mask_store = 6434,
  CODE_FOR_avx512f_us_truncatev16siv16qi2_mask_store = 6435,
  CODE_FOR_avx512f_ss_truncatev16siv16hi2_mask_store = 6436,
  CODE_FOR_avx512f_truncatev16siv16hi2_mask_store = 6437,
  CODE_FOR_avx512f_us_truncatev16siv16hi2_mask_store = 6438,
  CODE_FOR_avx512f_ss_truncatev8div8si2_mask_store = 6439,
  CODE_FOR_avx512f_truncatev8div8si2_mask_store = 6440,
  CODE_FOR_avx512f_us_truncatev8div8si2_mask_store = 6441,
  CODE_FOR_avx512f_ss_truncatev8div8hi2_mask_store = 6442,
  CODE_FOR_avx512f_truncatev8div8hi2_mask_store = 6443,
  CODE_FOR_avx512f_us_truncatev8div8hi2_mask_store = 6444,
  CODE_FOR_avx512bw_ss_truncatev32hiv32qi2_mask_store = 6445,
  CODE_FOR_avx512bw_truncatev32hiv32qi2_mask_store = 6446,
  CODE_FOR_avx512bw_us_truncatev32hiv32qi2_mask_store = 6447,
  CODE_FOR_avx512vl_ss_truncatev4div4si2_mask_store = 6448,
  CODE_FOR_avx512vl_truncatev4div4si2_mask_store = 6449,
  CODE_FOR_avx512vl_us_truncatev4div4si2_mask_store = 6450,
  CODE_FOR_avx512vl_ss_truncatev8siv8hi2_mask_store = 6451,
  CODE_FOR_avx512vl_truncatev8siv8hi2_mask_store = 6452,
  CODE_FOR_avx512vl_us_truncatev8siv8hi2_mask_store = 6453,
  CODE_FOR_avx512vl_ss_truncatev16hiv16qi2_mask_store = 6454,
  CODE_FOR_avx512vl_truncatev16hiv16qi2_mask_store = 6455,
  CODE_FOR_avx512vl_us_truncatev16hiv16qi2_mask_store = 6456,
  CODE_FOR_negv64qi2 = 6457,
  CODE_FOR_negv32qi2 = 6458,
  CODE_FOR_negv16qi2 = 6459,
  CODE_FOR_negv32hi2 = 6460,
  CODE_FOR_negv16hi2 = 6461,
  CODE_FOR_negv8hi2 = 6462,
  CODE_FOR_negv16si2 = 6463,
  CODE_FOR_negv8si2 = 6464,
  CODE_FOR_negv4si2 = 6465,
  CODE_FOR_negv8di2 = 6466,
  CODE_FOR_negv4di2 = 6467,
  CODE_FOR_negv2di2 = 6468,
  CODE_FOR_addv64qi3 = 6469,
  CODE_FOR_subv64qi3 = 6470,
  CODE_FOR_addv32qi3 = 6471,
  CODE_FOR_subv32qi3 = 6472,
  CODE_FOR_addv16qi3 = 6473,
  CODE_FOR_subv16qi3 = 6474,
  CODE_FOR_addv32hi3 = 6475,
  CODE_FOR_subv32hi3 = 6476,
  CODE_FOR_addv16hi3 = 6477,
  CODE_FOR_subv16hi3 = 6478,
  CODE_FOR_addv8hi3 = 6479,
  CODE_FOR_subv8hi3 = 6480,
  CODE_FOR_addv16si3 = 6481,
  CODE_FOR_subv16si3 = 6482,
  CODE_FOR_addv8si3 = 6483,
  CODE_FOR_subv8si3 = 6484,
  CODE_FOR_addv4si3 = 6485,
  CODE_FOR_subv4si3 = 6486,
  CODE_FOR_addv8di3 = 6487,
  CODE_FOR_subv8di3 = 6488,
  CODE_FOR_addv4di3 = 6489,
  CODE_FOR_subv4di3 = 6490,
  CODE_FOR_addv2di3 = 6491,
  CODE_FOR_subv2di3 = 6492,
  CODE_FOR_addv16si3_mask = 6493,
  CODE_FOR_subv16si3_mask = 6494,
  CODE_FOR_addv8si3_mask = 6495,
  CODE_FOR_subv8si3_mask = 6496,
  CODE_FOR_addv4si3_mask = 6497,
  CODE_FOR_subv4si3_mask = 6498,
  CODE_FOR_addv8di3_mask = 6499,
  CODE_FOR_subv8di3_mask = 6500,
  CODE_FOR_addv4di3_mask = 6501,
  CODE_FOR_subv4di3_mask = 6502,
  CODE_FOR_addv2di3_mask = 6503,
  CODE_FOR_subv2di3_mask = 6504,
  CODE_FOR_addv64qi3_mask = 6505,
  CODE_FOR_subv64qi3_mask = 6506,
  CODE_FOR_addv16qi3_mask = 6507,
  CODE_FOR_subv16qi3_mask = 6508,
  CODE_FOR_addv32qi3_mask = 6509,
  CODE_FOR_subv32qi3_mask = 6510,
  CODE_FOR_addv32hi3_mask = 6511,
  CODE_FOR_subv32hi3_mask = 6512,
  CODE_FOR_addv16hi3_mask = 6513,
  CODE_FOR_subv16hi3_mask = 6514,
  CODE_FOR_addv8hi3_mask = 6515,
  CODE_FOR_subv8hi3_mask = 6516,
  CODE_FOR_avx512bw_ssaddv64qi3 = 6517,
  CODE_FOR_avx512bw_ssaddv64qi3_mask = 6518,
  CODE_FOR_avx512bw_usaddv64qi3 = 6519,
  CODE_FOR_avx512bw_usaddv64qi3_mask = 6520,
  CODE_FOR_avx512bw_sssubv64qi3 = 6521,
  CODE_FOR_avx512bw_sssubv64qi3_mask = 6522,
  CODE_FOR_avx512bw_ussubv64qi3 = 6523,
  CODE_FOR_avx512bw_ussubv64qi3_mask = 6524,
  CODE_FOR_avx2_ssaddv32qi3 = 6525,
  CODE_FOR_avx2_ssaddv32qi3_mask = 6526,
  CODE_FOR_avx2_usaddv32qi3 = 6527,
  CODE_FOR_avx2_usaddv32qi3_mask = 6528,
  CODE_FOR_avx2_sssubv32qi3 = 6529,
  CODE_FOR_avx2_sssubv32qi3_mask = 6530,
  CODE_FOR_avx2_ussubv32qi3 = 6531,
  CODE_FOR_avx2_ussubv32qi3_mask = 6532,
  CODE_FOR_sse2_ssaddv16qi3 = 6533,
  CODE_FOR_sse2_ssaddv16qi3_mask = 6534,
  CODE_FOR_sse2_usaddv16qi3 = 6535,
  CODE_FOR_sse2_usaddv16qi3_mask = 6536,
  CODE_FOR_sse2_sssubv16qi3 = 6537,
  CODE_FOR_sse2_sssubv16qi3_mask = 6538,
  CODE_FOR_sse2_ussubv16qi3 = 6539,
  CODE_FOR_sse2_ussubv16qi3_mask = 6540,
  CODE_FOR_avx512bw_ssaddv32hi3 = 6541,
  CODE_FOR_avx512bw_ssaddv32hi3_mask = 6542,
  CODE_FOR_avx512bw_usaddv32hi3 = 6543,
  CODE_FOR_avx512bw_usaddv32hi3_mask = 6544,
  CODE_FOR_avx512bw_sssubv32hi3 = 6545,
  CODE_FOR_avx512bw_sssubv32hi3_mask = 6546,
  CODE_FOR_avx512bw_ussubv32hi3 = 6547,
  CODE_FOR_avx512bw_ussubv32hi3_mask = 6548,
  CODE_FOR_avx2_ssaddv16hi3 = 6549,
  CODE_FOR_avx2_ssaddv16hi3_mask = 6550,
  CODE_FOR_avx2_usaddv16hi3 = 6551,
  CODE_FOR_avx2_usaddv16hi3_mask = 6552,
  CODE_FOR_avx2_sssubv16hi3 = 6553,
  CODE_FOR_avx2_sssubv16hi3_mask = 6554,
  CODE_FOR_avx2_ussubv16hi3 = 6555,
  CODE_FOR_avx2_ussubv16hi3_mask = 6556,
  CODE_FOR_sse2_ssaddv8hi3 = 6557,
  CODE_FOR_sse2_ssaddv8hi3_mask = 6558,
  CODE_FOR_sse2_usaddv8hi3 = 6559,
  CODE_FOR_sse2_usaddv8hi3_mask = 6560,
  CODE_FOR_sse2_sssubv8hi3 = 6561,
  CODE_FOR_sse2_sssubv8hi3_mask = 6562,
  CODE_FOR_sse2_ussubv8hi3 = 6563,
  CODE_FOR_sse2_ussubv8hi3_mask = 6564,
  CODE_FOR_mulv64qi3 = 6565,
  CODE_FOR_mulv64qi3_mask = 6566,
  CODE_FOR_mulv32qi3 = 6567,
  CODE_FOR_mulv32qi3_mask = 6568,
  CODE_FOR_mulv16qi3 = 6569,
  CODE_FOR_mulv16qi3_mask = 6570,
  CODE_FOR_mulv32hi3 = 6571,
  CODE_FOR_mulv32hi3_mask = 6572,
  CODE_FOR_mulv16hi3 = 6573,
  CODE_FOR_mulv16hi3_mask = 6574,
  CODE_FOR_mulv8hi3 = 6575,
  CODE_FOR_mulv8hi3_mask = 6576,
  CODE_FOR_smulv32hi3_highpart = 6577,
  CODE_FOR_smulv32hi3_highpart_mask = 6578,
  CODE_FOR_umulv32hi3_highpart = 6579,
  CODE_FOR_umulv32hi3_highpart_mask = 6580,
  CODE_FOR_smulv16hi3_highpart = 6581,
  CODE_FOR_smulv16hi3_highpart_mask = 6582,
  CODE_FOR_umulv16hi3_highpart = 6583,
  CODE_FOR_umulv16hi3_highpart_mask = 6584,
  CODE_FOR_smulv8hi3_highpart = 6585,
  CODE_FOR_smulv8hi3_highpart_mask = 6586,
  CODE_FOR_umulv8hi3_highpart = 6587,
  CODE_FOR_umulv8hi3_highpart_mask = 6588,
  CODE_FOR_vec_widen_umult_even_v16si = 6589,
  CODE_FOR_vec_widen_umult_even_v16si_mask = 6590,
  CODE_FOR_vec_widen_umult_even_v8si = 6591,
  CODE_FOR_vec_widen_umult_even_v8si_mask = 6592,
  CODE_FOR_vec_widen_umult_even_v4si = 6593,
  CODE_FOR_vec_widen_umult_even_v4si_mask = 6594,
  CODE_FOR_vec_widen_smult_even_v16si = 6595,
  CODE_FOR_vec_widen_smult_even_v16si_mask = 6596,
  CODE_FOR_vec_widen_smult_even_v8si = 6597,
  CODE_FOR_vec_widen_smult_even_v8si_mask = 6598,
  CODE_FOR_sse4_1_mulv2siv2di3 = 6599,
  CODE_FOR_sse4_1_mulv2siv2di3_mask = 6600,
  CODE_FOR_avx2_pmaddwd = 6601,
  CODE_FOR_sse2_pmaddwd = 6602,
  CODE_FOR_mulv16si3 = 6603,
  CODE_FOR_mulv16si3_mask = 6604,
  CODE_FOR_mulv8si3 = 6605,
  CODE_FOR_mulv8si3_mask = 6606,
  CODE_FOR_mulv4si3 = 6607,
  CODE_FOR_mulv4si3_mask = 6608,
  CODE_FOR_mulv8di3 = 6609,
  CODE_FOR_mulv4di3 = 6610,
  CODE_FOR_mulv2di3 = 6611,
  CODE_FOR_vec_widen_smult_hi_v32qi = 6612,
  CODE_FOR_vec_widen_umult_hi_v32qi = 6613,
  CODE_FOR_vec_widen_smult_hi_v16qi = 6614,
  CODE_FOR_vec_widen_umult_hi_v16qi = 6615,
  CODE_FOR_vec_widen_smult_hi_v16hi = 6616,
  CODE_FOR_vec_widen_umult_hi_v16hi = 6617,
  CODE_FOR_vec_widen_smult_hi_v8hi = 6618,
  CODE_FOR_vec_widen_umult_hi_v8hi = 6619,
  CODE_FOR_vec_widen_smult_hi_v8si = 6620,
  CODE_FOR_vec_widen_umult_hi_v8si = 6621,
  CODE_FOR_vec_widen_smult_hi_v4si = 6622,
  CODE_FOR_vec_widen_umult_hi_v4si = 6623,
  CODE_FOR_vec_widen_smult_lo_v32qi = 6624,
  CODE_FOR_vec_widen_umult_lo_v32qi = 6625,
  CODE_FOR_vec_widen_smult_lo_v16qi = 6626,
  CODE_FOR_vec_widen_umult_lo_v16qi = 6627,
  CODE_FOR_vec_widen_smult_lo_v16hi = 6628,
  CODE_FOR_vec_widen_umult_lo_v16hi = 6629,
  CODE_FOR_vec_widen_smult_lo_v8hi = 6630,
  CODE_FOR_vec_widen_umult_lo_v8hi = 6631,
  CODE_FOR_vec_widen_smult_lo_v8si = 6632,
  CODE_FOR_vec_widen_umult_lo_v8si = 6633,
  CODE_FOR_vec_widen_smult_lo_v4si = 6634,
  CODE_FOR_vec_widen_umult_lo_v4si = 6635,
  CODE_FOR_vec_widen_smult_even_v4si = 6636,
  CODE_FOR_vec_widen_smult_odd_v16si = 6637,
  CODE_FOR_vec_widen_umult_odd_v16si = 6638,
  CODE_FOR_vec_widen_smult_odd_v8si = 6639,
  CODE_FOR_vec_widen_umult_odd_v8si = 6640,
  CODE_FOR_vec_widen_smult_odd_v4si = 6641,
  CODE_FOR_vec_widen_umult_odd_v4si = 6642,
  CODE_FOR_sdot_prodv32hi = 6643,
  CODE_FOR_sdot_prodv16hi = 6644,
  CODE_FOR_sdot_prodv8hi = 6645,
  CODE_FOR_sdot_prodv4si = 6646,
  CODE_FOR_usadv16qi = 6647,
  CODE_FOR_usadv32qi = 6648,
  CODE_FOR_vec_shr_v16qi = 6649,
  CODE_FOR_vec_shr_v8hi = 6650,
  CODE_FOR_vec_shr_v4si = 6651,
  CODE_FOR_vec_shr_v2di = 6652,
  CODE_FOR_smaxv32qi3 = 6653,
  CODE_FOR_sminv32qi3 = 6654,
  CODE_FOR_umaxv32qi3 = 6655,
  CODE_FOR_uminv32qi3 = 6656,
  CODE_FOR_smaxv16hi3 = 6657,
  CODE_FOR_sminv16hi3 = 6658,
  CODE_FOR_umaxv16hi3 = 6659,
  CODE_FOR_uminv16hi3 = 6660,
  CODE_FOR_smaxv8si3 = 6661,
  CODE_FOR_sminv8si3 = 6662,
  CODE_FOR_umaxv8si3 = 6663,
  CODE_FOR_uminv8si3 = 6664,
  CODE_FOR_smaxv64qi3 = 6665,
  CODE_FOR_sminv64qi3 = 6666,
  CODE_FOR_umaxv64qi3 = 6667,
  CODE_FOR_uminv64qi3 = 6668,
  CODE_FOR_smaxv32hi3 = 6669,
  CODE_FOR_sminv32hi3 = 6670,
  CODE_FOR_umaxv32hi3 = 6671,
  CODE_FOR_uminv32hi3 = 6672,
  CODE_FOR_smaxv16si3 = 6673,
  CODE_FOR_sminv16si3 = 6674,
  CODE_FOR_umaxv16si3 = 6675,
  CODE_FOR_uminv16si3 = 6676,
  CODE_FOR_smaxv16si3_mask = 6677,
  CODE_FOR_sminv16si3_mask = 6678,
  CODE_FOR_umaxv16si3_mask = 6679,
  CODE_FOR_uminv16si3_mask = 6680,
  CODE_FOR_smaxv8si3_mask = 6681,
  CODE_FOR_sminv8si3_mask = 6682,
  CODE_FOR_umaxv8si3_mask = 6683,
  CODE_FOR_uminv8si3_mask = 6684,
  CODE_FOR_smaxv4si3_mask = 6685,
  CODE_FOR_sminv4si3_mask = 6686,
  CODE_FOR_umaxv4si3_mask = 6687,
  CODE_FOR_uminv4si3_mask = 6688,
  CODE_FOR_smaxv8di3_mask = 6689,
  CODE_FOR_sminv8di3_mask = 6690,
  CODE_FOR_umaxv8di3_mask = 6691,
  CODE_FOR_uminv8di3_mask = 6692,
  CODE_FOR_smaxv4di3_mask = 6693,
  CODE_FOR_sminv4di3_mask = 6694,
  CODE_FOR_umaxv4di3_mask = 6695,
  CODE_FOR_uminv4di3_mask = 6696,
  CODE_FOR_smaxv2di3_mask = 6697,
  CODE_FOR_sminv2di3_mask = 6698,
  CODE_FOR_umaxv2di3_mask = 6699,
  CODE_FOR_uminv2di3_mask = 6700,
  CODE_FOR_smaxv8di3 = 6701,
  CODE_FOR_sminv8di3 = 6702,
  CODE_FOR_umaxv8di3 = 6703,
  CODE_FOR_uminv8di3 = 6704,
  CODE_FOR_smaxv4di3 = 6705,
  CODE_FOR_sminv4di3 = 6706,
  CODE_FOR_umaxv4di3 = 6707,
  CODE_FOR_uminv4di3 = 6708,
  CODE_FOR_smaxv2di3 = 6709,
  CODE_FOR_sminv2di3 = 6710,
  CODE_FOR_umaxv2di3 = 6711,
  CODE_FOR_uminv2di3 = 6712,
  CODE_FOR_smaxv16qi3 = 6713,
  CODE_FOR_sminv16qi3 = 6714,
  CODE_FOR_smaxv8hi3 = 6715,
  CODE_FOR_sminv8hi3 = 6716,
  CODE_FOR_smaxv4si3 = 6717,
  CODE_FOR_sminv4si3 = 6718,
  CODE_FOR_umaxv16qi3 = 6719,
  CODE_FOR_uminv16qi3 = 6720,
  CODE_FOR_umaxv8hi3 = 6721,
  CODE_FOR_uminv8hi3 = 6722,
  CODE_FOR_umaxv4si3 = 6723,
  CODE_FOR_uminv4si3 = 6724,
  CODE_FOR_avx2_eqv32qi3 = 6725,
  CODE_FOR_avx2_eqv16hi3 = 6726,
  CODE_FOR_avx2_eqv8si3 = 6727,
  CODE_FOR_avx2_eqv4di3 = 6728,
  CODE_FOR_avx512bw_eqv64qi3 = 6729,
  CODE_FOR_avx512bw_eqv64qi3_mask = 6730,
  CODE_FOR_avx512vl_eqv16qi3 = 6731,
  CODE_FOR_avx512vl_eqv16qi3_mask = 6732,
  CODE_FOR_avx512vl_eqv32qi3 = 6733,
  CODE_FOR_avx512vl_eqv32qi3_mask = 6734,
  CODE_FOR_avx512bw_eqv32hi3 = 6735,
  CODE_FOR_avx512bw_eqv32hi3_mask = 6736,
  CODE_FOR_avx512vl_eqv16hi3 = 6737,
  CODE_FOR_avx512vl_eqv16hi3_mask = 6738,
  CODE_FOR_avx512vl_eqv8hi3 = 6739,
  CODE_FOR_avx512vl_eqv8hi3_mask = 6740,
  CODE_FOR_avx512f_eqv16si3 = 6741,
  CODE_FOR_avx512f_eqv16si3_mask = 6742,
  CODE_FOR_avx512vl_eqv8si3 = 6743,
  CODE_FOR_avx512vl_eqv8si3_mask = 6744,
  CODE_FOR_avx512vl_eqv4si3 = 6745,
  CODE_FOR_avx512vl_eqv4si3_mask = 6746,
  CODE_FOR_avx512f_eqv8di3 = 6747,
  CODE_FOR_avx512f_eqv8di3_mask = 6748,
  CODE_FOR_avx512vl_eqv4di3 = 6749,
  CODE_FOR_avx512vl_eqv4di3_mask = 6750,
  CODE_FOR_avx512vl_eqv2di3 = 6751,
  CODE_FOR_avx512vl_eqv2di3_mask = 6752,
  CODE_FOR_sse2_eqv16qi3 = 6753,
  CODE_FOR_sse2_eqv8hi3 = 6754,
  CODE_FOR_sse2_eqv4si3 = 6755,
  CODE_FOR_sse4_1_eqv2di3 = 6756,
  CODE_FOR_vcondv64qiv16si = 6757,
  CODE_FOR_vcondv32hiv16si = 6758,
  CODE_FOR_vcondv16siv16si = 6759,
  CODE_FOR_vcondv8div16si = 6760,
  CODE_FOR_vcondv16sfv16si = 6761,
  CODE_FOR_vcondv8dfv16si = 6762,
  CODE_FOR_vcondv64qiv8di = 6763,
  CODE_FOR_vcondv32hiv8di = 6764,
  CODE_FOR_vcondv16siv8di = 6765,
  CODE_FOR_vcondv8div8di = 6766,
  CODE_FOR_vcondv16sfv8di = 6767,
  CODE_FOR_vcondv8dfv8di = 6768,
  CODE_FOR_vcondv64qiv32hi = 6769,
  CODE_FOR_vcondv32hiv32hi = 6770,
  CODE_FOR_vcondv16siv32hi = 6771,
  CODE_FOR_vcondv8div32hi = 6772,
  CODE_FOR_vcondv16sfv32hi = 6773,
  CODE_FOR_vcondv8dfv32hi = 6774,
  CODE_FOR_vcondv64qiv64qi = 6775,
  CODE_FOR_vcondv32hiv64qi = 6776,
  CODE_FOR_vcondv16siv64qi = 6777,
  CODE_FOR_vcondv8div64qi = 6778,
  CODE_FOR_vcondv16sfv64qi = 6779,
  CODE_FOR_vcondv8dfv64qi = 6780,
  CODE_FOR_vcondv32qiv32qi = 6781,
  CODE_FOR_vcondv16hiv32qi = 6782,
  CODE_FOR_vcondv8siv32qi = 6783,
  CODE_FOR_vcondv4div32qi = 6784,
  CODE_FOR_vcondv8sfv32qi = 6785,
  CODE_FOR_vcondv4dfv32qi = 6786,
  CODE_FOR_vcondv32qiv16hi = 6787,
  CODE_FOR_vcondv16hiv16hi = 6788,
  CODE_FOR_vcondv8siv16hi = 6789,
  CODE_FOR_vcondv4div16hi = 6790,
  CODE_FOR_vcondv8sfv16hi = 6791,
  CODE_FOR_vcondv4dfv16hi = 6792,
  CODE_FOR_vcondv32qiv8si = 6793,
  CODE_FOR_vcondv16hiv8si = 6794,
  CODE_FOR_vcondv8siv8si = 6795,
  CODE_FOR_vcondv4div8si = 6796,
  CODE_FOR_vcondv8sfv8si = 6797,
  CODE_FOR_vcondv4dfv8si = 6798,
  CODE_FOR_vcondv32qiv4di = 6799,
  CODE_FOR_vcondv16hiv4di = 6800,
  CODE_FOR_vcondv8siv4di = 6801,
  CODE_FOR_vcondv4div4di = 6802,
  CODE_FOR_vcondv8sfv4di = 6803,
  CODE_FOR_vcondv4dfv4di = 6804,
  CODE_FOR_vcondv16qiv16qi = 6805,
  CODE_FOR_vcondv8hiv16qi = 6806,
  CODE_FOR_vcondv4siv16qi = 6807,
  CODE_FOR_vcondv2div16qi = 6808,
  CODE_FOR_vcondv4sfv16qi = 6809,
  CODE_FOR_vcondv2dfv16qi = 6810,
  CODE_FOR_vcondv16qiv8hi = 6811,
  CODE_FOR_vcondv8hiv8hi = 6812,
  CODE_FOR_vcondv4siv8hi = 6813,
  CODE_FOR_vcondv2div8hi = 6814,
  CODE_FOR_vcondv4sfv8hi = 6815,
  CODE_FOR_vcondv2dfv8hi = 6816,
  CODE_FOR_vcondv16qiv4si = 6817,
  CODE_FOR_vcondv8hiv4si = 6818,
  CODE_FOR_vcondv4siv4si = 6819,
  CODE_FOR_vcondv2div4si = 6820,
  CODE_FOR_vcondv4sfv4si = 6821,
  CODE_FOR_vcondv2dfv4si = 6822,
  CODE_FOR_vcondv2div2di = 6823,
  CODE_FOR_vcondv2dfv2di = 6824,
  CODE_FOR_vconduv64qiv16si = 6825,
  CODE_FOR_vconduv32hiv16si = 6826,
  CODE_FOR_vconduv16siv16si = 6827,
  CODE_FOR_vconduv8div16si = 6828,
  CODE_FOR_vconduv16sfv16si = 6829,
  CODE_FOR_vconduv8dfv16si = 6830,
  CODE_FOR_vconduv64qiv8di = 6831,
  CODE_FOR_vconduv32hiv8di = 6832,
  CODE_FOR_vconduv16siv8di = 6833,
  CODE_FOR_vconduv8div8di = 6834,
  CODE_FOR_vconduv16sfv8di = 6835,
  CODE_FOR_vconduv8dfv8di = 6836,
  CODE_FOR_vconduv64qiv32hi = 6837,
  CODE_FOR_vconduv32hiv32hi = 6838,
  CODE_FOR_vconduv16siv32hi = 6839,
  CODE_FOR_vconduv8div32hi = 6840,
  CODE_FOR_vconduv16sfv32hi = 6841,
  CODE_FOR_vconduv8dfv32hi = 6842,
  CODE_FOR_vconduv64qiv64qi = 6843,
  CODE_FOR_vconduv32hiv64qi = 6844,
  CODE_FOR_vconduv16siv64qi = 6845,
  CODE_FOR_vconduv8div64qi = 6846,
  CODE_FOR_vconduv16sfv64qi = 6847,
  CODE_FOR_vconduv8dfv64qi = 6848,
  CODE_FOR_vconduv32qiv32qi = 6849,
  CODE_FOR_vconduv16hiv32qi = 6850,
  CODE_FOR_vconduv8siv32qi = 6851,
  CODE_FOR_vconduv4div32qi = 6852,
  CODE_FOR_vconduv8sfv32qi = 6853,
  CODE_FOR_vconduv4dfv32qi = 6854,
  CODE_FOR_vconduv32qiv16hi = 6855,
  CODE_FOR_vconduv16hiv16hi = 6856,
  CODE_FOR_vconduv8siv16hi = 6857,
  CODE_FOR_vconduv4div16hi = 6858,
  CODE_FOR_vconduv8sfv16hi = 6859,
  CODE_FOR_vconduv4dfv16hi = 6860,
  CODE_FOR_vconduv32qiv8si = 6861,
  CODE_FOR_vconduv16hiv8si = 6862,
  CODE_FOR_vconduv8siv8si = 6863,
  CODE_FOR_vconduv4div8si = 6864,
  CODE_FOR_vconduv8sfv8si = 6865,
  CODE_FOR_vconduv4dfv8si = 6866,
  CODE_FOR_vconduv32qiv4di = 6867,
  CODE_FOR_vconduv16hiv4di = 6868,
  CODE_FOR_vconduv8siv4di = 6869,
  CODE_FOR_vconduv4div4di = 6870,
  CODE_FOR_vconduv8sfv4di = 6871,
  CODE_FOR_vconduv4dfv4di = 6872,
  CODE_FOR_vconduv16qiv16qi = 6873,
  CODE_FOR_vconduv8hiv16qi = 6874,
  CODE_FOR_vconduv4siv16qi = 6875,
  CODE_FOR_vconduv2div16qi = 6876,
  CODE_FOR_vconduv4sfv16qi = 6877,
  CODE_FOR_vconduv2dfv16qi = 6878,
  CODE_FOR_vconduv16qiv8hi = 6879,
  CODE_FOR_vconduv8hiv8hi = 6880,
  CODE_FOR_vconduv4siv8hi = 6881,
  CODE_FOR_vconduv2div8hi = 6882,
  CODE_FOR_vconduv4sfv8hi = 6883,
  CODE_FOR_vconduv2dfv8hi = 6884,
  CODE_FOR_vconduv16qiv4si = 6885,
  CODE_FOR_vconduv8hiv4si = 6886,
  CODE_FOR_vconduv4siv4si = 6887,
  CODE_FOR_vconduv2div4si = 6888,
  CODE_FOR_vconduv4sfv4si = 6889,
  CODE_FOR_vconduv2dfv4si = 6890,
  CODE_FOR_vconduv2div2di = 6891,
  CODE_FOR_vconduv2dfv2di = 6892,
  CODE_FOR_vcondeqv2div2di = 6893,
  CODE_FOR_vcondeqv2dfv2di = 6894,
  CODE_FOR_vec_permv16qi = 6895,
  CODE_FOR_vec_permv8hi = 6896,
  CODE_FOR_vec_permv4si = 6897,
  CODE_FOR_vec_permv2di = 6898,
  CODE_FOR_vec_permv4sf = 6899,
  CODE_FOR_vec_permv2df = 6900,
  CODE_FOR_vec_permv32qi = 6901,
  CODE_FOR_vec_permv16hi = 6902,
  CODE_FOR_vec_permv8si = 6903,
  CODE_FOR_vec_permv4di = 6904,
  CODE_FOR_vec_permv8sf = 6905,
  CODE_FOR_vec_permv4df = 6906,
  CODE_FOR_vec_permv16sf = 6907,
  CODE_FOR_vec_permv8df = 6908,
  CODE_FOR_vec_permv16si = 6909,
  CODE_FOR_vec_permv8di = 6910,
  CODE_FOR_vec_permv32hi = 6911,
  CODE_FOR_vec_permv64qi = 6912,
  CODE_FOR_one_cmplv16si2 = 6913,
  CODE_FOR_one_cmplv8di2 = 6914,
  CODE_FOR_one_cmplv64qi2 = 6915,
  CODE_FOR_one_cmplv32qi2 = 6916,
  CODE_FOR_one_cmplv16qi2 = 6917,
  CODE_FOR_one_cmplv32hi2 = 6918,
  CODE_FOR_one_cmplv16hi2 = 6919,
  CODE_FOR_one_cmplv8hi2 = 6920,
  CODE_FOR_one_cmplv8si2 = 6921,
  CODE_FOR_one_cmplv4si2 = 6922,
  CODE_FOR_one_cmplv4di2 = 6923,
  CODE_FOR_one_cmplv2di2 = 6924,
  CODE_FOR_avx512bw_andnotv64qi3 = 6925,
  CODE_FOR_avx2_andnotv32qi3 = 6926,
  CODE_FOR_sse2_andnotv16qi3 = 6927,
  CODE_FOR_avx512bw_andnotv32hi3 = 6928,
  CODE_FOR_avx2_andnotv16hi3 = 6929,
  CODE_FOR_sse2_andnotv8hi3 = 6930,
  CODE_FOR_avx512f_andnotv16si3 = 6931,
  CODE_FOR_avx2_andnotv8si3 = 6932,
  CODE_FOR_sse2_andnotv4si3 = 6933,
  CODE_FOR_avx512f_andnotv8di3 = 6934,
  CODE_FOR_avx2_andnotv4di3 = 6935,
  CODE_FOR_sse2_andnotv2di3 = 6936,
  CODE_FOR_avx512f_andnotv16si3_mask = 6937,
  CODE_FOR_avx2_andnotv8si3_mask = 6938,
  CODE_FOR_sse2_andnotv4si3_mask = 6939,
  CODE_FOR_avx512f_andnotv8di3_mask = 6940,
  CODE_FOR_avx2_andnotv4di3_mask = 6941,
  CODE_FOR_sse2_andnotv2di3_mask = 6942,
  CODE_FOR_avx512bw_andnotv64qi3_mask = 6943,
  CODE_FOR_sse2_andnotv16qi3_mask = 6944,
  CODE_FOR_avx2_andnotv32qi3_mask = 6945,
  CODE_FOR_avx512bw_andnotv32hi3_mask = 6946,
  CODE_FOR_avx2_andnotv16hi3_mask = 6947,
  CODE_FOR_sse2_andnotv8hi3_mask = 6948,
  CODE_FOR_andv16si3 = 6949,
  CODE_FOR_iorv16si3 = 6950,
  CODE_FOR_xorv16si3 = 6951,
  CODE_FOR_andv8di3 = 6952,
  CODE_FOR_iorv8di3 = 6953,
  CODE_FOR_xorv8di3 = 6954,
  CODE_FOR_andv64qi3 = 6955,
  CODE_FOR_iorv64qi3 = 6956,
  CODE_FOR_xorv64qi3 = 6957,
  CODE_FOR_andv32qi3 = 6958,
  CODE_FOR_iorv32qi3 = 6959,
  CODE_FOR_xorv32qi3 = 6960,
  CODE_FOR_andv16qi3 = 6961,
  CODE_FOR_iorv16qi3 = 6962,
  CODE_FOR_xorv16qi3 = 6963,
  CODE_FOR_andv32hi3 = 6964,
  CODE_FOR_iorv32hi3 = 6965,
  CODE_FOR_xorv32hi3 = 6966,
  CODE_FOR_andv16hi3 = 6967,
  CODE_FOR_iorv16hi3 = 6968,
  CODE_FOR_xorv16hi3 = 6969,
  CODE_FOR_andv8hi3 = 6970,
  CODE_FOR_iorv8hi3 = 6971,
  CODE_FOR_xorv8hi3 = 6972,
  CODE_FOR_andv8si3 = 6973,
  CODE_FOR_iorv8si3 = 6974,
  CODE_FOR_xorv8si3 = 6975,
  CODE_FOR_andv4si3 = 6976,
  CODE_FOR_iorv4si3 = 6977,
  CODE_FOR_xorv4si3 = 6978,
  CODE_FOR_andv4di3 = 6979,
  CODE_FOR_iorv4di3 = 6980,
  CODE_FOR_xorv4di3 = 6981,
  CODE_FOR_andv2di3 = 6982,
  CODE_FOR_iorv2di3 = 6983,
  CODE_FOR_xorv2di3 = 6984,
  CODE_FOR_vec_pack_trunc_v32hi = 6985,
  CODE_FOR_vec_pack_trunc_v16hi = 6986,
  CODE_FOR_vec_pack_trunc_v8hi = 6987,
  CODE_FOR_vec_pack_trunc_v16si = 6988,
  CODE_FOR_vec_pack_trunc_v8si = 6989,
  CODE_FOR_vec_pack_trunc_v4si = 6990,
  CODE_FOR_vec_pack_trunc_v8di = 6991,
  CODE_FOR_vec_pack_trunc_v4di = 6992,
  CODE_FOR_vec_pack_trunc_v2di = 6993,
  CODE_FOR_vec_pack_trunc_qi = 6994,
  CODE_FOR_vec_pack_trunc_hi = 6995,
  CODE_FOR_vec_pack_trunc_si = 6996,
  CODE_FOR_vec_interleave_highv32qi = 6997,
  CODE_FOR_vec_interleave_highv16hi = 6998,
  CODE_FOR_vec_interleave_highv8si = 6999,
  CODE_FOR_vec_interleave_highv4di = 7000,
  CODE_FOR_vec_interleave_lowv32qi = 7001,
  CODE_FOR_vec_interleave_lowv16hi = 7002,
  CODE_FOR_vec_interleave_lowv8si = 7003,
  CODE_FOR_vec_interleave_lowv4di = 7004,
  CODE_FOR_avx512dq_vinsertf64x2_mask = 7005,
  CODE_FOR_avx512dq_vinserti64x2_mask = 7006,
  CODE_FOR_avx512f_vinsertf32x4_mask = 7007,
  CODE_FOR_avx512f_vinserti32x4_mask = 7008,
  CODE_FOR_avx512dq_vinsertf32x8_mask = 7009,
  CODE_FOR_avx512dq_vinserti32x8_mask = 7010,
  CODE_FOR_avx512f_vinsertf64x4_mask = 7011,
  CODE_FOR_avx512f_vinserti64x4_mask = 7012,
  CODE_FOR_avx512dq_shuf_i64x2_mask = 7013,
  CODE_FOR_avx512dq_shuf_f64x2_mask = 7014,
  CODE_FOR_avx512f_shuf_f64x2_mask = 7015,
  CODE_FOR_avx512f_shuf_i64x2_mask = 7016,
  CODE_FOR_avx512vl_shuf_i32x4_mask = 7017,
  CODE_FOR_avx512vl_shuf_f32x4_mask = 7018,
  CODE_FOR_avx512f_shuf_f32x4_mask = 7019,
  CODE_FOR_avx512f_shuf_i32x4_mask = 7020,
  CODE_FOR_avx512f_pshufdv3_mask = 7021,
  CODE_FOR_avx512vl_pshufdv3_mask = 7022,
  CODE_FOR_avx2_pshufdv3 = 7023,
  CODE_FOR_avx512vl_pshufd_mask = 7024,
  CODE_FOR_sse2_pshufd = 7025,
  CODE_FOR_avx512vl_pshuflwv3_mask = 7026,
  CODE_FOR_avx2_pshuflwv3 = 7027,
  CODE_FOR_avx512vl_pshuflw_mask = 7028,
  CODE_FOR_sse2_pshuflw = 7029,
  CODE_FOR_avx2_pshufhwv3 = 7030,
  CODE_FOR_avx512vl_pshufhwv3_mask = 7031,
  CODE_FOR_avx512vl_pshufhw_mask = 7032,
  CODE_FOR_sse2_pshufhw = 7033,
  CODE_FOR_sse2_loadd = 7034,
  CODE_FOR_vec_unpacks_lo_v64qi = 7035,
  CODE_FOR_vec_unpacks_lo_v32qi = 7036,
  CODE_FOR_vec_unpacks_lo_v16qi = 7037,
  CODE_FOR_vec_unpacks_lo_v32hi = 7038,
  CODE_FOR_vec_unpacks_lo_v16hi = 7039,
  CODE_FOR_vec_unpacks_lo_v8hi = 7040,
  CODE_FOR_vec_unpacks_lo_v16si = 7041,
  CODE_FOR_vec_unpacks_lo_v8si = 7042,
  CODE_FOR_vec_unpacks_lo_v4si = 7043,
  CODE_FOR_vec_unpacks_hi_v64qi = 7044,
  CODE_FOR_vec_unpacks_hi_v32qi = 7045,
  CODE_FOR_vec_unpacks_hi_v16qi = 7046,
  CODE_FOR_vec_unpacks_hi_v32hi = 7047,
  CODE_FOR_vec_unpacks_hi_v16hi = 7048,
  CODE_FOR_vec_unpacks_hi_v8hi = 7049,
  CODE_FOR_vec_unpacks_hi_v16si = 7050,
  CODE_FOR_vec_unpacks_hi_v8si = 7051,
  CODE_FOR_vec_unpacks_hi_v4si = 7052,
  CODE_FOR_vec_unpacku_lo_v64qi = 7053,
  CODE_FOR_vec_unpacku_lo_v32qi = 7054,
  CODE_FOR_vec_unpacku_lo_v16qi = 7055,
  CODE_FOR_vec_unpacku_lo_v32hi = 7056,
  CODE_FOR_vec_unpacku_lo_v16hi = 7057,
  CODE_FOR_vec_unpacku_lo_v8hi = 7058,
  CODE_FOR_vec_unpacku_lo_v16si = 7059,
  CODE_FOR_vec_unpacku_lo_v8si = 7060,
  CODE_FOR_vec_unpacku_lo_v4si = 7061,
  CODE_FOR_vec_unpacks_lo_hi = 7062,
  CODE_FOR_vec_unpacks_lo_si = 7063,
  CODE_FOR_vec_unpacks_lo_di = 7064,
  CODE_FOR_vec_unpacku_hi_v64qi = 7065,
  CODE_FOR_vec_unpacku_hi_v32qi = 7066,
  CODE_FOR_vec_unpacku_hi_v16qi = 7067,
  CODE_FOR_vec_unpacku_hi_v32hi = 7068,
  CODE_FOR_vec_unpacku_hi_v16hi = 7069,
  CODE_FOR_vec_unpacku_hi_v8hi = 7070,
  CODE_FOR_vec_unpacku_hi_v16si = 7071,
  CODE_FOR_vec_unpacku_hi_v8si = 7072,
  CODE_FOR_vec_unpacku_hi_v4si = 7073,
  CODE_FOR_vec_unpacks_hi_hi = 7074,
  CODE_FOR_vec_unpacks_hi_si = 7075,
  CODE_FOR_vec_unpacks_hi_di = 7076,
  CODE_FOR_avx512bw_uavgv64qi3 = 7077,
  CODE_FOR_avx512bw_uavgv64qi3_mask = 7078,
  CODE_FOR_avx2_uavgv32qi3 = 7079,
  CODE_FOR_avx2_uavgv32qi3_mask = 7080,
  CODE_FOR_sse2_uavgv16qi3 = 7081,
  CODE_FOR_sse2_uavgv16qi3_mask = 7082,
  CODE_FOR_avx512bw_uavgv32hi3 = 7083,
  CODE_FOR_avx512bw_uavgv32hi3_mask = 7084,
  CODE_FOR_avx2_uavgv16hi3 = 7085,
  CODE_FOR_avx2_uavgv16hi3_mask = 7086,
  CODE_FOR_sse2_uavgv8hi3 = 7087,
  CODE_FOR_sse2_uavgv8hi3_mask = 7088,
  CODE_FOR_sse2_maskmovdqu = 7089,
  CODE_FOR_ssse3_pmulhrswv4hi3_mask = 7090,
  CODE_FOR_ssse3_pmulhrswv8hi3_mask = 7091,
  CODE_FOR_avx2_pmulhrswv16hi3_mask = 7092,
  CODE_FOR_ssse3_pmulhrswv4hi3 = 7093,
  CODE_FOR_ssse3_pmulhrswv8hi3 = 7094,
  CODE_FOR_avx2_pmulhrswv16hi3 = 7095,
  CODE_FOR_absv64qi2 = 7096,
  CODE_FOR_absv32qi2 = 7097,
  CODE_FOR_absv16qi2 = 7098,
  CODE_FOR_absv32hi2 = 7099,
  CODE_FOR_absv16hi2 = 7100,
  CODE_FOR_absv8hi2 = 7101,
  CODE_FOR_absv16si2 = 7102,
  CODE_FOR_absv8si2 = 7103,
  CODE_FOR_absv4si2 = 7104,
  CODE_FOR_absv8di2 = 7105,
  CODE_FOR_absv4di2 = 7106,
  CODE_FOR_absv2di2 = 7107,
  CODE_FOR_avx2_pblendw = 7108,
  CODE_FOR_avx_roundps_sfix256 = 7109,
  CODE_FOR_sse4_1_roundps_sfix = 7110,
  CODE_FOR_avx512f_roundps512 = 7111,
  CODE_FOR_avx512f_roundpd512 = 7112,
  CODE_FOR_avx512f_roundps512_sfix = 7113,
  CODE_FOR_avx512f_roundpd_vec_pack_sfix512 = 7114,
  CODE_FOR_avx_roundpd_vec_pack_sfix256 = 7115,
  CODE_FOR_sse4_1_roundpd_vec_pack_sfix = 7116,
  CODE_FOR_roundv16sf2 = 7117,
  CODE_FOR_roundv8sf2 = 7118,
  CODE_FOR_roundv4sf2 = 7119,
  CODE_FOR_roundv8df2 = 7120,
  CODE_FOR_roundv4df2 = 7121,
  CODE_FOR_roundv2df2 = 7122,
  CODE_FOR_roundv16sf2_sfix = 7123,
  CODE_FOR_roundv8sf2_sfix = 7124,
  CODE_FOR_roundv4sf2_sfix = 7125,
  CODE_FOR_roundv8df2_vec_pack_sfix = 7126,
  CODE_FOR_roundv4df2_vec_pack_sfix = 7127,
  CODE_FOR_roundv2df2_vec_pack_sfix = 7128,
  CODE_FOR_avx512pf_gatherpfv16sisf = 7129,
  CODE_FOR_avx512pf_gatherpfv8disf = 7130,
  CODE_FOR_avx512pf_gatherpfv8sidf = 7131,
  CODE_FOR_avx512pf_gatherpfv8didf = 7132,
  CODE_FOR_avx512pf_scatterpfv16sisf = 7133,
  CODE_FOR_avx512pf_scatterpfv8disf = 7134,
  CODE_FOR_avx512pf_scatterpfv8sidf = 7135,
  CODE_FOR_avx512pf_scatterpfv8didf = 7136,
  CODE_FOR_rotlv16qi3 = 7137,
  CODE_FOR_rotlv8hi3 = 7138,
  CODE_FOR_rotlv4si3 = 7139,
  CODE_FOR_rotlv2di3 = 7140,
  CODE_FOR_rotrv16qi3 = 7141,
  CODE_FOR_rotrv8hi3 = 7142,
  CODE_FOR_rotrv4si3 = 7143,
  CODE_FOR_rotrv2di3 = 7144,
  CODE_FOR_vrotrv16qi3 = 7145,
  CODE_FOR_vrotrv8hi3 = 7146,
  CODE_FOR_vrotrv4si3 = 7147,
  CODE_FOR_vrotrv2di3 = 7148,
  CODE_FOR_vrotlv16qi3 = 7149,
  CODE_FOR_vrotlv8hi3 = 7150,
  CODE_FOR_vrotlv4si3 = 7151,
  CODE_FOR_vrotlv2di3 = 7152,
  CODE_FOR_vlshrv16qi3 = 7153,
  CODE_FOR_vlshrv8hi3 = 7154,
  CODE_FOR_vlshrv4si3 = 7155,
  CODE_FOR_vlshrv2di3 = 7156,
  CODE_FOR_vlshrv16si3 = 7157,
  CODE_FOR_vlshrv8di3 = 7158,
  CODE_FOR_vlshrv8si3 = 7159,
  CODE_FOR_vlshrv4di3 = 7160,
  CODE_FOR_vashrv8hi3 = 7161,
  CODE_FOR_vashrv8hi3_mask = 7162,
  CODE_FOR_vashrv16qi3 = 7163,
  CODE_FOR_vashrv2di3 = 7164,
  CODE_FOR_vashrv2di3_mask = 7165,
  CODE_FOR_vashrv4si3 = 7166,
  CODE_FOR_vashrv16si3 = 7167,
  CODE_FOR_vashrv8si3 = 7168,
  CODE_FOR_vashlv16qi3 = 7169,
  CODE_FOR_vashlv8hi3 = 7170,
  CODE_FOR_vashlv4si3 = 7171,
  CODE_FOR_vashlv2di3 = 7172,
  CODE_FOR_vashlv16si3 = 7173,
  CODE_FOR_vashlv8di3 = 7174,
  CODE_FOR_vashlv8si3 = 7175,
  CODE_FOR_vashlv4di3 = 7176,
  CODE_FOR_ashlv64qi3 = 7177,
  CODE_FOR_lshrv64qi3 = 7178,
  CODE_FOR_ashrv64qi3 = 7179,
  CODE_FOR_ashlv32qi3 = 7180,
  CODE_FOR_lshrv32qi3 = 7181,
  CODE_FOR_ashrv32qi3 = 7182,
  CODE_FOR_ashlv16qi3 = 7183,
  CODE_FOR_lshrv16qi3 = 7184,
  CODE_FOR_ashrv16qi3 = 7185,
  CODE_FOR_ashrv2di3 = 7186,
  CODE_FOR_xop_vmfrczv4sf2 = 7187,
  CODE_FOR_xop_vmfrczv2df2 = 7188,
  CODE_FOR_avx_vzeroall = 7189,
  CODE_FOR_avx2_permv4di = 7190,
  CODE_FOR_avx2_permv4df = 7191,
  CODE_FOR_avx512vl_permv4di_mask = 7192,
  CODE_FOR_avx512vl_permv4df_mask = 7193,
  CODE_FOR_avx512f_permv8df = 7194,
  CODE_FOR_avx512f_permv8di = 7195,
  CODE_FOR_avx512f_permv8df_mask = 7196,
  CODE_FOR_avx512f_permv8di_mask = 7197,
  CODE_FOR_avx512f_vpermilv8df = 7198,
  CODE_FOR_avx512f_vpermilv8df_mask = 7199,
  CODE_FOR_avx_vpermilv4df = 7200,
  CODE_FOR_avx_vpermilv4df_mask = 7201,
  CODE_FOR_avx_vpermilv2df = 7202,
  CODE_FOR_avx_vpermilv2df_mask = 7203,
  CODE_FOR_avx512f_vpermilv16sf = 7204,
  CODE_FOR_avx512f_vpermilv16sf_mask = 7205,
  CODE_FOR_avx_vpermilv8sf = 7206,
  CODE_FOR_avx_vpermilv8sf_mask = 7207,
  CODE_FOR_avx_vpermilv4sf = 7208,
  CODE_FOR_avx_vpermilv4sf_mask = 7209,
  CODE_FOR_avx512f_vpermi2varv16si3_mask = 7210,
  CODE_FOR_avx512f_vpermi2varv16sf3_mask = 7211,
  CODE_FOR_avx512f_vpermi2varv8di3_mask = 7212,
  CODE_FOR_avx512f_vpermi2varv8df3_mask = 7213,
  CODE_FOR_avx512vl_vpermi2varv8si3_mask = 7214,
  CODE_FOR_avx512vl_vpermi2varv8sf3_mask = 7215,
  CODE_FOR_avx512vl_vpermi2varv4di3_mask = 7216,
  CODE_FOR_avx512vl_vpermi2varv4df3_mask = 7217,
  CODE_FOR_avx512vl_vpermi2varv4si3_mask = 7218,
  CODE_FOR_avx512vl_vpermi2varv4sf3_mask = 7219,
  CODE_FOR_avx512vl_vpermi2varv2di3_mask = 7220,
  CODE_FOR_avx512vl_vpermi2varv2df3_mask = 7221,
  CODE_FOR_avx512bw_vpermi2varv32hi3_mask = 7222,
  CODE_FOR_avx512vl_vpermi2varv16hi3_mask = 7223,
  CODE_FOR_avx512vl_vpermi2varv8hi3_mask = 7224,
  CODE_FOR_avx512bw_vpermi2varv64qi3_mask = 7225,
  CODE_FOR_avx512vl_vpermi2varv32qi3_mask = 7226,
  CODE_FOR_avx512vl_vpermi2varv16qi3_mask = 7227,
  CODE_FOR_avx512f_vpermt2varv16si3_maskz = 7228,
  CODE_FOR_avx512f_vpermt2varv16sf3_maskz = 7229,
  CODE_FOR_avx512f_vpermt2varv8di3_maskz = 7230,
  CODE_FOR_avx512f_vpermt2varv8df3_maskz = 7231,
  CODE_FOR_avx512vl_vpermt2varv8si3_maskz = 7232,
  CODE_FOR_avx512vl_vpermt2varv8sf3_maskz = 7233,
  CODE_FOR_avx512vl_vpermt2varv4di3_maskz = 7234,
  CODE_FOR_avx512vl_vpermt2varv4df3_maskz = 7235,
  CODE_FOR_avx512vl_vpermt2varv4si3_maskz = 7236,
  CODE_FOR_avx512vl_vpermt2varv4sf3_maskz = 7237,
  CODE_FOR_avx512vl_vpermt2varv2di3_maskz = 7238,
  CODE_FOR_avx512vl_vpermt2varv2df3_maskz = 7239,
  CODE_FOR_avx512bw_vpermt2varv32hi3_maskz = 7240,
  CODE_FOR_avx512vl_vpermt2varv16hi3_maskz = 7241,
  CODE_FOR_avx512vl_vpermt2varv8hi3_maskz = 7242,
  CODE_FOR_avx512bw_vpermt2varv64qi3_maskz = 7243,
  CODE_FOR_avx512vl_vpermt2varv32qi3_maskz = 7244,
  CODE_FOR_avx512vl_vpermt2varv16qi3_maskz = 7245,
  CODE_FOR_avx_vperm2f128v8si3 = 7246,
  CODE_FOR_avx_vperm2f128v8sf3 = 7247,
  CODE_FOR_avx_vperm2f128v4df3 = 7248,
  CODE_FOR_avx512vl_vinsertv8si = 7249,
  CODE_FOR_avx512vl_vinsertv8sf = 7250,
  CODE_FOR_avx512vl_vinsertv4di = 7251,
  CODE_FOR_avx512vl_vinsertv4df = 7252,
  CODE_FOR_avx_vinsertf128v32qi = 7253,
  CODE_FOR_avx_vinsertf128v16hi = 7254,
  CODE_FOR_avx_vinsertf128v8si = 7255,
  CODE_FOR_avx_vinsertf128v4di = 7256,
  CODE_FOR_avx_vinsertf128v8sf = 7257,
  CODE_FOR_avx_vinsertf128v4df = 7258,
  CODE_FOR_maskloadv4sfv4si = 7259,
  CODE_FOR_maskloadv2dfv2di = 7260,
  CODE_FOR_maskloadv8sfv8si = 7261,
  CODE_FOR_maskloadv4dfv4di = 7262,
  CODE_FOR_maskloadv4siv4si = 7263,
  CODE_FOR_maskloadv2div2di = 7264,
  CODE_FOR_maskloadv8siv8si = 7265,
  CODE_FOR_maskloadv4div4di = 7266,
  CODE_FOR_maskloadv16sihi = 7267,
  CODE_FOR_maskloadv8siqi = 7268,
  CODE_FOR_maskloadv4siqi = 7269,
  CODE_FOR_maskloadv8diqi = 7270,
  CODE_FOR_maskloadv4diqi = 7271,
  CODE_FOR_maskloadv2diqi = 7272,
  CODE_FOR_maskloadv16sfhi = 7273,
  CODE_FOR_maskloadv8sfqi = 7274,
  CODE_FOR_maskloadv4sfqi = 7275,
  CODE_FOR_maskloadv8dfqi = 7276,
  CODE_FOR_maskloadv4dfqi = 7277,
  CODE_FOR_maskloadv2dfqi = 7278,
  CODE_FOR_maskloadv64qidi = 7279,
  CODE_FOR_maskloadv16qihi = 7280,
  CODE_FOR_maskloadv32qisi = 7281,
  CODE_FOR_maskloadv32hisi = 7282,
  CODE_FOR_maskloadv16hihi = 7283,
  CODE_FOR_maskloadv8hiqi = 7284,
  CODE_FOR_maskstorev4sfv4si = 7285,
  CODE_FOR_maskstorev2dfv2di = 7286,
  CODE_FOR_maskstorev8sfv8si = 7287,
  CODE_FOR_maskstorev4dfv4di = 7288,
  CODE_FOR_maskstorev4siv4si = 7289,
  CODE_FOR_maskstorev2div2di = 7290,
  CODE_FOR_maskstorev8siv8si = 7291,
  CODE_FOR_maskstorev4div4di = 7292,
  CODE_FOR_maskstorev16sihi = 7293,
  CODE_FOR_maskstorev8siqi = 7294,
  CODE_FOR_maskstorev4siqi = 7295,
  CODE_FOR_maskstorev8diqi = 7296,
  CODE_FOR_maskstorev4diqi = 7297,
  CODE_FOR_maskstorev2diqi = 7298,
  CODE_FOR_maskstorev16sfhi = 7299,
  CODE_FOR_maskstorev8sfqi = 7300,
  CODE_FOR_maskstorev4sfqi = 7301,
  CODE_FOR_maskstorev8dfqi = 7302,
  CODE_FOR_maskstorev4dfqi = 7303,
  CODE_FOR_maskstorev2dfqi = 7304,
  CODE_FOR_maskstorev64qidi = 7305,
  CODE_FOR_maskstorev16qihi = 7306,
  CODE_FOR_maskstorev32qisi = 7307,
  CODE_FOR_maskstorev32hisi = 7308,
  CODE_FOR_maskstorev16hihi = 7309,
  CODE_FOR_maskstorev8hiqi = 7310,
  CODE_FOR_cbranchv4si4 = 7311,
  CODE_FOR_cbranchv2di4 = 7312,
  CODE_FOR_cbranchv8si4 = 7313,
  CODE_FOR_cbranchv4di4 = 7314,
  CODE_FOR_vec_initv64qiqi = 7315,
  CODE_FOR_vec_initv32qiqi = 7316,
  CODE_FOR_vec_initv16qiqi = 7317,
  CODE_FOR_vec_initv32hihi = 7318,
  CODE_FOR_vec_initv16hihi = 7319,
  CODE_FOR_vec_initv8hihi = 7320,
  CODE_FOR_vec_initv16sisi = 7321,
  CODE_FOR_vec_initv8sisi = 7322,
  CODE_FOR_vec_initv4sisi = 7323,
  CODE_FOR_vec_initv8didi = 7324,
  CODE_FOR_vec_initv4didi = 7325,
  CODE_FOR_vec_initv2didi = 7326,
  CODE_FOR_vec_initv16sfsf = 7327,
  CODE_FOR_vec_initv8sfsf = 7328,
  CODE_FOR_vec_initv4sfsf = 7329,
  CODE_FOR_vec_initv8dfdf = 7330,
  CODE_FOR_vec_initv4dfdf = 7331,
  CODE_FOR_vec_initv2dfdf = 7332,
  CODE_FOR_vec_initv4titi = 7333,
  CODE_FOR_vec_initv2titi = 7334,
  CODE_FOR_vec_initv64qiv32qi = 7335,
  CODE_FOR_vec_initv32qiv16qi = 7336,
  CODE_FOR_vec_initv16qiv8qi = 7337,
  CODE_FOR_vec_initv32hiv16hi = 7338,
  CODE_FOR_vec_initv16hiv8hi = 7339,
  CODE_FOR_vec_initv8hiv4hi = 7340,
  CODE_FOR_vec_initv16siv8si = 7341,
  CODE_FOR_vec_initv8siv4si = 7342,
  CODE_FOR_vec_initv4siv2si = 7343,
  CODE_FOR_vec_initv8div4di = 7344,
  CODE_FOR_vec_initv4div2di = 7345,
  CODE_FOR_vec_initv16sfv8sf = 7346,
  CODE_FOR_vec_initv8sfv4sf = 7347,
  CODE_FOR_vec_initv4sfv2sf = 7348,
  CODE_FOR_vec_initv8dfv4df = 7349,
  CODE_FOR_vec_initv4dfv2df = 7350,
  CODE_FOR_vec_initv4tiv2ti = 7351,
  CODE_FOR_vcvtps2ph_mask = 7352,
  CODE_FOR_vcvtps2ph = 7353,
  CODE_FOR_avx2_gathersiv2di = 7354,
  CODE_FOR_avx2_gathersiv2df = 7355,
  CODE_FOR_avx2_gathersiv4di = 7356,
  CODE_FOR_avx2_gathersiv4df = 7357,
  CODE_FOR_avx2_gathersiv4si = 7358,
  CODE_FOR_avx2_gathersiv4sf = 7359,
  CODE_FOR_avx2_gathersiv8si = 7360,
  CODE_FOR_avx2_gathersiv8sf = 7361,
  CODE_FOR_avx2_gatherdiv2di = 7362,
  CODE_FOR_avx2_gatherdiv2df = 7363,
  CODE_FOR_avx2_gatherdiv4di = 7364,
  CODE_FOR_avx2_gatherdiv4df = 7365,
  CODE_FOR_avx2_gatherdiv4si = 7366,
  CODE_FOR_avx2_gatherdiv4sf = 7367,
  CODE_FOR_avx2_gatherdiv8si = 7368,
  CODE_FOR_avx2_gatherdiv8sf = 7369,
  CODE_FOR_avx512f_gathersiv16si = 7370,
  CODE_FOR_avx512f_gathersiv16sf = 7371,
  CODE_FOR_avx512f_gathersiv8di = 7372,
  CODE_FOR_avx512f_gathersiv8df = 7373,
  CODE_FOR_avx512vl_gathersiv8si = 7374,
  CODE_FOR_avx512vl_gathersiv8sf = 7375,
  CODE_FOR_avx512vl_gathersiv4di = 7376,
  CODE_FOR_avx512vl_gathersiv4df = 7377,
  CODE_FOR_avx512vl_gathersiv4si = 7378,
  CODE_FOR_avx512vl_gathersiv4sf = 7379,
  CODE_FOR_avx512vl_gathersiv2di = 7380,
  CODE_FOR_avx512vl_gathersiv2df = 7381,
  CODE_FOR_avx512f_gatherdiv16si = 7382,
  CODE_FOR_avx512f_gatherdiv16sf = 7383,
  CODE_FOR_avx512f_gatherdiv8di = 7384,
  CODE_FOR_avx512f_gatherdiv8df = 7385,
  CODE_FOR_avx512vl_gatherdiv8si = 7386,
  CODE_FOR_avx512vl_gatherdiv8sf = 7387,
  CODE_FOR_avx512vl_gatherdiv4di = 7388,
  CODE_FOR_avx512vl_gatherdiv4df = 7389,
  CODE_FOR_avx512vl_gatherdiv4si = 7390,
  CODE_FOR_avx512vl_gatherdiv4sf = 7391,
  CODE_FOR_avx512vl_gatherdiv2di = 7392,
  CODE_FOR_avx512vl_gatherdiv2df = 7393,
  CODE_FOR_avx512f_scattersiv16si = 7394,
  CODE_FOR_avx512f_scattersiv16sf = 7395,
  CODE_FOR_avx512f_scattersiv8di = 7396,
  CODE_FOR_avx512f_scattersiv8df = 7397,
  CODE_FOR_avx512vl_scattersiv8si = 7398,
  CODE_FOR_avx512vl_scattersiv8sf = 7399,
  CODE_FOR_avx512vl_scattersiv4di = 7400,
  CODE_FOR_avx512vl_scattersiv4df = 7401,
  CODE_FOR_avx512vl_scattersiv4si = 7402,
  CODE_FOR_avx512vl_scattersiv4sf = 7403,
  CODE_FOR_avx512vl_scattersiv2di = 7404,
  CODE_FOR_avx512vl_scattersiv2df = 7405,
  CODE_FOR_avx512f_scatterdiv16si = 7406,
  CODE_FOR_avx512f_scatterdiv16sf = 7407,
  CODE_FOR_avx512f_scatterdiv8di = 7408,
  CODE_FOR_avx512f_scatterdiv8df = 7409,
  CODE_FOR_avx512vl_scatterdiv8si = 7410,
  CODE_FOR_avx512vl_scatterdiv8sf = 7411,
  CODE_FOR_avx512vl_scatterdiv4di = 7412,
  CODE_FOR_avx512vl_scatterdiv4df = 7413,
  CODE_FOR_avx512vl_scatterdiv4si = 7414,
  CODE_FOR_avx512vl_scatterdiv4sf = 7415,
  CODE_FOR_avx512vl_scatterdiv2di = 7416,
  CODE_FOR_avx512vl_scatterdiv2df = 7417,
  CODE_FOR_avx512f_expandv16si_maskz = 7418,
  CODE_FOR_avx512f_expandv16sf_maskz = 7419,
  CODE_FOR_avx512f_expandv8di_maskz = 7420,
  CODE_FOR_avx512f_expandv8df_maskz = 7421,
  CODE_FOR_avx512vl_expandv8si_maskz = 7422,
  CODE_FOR_avx512vl_expandv8sf_maskz = 7423,
  CODE_FOR_avx512vl_expandv4di_maskz = 7424,
  CODE_FOR_avx512vl_expandv4df_maskz = 7425,
  CODE_FOR_avx512vl_expandv4si_maskz = 7426,
  CODE_FOR_avx512vl_expandv4sf_maskz = 7427,
  CODE_FOR_avx512vl_expandv2di_maskz = 7428,
  CODE_FOR_avx512vl_expandv2df_maskz = 7429,
  CODE_FOR_expandv64qi_maskz = 7430,
  CODE_FOR_expandv16qi_maskz = 7431,
  CODE_FOR_expandv32qi_maskz = 7432,
  CODE_FOR_expandv32hi_maskz = 7433,
  CODE_FOR_expandv16hi_maskz = 7434,
  CODE_FOR_expandv8hi_maskz = 7435,
  CODE_FOR_vpamdd52huqv8di_maskz = 7436,
  CODE_FOR_vpamdd52huqv4di_maskz = 7437,
  CODE_FOR_vpamdd52huqv2di_maskz = 7438,
  CODE_FOR_vpamdd52luqv8di_maskz = 7439,
  CODE_FOR_vpamdd52luqv4di_maskz = 7440,
  CODE_FOR_vpamdd52luqv2di_maskz = 7441,
  CODE_FOR_movv64sf = 7442,
  CODE_FOR_movv64si = 7443,
  CODE_FOR_vpshrdv_v32hi_maskz = 7444,
  CODE_FOR_vpshrdv_v16si_maskz = 7445,
  CODE_FOR_vpshrdv_v8di_maskz = 7446,
  CODE_FOR_vpshrdv_v16hi_maskz = 7447,
  CODE_FOR_vpshrdv_v8si_maskz = 7448,
  CODE_FOR_vpshrdv_v4di_maskz = 7449,
  CODE_FOR_vpshrdv_v8hi_maskz = 7450,
  CODE_FOR_vpshrdv_v4si_maskz = 7451,
  CODE_FOR_vpshrdv_v2di_maskz = 7452,
  CODE_FOR_vpshldv_v32hi_maskz = 7453,
  CODE_FOR_vpshldv_v16si_maskz = 7454,
  CODE_FOR_vpshldv_v8di_maskz = 7455,
  CODE_FOR_vpshldv_v16hi_maskz = 7456,
  CODE_FOR_vpshldv_v8si_maskz = 7457,
  CODE_FOR_vpshldv_v4di_maskz = 7458,
  CODE_FOR_vpshldv_v8hi_maskz = 7459,
  CODE_FOR_vpshldv_v4si_maskz = 7460,
  CODE_FOR_vpshldv_v2di_maskz = 7461,
  CODE_FOR_vpdpbusd_v16si_maskz = 7462,
  CODE_FOR_vpdpbusd_v8si_maskz = 7463,
  CODE_FOR_vpdpbusd_v4si_maskz = 7464,
  CODE_FOR_vpdpbusds_v16si_maskz = 7465,
  CODE_FOR_vpdpbusds_v8si_maskz = 7466,
  CODE_FOR_vpdpbusds_v4si_maskz = 7467,
  CODE_FOR_vpdpwssd_v16si_maskz = 7468,
  CODE_FOR_vpdpwssd_v8si_maskz = 7469,
  CODE_FOR_vpdpwssd_v4si_maskz = 7470,
  CODE_FOR_vpdpwssds_v16si_maskz = 7471,
  CODE_FOR_vpdpwssds_v8si_maskz = 7472,
  CODE_FOR_vpdpwssds_v4si_maskz = 7473,
  CODE_FOR_sse2_lfence = 7474,
  CODE_FOR_sse_sfence = 7475,
  CODE_FOR_sse2_mfence = 7476,
  CODE_FOR_mem_thread_fence = 7477,
  CODE_FOR_atomic_loadqi = 7478,
  CODE_FOR_atomic_loadhi = 7479,
  CODE_FOR_atomic_loadsi = 7480,
  CODE_FOR_atomic_loaddi = 7481,
  CODE_FOR_atomic_storeqi = 7482,
  CODE_FOR_atomic_storehi = 7483,
  CODE_FOR_atomic_storesi = 7484,
  CODE_FOR_atomic_storedi = 7485,
  CODE_FOR_atomic_compare_and_swapqi = 7486,
  CODE_FOR_atomic_compare_and_swaphi = 7487,
  CODE_FOR_atomic_compare_and_swapsi = 7488,
  CODE_FOR_atomic_compare_and_swapdi = 7489,
  CODE_FOR_atomic_compare_and_swapti = 7490,
  CODE_FOR_atomic_bit_test_and_sethi = 7491,
  CODE_FOR_atomic_bit_test_and_setsi = 7492,
  CODE_FOR_atomic_bit_test_and_setdi = 7493,
  CODE_FOR_atomic_bit_test_and_complementhi = 7494,
  CODE_FOR_atomic_bit_test_and_complementsi = 7495,
  CODE_FOR_atomic_bit_test_and_complementdi = 7496,
  CODE_FOR_atomic_bit_test_and_resethi = 7497,
  CODE_FOR_atomic_bit_test_and_resetsi = 7498,
  CODE_FOR_atomic_bit_test_and_resetdi = 7499
};

const unsigned int NUM_INSN_CODES = 7500;
# 52 "../../gcc/target.h" 2

# 1 "../../gcc/hard-reg-set.h" 1
# 41 "../../gcc/hard-reg-set.h"
typedef unsigned long HARD_REG_ELT_TYPE;
# 52 "../../gcc/hard-reg-set.h"
typedef HARD_REG_ELT_TYPE HARD_REG_SET[((81 + (8 * 8) - 1) / (8 * 8))];






struct hard_reg_set_container
{
  HARD_REG_SET set;
};
# 206 "../../gcc/hard-reg-set.h"
static inline bool
hard_reg_set_subset_p (const HARD_REG_SET x, const HARD_REG_SET y)
{
  return (x[0] & ~y[0]) == 0 && (x[1] & ~y[1]) == 0;
}

static inline bool
hard_reg_set_equal_p (const HARD_REG_SET x, const HARD_REG_SET y)
{
  return x[0] == y[0] && x[1] == y[1];
}

static inline bool
hard_reg_set_intersect_p (const HARD_REG_SET x, const HARD_REG_SET y)
{
  return (x[0] & y[0]) != 0 || (x[1] & y[1]) != 0;
}

static inline bool
hard_reg_set_empty_p (const HARD_REG_SET x)
{
  return x[0] == 0 && x[1] == 0;
}
# 515 "../../gcc/hard-reg-set.h"
struct hard_reg_set_iterator
{

  HARD_REG_ELT_TYPE *pelt;


  unsigned short length;


  unsigned short word_no;




  HARD_REG_ELT_TYPE bits;
};





static inline void
hard_reg_set_iter_init (hard_reg_set_iterator *iter, HARD_REG_SET set,
                        unsigned min, unsigned *regno)
{

  iter->pelt = set;
  iter->length = ((81 + (8 * 8) - 1) / (8 * 8));




  iter->word_no = min / ((unsigned) (8 * 8));
  if (iter->word_no < iter->length)
    {
      iter->bits = iter->pelt[iter->word_no];
      iter->bits >>= min % ((unsigned) (8 * 8));


      min += !iter->bits;
    }
  *regno = min;
}

static inline bool
hard_reg_set_iter_set (hard_reg_set_iterator *iter, unsigned *regno)
{
  while (1)
    {

      if (iter->word_no >= iter->length)
        return false;

      if (iter->bits)
        {

          while (!(iter->bits & 1))
            {
              iter->bits >>= 1;
              *regno += 1;
            }
          return (*regno < 81);
        }


      *regno = (*regno + ((unsigned) (8 * 8)) - 1);
      *regno -= *regno % ((unsigned) (8 * 8));


      while (++iter->word_no < iter->length)
        {
          iter->bits = iter->pelt[iter->word_no];
          if (iter->bits)
            break;
          *regno += ((unsigned) (8 * 8));
        }
    }
}

static inline void
hard_reg_set_iter_next (hard_reg_set_iterator *iter, unsigned *regno)
{
  iter->bits >>= 1;
  *regno += 1;
}
# 614 "../../gcc/hard-reg-set.h"
extern char global_regs[81];

struct simplifiable_subreg;
struct subreg_shape;

struct simplifiable_subregs_hasher : nofree_ptr_hash <simplifiable_subreg>
{
  typedef const subreg_shape *compare_type;

  static inline hashval_t hash (const simplifiable_subreg *);
  static inline bool equal (const simplifiable_subreg *, const subreg_shape *);
};

struct target_hard_regs {
  void finalize ();


  HARD_REG_SET x_accessible_reg_set;



  HARD_REG_SET x_operand_reg_set;





  char x_fixed_regs[81];


  HARD_REG_SET x_fixed_reg_set;





  char x_call_used_regs[81];

  char x_call_really_used_regs[81];


  HARD_REG_SET x_call_used_reg_set;





  HARD_REG_SET x_call_fixed_reg_set;





  HARD_REG_SET x_fixed_nonglobal_reg_set;







  HARD_REG_SET x_regs_invalidated_by_call;



  HARD_REG_SET x_no_caller_save_reg_set;


  int x_reg_alloc_order[81];


  int x_inv_reg_alloc_order[81];


  HARD_REG_SET x_reg_class_contents[((int) LIM_REG_CLASSES)];



  bool x_class_only_fixed_regs[((int) LIM_REG_CLASSES)];


  unsigned int x_reg_class_size[((int) LIM_REG_CLASSES)];


  enum reg_class x_reg_class_subclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



  enum reg_class x_reg_class_subunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



  enum reg_class x_reg_class_superunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];


  const char *x_reg_names[81];



  hash_table <simplifiable_subregs_hasher> *x_simplifiable_subregs;
};

extern struct target_hard_regs default_target_hard_regs;

extern struct target_hard_regs *this_target_hard_regs;
# 766 "../../gcc/hard-reg-set.h"
extern const char * reg_class_names[];
# 54 "../../gcc/target.h" 2



struct cumulative_args_t { void *magic; void *p; };
# 72 "../../gcc/target.h"
enum print_switch_type
{
  SWITCH_TYPE_PASSED,
  SWITCH_TYPE_ENABLED,
  SWITCH_TYPE_DESCRIPTIVE,
  SWITCH_TYPE_LINE_START,
  SWITCH_TYPE_LINE_END
};





enum by_pieces_operation
{
  CLEAR_BY_PIECES,
  MOVE_BY_PIECES,
  SET_BY_PIECES,
  STORE_BY_PIECES,
  COMPARE_BY_PIECES
};

extern unsigned long by_pieces_ninsns (unsigned long,
      unsigned int,
      unsigned int,
      by_pieces_operation);

typedef int (* print_switch_fn_type) (print_switch_type, const char *);


extern int elf_record_gcc_switches (print_switch_type type, const char *);





extern bool target_default_pointer_address_modes_p (void);



extern unsigned int get_move_ratio (bool);

struct stdarg_info;
struct spec_info_def;
struct hard_reg_set_container;
struct cgraph_node;
struct cgraph_simd_clone;


struct secondary_reload_info
{


  int icode;
  int extra_cost;



  struct secondary_reload_info *prev_sri;
  int t_icode;
};


struct _dep;


struct ddg;


struct loop;


struct noce_if_info;


struct ao_ref;


struct _stmt_vec_info;


extern tree stmt_vectype (struct _stmt_vec_info *);
extern bool stmt_in_inner_loop_p (struct _stmt_vec_info *);



struct asm_int_op
{
  const char *hi;
  const char *si;
  const char *di;
  const char *ti;
};


enum vect_cost_for_stmt
{
  scalar_stmt,
  scalar_load,
  scalar_store,
  vector_stmt,
  vector_load,
  vector_gather_load,
  unaligned_load,
  unaligned_store,
  vector_store,
  vector_scatter_store,
  vec_to_scalar,
  scalar_to_vec,
  cond_branch_not_taken,
  cond_branch_taken,
  vec_perm,
  vec_promote_demote,
  vec_construct
};



enum vect_cost_model_location {
  vect_prologue = 0,
  vect_body = 1,
  vect_epilogue = 2
};

class vec_perm_indices;


typedef vec<poly_uint64> vector_sizes;



typedef auto_vec<poly_uint64, 8> auto_vector_sizes;







# 1 "../../gcc/target.def" 1
# 24 "../../gcc/target.def"
# 1 "../../gcc/target-hooks-macros.h" 1
# 25 "../../gcc/target.def" 2




struct gcc_target {



struct asm_out {


const char * open_paren;





const char * close_paren;


const char * byte_op;
# 65 "../../gcc/target.def"
struct asm_int_op aligned_op;
struct asm_int_op unaligned_op;



int (* label_align_after_barrier_max_skip) (rtx_insn *label);
# 80 "../../gcc/target.def"
int (* loop_align_max_skip) (rtx_insn *label);
# 90 "../../gcc/target.def"
int (* label_align_max_skip) (rtx_insn *label);
# 100 "../../gcc/target.def"
int (* jump_align_max_skip) (rtx_insn *label);
# 113 "../../gcc/target.def"
bool (* integer) (rtx x, unsigned int size, int aligned_p);
# 132 "../../gcc/target.def"
void (* decl_end) (void);







void (* globalize_label) (FILE *stream, const char *name);
# 152 "../../gcc/target.def"
void (* globalize_decl_name) (FILE *stream, tree decl);
# 162 "../../gcc/target.def"
void (* assemble_undefined_decl) (FILE *stream, const char *name, const_tree decl);
# 176 "../../gcc/target.def"
void (* emit_unwind_label) (FILE *stream, tree decl, int for_eh, int empty);
# 191 "../../gcc/target.def"
void (* emit_except_table_label) (FILE *stream);
# 202 "../../gcc/target.def"
void (* emit_except_personality) (rtx personality);
# 211 "../../gcc/target.def"
void (* unwind_emit) (FILE *stream, rtx_insn *insn);







bool unwind_emit_before_insn;
# 228 "../../gcc/target.def"
void (* generate_internal_label) (char *buf, const char *prefix, unsigned long labelno);






void (* internal_label) (FILE *stream, const char *prefix, unsigned long labelno);
# 255 "../../gcc/target.def"
void (* declare_constant_name) (FILE *file, const char *name, const_tree expr, long size);
# 272 "../../gcc/target.def"
bool (* ttype) (rtx sym);
# 283 "../../gcc/target.def"
void (* assemble_visibility) (tree decl, int visibility);







void (* print_patchable_function_entry) (FILE *file, unsigned long patch_area_size, bool record_p);
# 303 "../../gcc/target.def"
void (* function_prologue) (FILE *file);
# 351 "../../gcc/target.def"
void (* function_end_prologue) (FILE *file);
# 361 "../../gcc/target.def"
void (* function_begin_epilogue) (FILE *file);
# 371 "../../gcc/target.def"
void (* function_epilogue) (FILE *file);
# 421 "../../gcc/target.def"
void (* init_sections) (void);
# 436 "../../gcc/target.def"
void (* named_section) (const char *name, unsigned int flags, tree decl);
# 448 "../../gcc/target.def"
bool (* elf_flags_numeric) (unsigned int flags, unsigned int *num);
# 469 "../../gcc/target.def"
section * (* function_section) (tree decl, enum node_frequency freq, bool startup, bool exit);
# 482 "../../gcc/target.def"
void (* function_switched_text_sections) (FILE *file, tree decl, bool new_is_cold);
# 496 "../../gcc/target.def"
int (* reloc_rw_mask) (void);
# 514 "../../gcc/target.def"
section * (* select_section) (tree exp, int reloc, unsigned long align);
# 532 "../../gcc/target.def"
section * (* select_rtx_section) (machine_mode mode, rtx x, unsigned long align);
# 548 "../../gcc/target.def"
void (* unique_section) (tree decl, int reloc);
# 563 "../../gcc/target.def"
section * (* function_rodata_section) (tree decl);
# 576 "../../gcc/target.def"
const char * mergeable_rodata_prefix;







section * (* tm_clone_table_section) (void);






void (* constructor) (rtx symbol, int priority);
# 608 "../../gcc/target.def"
void (* destructor) (rtx symbol, int priority);
# 619 "../../gcc/target.def"
void (* output_mi_thunk) (FILE *file, tree thunk_fndecl, long delta, long vcall_offset, tree function);
# 670 "../../gcc/target.def"
bool (* can_output_mi_thunk) (const_tree thunk_fndecl, long delta, long vcall_offset, const_tree function);
# 683 "../../gcc/target.def"
void (* file_start) (void);
# 695 "../../gcc/target.def"
void (* file_end) (void);
# 704 "../../gcc/target.def"
void (* lto_start) (void);
# 714 "../../gcc/target.def"
void (* lto_end) (void);
# 724 "../../gcc/target.def"
void (* code_end) (void);
# 736 "../../gcc/target.def"
void (* external_libcall) (rtx symref);
# 746 "../../gcc/target.def"
void (* mark_decl_preserved) (const char *symbol);
# 755 "../../gcc/target.def"
int (* record_gcc_switches) (print_switch_type type, const char *text);
# 807 "../../gcc/target.def"
const char * record_gcc_switches_section;







void (* output_anchor) (rtx x);
# 829 "../../gcc/target.def"
void (* output_ident) (const char *name);
# 839 "../../gcc/target.def"
void (* output_dwarf_dtprel) (FILE *file, int size, rtx x);







void (* final_postscan_insn) (FILE *file, rtx_insn *insn, rtx *opvec, int noperands);
# 863 "../../gcc/target.def"
void (* trampoline_template) (FILE *f);
# 877 "../../gcc/target.def"
void (* output_source_filename) (FILE *file, const char *name);
# 887 "../../gcc/target.def"
bool (* output_addr_const_extra) (FILE *file, rtx x);
# 910 "../../gcc/target.def"
void (* print_operand) (FILE *file, rtx x, int code);
# 919 "../../gcc/target.def"
void (* print_operand_address) (FILE *file, machine_mode mode, rtx addr);
# 929 "../../gcc/target.def"
bool (* print_operand_punct_valid_p) (unsigned char code);







tree (* mangle_assembler_name) (const char *name);
# 947 "../../gcc/target.def"
} asm_out ;





struct sched {




int (* adjust_cost) (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn, int cost, unsigned int dw);
# 977 "../../gcc/target.def"
int (* adjust_priority) (rtx_insn *insn, int priority);
# 989 "../../gcc/target.def"
int (* issue_rate) (void);
# 1004 "../../gcc/target.def"
int (* variable_issue) (FILE *file, int verbose, rtx_insn *insn, int more);
# 1020 "../../gcc/target.def"
void (* init) (FILE *file, int verbose, int max_ready);
# 1032 "../../gcc/target.def"
void (* finish) (FILE *file, int verbose);
# 1043 "../../gcc/target.def"
void (* init_global) (FILE *file, int verbose, int old_max_uid);
# 1052 "../../gcc/target.def"
void (* finish_global) (FILE *file, int verbose);
# 1061 "../../gcc/target.def"
int (* reorder) (FILE *file, int verbose, rtx_insn **ready, int *n_readyp, int clock);
# 1079 "../../gcc/target.def"
int (* reorder2) (FILE *file, int verbose, rtx_insn **ready, int *n_readyp, int clock);
# 1091 "../../gcc/target.def"
bool (* macro_fusion_p) (void);




bool (* macro_fusion_pair_p) (rtx_insn *prev, rtx_insn *curr);
# 1109 "../../gcc/target.def"
void (* dependencies_evaluation_hook) (rtx_insn *head, rtx_insn *tail);
# 1130 "../../gcc/target.def"
void (* init_dfa_pre_cycle_insn) (void);




rtx (* dfa_pre_cycle_insn) (void);
# 1146 "../../gcc/target.def"
void (* init_dfa_post_cycle_insn) (void);





rtx_insn * (* dfa_post_cycle_insn) (void);
# 1164 "../../gcc/target.def"
void (* dfa_pre_advance_cycle) (void);







void (* dfa_post_advance_cycle) (void);
# 1187 "../../gcc/target.def"
int (* first_cycle_multipass_dfa_lookahead) (void);
# 1221 "../../gcc/target.def"
int (* first_cycle_multipass_dfa_lookahead_guard) (rtx_insn *insn, int ready_index);
# 1247 "../../gcc/target.def"
void (* first_cycle_multipass_begin) (void *data, signed char *ready_try, int n_ready, bool first_cycle_insn_p);
# 1264 "../../gcc/target.def"
void (* first_cycle_multipass_issue) (void *data, signed char *ready_try, int n_ready, rtx_insn *insn, const void *prev_data);
# 1279 "../../gcc/target.def"
void (* first_cycle_multipass_backtrack) (const void *data, signed char *ready_try, int n_ready);
# 1293 "../../gcc/target.def"
void (* first_cycle_multipass_end) (const void *data);
# 1304 "../../gcc/target.def"
void (* first_cycle_multipass_init) (void *data);
# 1314 "../../gcc/target.def"
void (* first_cycle_multipass_fini) (void *data);
# 1330 "../../gcc/target.def"
int (* dfa_new_cycle) (FILE *dump, int verbose, rtx_insn *insn, int last_clock, int clock, int *sort_p);
# 1355 "../../gcc/target.def"
bool (* is_costly_dependence) (struct _dep *_dep, int cost, int distance);
# 1380 "../../gcc/target.def"
void (* h_i_d_extended) (void);
# 1390 "../../gcc/target.def"
void * (* alloc_sched_context) (void);





void (* init_sched_context) (void *tc, bool clean_p);







void (* set_sched_context) (void *tc);





void (* clear_sched_context) (void *tc);





void (* free_sched_context) (void *tc);
# 1431 "../../gcc/target.def"
int (* speculate_insn) (rtx_insn *insn, unsigned int dep_status, rtx *new_pat);
# 1446 "../../gcc/target.def"
bool (* needs_block_p) (unsigned int dep_status);
# 1460 "../../gcc/target.def"
rtx (* gen_spec_check) (rtx_insn *insn, rtx_insn *label, unsigned int ds);
# 1475 "../../gcc/target.def"
void (* set_sched_flags) (struct spec_info_def *spec_info);







unsigned int (* get_insn_spec_ds) (rtx_insn *insn);




unsigned int (* get_insn_checked_ds) (rtx_insn *insn);




bool (* can_speculate_insn) (rtx_insn *insn);
# 1502 "../../gcc/target.def"
bool (* skip_rtx_p) (const_rtx x);
# 1512 "../../gcc/target.def"
int (* sms_res_mii) (struct ddg *g);
# 1525 "../../gcc/target.def"
void (* dispatch_do) (rtx_insn *insn, int x);
# 1535 "../../gcc/target.def"
bool (* dispatch) (rtx_insn *insn, int x);






bool exposed_pipeline;
# 1552 "../../gcc/target.def"
int (* reassociation_width) (unsigned int opc, machine_mode mode);
# 1561 "../../gcc/target.def"
void (* fusion_priority) (rtx_insn *insn, int max_pri, int *fusion_pri, int *pri);
# 1638 "../../gcc/target.def"
} sched ;




struct simd_clone {

int (* compute_vecsize_and_simdlen) (struct cgraph_node *, struct cgraph_simd_clone *, tree, int);
# 1654 "../../gcc/target.def"
void (* adjust) (struct cgraph_node *);





int (* usable) (struct cgraph_node *);







} simd_clone ;




struct simt {

int (* vf) (void);




} simt ;




struct goacc {

bool (* validate_dims) (tree decl, int *dims, int fn_level);
# 1702 "../../gcc/target.def"
int (* dim_limit) (int axis);






bool (* fork_join) (gcall *call, const int *dims, bool is_fork);
# 1721 "../../gcc/target.def"
void (* reduction) (gcall *call);
# 1732 "../../gcc/target.def"
} goacc ;




struct vectorize {




tree (* builtin_mask_for_load) (void);
# 1774 "../../gcc/target.def"
tree (* builtin_vectorized_function) (unsigned code, tree vec_type_out, tree vec_type_in);
# 1786 "../../gcc/target.def"
tree (* builtin_md_vectorized_function) (tree fndecl, tree vec_type_out, tree vec_type_in);
# 1797 "../../gcc/target.def"
tree (* builtin_conversion) (unsigned code, tree dest_type, tree src_type);
# 1814 "../../gcc/target.def"
int (* builtin_vectorization_cost) (enum vect_cost_for_stmt type_of_cost, tree vectype, int misalign);







long (* preferred_vector_alignment) (const_tree type);
# 1838 "../../gcc/target.def"
bool (* vector_alignment_reachable) (const_tree type, bool is_packed);





bool (* vec_perm_const) (machine_mode mode, rtx output, rtx in0, rtx in1, const vec_perm_indices &sel);
# 1870 "../../gcc/target.def"
bool (* support_vector_misalignment) (machine_mode mode, const_tree type, int misalignment, bool is_packed);
# 1883 "../../gcc/target.def"
machine_mode (* preferred_simd_mode) (scalar_mode mode);
# 1894 "../../gcc/target.def"
machine_mode (* split_reduction) (machine_mode);
# 1906 "../../gcc/target.def"
void (* autovectorize_vector_sizes) (vector_sizes *sizes);
# 1921 "../../gcc/target.def"
opt_machine_mode (* get_mask_mode) (poly_uint64 nunits, poly_uint64 length);
# 1938 "../../gcc/target.def"
bool (* empty_mask_is_expensive) (unsigned ifn);
# 1948 "../../gcc/target.def"
tree (* builtin_gather) (const_tree mem_vectype, const_tree index_type, int scale);
# 1960 "../../gcc/target.def"
tree (* builtin_scatter) (const_tree vectype, const_tree index_type, int scale);
# 1972 "../../gcc/target.def"
void * (* init_cost) (struct loop *loop_info);
# 1987 "../../gcc/target.def"
unsigned (* add_stmt_cost) (void *data, int count, enum vect_cost_for_stmt kind, struct _stmt_vec_info *stmt_info, int misalign, enum vect_cost_model_location where);
# 2004 "../../gcc/target.def"
void (* finish_cost) (void *data, unsigned *prologue_cost, unsigned *body_cost, unsigned *epilogue_cost);
# 2016 "../../gcc/target.def"
void (* destroy_cost_data) (void *data);
# 2025 "../../gcc/target.def"
} vectorize ;




void (* record_offload_symbol) (tree);







long absolute_biggest_alignment;
# 2048 "../../gcc/target.def"
void (* override_options_after_change) (void);
# 2060 "../../gcc/target.def"
char * (* offload_options) (void);
# 2069 "../../gcc/target.def"
scalar_int_mode (* eh_return_filter_mode) (void);






scalar_int_mode (* libgcc_cmp_return_mode) (void);
# 2086 "../../gcc/target.def"
scalar_int_mode (* libgcc_shift_count_mode) (void);
# 2096 "../../gcc/target.def"
scalar_int_mode (* unwind_word_mode) (void);







tree (* merge_decl_attributes) (tree olddecl, tree newdecl);
# 2129 "../../gcc/target.def"
tree (* merge_type_attributes) (tree type1, tree type2);
# 2142 "../../gcc/target.def"
const struct attribute_spec * attribute_table;
# 2153 "../../gcc/target.def"
bool (* attribute_takes_identifier_p) (const_tree name);
# 2166 "../../gcc/target.def"
int (* comp_type_attributes) (const_tree type1, const_tree type2);
# 2177 "../../gcc/target.def"
void (* set_default_type_attributes) (tree type);







void (* insert_attributes) (tree node, tree *attr_ptr);
# 2202 "../../gcc/target.def"
bool (* function_attribute_inlinable_p) (const_tree fndecl);
# 2214 "../../gcc/target.def"
bool (* ms_bitfield_layout_p) (const_tree record_type);
# 2247 "../../gcc/target.def"
bool (* words_big_endian) (void);






bool (* float_words_big_endian) (void);





bool (* float_exceptions_rounding_supported_p) (void);
# 2273 "../../gcc/target.def"
bool (* decimal_float_supported_p) (void);






bool (* fixed_point_supported_p) (void);






bool (* align_anon_bitfield) (void);
# 2298 "../../gcc/target.def"
bool (* narrow_volatile_bitfield) (void);
# 2309 "../../gcc/target.def"
void (* init_builtins) (void);
# 2333 "../../gcc/target.def"
tree (* builtin_decl) (unsigned code, bool initialize_p);
# 2345 "../../gcc/target.def"
rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget, machine_mode mode, int ignore);
# 2360 "../../gcc/target.def"
tree (* builtin_chkp_function) (unsigned fcode);
# 2434 "../../gcc/target.def"
tree (* chkp_bound_type) (void);





machine_mode (* chkp_bound_mode) (void);





tree (* chkp_make_bounds_constant) (long lb, long ub);






int (* chkp_initialize_bounds) (tree var, tree lb, tree ub, tree *stmts);
# 2466 "../../gcc/target.def"
tree (* resolve_overloaded_builtin) (unsigned int loc, tree fndecl, void *arglist);
# 2481 "../../gcc/target.def"
tree (* fold_builtin) (tree fndecl, int n_args, tree *argp, bool ignore);
# 2494 "../../gcc/target.def"
bool (* gimple_fold_builtin) (gimple_stmt_iterator *gsi);
# 2511 "../../gcc/target.def"
int (* compare_version_priority) (tree decl1, tree decl2);
# 2525 "../../gcc/target.def"
tree (* generate_version_dispatcher_body) (void *arg);
# 2537 "../../gcc/target.def"
tree (* get_function_versions_dispatcher) (void *decl);
# 2547 "../../gcc/target.def"
tree (* builtin_reciprocal) (tree fndecl);
# 2558 "../../gcc/target.def"
const char * (* mangle_type) (const_tree type);
# 2595 "../../gcc/target.def"
void (* init_libfuncs) (void);
# 2608 "../../gcc/target.def"
bool libfunc_gnu_prefix;
# 2621 "../../gcc/target.def"
unsigned int (* section_type_flags) (tree decl, const char *name, int reloc);
# 2635 "../../gcc/target.def"
bool (* libc_has_function) (enum function_class fn_class);
# 2644 "../../gcc/target.def"
bool (* cannot_modify_jumps_p) (void);
# 2662 "../../gcc/target.def"
bool (* can_follow_jump) (const rtx_insn *follower, const rtx_insn *followee);
# 2674 "../../gcc/target.def"
reg_class_t (* branch_target_register_class) (void);
# 2688 "../../gcc/target.def"
bool (* branch_target_register_callee_saved) (bool after_prologue_epilogue_gen);
# 2705 "../../gcc/target.def"
bool (* have_conditional_execution) (void);







rtx (* gen_ccmp_first) (rtx_insn **prep_seq, rtx_insn **gen_seq, int code, tree op0, tree op1);
# 2725 "../../gcc/target.def"
rtx (* gen_ccmp_next) (rtx_insn **prep_seq, rtx_insn **gen_seq, rtx prev, int cmp_code, tree op0, tree op1, int bit_code);
# 2743 "../../gcc/target.def"
unsigned (* loop_unroll_adjust) (unsigned nunroll, struct loop *loop);
# 2755 "../../gcc/target.def"
bool (* legitimate_constant_p) (machine_mode mode, rtx x);
# 2766 "../../gcc/target.def"
bool (* cannot_force_const_mem) (machine_mode mode, rtx x);
# 2782 "../../gcc/target.def"
bool (* cannot_copy_insn_p) (rtx_insn *);





bool (* commutative_p) (const_rtx x, int outer_code);
# 2799 "../../gcc/target.def"
bool (* mode_dependent_address_p) (const_rtx addr, addr_space_t addrspace);
# 2820 "../../gcc/target.def"
rtx (* legitimize_address) (rtx x, rtx oldx, machine_mode mode);
# 2846 "../../gcc/target.def"
rtx (* delegitimize_address) (rtx x);
# 2860 "../../gcc/target.def"
bool (* const_not_ok_for_debug_p) (rtx x);







bool (* legitimate_address_p) (machine_mode mode, rtx x, bool strict);
# 2936 "../../gcc/target.def"
bool (* use_blocks_for_constant_p) (machine_mode mode, const_rtx x);
# 2947 "../../gcc/target.def"
bool (* use_blocks_for_decl_p) (const_tree decl);
# 2957 "../../gcc/target.def"
long min_anchor_offset;







long max_anchor_offset;







bool (* use_anchors_for_symbol_p) (const_rtx x);
# 2986 "../../gcc/target.def"
bool (* has_ifunc_p) (void);
# 2997 "../../gcc/target.def"
bool (* function_ok_for_sibcall) (tree decl, tree exp);
# 3015 "../../gcc/target.def"
void (* set_current_function) (tree decl);
# 3036 "../../gcc/target.def"
bool (* in_small_data_p) (const_tree exp);
# 3045 "../../gcc/target.def"
bool (* binds_local_p) (const_tree exp);
# 3058 "../../gcc/target.def"
bool (* profile_before_prologue) (void);
# 3068 "../../gcc/target.def"
bool (* keep_leaf_when_profiled) (void);
# 3082 "../../gcc/target.def"
tree (* mangle_decl_assembler_name) (tree decl, tree id);
# 3096 "../../gcc/target.def"
void (* encode_section_info) (tree decl, rtx rtl, int new_decl_p);
# 3137 "../../gcc/target.def"
const char * (* strip_name_encoding) (const char *name);
# 3147 "../../gcc/target.def"
unsigned long (* shift_truncation_mask) (machine_mode mode);
# 3176 "../../gcc/target.def"
unsigned int (* min_divisions_for_recip_mul) (machine_mode mode);
# 3187 "../../gcc/target.def"
bool (* truly_noop_truncation) (poly_uint64 outprec, poly_uint64 inprec);
# 3206 "../../gcc/target.def"
int (* mode_rep_extended) (scalar_int_mode mode, scalar_int_mode rep_mode);
# 3237 "../../gcc/target.def"
bool (* valid_pointer_mode) (scalar_int_mode mode);
# 3246 "../../gcc/target.def"
bool (* ref_may_alias_errno) (struct ao_ref *ref);
# 3259 "../../gcc/target.def"
struct addr_space {


scalar_int_mode (* pointer_mode) (addr_space_t address_space);
# 3271 "../../gcc/target.def"
scalar_int_mode (* address_mode) (addr_space_t address_space);
# 3281 "../../gcc/target.def"
bool (* valid_pointer_mode) (scalar_int_mode mode, addr_space_t as);
# 3295 "../../gcc/target.def"
bool (* legitimate_address_p) (machine_mode mode, rtx exp, bool strict, addr_space_t as);
# 3309 "../../gcc/target.def"
rtx (* legitimize_address) (rtx x, rtx oldx, machine_mode mode, addr_space_t as);
# 3319 "../../gcc/target.def"
bool (* subset_p) (addr_space_t subset, addr_space_t superset);
# 3332 "../../gcc/target.def"
bool (* zero_address_valid) (addr_space_t as);







rtx (* convert) (rtx op, tree from_type, tree to_type);
# 3352 "../../gcc/target.def"
int (* debug) (addr_space_t as);







void (* diagnose_usage) (addr_space_t as, location_t loc);
# 3373 "../../gcc/target.def"
} addr_space ;




long (* static_rtx_alignment) (machine_mode mode);
# 3387 "../../gcc/target.def"
long (* constant_alignment) (const_tree constant, long basic_align);
# 3405 "../../gcc/target.def"
bool (* scalar_mode_supported_p) (scalar_mode mode);
# 3422 "../../gcc/target.def"
bool (* vector_mode_supported_p) (machine_mode mode);







long (* vector_alignment) (const_tree type);
# 3440 "../../gcc/target.def"
opt_machine_mode (* array_mode) (machine_mode mode, unsigned long nelems);
# 3458 "../../gcc/target.def"
bool (* array_mode_supported_p) (machine_mode mode, unsigned long nelems);
# 3488 "../../gcc/target.def"
bool (* libgcc_floating_mode_supported_p) (scalar_float_mode mode);
# 3498 "../../gcc/target.def"
opt_scalar_float_mode (* floatn_mode) (int n, bool extended);
# 3518 "../../gcc/target.def"
bool (* floatn_builtin_p) (int func);
# 3533 "../../gcc/target.def"
int (* register_move_cost) (machine_mode mode, reg_class_t from, reg_class_t to);
# 3559 "../../gcc/target.def"
int (* memory_move_cost) (machine_mode mode, reg_class_t rclass, bool in);
# 3585 "../../gcc/target.def"
bool (* use_by_pieces_infrastructure_p) (unsigned long size, unsigned int alignment, enum by_pieces_operation op, bool speed_p);
# 3623 "../../gcc/target.def"
int (* compare_by_pieces_branch_ratio) (machine_mode mode);
# 3635 "../../gcc/target.def"
bool (* slow_unaligned_access) (machine_mode mode, unsigned int align);
# 3654 "../../gcc/target.def"
bool (* optab_supported_p) (int op, machine_mode mode1, machine_mode mode2, optimization_type opt_type);
# 3675 "../../gcc/target.def"
bool (* small_register_classes_for_mode_p) (machine_mode mode);
# 3711 "../../gcc/target.def"
unsigned int flags_regnum;
# 3723 "../../gcc/target.def"
bool (* rtx_costs) (rtx x, machine_mode mode, int outer_code, int opno, int *total, bool speed);
# 3759 "../../gcc/target.def"
int (* address_cost) (rtx address, machine_mode mode, addr_space_t as, bool speed);
# 3797 "../../gcc/target.def"
int (* insn_cost) (rtx_insn *insn, bool speed);
# 3812 "../../gcc/target.def"
unsigned int (* max_noce_ifcvt_seq_cost) (edge e);
# 3836 "../../gcc/target.def"
bool (* noce_conversion_profitable_p) (rtx_insn *seq, struct noce_if_info *if_info);







long (* estimated_poly_value) (poly_int64 val);
# 3854 "../../gcc/target.def"
bool (* no_speculation_in_delay_slots_p) (void);
# 3866 "../../gcc/target.def"
rtx (* allocate_initial_value) (rtx hard_reg);
# 3891 "../../gcc/target.def"
int (* unspec_may_trap_p) (const_rtx x, unsigned flags);
# 3908 "../../gcc/target.def"
rtx (* dwarf_register_span) (rtx reg);
# 3921 "../../gcc/target.def"
machine_mode (* dwarf_frame_reg_mode) (int regno);
# 3934 "../../gcc/target.def"
void (* init_dwarf_reg_sizes_extra) (tree address);
# 3952 "../../gcc/target.def"
bool (* fixed_condition_code_regs) (unsigned int *p1, unsigned int *p2);
# 3974 "../../gcc/target.def"
machine_mode (* cc_modes_compatible) (machine_mode m1, machine_mode m2);
# 3991 "../../gcc/target.def"
void (* machine_dependent_reorg) (void);
# 4007 "../../gcc/target.def"
tree (* build_builtin_va_list) (void);







int (* enum_va_list_p) (int idx, const char **pname, tree *ptree);
# 4032 "../../gcc/target.def"
tree (* fn_abi_va_list) (tree fndecl);
# 4041 "../../gcc/target.def"
tree (* canonical_va_list_type) (tree type);
# 4050 "../../gcc/target.def"
void (* expand_builtin_va_start) (tree valist, rtx nextarg);





tree (* gimplify_va_arg_expr) (tree valist, tree type, gimple_seq *pre_p, gimple_seq *post_p);
# 4070 "../../gcc/target.def"
void * (* get_pch_validity) (size_t *sz);







const char * (* pch_valid_p) (const void *data, size_t sz);
# 4095 "../../gcc/target.def"
void (* prepare_pch_save) (void);
# 4107 "../../gcc/target.def"
const char * (* check_pch_target_flags) (int pch_flags);
# 4119 "../../gcc/target.def"
bool (* default_short_enums) (void);
# 4132 "../../gcc/target.def"
rtx (* builtin_setjmp_frame_value) (void);
# 4144 "../../gcc/target.def"
rtx_insn * (* md_asm_adjust) (vec<rtx>& outputs, vec<rtx>& inputs, vec<const char *>& constraints, vec<rtx>& clobbers, HARD_REG_SET& clobbered_regs);
# 4164 "../../gcc/target.def"
int (* dwarf_calling_convention) (const_tree function);
# 4179 "../../gcc/target.def"
void (* dwarf_handle_frame_unspec) (const char *label, rtx pattern, int index);
# 4196 "../../gcc/target.def"
unsigned int (* dwarf_poly_indeterminate_value) (unsigned int i, unsigned int *factor, int *offset);
# 4212 "../../gcc/target.def"
bool (* stdarg_optimize_hook) (struct stdarg_info *ai, const gimple *stmt);
# 4222 "../../gcc/target.def"
tree (* stack_protect_guard) (void);
# 4237 "../../gcc/target.def"
tree (* stack_protect_fail) (void);
# 4251 "../../gcc/target.def"
bool (* stack_protect_runtime_enabled_p) (void);






bool (* can_use_doloop_p) (const widest_int &iterations, const widest_int &iterations_max, unsigned int loop_depth, bool entered_at_top);
# 4277 "../../gcc/target.def"
const char * (* invalid_within_doloop) (const rtx_insn *insn);
# 4293 "../../gcc/target.def"
bool (* legitimate_combined_insn) (rtx_insn *insn);







bool (* valid_dllimport_attribute_p) (const_tree decl);
# 4311 "../../gcc/target.def"
unsigned long const_anchor;
# 4331 "../../gcc/target.def"
unsigned long (* memmodel_check) (unsigned long val);
# 4340 "../../gcc/target.def"
unsigned long (* asan_shadow_offset) (void);
# 4350 "../../gcc/target.def"
struct calls {

machine_mode (* promote_function_mode) (const_tree type, machine_mode mode, int *punsignedp, const_tree funtype, int for_return);
# 4377 "../../gcc/target.def"
bool (* promote_prototypes) (const_tree fntype);
# 4387 "../../gcc/target.def"
rtx (* struct_value_rtx) (tree fndecl, int incoming);
# 4412 "../../gcc/target.def"
bool omit_struct_return_reg;
# 4421 "../../gcc/target.def"
bool (* return_in_memory) (const_tree type, const_tree fntype);
# 4442 "../../gcc/target.def"
bool (* return_in_msb) (const_tree type);
# 4460 "../../gcc/target.def"
bool (* pass_by_reference) (cumulative_args_t cum, machine_mode mode, const_tree type, bool named);
# 4475 "../../gcc/target.def"
rtx (* expand_builtin_saveregs) (void);
# 4486 "../../gcc/target.def"
void (* setup_incoming_varargs) (cumulative_args_t args_so_far, machine_mode mode, tree type, int *pretend_args_size, int second_time);
# 4523 "../../gcc/target.def"
rtx (* load_bounds_for_arg) (rtx slot, rtx arg, rtx slot_no);
# 4535 "../../gcc/target.def"
void (* store_bounds_for_arg) (rtx arg, rtx slot, rtx bounds, rtx slot_no);
# 4547 "../../gcc/target.def"
rtx (* load_returned_bounds) (rtx slot);







void (* store_returned_bounds) (rtx slot, rtx bounds);






void (* setup_incoming_vararg_bounds) (cumulative_args_t args_so_far, machine_mode mode, tree type, int *pretend_args_size, int second_time);
# 4571 "../../gcc/target.def"
void (* call_args) (rtx, tree);
# 4588 "../../gcc/target.def"
void (* end_call_args) (void);
# 4598 "../../gcc/target.def"
bool (* strict_argument_naming) (cumulative_args_t ca);
# 4618 "../../gcc/target.def"
bool (* pretend_outgoing_varargs_named) (cumulative_args_t ca);
# 4631 "../../gcc/target.def"
bool (* split_complex_arg) (const_tree type);
# 4649 "../../gcc/target.def"
bool (* must_pass_in_stack) (machine_mode mode, const_tree type);
# 4661 "../../gcc/target.def"
bool (* callee_copies) (cumulative_args_t cum, machine_mode mode, const_tree type, bool named);
# 4680 "../../gcc/target.def"
int (* arg_partial_bytes) (cumulative_args_t cum, machine_mode mode, tree type, bool named);
# 4704 "../../gcc/target.def"
void (* function_arg_advance) (cumulative_args_t ca, machine_mode mode, const_tree type, bool named);
# 4719 "../../gcc/target.def"
long (* function_arg_offset) (machine_mode mode, const_tree type);
# 4729 "../../gcc/target.def"
pad_direction (* function_arg_padding) (machine_mode mode, const_tree type);
# 4751 "../../gcc/target.def"
rtx (* function_arg) (cumulative_args_t ca, machine_mode mode, const_tree type, bool named);
# 4813 "../../gcc/target.def"
rtx (* function_incoming_arg) (cumulative_args_t ca, machine_mode mode, const_tree type, bool named);
# 4836 "../../gcc/target.def"
unsigned int (* function_arg_boundary) (machine_mode mode, const_tree type);







unsigned int (* function_arg_round_boundary) (machine_mode mode, const_tree type);
# 4855 "../../gcc/target.def"
const char * (* invalid_arg_for_unprototyped_fn) (const_tree typelist, const_tree funcdecl, const_tree val);
# 4865 "../../gcc/target.def"
rtx (* function_value) (const_tree ret_type, const_tree fn_decl_or_type, bool outgoing);
# 4912 "../../gcc/target.def"
rtx (* chkp_function_value_bounds) (const_tree ret_type, const_tree fn_decl_or_type, bool outgoing);
# 4922 "../../gcc/target.def"
rtx (* libcall_value) (machine_mode mode, const_rtx fun);
# 4937 "../../gcc/target.def"
bool (* function_value_regno_p) (const unsigned int regno);
# 4955 "../../gcc/target.def"
rtx (* internal_arg_pointer) (void);







void (* update_stack_boundary) (void);







rtx (* get_drap_rtx) (void);
# 4981 "../../gcc/target.def"
bool (* allocate_stack_slots_for_args) (void);
# 4996 "../../gcc/target.def"
rtx (* static_chain) (const_tree fndecl_or_type, bool incoming_p);
# 5022 "../../gcc/target.def"
void (* trampoline_init) (rtx m_tramp, tree fndecl, rtx static_chain);
# 5044 "../../gcc/target.def"
rtx (* trampoline_adjust_address) (rtx addr);
# 5055 "../../gcc/target.def"
int custom_function_descriptors;
# 5078 "../../gcc/target.def"
poly_int64 (* return_pops_args) (tree fundecl, tree funtype, poly_int64 size);
# 5120 "../../gcc/target.def"
fixed_size_mode (* get_raw_result_mode) (int regno);
# 5130 "../../gcc/target.def"
fixed_size_mode (* get_raw_arg_mode) (int regno);
# 5139 "../../gcc/target.def"
bool (* empty_record_p) (const_tree type);







void (* warn_parameter_passing_abi) (cumulative_args_t ca, tree type);






} calls ;

bool (* use_pseudo_pic_reg) (void);






void (* init_pic_reg) (void);
# 5172 "../../gcc/target.def"
const char * (* invalid_conversion) (const_tree fromtype, const_tree totype);
# 5182 "../../gcc/target.def"
const char * (* invalid_unary_op) (int op, const_tree type);
# 5193 "../../gcc/target.def"
const char * (* invalid_binary_op) (int op, const_tree type1, const_tree type2);
# 5205 "../../gcc/target.def"
tree (* promoted_type) (const_tree type);
# 5219 "../../gcc/target.def"
tree (* convert_to_type) (tree type, tree expr);
# 5230 "../../gcc/target.def"
bool (* can_change_mode_class) (machine_mode from, machine_mode to, reg_class_t rclass);
# 5263 "../../gcc/target.def"
reg_class_t (* ira_change_pseudo_allocno_class) (int, reg_class_t, reg_class_t);
# 5273 "../../gcc/target.def"
bool (* lra_p) (void);
# 5283 "../../gcc/target.def"
int (* register_priority) (int);
# 5299 "../../gcc/target.def"
bool (* register_usage_leveling_p) (void);
# 5314 "../../gcc/target.def"
bool (* different_addr_displacement_p) (void);
# 5327 "../../gcc/target.def"
reg_class_t (* spill_class) (reg_class_t, machine_mode);
# 5337 "../../gcc/target.def"
bool (* additional_allocno_class_p) (reg_class_t);
# 5348 "../../gcc/target.def"
scalar_int_mode (* cstore_mode) (enum insn_code icode);
# 5360 "../../gcc/target.def"
int (* compute_pressure_classes) (enum reg_class *pressure_classes);
# 5370 "../../gcc/target.def"
bool (* member_type_forces_blk) (const_tree field, machine_mode mode);
# 5386 "../../gcc/target.def"
void (* expand_divmod_libfunc) (rtx libfunc, machine_mode mode, rtx op0, rtx op1, rtx *quot, rtx *rem);







reg_class_t (* secondary_reload) (bool in_p, rtx x, reg_class_t reload_class, machine_mode reload_mode, secondary_reload_info *sri);
# 5484 "../../gcc/target.def"
bool (* secondary_memory_needed) (machine_mode mode, reg_class_t class1, reg_class_t class2);
# 5496 "../../gcc/target.def"
machine_mode (* secondary_memory_needed_mode) (machine_mode mode);
# 5522 "../../gcc/target.def"
reg_class_t (* preferred_reload_class) (rtx x, reg_class_t rclass);
# 5561 "../../gcc/target.def"
reg_class_t (* preferred_output_reload_class) (rtx x, reg_class_t rclass);
# 5575 "../../gcc/target.def"
void (* select_early_remat_modes) (sbitmap modes);
# 5588 "../../gcc/target.def"
bool (* class_likely_spilled_p) (reg_class_t rclass);
# 5608 "../../gcc/target.def"
unsigned char (* class_max_nregs) (reg_class_t rclass, machine_mode mode);
# 5627 "../../gcc/target.def"
reg_class_t (* preferred_rename_class) (reg_class_t rclass);
# 5644 "../../gcc/target.def"
bool (* cannot_substitute_mem_equiv_p) (rtx subst);
# 5658 "../../gcc/target.def"
bool (* legitimize_address_displacement) (rtx *offset1, rtx *offset2, poly_int64 orig_offset, machine_mode mode);
# 5674 "../../gcc/target.def"
void (* expand_to_rtl_hook) (void);
# 5688 "../../gcc/target.def"
void (* instantiate_decls) (void);






unsigned int (* hard_regno_nregs) (unsigned int regno, machine_mode mode);
# 5708 "../../gcc/target.def"
bool (* hard_regno_mode_ok) (unsigned int regno, machine_mode mode);
# 5767 "../../gcc/target.def"
bool (* modes_tieable_p) (machine_mode mode1, machine_mode mode2);
# 5788 "../../gcc/target.def"
bool (* hard_regno_scratch_ok) (unsigned int regno);
# 5800 "../../gcc/target.def"
bool (* hard_regno_call_part_clobbered) (unsigned int regno, machine_mode mode);
# 5815 "../../gcc/target.def"
unsigned int (* case_values_threshold) (void);
# 5824 "../../gcc/target.def"
long (* starting_frame_offset) (void);
# 5835 "../../gcc/target.def"
void (* compute_frame_layout) (void);
# 5847 "../../gcc/target.def"
bool (* frame_pointer_required) (void);
# 5876 "../../gcc/target.def"
bool (* can_eliminate) (const int from_reg, const int to_reg);
# 5891 "../../gcc/target.def"
void (* conditional_register_usage) (void);
# 5924 "../../gcc/target.def"
bool (* stack_clash_protection_final_dynamic_probe) (rtx residual);
# 5934 "../../gcc/target.def"
struct c {


machine_mode (* mode_for_suffix) (char c);






enum flt_eval_method (* excess_precision) (enum excess_precision_type type);
# 5965 "../../gcc/target.def"
} c ;




struct cxx {


tree (* guard_type) (void);
# 5982 "../../gcc/target.def"
bool (* guard_mask_bit) (void);
# 5991 "../../gcc/target.def"
tree (* get_cookie_size) (tree type);
# 6002 "../../gcc/target.def"
bool (* cookie_has_size) (void);
# 6011 "../../gcc/target.def"
int (* import_export_class) (tree type, int import_export);
# 6022 "../../gcc/target.def"
bool (* cdtor_returns_this) (void);
# 6033 "../../gcc/target.def"
bool (* key_method_may_be_inline) (void);
# 6045 "../../gcc/target.def"
void (* determine_class_data_visibility) (tree decl);
# 6061 "../../gcc/target.def"
bool (* class_data_always_comdat) (void);
# 6074 "../../gcc/target.def"
bool (* library_rtti_comdat) (void);
# 6084 "../../gcc/target.def"
bool (* use_aeabi_atexit) (void);
# 6094 "../../gcc/target.def"
bool (* use_atexit_for_cxa_atexit) (void);
# 6104 "../../gcc/target.def"
void (* adjust_class_at_definition) (tree type);







tree (* decl_mangling_context) (const_tree decl);





} cxx ;




struct emutls {


const char * get_address;






const char * register_common;
# 6143 "../../gcc/target.def"
const char * var_section;






const char * tmpl_section;







const char * var_prefix;





const char * tmpl_prefix;






tree (* var_fields) (tree type, tree *name);
# 6182 "../../gcc/target.def"
tree (* var_init) (tree var, tree decl, tree tmpl_addr);
# 6193 "../../gcc/target.def"
bool var_align_fixed;







bool debug_form_tls_address;





} emutls ;



struct target_option_hooks {




bool (* valid_attribute_p) (tree fndecl, tree name, tree args, int flags);
# 6231 "../../gcc/target.def"
void (* save) (struct cl_target_option *ptr, struct gcc_options *opts);
# 6241 "../../gcc/target.def"
void (* restore) (struct gcc_options *opts, struct cl_target_option *ptr);
# 6250 "../../gcc/target.def"
void (* post_stream_in) (struct cl_target_option *ptr);
# 6259 "../../gcc/target.def"
void (* print) (FILE *file, int indent, struct cl_target_option *ptr);
# 6270 "../../gcc/target.def"
bool (* pragma_parse) (tree args, tree pop_target);
# 6280 "../../gcc/target.def"
void (* override) (void);
# 6300 "../../gcc/target.def"
bool (* function_versions) (tree decl1, tree decl2);
# 6313 "../../gcc/target.def"
bool (* can_inline_p) (tree caller, tree callee);
# 6322 "../../gcc/target.def"
void (* relayout_function) (tree fndecl);





} target_option ;




void (* extra_live_on_entry) (bitmap regs);
# 6347 "../../gcc/target.def"
bool call_fusage_contains_non_callee_clobbers;
# 6361 "../../gcc/target.def"
void (* set_up_by_prologue) (struct hard_reg_set_container *);
# 6371 "../../gcc/target.def"
bool (* warn_func_return) (tree);







struct shrink_wrap {

sbitmap (* get_separate_components) (void);
# 6392 "../../gcc/target.def"
sbitmap (* components_for_bb) (basic_block);







void (* disqualify_components) (sbitmap components, edge e, sbitmap edge_components, bool is_prologue);
# 6409 "../../gcc/target.def"
void (* emit_prologue_components) (sbitmap);





void (* emit_epilogue_components) (sbitmap);





void (* set_handled_components) (sbitmap);
# 6430 "../../gcc/target.def"
} shrink_wrap ;




enum unwind_info_type (* debug_unwind_info) (void);
# 6450 "../../gcc/target.def"
int (* reset_location_view) (rtx_insn *);
# 6469 "../../gcc/target.def"
void (* canonicalize_comparison) (int *code, rtx *op0, rtx *op1, bool op0_preserve_value);
# 6493 "../../gcc/target.def"
unsigned int (* min_arithmetic_precision) (void);
# 6511 "../../gcc/target.def"
unsigned char atomic_test_and_set_trueval;
# 6521 "../../gcc/target.def"
unsigned int (* atomic_align_for_mode) (machine_mode mode);







void (* atomic_assign_expand_fenv) (tree *hold, tree *clear, tree *update);
# 6553 "../../gcc/target.def"
bool have_switchable_bss_sections;
# 6562 "../../gcc/target.def"
bool have_ctors_dtors;







bool have_tls;






bool have_srodata_section;






bool terminate_dw2_eh_frame_info;
# 6593 "../../gcc/target.def"
bool asm_file_start_app_off;
# 6610 "../../gcc/target.def"
bool asm_file_start_file_directive;
# 6620 "../../gcc/target.def"
bool arm_eabi_unwinder;







bool want_debug_pub_sections;






bool delay_sched2;




bool delay_vartrack;




bool no_register_allocation;
# 6656 "../../gcc/target.def"
struct mode_switching {

void (* emit) (int entity, int mode, int prev_mode, HARD_REG_SET regs_live);




int (* needed) (int entity, rtx_insn *insn);




int (* after) (int entity, int mode, rtx_insn *insn);




int (* entry) (int entity);




int (* exit) (int entity);




int (* priority) (int entity, int n);




} mode_switching ;






# 1 "../../gcc/target-insns.def" 1
# 36 "../../gcc/target-insns.def"
bool (* have_allocate_stack) (void);
bool (* have_atomic_test_and_set) (void);
bool (* have_builtin_longjmp) (void);
bool (* have_builtin_setjmp_receiver) (void);
bool (* have_builtin_setjmp_setup) (void);
bool (* have_canonicalize_funcptr_for_compare) (void);
bool (* have_call) (void);
bool (* have_call_pop) (void);
bool (* have_call_value) (void);
bool (* have_call_value_pop) (void);

bool (* have_casesi) (void);
bool (* have_check_stack) (void);
bool (* have_clear_cache) (void);
bool (* have_doloop_begin) (void);
bool (* have_doloop_end) (void);
bool (* have_eh_return) (void);
bool (* have_epilogue) (void);
bool (* have_exception_receiver) (void);
bool (* have_extv) (void);
bool (* have_extzv) (void);
bool (* have_indirect_jump) (void);
bool (* have_insv) (void);
bool (* have_jump) (void);
bool (* have_load_multiple) (void);
bool (* have_mem_thread_fence) (void);
bool (* have_memory_barrier) (void);
bool (* have_memory_blockage) (void);
bool (* have_movstr) (void);
bool (* have_nonlocal_goto) (void);
bool (* have_nonlocal_goto_receiver) (void);
bool (* have_oacc_dim_pos) (void);
bool (* have_oacc_dim_size) (void);
bool (* have_oacc_fork) (void);
bool (* have_oacc_join) (void);
bool (* have_omp_simt_enter) (void);
bool (* have_omp_simt_exit) (void);
bool (* have_omp_simt_lane) (void);
bool (* have_omp_simt_last_lane) (void);
bool (* have_omp_simt_ordered) (void);
bool (* have_omp_simt_vote_any) (void);
bool (* have_omp_simt_xchg_bfly) (void);
bool (* have_omp_simt_xchg_idx) (void);
bool (* have_prefetch) (void);
bool (* have_probe_stack) (void);
bool (* have_probe_stack_address) (void);
bool (* have_prologue) (void);
bool (* have_ptr_extend) (void);
bool (* have_reload_load_address) (void);
bool (* have_restore_stack_block) (void);
bool (* have_restore_stack_function) (void);
bool (* have_restore_stack_nonlocal) (void);
bool (* have_return) (void);
bool (* have_save_stack_block) (void);
bool (* have_save_stack_function) (void);
bool (* have_save_stack_nonlocal) (void);
bool (* have_sibcall) (void);
bool (* have_sibcall_epilogue) (void);
bool (* have_sibcall_value) (void);

bool (* have_simple_return) (void);
bool (* have_split_stack_prologue) (void);
bool (* have_split_stack_space_check) (void);
bool (* have_stack_protect_set) (void);
bool (* have_stack_protect_test) (void);
bool (* have_store_multiple) (void);
bool (* have_tablejump) (void);
bool (* have_trap) (void);
bool (* have_unique) (void);
bool (* have_untyped_call) (void);
bool (* have_untyped_return) (void);
# 6696 "../../gcc/target.def" 2




# 1 "../../gcc/target-insns.def" 1
# 36 "../../gcc/target-insns.def"
rtx_insn * (* gen_allocate_stack) (rtx x0, rtx x1);
rtx_insn * (* gen_atomic_test_and_set) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_builtin_longjmp) (rtx x0);
rtx_insn * (* gen_builtin_setjmp_receiver) (rtx x0);
rtx_insn * (* gen_builtin_setjmp_setup) (rtx x0);
rtx_insn * (* gen_canonicalize_funcptr_for_compare) (rtx x0, rtx x1);
rtx_insn * (* gen_call) (rtx x0, rtx opt1, rtx opt2, rtx opt3);
rtx_insn * (* gen_call_pop) (rtx x0, rtx opt1, rtx opt2, rtx opt3);
rtx_insn * (* gen_call_value) (rtx x0, rtx x1, rtx opt2, rtx opt3, rtx opt4);
rtx_insn * (* gen_call_value_pop) (rtx x0, rtx x1, rtx opt2, rtx opt3, rtx opt4);

rtx_insn * (* gen_casesi) (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4);
rtx_insn * (* gen_check_stack) (rtx x0);
rtx_insn * (* gen_clear_cache) (rtx x0, rtx x1);
rtx_insn * (* gen_doloop_begin) (rtx x0, rtx x1);
rtx_insn * (* gen_doloop_end) (rtx x0, rtx x1);
rtx_insn * (* gen_eh_return) (rtx x0);
rtx_insn * (* gen_epilogue) (void);
rtx_insn * (* gen_exception_receiver) (void);
rtx_insn * (* gen_extv) (rtx x0, rtx x1, rtx x2, rtx x3);
rtx_insn * (* gen_extzv) (rtx x0, rtx x1, rtx x2, rtx x3);
rtx_insn * (* gen_indirect_jump) (rtx x0);
rtx_insn * (* gen_insv) (rtx x0, rtx x1, rtx x2, rtx x3);
rtx_insn * (* gen_jump) (rtx x0);
rtx_insn * (* gen_load_multiple) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_mem_thread_fence) (rtx x0);
rtx_insn * (* gen_memory_barrier) (void);
rtx_insn * (* gen_memory_blockage) (void);
rtx_insn * (* gen_movstr) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_nonlocal_goto) (rtx x0, rtx x1, rtx x2, rtx x3);
rtx_insn * (* gen_nonlocal_goto_receiver) (void);
rtx_insn * (* gen_oacc_dim_pos) (rtx x0, rtx x1);
rtx_insn * (* gen_oacc_dim_size) (rtx x0, rtx x1);
rtx_insn * (* gen_oacc_fork) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_oacc_join) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_omp_simt_enter) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_omp_simt_exit) (rtx x0);
rtx_insn * (* gen_omp_simt_lane) (rtx x0);
rtx_insn * (* gen_omp_simt_last_lane) (rtx x0, rtx x1);
rtx_insn * (* gen_omp_simt_ordered) (rtx x0, rtx x1);
rtx_insn * (* gen_omp_simt_vote_any) (rtx x0, rtx x1);
rtx_insn * (* gen_omp_simt_xchg_bfly) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_omp_simt_xchg_idx) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_prefetch) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_probe_stack) (rtx x0);
rtx_insn * (* gen_probe_stack_address) (rtx x0);
rtx_insn * (* gen_prologue) (void);
rtx_insn * (* gen_ptr_extend) (rtx x0, rtx x1);
rtx_insn * (* gen_reload_load_address) (rtx x0, rtx x1);
rtx_insn * (* gen_restore_stack_block) (rtx x0, rtx x1);
rtx_insn * (* gen_restore_stack_function) (rtx x0, rtx x1);
rtx_insn * (* gen_restore_stack_nonlocal) (rtx x0, rtx x1);
rtx_insn * (* gen_return) (void);
rtx_insn * (* gen_save_stack_block) (rtx x0, rtx x1);
rtx_insn * (* gen_save_stack_function) (rtx x0, rtx x1);
rtx_insn * (* gen_save_stack_nonlocal) (rtx x0, rtx x1);
rtx_insn * (* gen_sibcall) (rtx x0, rtx opt1, rtx opt2, rtx opt3);
rtx_insn * (* gen_sibcall_epilogue) (void);
rtx_insn * (* gen_sibcall_value) (rtx x0, rtx x1, rtx opt2, rtx opt3, rtx opt4);

rtx_insn * (* gen_simple_return) (void);
rtx_insn * (* gen_split_stack_prologue) (void);
rtx_insn * (* gen_split_stack_space_check) (rtx x0, rtx x1);
rtx_insn * (* gen_stack_protect_set) (rtx x0, rtx x1);
rtx_insn * (* gen_stack_protect_test) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_store_multiple) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_tablejump) (rtx x0, rtx x1);
rtx_insn * (* gen_trap) (void);
rtx_insn * (* gen_unique) (void);
rtx_insn * (* gen_untyped_call) (rtx x0, rtx x1, rtx x2);
rtx_insn * (* gen_untyped_return) (rtx x0, rtx x1);
# 6701 "../../gcc/target.def" 2




# 1 "../../gcc/target-insns.def" 1
# 36 "../../gcc/target-insns.def"
enum insn_code code_for_allocate_stack;
enum insn_code code_for_atomic_test_and_set;
enum insn_code code_for_builtin_longjmp;
enum insn_code code_for_builtin_setjmp_receiver;
enum insn_code code_for_builtin_setjmp_setup;
enum insn_code code_for_canonicalize_funcptr_for_compare;
enum insn_code code_for_call;
enum insn_code code_for_call_pop;
enum insn_code code_for_call_value;
enum insn_code code_for_call_value_pop;

enum insn_code code_for_casesi;
enum insn_code code_for_check_stack;
enum insn_code code_for_clear_cache;
enum insn_code code_for_doloop_begin;
enum insn_code code_for_doloop_end;
enum insn_code code_for_eh_return;
enum insn_code code_for_epilogue;
enum insn_code code_for_exception_receiver;
enum insn_code code_for_extv;
enum insn_code code_for_extzv;
enum insn_code code_for_indirect_jump;
enum insn_code code_for_insv;
enum insn_code code_for_jump;
enum insn_code code_for_load_multiple;
enum insn_code code_for_mem_thread_fence;
enum insn_code code_for_memory_barrier;
enum insn_code code_for_memory_blockage;
enum insn_code code_for_movstr;
enum insn_code code_for_nonlocal_goto;
enum insn_code code_for_nonlocal_goto_receiver;
enum insn_code code_for_oacc_dim_pos;
enum insn_code code_for_oacc_dim_size;
enum insn_code code_for_oacc_fork;
enum insn_code code_for_oacc_join;
enum insn_code code_for_omp_simt_enter;
enum insn_code code_for_omp_simt_exit;
enum insn_code code_for_omp_simt_lane;
enum insn_code code_for_omp_simt_last_lane;
enum insn_code code_for_omp_simt_ordered;
enum insn_code code_for_omp_simt_vote_any;
enum insn_code code_for_omp_simt_xchg_bfly;
enum insn_code code_for_omp_simt_xchg_idx;
enum insn_code code_for_prefetch;
enum insn_code code_for_probe_stack;
enum insn_code code_for_probe_stack_address;
enum insn_code code_for_prologue;
enum insn_code code_for_ptr_extend;
enum insn_code code_for_reload_load_address;
enum insn_code code_for_restore_stack_block;
enum insn_code code_for_restore_stack_function;
enum insn_code code_for_restore_stack_nonlocal;
enum insn_code code_for_return;
enum insn_code code_for_save_stack_block;
enum insn_code code_for_save_stack_function;
enum insn_code code_for_save_stack_nonlocal;
enum insn_code code_for_sibcall;
enum insn_code code_for_sibcall_epilogue;
enum insn_code code_for_sibcall_value;

enum insn_code code_for_simple_return;
enum insn_code code_for_split_stack_prologue;
enum insn_code code_for_split_stack_space_check;
enum insn_code code_for_stack_protect_set;
enum insn_code code_for_stack_protect_test;
enum insn_code code_for_store_multiple;
enum insn_code code_for_tablejump;
enum insn_code code_for_trap;
enum insn_code code_for_unique;
enum insn_code code_for_untyped_call;
enum insn_code code_for_untyped_return;
# 6706 "../../gcc/target.def" 2


void (* run_target_selftests) (void);






} ;
# 212 "../../gcc/target.h" 2

extern struct gcc_target targetm;







static inline long
estimated_poly_value (poly_int64 x)
{
  if (1 == 1)
    return x.coeffs[0];
  else
    return targetm.estimated_poly_value (x);
}







static inline CUMULATIVE_ARGS *
get_cumulative_args (cumulative_args_t arg)
{

  ((void)(!(arg.magic == ((void *) &targetm.calls)) ? fancy_abort ("../../gcc/target.h", 240, __FUNCTION__), 0 : 0));

  return (CUMULATIVE_ARGS *) arg.p;
}

static inline cumulative_args_t
pack_cumulative_args (CUMULATIVE_ARGS *arg)
{
  cumulative_args_t ret;


  ret.magic = ((void *) &targetm.calls);

  ret.p = (void *) arg;
  return ret;
}
# 25 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/rtl.h" 1
# 46 "../../gcc/rtl.h"
enum rtx_code {


# 1 "../../gcc/rtl.def" 1
# 81 "../../gcc/rtl.def"
UNKNOWN ,






VALUE ,



DEBUG_EXPR ,






EXPR_LIST ,



INSN_LIST ,


INT_LIST ,
# 126 "../../gcc/rtl.def"
SEQUENCE ,


ADDRESS ,
# 142 "../../gcc/rtl.def"
DEBUG_INSN ,


INSN ,



JUMP_INSN ,






CALL_INSN ,






JUMP_TABLE_DATA ,


BARRIER ,







CODE_LABEL ,






NOTE ,
# 194 "../../gcc/rtl.def"
COND_EXEC ,


PARALLEL ,







ASM_INPUT ,
# 219 "../../gcc/rtl.def"
ASM_OPERANDS ,
# 237 "../../gcc/rtl.def"
UNSPEC ,


UNSPEC_VOLATILE ,







ADDR_VEC ,
# 272 "../../gcc/rtl.def"
ADDR_DIFF_VEC ,
# 283 "../../gcc/rtl.def"
PREFETCH ,
# 295 "../../gcc/rtl.def"
SET ,
# 304 "../../gcc/rtl.def"
USE ,
# 313 "../../gcc/rtl.def"
CLOBBER ,





CALL ,



RETURN ,





SIMPLE_RETURN ,



EH_RETURN ,





TRAP_IF ,






CONST_INT ,


CONST_WIDE_INT ,


CONST_POLY_INT ,


CONST_FIXED ,





CONST_DOUBLE ,


CONST_VECTOR ,




CONST_STRING ,





CONST ,



PC ,







REG ,





SCRATCH ,



SUBREG ,
# 410 "../../gcc/rtl.def"
STRICT_LOW_PART ,





CONCAT ,





CONCATN ,




MEM ,



LABEL_REF ,





SYMBOL_REF ,






CC0 ,
# 456 "../../gcc/rtl.def"
IF_THEN_ELSE ,


COMPARE ,


PLUS ,


MINUS ,


NEG ,

MULT ,


SS_MULT ,

US_MULT ,


DIV ,

SS_DIV ,

US_DIV ,


MOD ,


UDIV ,
UMOD ,


AND ,
IOR ,
XOR ,
NOT ,




ASHIFT ,
ROTATE ,
ASHIFTRT ,
LSHIFTRT ,
ROTATERT ,
# 513 "../../gcc/rtl.def"
SMIN ,
SMAX ,
UMIN ,
UMAX ,
# 525 "../../gcc/rtl.def"
PRE_DEC ,
PRE_INC ,
POST_DEC ,
POST_INC ,
# 542 "../../gcc/rtl.def"
PRE_MODIFY ,
POST_MODIFY ,



NE ,
EQ ,
GE ,
GT ,
LE ,
LT ,
GEU ,
GTU ,
LEU ,
LTU ,


UNORDERED ,
ORDERED ,


UNEQ ,
UNGE ,
UNGT ,
UNLE ,
UNLT ,


LTGT ,




SIGN_EXTEND ,


ZERO_EXTEND ,


TRUNCATE ,


FLOAT_EXTEND ,
FLOAT_TRUNCATE ,


FLOAT ,







FIX ,


UNSIGNED_FLOAT ,




UNSIGNED_FIX ,
# 614 "../../gcc/rtl.def"
FRACT_CONVERT ,






UNSIGNED_FRACT_CONVERT ,







SAT_FRACT ,





UNSIGNED_SAT_FRACT ,


ABS ,


SQRT ,


BSWAP ,




FFS ,



CLRSB ,


CLZ ,


CTZ ,


POPCOUNT ,


PARITY ,
# 677 "../../gcc/rtl.def"
SIGN_EXTRACT ,



ZERO_EXTRACT ,




HIGH ,



LO_SUM ,






VEC_MERGE ,





VEC_SELECT ,




VEC_CONCAT ,





VEC_DUPLICATE ,




VEC_SERIES ,


SS_PLUS ,


US_PLUS ,


SS_MINUS ,


SS_NEG ,

US_NEG ,


SS_ABS ,


SS_ASHIFT ,


US_ASHIFT ,


US_MINUS ,


SS_TRUNCATE ,


US_TRUNCATE ,


FMA ,


VAR_LOCATION ,



DEBUG_IMPLICIT_PTR ,




ENTRY_VALUE ,



DEBUG_PARAMETER_REF ,


DEBUG_MARKER ,
# 50 "../../gcc/rtl.h" 2


  LAST_AND_UNUSED_RTX_CODE};
# 66 "../../gcc/rtl.h"
enum rtx_class {




  RTX_COMPARE,
  RTX_COMM_COMPARE,
  RTX_BIN_ARITH,
  RTX_COMM_ARITH,


  RTX_UNARY,

  RTX_EXTRA,
  RTX_MATCH,
  RTX_INSN,


  RTX_OBJ,
  RTX_CONST_OBJ,

  RTX_TERNARY,
  RTX_BITFIELD_OPS,
  RTX_AUTOINC
};
# 104 "../../gcc/rtl.h"
extern const unsigned char rtx_length[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_name[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_format[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const enum rtx_class rtx_class[((int) LAST_AND_UNUSED_RTX_CODE)];






extern const unsigned char rtx_code_size[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const unsigned char rtx_next[((int) LAST_AND_UNUSED_RTX_CODE)];



struct addr_diff_vec_flags
{

  unsigned min_align: 8;

  unsigned base_after_vec: 1;
  unsigned min_after_vec: 1;

  unsigned max_after_vec: 1;

  unsigned min_after_base: 1;

  unsigned max_after_base: 1;


  unsigned offset_unsigned: 1;
  unsigned : 2;
  unsigned scale : 8;
};




struct mem_attrs
{
  mem_attrs ();




  tree expr;



  poly_int64 offset;



  poly_int64 size;


  alias_set_type alias;




  unsigned int align;


  unsigned char addrspace;


  bool offset_known_p;


  bool size_known_p;
};
# 190 "../../gcc/rtl.h"
struct reg_attrs {
  tree decl;
  poly_int64 offset;
};



union rtunion
{
  int rt_int;
  unsigned int rt_uint;
  poly_uint16_pod rt_subreg;
  const char *rt_str;
  rtx rt_rtx;
  rtvec rt_rtvec;
  machine_mode rt_type;
  addr_diff_vec_flags rt_addr_diff_vec_flags;
  struct cselib_val *rt_cselib;
  tree rt_tree;
  basic_block rt_bb;
  mem_attrs *rt_mem;
  struct constant_descriptor_rtx *rt_constant;
  struct dw_cfi_node *rt_cfi;
};


struct reg_info {

  unsigned int regno;


  unsigned int nregs : 8;
  unsigned int unused : 24;


  reg_attrs *attrs;
};




struct block_symbol {

  rtunion fld[2];


  struct object_block *block;



  long offset;
};



struct object_block {

  section *sect;


  unsigned int alignment;


  long size;
# 263 "../../gcc/rtl.h"
  vec<rtx, va_gc> *objects;
# 273 "../../gcc/rtl.h"
  vec<rtx, va_gc> *anchors;
};

struct hwivec_def {
  long elem[1];
};







struct const_poly_int_def {
  trailing_wide_ints<1> coeffs;
};
# 305 "../../gcc/rtl.h"
struct

                                     rtx_def {

  enum rtx_code code: 16;


  enum machine_mode mode : 8;
# 326 "../../gcc/rtl.h"
  unsigned int jump : 1;





  unsigned int call : 1;
# 344 "../../gcc/rtl.h"
  unsigned int unchanging : 1;
# 358 "../../gcc/rtl.h"
  unsigned int volatil : 1;
# 373 "../../gcc/rtl.h"
  unsigned int in_struct : 1;
# 382 "../../gcc/rtl.h"
  unsigned int used : 1;
# 391 "../../gcc/rtl.h"
  unsigned frame_related : 1;






  unsigned return_val : 1;

  union {






    unsigned int original_regno;


    int insn_uid;


    unsigned int symbol_ref_flags;


    enum var_init_status var_location_status;



    unsigned int num_elem;


    struct
    {

      unsigned int npatterns : 16;


      unsigned int nelts_per_pattern : 8;


      unsigned int unused : 8;
    } const_vector;
  } u2;




  union u {
    rtunion fld[1];
    long hwint[1];
    struct reg_info reg;
    struct block_symbol block_sym;
    struct real_value rv;
    struct fixed_value fv;
    struct hwivec_def hwiv;
    struct const_poly_int_def cpi;
  } u;
};



class rtx_expr_list : public rtx_def
{


public:

  rtx_expr_list *next () const;


  rtx element () const;
};

template <>
template <>
inline bool
is_a_helper <rtx_expr_list *>::test (rtx rt)
{
  return rt->code == EXPR_LIST;
}

class rtx_insn_list : public rtx_def
{
# 485 "../../gcc/rtl.h"
public:

  rtx_insn_list *next () const;


  rtx_insn *insn () const;

};

template <>
template <>
inline bool
is_a_helper <rtx_insn_list *>::test (rtx rt)
{
  return rt->code == INSN_LIST;
}




class rtx_sequence : public rtx_def
{


public:

  int len () const;


  rtx element (int index) const;



  rtx_insn *insn (int index) const;
};

template <>
template <>
inline bool
is_a_helper <rtx_sequence *>::test (rtx rt)
{
  return rt->code == SEQUENCE;
}

template <>
template <>
inline bool
is_a_helper <const rtx_sequence *>::test (const_rtx rt)
{
  return rt->code == SEQUENCE;
}

class rtx_insn : public rtx_def
{
public:
# 558 "../../gcc/rtl.h"
  bool deleted () const { return volatil; }



  void set_deleted () { volatil = true; }



  void set_undeleted () { volatil = false; }
};



class rtx_debug_insn : public rtx_insn
{







};

class rtx_nonjump_insn : public rtx_insn
{







};

class rtx_jump_insn : public rtx_insn
{
public:
# 609 "../../gcc/rtl.h"
  inline rtx jump_label () const;



  inline rtx_code_label *jump_target () const;



  inline void set_jump_target (rtx_code_label *);
};

class rtx_call_insn : public rtx_insn
{
# 631 "../../gcc/rtl.h"
};

class rtx_jump_table_data : public rtx_insn
{
# 644 "../../gcc/rtl.h"
public:
# 657 "../../gcc/rtl.h"
  inline rtvec get_labels () const;
  inline scalar_int_mode get_data_mode () const;
};

class rtx_barrier : public rtx_insn
{







};

class rtx_code_label : public rtx_insn
{







};

class rtx_note : public rtx_insn
{







};
# 730 "../../gcc/rtl.h"
struct rtvec_def {
  int num_elem;
  rtx elem[1];
};
# 873 "../../gcc/rtl.h"
template <>
template <>
inline bool
is_a_helper <rtx_insn *>::test (rtx rt)
{
  return (((((enum rtx_code) (rt)->code) == INSN) || (((enum rtx_code) (rt)->code) == DEBUG_INSN) || (((enum rtx_code) (rt)->code) == JUMP_INSN) || (((enum rtx_code) (rt)->code) == CALL_INSN))
   || (((enum rtx_code) (rt)->code) == NOTE)
   || (((enum rtx_code) (rt)->code) == JUMP_TABLE_DATA)
   || (((enum rtx_code) (rt)->code) == BARRIER)
   || (((enum rtx_code) (rt)->code) == CODE_LABEL));
}

template <>
template <>
inline bool
is_a_helper <const rtx_insn *>::test (const_rtx rt)
{
  return (((((enum rtx_code) (rt)->code) == INSN) || (((enum rtx_code) (rt)->code) == DEBUG_INSN) || (((enum rtx_code) (rt)->code) == JUMP_INSN) || (((enum rtx_code) (rt)->code) == CALL_INSN))
   || (((enum rtx_code) (rt)->code) == NOTE)
   || (((enum rtx_code) (rt)->code) == JUMP_TABLE_DATA)
   || (((enum rtx_code) (rt)->code) == BARRIER)
   || (((enum rtx_code) (rt)->code) == CODE_LABEL));
}

template <>
template <>
inline bool
is_a_helper <rtx_debug_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == DEBUG_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_nonjump_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == JUMP_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_insn *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == JUMP_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_call_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == CALL_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_call_insn *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == CALL_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_table_data *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == JUMP_TABLE_DATA);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_table_data *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == JUMP_TABLE_DATA);
}

template <>
template <>
inline bool
is_a_helper <rtx_barrier *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == BARRIER);
}

template <>
template <>
inline bool
is_a_helper <rtx_code_label *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == CODE_LABEL);
}

template <>
template <>
inline bool
is_a_helper <rtx_code_label *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == CODE_LABEL);
}

template <>
template <>
inline bool
is_a_helper <rtx_note *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == NOTE);
}

template <>
template <>
inline bool
is_a_helper <rtx_note *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == NOTE);
}
# 1300 "../../gcc/rtl.h"
extern void rtl_check_failed_flag (const char *, const_rtx, const char *,
       int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__))
    ;
# 1370 "../../gcc/rtl.h"
inline rtx_expr_list *rtx_expr_list::next () const
{
  rtx tmp = (((this)->u.fld[1]).rt_rtx);
  return safe_as_a <rtx_expr_list *> (tmp);
}

inline rtx rtx_expr_list::element () const
{
  return (((this)->u.fld[0]).rt_rtx);
}



inline rtx_insn_list *rtx_insn_list::next () const
{
  rtx tmp = (((this)->u.fld[1]).rt_rtx);
  return safe_as_a <rtx_insn_list *> (tmp);
}

inline rtx_insn *rtx_insn_list::insn () const
{
  rtx tmp = (((this)->u.fld[0]).rt_rtx);
  return safe_as_a <rtx_insn *> (tmp);
}



inline int rtx_sequence::len () const
{
  return (((((this)->u.fld[0]).rt_rtvec))->num_elem);
}

inline rtx rtx_sequence::element (int index) const
{
  return (((((this)->u.fld[0]).rt_rtvec))->elem[index]);
}

inline rtx_insn *rtx_sequence::insn (int index) const
{
  return as_a <rtx_insn *> ((((((this)->u.fld[0]).rt_rtvec))->elem[index]));
}





inline int INSN_UID (const_rtx insn)
{
  return __extension__ ({ __typeof ((insn)) const _rtx = ((insn)); if (!((unsigned long) (((enum rtx_code) (_rtx)->code)) - (unsigned long) (DEBUG_INSN) <= (unsigned long) (NOTE) - (unsigned long) (DEBUG_INSN))) rtl_check_failed_flag ("INSN_UID", _rtx,
              "../../gcc/rtl.h"
# 1418 "../../gcc/rtl.h"
         ,
              1419
# 1418 "../../gcc/rtl.h"
         , __FUNCTION__); _rtx; })
               ->u2.insn_uid;
}
inline int& INSN_UID (rtx insn)
{
  return __extension__ ({ __typeof ((insn)) const _rtx = ((insn)); if (!((unsigned long) (((enum rtx_code) (_rtx)->code)) - (unsigned long) (DEBUG_INSN) <= (unsigned long) (NOTE) - (unsigned long) (DEBUG_INSN))) rtl_check_failed_flag ("INSN_UID", _rtx,
              "../../gcc/rtl.h"
# 1423 "../../gcc/rtl.h"
         ,
              1424
# 1423 "../../gcc/rtl.h"
         , __FUNCTION__); _rtx; })
               ->u2.insn_uid;
}
# 1434 "../../gcc/rtl.h"
inline rtx_insn *PREV_INSN (const rtx_insn *insn)
{
  rtx prev = (((insn)->u.fld[0]).rt_rtx);
  return safe_as_a <rtx_insn *> (prev);
}

inline rtx& SET_PREV_INSN (rtx_insn *insn)
{
  return (((insn)->u.fld[0]).rt_rtx);
}

inline rtx_insn *NEXT_INSN (const rtx_insn *insn)
{
  rtx next = (((insn)->u.fld[1]).rt_rtx);
  return safe_as_a <rtx_insn *> (next);
}

inline rtx& SET_NEXT_INSN (rtx_insn *insn)
{
  return (((insn)->u.fld[1]).rt_rtx);
}

inline basic_block BLOCK_FOR_INSN (const_rtx insn)
{
  return (((insn)->u.fld[2]).rt_bb);
}

inline basic_block& BLOCK_FOR_INSN (rtx insn)
{
  return (((insn)->u.fld[2]).rt_bb);
}

inline void set_block_for_insn (rtx_insn *insn, basic_block bb)
{
  BLOCK_FOR_INSN (insn) = bb;
}


inline rtx PATTERN (const_rtx insn)
{
  return (((insn)->u.fld[3]).rt_rtx);
}

inline rtx& PATTERN (rtx insn)
{
  return (((insn)->u.fld[3]).rt_rtx);
}

inline unsigned int INSN_LOCATION (const rtx_insn *insn)
{
  return (((insn)->u.fld[4]).rt_uint);
}

inline unsigned int& INSN_LOCATION (rtx_insn *insn)
{
  return (((insn)->u.fld[4]).rt_uint);
}

inline bool INSN_HAS_LOCATION (const rtx_insn *insn)
{
  return ((IS_ADHOC_LOC (INSN_LOCATION (insn))) ? get_location_from_adhoc_loc (line_table, INSN_LOCATION (insn)) : (INSN_LOCATION (insn))) != ((source_location) 0);
}
# 1506 "../../gcc/rtl.h"
inline rtvec rtx_jump_table_data::get_labels () const
{
  rtx pat = PATTERN (this);
  if (((enum rtx_code) (pat)->code) == ADDR_VEC)
    return (((pat)->u.fld[0]).rt_rtvec);
  else
    return (((pat)->u.fld[1]).rt_rtvec);
}




inline scalar_int_mode
rtx_jump_table_data::get_data_mode () const
{
  return as_a <scalar_int_mode> (((machine_mode) (PATTERN (this))->mode));
}




inline rtx_jump_table_data *
jump_table_for_label (const rtx_code_label *label)
{
  return safe_dyn_cast <rtx_jump_table_data *> (NEXT_INSN (label));
}
# 1595 "../../gcc/rtl.h"
enum reg_note
{

# 1 "../../gcc/reg-notes.def" 1
# 38 "../../gcc/reg-notes.def"
REG_DEP_TRUE,




REG_DEAD,


REG_INC,
# 57 "../../gcc/reg-notes.def"
REG_EQUIV,




REG_EQUAL,






REG_NONNEG,


REG_UNUSED,
# 81 "../../gcc/reg-notes.def"
REG_CC_SETTER,
REG_CC_USER,




REG_LABEL_TARGET,





REG_LABEL_OPERAND,




REG_DEP_OUTPUT,
REG_DEP_ANTI,
REG_DEP_CONTROL,






REG_BR_PROB,



REG_NOALIAS,





REG_BR_PRED,




REG_FRAME_RELATED_EXPR,
# 132 "../../gcc/reg-notes.def"
REG_CFA_DEF_CFA,







REG_CFA_ADJUST_CFA,





REG_CFA_OFFSET,




REG_CFA_REGISTER,





REG_CFA_EXPRESSION,




REG_CFA_VAL_EXPRESSION,





REG_CFA_RESTORE,




REG_CFA_SET_VDRAP,




REG_CFA_WINDOW_SAVE,






REG_CFA_FLUSH_QUEUE,




REG_CFA_TOGGLE_RA_MANGLE,





REG_EH_REGION,


REG_SAVE_NOTE,


REG_NORETURN,



REG_NON_LOCAL_GOTO,



REG_SETJMP,




REG_TM,




REG_ARGS_SIZE,




REG_RETURNED,



REG_STACK_CHECK,




REG_CALL_DECL,






REG_CALL_NOCF_CHECK,


REG_CALL_ARG_LOCATION,
# 1599 "../../gcc/rtl.h" 2

  REG_NOTE_MAX
};
# 1610 "../../gcc/rtl.h"
extern const char * const reg_note_name[];
# 1756 "../../gcc/rtl.h"
enum insn_note
{

# 1 "../../gcc/insn-notes.def" 1
# 35 "../../gcc/insn-notes.def"
NOTE_INSN_DELETED,


NOTE_INSN_DELETED_LABEL,



NOTE_INSN_DELETED_DEBUG_LABEL,



NOTE_INSN_BLOCK_BEG,
NOTE_INSN_BLOCK_END,




NOTE_INSN_FUNCTION_BEG,


NOTE_INSN_PROLOGUE_END,


NOTE_INSN_EPILOGUE_BEG,



NOTE_INSN_EH_REGION_BEG,
NOTE_INSN_EH_REGION_END,


NOTE_INSN_VAR_LOCATION,


NOTE_INSN_BEGIN_STMT,



NOTE_INSN_INLINE_ENTRY,






NOTE_INSN_BASIC_BLOCK,



NOTE_INSN_SWITCH_TEXT_SECTIONS,



NOTE_INSN_CFI,



NOTE_INSN_CFI_LABEL,



NOTE_INSN_UPDATE_SJLJ_CONTEXT,
# 1760 "../../gcc/rtl.h" 2


  NOTE_INSN_MAX
};



extern const char * const note_insn_name[NOTE_INSN_MAX];
# 1782 "../../gcc/rtl.h"
enum label_kind
{
  LABEL_NORMAL = 0,
  LABEL_STATIC_ENTRY,
  LABEL_GLOBAL_ENTRY,
  LABEL_WEAK_ENTRY
};
# 1834 "../../gcc/rtl.h"
inline rtx_insn *JUMP_LABEL_AS_INSN (const rtx_insn *insn)
{
  return safe_as_a <rtx_insn *> ((((insn)->u.fld[7]).rt_rtx));
}



inline rtx rtx_jump_insn::jump_label () const
{
  return (((this)->u.fld[7]).rt_rtx);
}

inline rtx_code_label *rtx_jump_insn::jump_target () const
{
  return safe_as_a <rtx_code_label *> ((((this)->u.fld[7]).rt_rtx));
}

inline void rtx_jump_insn::set_jump_target (rtx_code_label *target)
{
  (((this)->u.fld[7]).rt_rtx) = target;
}







static inline rtx_insn *
label_ref_label (const_rtx ref)
{
  return as_a<rtx_insn *> ((((ref)->u.fld[0]).rt_rtx));
}



static inline void
set_label_ref_label (rtx ref, rtx_insn *label)
{
  (((ref)->u.fld[0]).rt_rtx) = label;
}
# 1893 "../../gcc/rtl.h"
static inline unsigned int
rhs_regno (const_rtx x)
{
  return (&(x)->u.reg)->regno;
}


static inline unsigned int
END_REGNO (const_rtx x)
{
  return (rhs_regno(x)) + ((&(x)->u.reg)->nregs);
}



static inline void
set_regno_raw (rtx x, unsigned int regno, unsigned int nregs)
{
  reg_info *reg = (&(x)->u.reg);
  reg->regno = regno;
  reg->nregs = nregs;
}
# 1998 "../../gcc/rtl.h"
inline unsigned int
const_vector_encoded_nelts (const_rtx x)
{
  return (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_VECTOR) rtl_check_failed_flag ("CONST_VECTOR_NPATTERNS", _rtx, "../../gcc/rtl.h", 2001, __FUNCTION__); _rtx; }) ->u2.const_vector.npatterns) * (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_VECTOR) rtl_check_failed_flag ("CONST_VECTOR_NELTS_PER_PATTERN", _rtx, "../../gcc/rtl.h", 2001, __FUNCTION__); _rtx; }) ->u2.const_vector.nelts_per_pattern);
}
# 2025 "../../gcc/rtl.h"
static inline bool
always_void_p (enum rtx_code code)
{
  return code == SET;
}



struct full_rtx_costs
{
  int speed;
  int size;
};


static inline void
init_costs_to_max (struct full_rtx_costs *c)
{
  c->speed = 0x7fffffff;
  c->size = 0x7fffffff;
}


static inline void
init_costs_to_zero (struct full_rtx_costs *c)
{
  c->speed = 0;
  c->size = 0;
}



static inline bool
costs_lt_p (struct full_rtx_costs *a, struct full_rtx_costs *b,
     bool speed)
{
  if (speed)
    return (a->speed < b->speed
     || (a->speed == b->speed && a->size < b->size));
  else
    return (a->size < b->size
     || (a->size == b->size && a->speed < b->speed));
}



static inline void
costs_add_n_insns (struct full_rtx_costs *c, int n)
{
  c->speed += ((n) * 4);
  c->size += ((n) * 4);
}






struct subreg_shape {
  subreg_shape (machine_mode, poly_uint16, machine_mode);
  bool operator == (const subreg_shape &) const;
  bool operator != (const subreg_shape &) const;
  unsigned long unique_id () const;

  machine_mode inner_mode;
  poly_uint16 offset;
  machine_mode outer_mode;
};

inline
subreg_shape::subreg_shape (machine_mode inner_mode_in,
       poly_uint16 offset_in,
       machine_mode outer_mode_in)
  : inner_mode (inner_mode_in), offset (offset_in), outer_mode (outer_mode_in)
{}

inline bool
subreg_shape::operator == (const subreg_shape &other) const
{
  return (inner_mode == other.inner_mode
   && (!maybe_ne (offset, other.offset))
   && outer_mode == other.outer_mode);
}

inline bool
subreg_shape::operator != (const subreg_shape &other) const
{
  return !operator == (other);
}






inline unsigned long
subreg_shape::unique_id () const
{
  { static_assert ((MAX_MACHINE_MODE <= 256), "MAX_MACHINE_MODE <= 256"); }
  { static_assert ((1 <= 3), "NUM_POLY_INT_COEFFS <= 3"); }
  { static_assert ((sizeof (offset.coeffs[0]) <= 2), "sizeof (offset.coeffs[0]) <= 2"); }
  int res = (int) inner_mode + ((int) outer_mode << 8);
  for (int i = 0; i < 1; ++i)
    res += (long) offset.coeffs[i] << ((1 + i) * 16);
  return res;
}



static inline subreg_shape
shape_of_subreg (const_rtx x)
{
  return subreg_shape (((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode),
         (((x)->u.fld[1]).rt_subreg), ((machine_mode) (x)->mode));
}




struct address_info {


  machine_mode mode;


  addr_space_t as;


  bool autoinc_p;


  rtx *outer;
# 2170 "../../gcc/rtl.h"
  rtx *inner;
# 2190 "../../gcc/rtl.h"
  rtx *segment;
  rtx *base;
  rtx *index;
  rtx *disp;

  rtx *segment_term;
  rtx *base_term;
  rtx *index_term;
  rtx *disp_term;



  rtx *base_term2;



  enum rtx_code addr_outer_code;


  enum rtx_code base_outer_code;
};




typedef std::pair <rtx, machine_mode> rtx_mode_t;

namespace wi
{
  template <>
  struct int_traits <rtx_mode_t>
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = false;


    static const bool is_sign_extended = false;
    static unsigned int get_precision (const rtx_mode_t &);
    static wi::storage_ref decompose (long *, unsigned int,
          const rtx_mode_t &);
  };
}

inline unsigned int
wi::int_traits <rtx_mode_t>::get_precision (const rtx_mode_t &x)
{
  return GET_MODE_PRECISION (as_a <scalar_mode> (x.second));
}

inline wi::storage_ref
wi::int_traits <rtx_mode_t>::decompose (long *,
     unsigned int precision,
     const rtx_mode_t &x)
{
  ((void)(!(precision == get_precision (x)) ? fancy_abort ("../../gcc/rtl.h", 2244, __FUNCTION__), 0 : 0));
  switch (((enum rtx_code) (x.first)->code))
    {
    case CONST_INT:
      if (precision < 64)


 ((void)(!(((x.first)->u.hwint[0]) == sext_hwi (((x.first)->u.hwint[0]), precision) || (x.second == (scalar_int_mode ((scalar_int_mode::from_int) E_BImode)) && ((x.first)->u.hwint[0]) == 1)) ? fancy_abort (

                                                        "../../gcc/rtl.h"
# 2251 "../../gcc/rtl.h"
 ,

                                                        2253
# 2251 "../../gcc/rtl.h"
 , __FUNCTION__), 0 : 0))

                                                         ;

      return wi::storage_ref (&((x.first)->u.hwint[0]), 1, precision);

    case CONST_WIDE_INT:
      return wi::storage_ref (&((x.first)->u.hwiv.elem[0]),
         ((int)__extension__ ({ __typeof ((x.first)) const _rtx = ((x.first)); if (((enum rtx_code) (_rtx)->code) != CONST_WIDE_INT) rtl_check_failed_flag ("CWI_GET_NUM_ELEM", _rtx, "../../gcc/rtl.h", 2259, __FUNCTION__); _rtx; })->u2.num_elem), precision);






    default:
      (fancy_abort ("../../gcc/rtl.h", 2267, __FUNCTION__));
    }
}

namespace wi
{
  hwi_with_prec shwi (long, machine_mode mode);
  wide_int min_value (machine_mode, signop);
  wide_int max_value (machine_mode, signop);
}

inline wi::hwi_with_prec
wi::shwi (long val, machine_mode mode)
{
  return shwi (val, GET_MODE_PRECISION (as_a <scalar_mode> (mode)));
}



inline wide_int
wi::min_value (machine_mode mode, signop sgn)
{
  return min_value (GET_MODE_PRECISION (as_a <scalar_mode> (mode)), sgn);
}



inline wide_int
wi::max_value (machine_mode mode, signop sgn)
{
  return max_value (GET_MODE_PRECISION (as_a <scalar_mode> (mode)), sgn);
}

namespace wi
{
  typedef poly_int<1,
     generic_wide_int <wide_int_ref_storage <false, false> > >
    rtx_to_poly_wide_ref;
  rtx_to_poly_wide_ref to_poly_wide (const_rtx, machine_mode);
}



inline wi::rtx_to_poly_wide_ref
const_poly_int_value (const_rtx x)
{
  poly_int<1, generic_wide_int <wide_int_ref_storage <wi::int_traits <wide_int>::is_sign_extended, wi::int_traits <wide_int>::host_dependent_precision> > > res;
  for (unsigned int i = 0; i < 1; ++i)
    res.coeffs[i] = (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_POLY_INT) rtl_check_failed_flag ("CONST_POLY_INT_COEFFS", _rtx, "../../gcc/rtl.h", 2315, __FUNCTION__); _rtx; })->u.cpi.coeffs)[i];
  return res;
}




inline bool
poly_int_rtx_p (const_rtx x)
{
  return ((((enum rtx_code) (x)->code) == CONST_INT) || (((enum rtx_code) (x)->code) == CONST_WIDE_INT)) || (1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT);
}




inline wi::rtx_to_poly_wide_ref
wi::to_poly_wide (const_rtx x, machine_mode mode)
{
  if ((1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT))
    return const_poly_int_value (x);
  return rtx_mode_t (const_cast<rtx> (x), mode);
}



inline poly_int64
rtx_to_poly_int64 (const_rtx x)
{
  if ((1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT))
    {
      poly_int64 res;
      for (unsigned int i = 0; i < 1; ++i)
 res.coeffs[i] = (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_POLY_INT) rtl_check_failed_flag ("CONST_POLY_INT_COEFFS", _rtx, "../../gcc/rtl.h", 2348, __FUNCTION__); _rtx; })->u.cpi.coeffs)[i].to_shwi ();
      return res;
    }
  return ((x)->u.hwint[0]);
}





inline bool
poly_int_rtx_p (const_rtx x, poly_int64_pod *res)
{
  if ((((enum rtx_code) (x)->code) == CONST_INT))
    {
      *res = ((x)->u.hwint[0]);
      return true;
    }
  if ((1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT))
    {
      for (unsigned int i = 0; i < 1; ++i)
 if (!wi::fits_shwi_p ((__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_POLY_INT) rtl_check_failed_flag ("CONST_POLY_INT_COEFFS", _rtx, "../../gcc/rtl.h", 2369, __FUNCTION__); _rtx; })->u.cpi.coeffs)[i]))
   return false;
      for (unsigned int i = 0; i < 1; ++i)
 res->coeffs[i] = (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_POLY_INT) rtl_check_failed_flag ("CONST_POLY_INT_COEFFS", _rtx, "../../gcc/rtl.h", 2372, __FUNCTION__); _rtx; })->u.cpi.coeffs)[i].to_shwi ();
      return true;
    }
  return false;
}

extern void init_rtlanal (void);
extern int rtx_cost (rtx, machine_mode, enum rtx_code, int, bool);
extern int address_cost (rtx, machine_mode, addr_space_t, bool);
extern void get_full_rtx_cost (rtx, machine_mode, enum rtx_code, int,
          struct full_rtx_costs *);
extern poly_uint64 subreg_lsb (const_rtx);
extern poly_uint64 subreg_lsb_1 (machine_mode, machine_mode, poly_uint64);
extern poly_uint64 subreg_size_offset_from_lsb (poly_uint64, poly_uint64,
      poly_uint64);
extern bool read_modify_subreg_p (const_rtx);







inline poly_uint64
subreg_offset_from_lsb (machine_mode outer_mode,
   machine_mode inner_mode,
   poly_uint64 lsb_shift)
{
  return subreg_size_offset_from_lsb (GET_MODE_SIZE (outer_mode),
          GET_MODE_SIZE (inner_mode), lsb_shift);
}

extern unsigned int subreg_regno_offset (unsigned int, machine_mode,
      poly_uint64, machine_mode);
extern bool subreg_offset_representable_p (unsigned int, machine_mode,
        poly_uint64, machine_mode);
extern unsigned int subreg_regno (const_rtx);
extern int simplify_subreg_regno (unsigned int, machine_mode,
      poly_uint64, machine_mode);
extern unsigned int subreg_nregs (const_rtx);
extern unsigned int subreg_nregs_with_regno (unsigned int, const_rtx);
extern unsigned long nonzero_bits (const_rtx, machine_mode);
extern unsigned int num_sign_bit_copies (const_rtx, machine_mode);
extern bool constant_pool_constant_p (rtx);
extern bool truncated_to_mode (machine_mode, const_rtx);
extern int low_bitmask_len (machine_mode, unsigned long);
extern void split_double (rtx, rtx *, rtx *);
extern rtx *strip_address_mutations (rtx *, enum rtx_code * = 0);
extern void decompose_address (struct address_info *, rtx *,
          machine_mode, addr_space_t, enum rtx_code);
extern void decompose_lea_address (struct address_info *, rtx *);
extern void decompose_mem_address (struct address_info *, rtx);
extern void update_address (struct address_info *);
extern long get_index_scale (const struct address_info *);
extern enum rtx_code get_index_code (const struct address_info *);
# 2450 "../../gcc/rtl.h"
const int SRP_POINTER = -1;
const int SRP_SIGNED = 0;
const int SRP_UNSIGNED = 1;
const int SRP_SIGNED_AND_UNSIGNED = 2;
# 2858 "../../gcc/rtl.h"
extern int generating_concat_p;


extern int currently_expanding_to_rtl;







static inline int
set_rtx_cost (rtx x, bool speed_p)
{
  return rtx_cost (x, ((void) 0, E_VOIDmode), INSN, 4, speed_p);
}



static inline void
get_full_set_rtx_cost (rtx x, struct full_rtx_costs *c)
{
  get_full_rtx_cost (x, ((void) 0, E_VOIDmode), INSN, 4, c);
}





static inline int
set_src_cost (rtx x, machine_mode mode, bool speed_p)
{
  return rtx_cost (x, mode, SET, 1, speed_p);
}



static inline void
get_full_set_src_cost (rtx x, machine_mode mode, struct full_rtx_costs *c)
{
  get_full_rtx_cost (x, mode, SET, 1, c);
}
# 2913 "../../gcc/rtl.h"
extern long trunc_int_for_mode (long, machine_mode);
extern poly_int64 trunc_int_for_mode (poly_int64, machine_mode);
extern rtx plus_constant (machine_mode, rtx, poly_int64, bool = false);
extern long get_stack_check_protect (void);


extern rtx rtx_alloc (enum rtx_code );
extern rtx rtx_alloc_stat_v (enum rtx_code , int);






extern rtvec rtvec_alloc (int);
extern rtvec shallow_copy_rtvec (rtvec);
extern bool shared_const_p (const_rtx);
extern rtx copy_rtx (rtx);
extern enum rtx_code classify_insn (rtx);
extern void dump_rtx_statistics (void);


extern rtx copy_rtx_if_shared (rtx);


extern unsigned int rtx_size (const_rtx);
extern rtx shallow_copy_rtx (const_rtx );
extern int rtx_equal_p (const_rtx, const_rtx);
extern bool rtvec_all_equal_p (const_rtvec);



inline bool
const_vec_duplicate_p (const_rtx x)
{
  return (((enum rtx_code) (x)->code) == CONST_VECTOR
   && (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_VECTOR) rtl_check_failed_flag ("CONST_VECTOR_NPATTERNS", _rtx, "../../gcc/rtl.h", 2949, __FUNCTION__); _rtx; }) ->u2.const_vector.npatterns) == 1
   && ((__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_VECTOR) rtl_check_failed_flag ("CONST_VECTOR_NELTS_PER_PATTERN", _rtx, "../../gcc/rtl.h", 2950, __FUNCTION__); _rtx; }) ->u2.const_vector.nelts_per_pattern) == 1));
}




template <typename T>
inline bool
const_vec_duplicate_p (T x, T *elt)
{
  if (const_vec_duplicate_p (x))
    {
      *elt = (((((x)->u.fld[0]).rt_rtvec))->elem[0]);
      return true;
    }
  return false;
}




template <typename T>
inline bool
vec_duplicate_p (T x, T *elt)
{
  if (((enum rtx_code) (x)->code) == VEC_DUPLICATE
      && !(((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_BOOL || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_INT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_FLOAT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_FRACT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_UFRACT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_ACCUM || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_UACCUM))
    {
      *elt = (((x)->u.fld[0]).rt_rtx);
      return true;
    }
  return const_vec_duplicate_p (x, elt);
}




template <typename T>
inline T
unwrap_const_vec_duplicate (T x)
{
  if (const_vec_duplicate_p (x))
    x = const_vector_elt (x, 0);
  return x;
}


extern wide_int const_vector_int_elt (const_rtx, unsigned int);
extern rtx const_vector_elt (const_rtx, unsigned int);
extern bool const_vec_series_p_1 (const_rtx, rtx *, rtx *);
# 3008 "../../gcc/rtl.h"
inline bool
const_vec_series_p (const_rtx x, rtx *base_out, rtx *step_out)
{
  if (((enum rtx_code) (x)->code) == CONST_VECTOR
      && (__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_VECTOR) rtl_check_failed_flag ("CONST_VECTOR_NPATTERNS", _rtx, "../../gcc/rtl.h", 3012, __FUNCTION__); _rtx; }) ->u2.const_vector.npatterns) == 1
      && !((__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != CONST_VECTOR) rtl_check_failed_flag ("CONST_VECTOR_NELTS_PER_PATTERN", _rtx, "../../gcc/rtl.h", 3013, __FUNCTION__); _rtx; }) ->u2.const_vector.nelts_per_pattern) == 1))
    return const_vec_series_p_1 (x, base_out, step_out);
  return false;
}
# 3026 "../../gcc/rtl.h"
inline bool
vec_series_p (const_rtx x, rtx *base_out, rtx *step_out)
{
  if (((enum rtx_code) (x)->code) == VEC_SERIES)
    {
      *base_out = (((x)->u.fld[0]).rt_rtx);
      *step_out = (((x)->u.fld[1]).rt_rtx);
      return true;
    }
  return const_vec_series_p (x, base_out, step_out);
}



inline scalar_int_mode
subreg_unpromoted_mode (rtx x)
{
  ((void)(!((__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != SUBREG) rtl_check_failed_flag ("SUBREG_PROMOTED", _rtx, "../../gcc/rtl.h", 3043, __FUNCTION__); _rtx; })->in_struct)) ? fancy_abort ("../../gcc/rtl.h", 3043, __FUNCTION__), 0 : 0));
  return as_a <scalar_int_mode> (((machine_mode) (x)->mode));
}



inline scalar_int_mode
subreg_promoted_mode (rtx x)
{
  ((void)(!((__extension__ ({ __typeof ((x)) const _rtx = ((x)); if (((enum rtx_code) (_rtx)->code) != SUBREG) rtl_check_failed_flag ("SUBREG_PROMOTED", _rtx, "../../gcc/rtl.h", 3052, __FUNCTION__); _rtx; })->in_struct)) ? fancy_abort ("../../gcc/rtl.h", 3052, __FUNCTION__), 0 : 0));
  return as_a <scalar_int_mode> (((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}


extern rtvec gen_rtvec_v (int, rtx *);
extern rtvec gen_rtvec_v (int, rtx_insn **);
extern rtx gen_reg_rtx (machine_mode);
extern rtx gen_rtx_REG_offset (rtx, machine_mode, unsigned int, poly_int64);
extern rtx gen_reg_rtx_offset (rtx, machine_mode, int);
extern rtx gen_reg_rtx_and_attrs (rtx);
extern rtx_code_label *gen_label_rtx (void);
extern rtx gen_lowpart_common (machine_mode, rtx);


extern rtx gen_lowpart_if_possible (machine_mode, rtx);


extern rtx gen_highpart (machine_mode, rtx);
extern rtx gen_highpart_mode (machine_mode, machine_mode, rtx);
extern rtx operand_subword (rtx, poly_uint64, int, machine_mode);


extern rtx operand_subword_force (rtx, poly_uint64, machine_mode);
extern int subreg_lowpart_p (const_rtx);
extern poly_uint64 subreg_size_lowpart_offset (poly_uint64, poly_uint64);







inline bool
partial_subreg_p (machine_mode outermode, machine_mode innermode)
{


  poly_int64 outer_prec = GET_MODE_PRECISION (outermode);
  poly_int64 inner_prec = GET_MODE_PRECISION (innermode);
  ((void)(!(ordered_p (outer_prec, inner_prec)) ? fancy_abort ("../../gcc/rtl.h", 3092, __FUNCTION__), 0 : 0));
  return maybe_lt (outer_prec, inner_prec);
}





inline bool
partial_subreg_p (const_rtx x)
{
  if (((enum rtx_code) (x)->code) != SUBREG)
    return false;
  return partial_subreg_p (((machine_mode) (x)->mode), ((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}




inline bool
paradoxical_subreg_p (machine_mode outermode, machine_mode innermode)
{


  poly_int64 outer_prec = GET_MODE_PRECISION (outermode);
  poly_int64 inner_prec = GET_MODE_PRECISION (innermode);
  ((void)(!(ordered_p (outer_prec, inner_prec)) ? fancy_abort ("../../gcc/rtl.h", 3118, __FUNCTION__), 0 : 0));
  return maybe_lt (inner_prec, outer_prec);
}



inline bool
paradoxical_subreg_p (const_rtx x)
{
  if (((enum rtx_code) (x)->code) != SUBREG)
    return false;
  return paradoxical_subreg_p (((machine_mode) (x)->mode), ((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}



inline poly_uint64
subreg_lowpart_offset (machine_mode outermode, machine_mode innermode)
{
  return subreg_size_lowpart_offset (GET_MODE_SIZE (outermode),
         GET_MODE_SIZE (innermode));
}





inline machine_mode
narrower_subreg_mode (machine_mode outermode, machine_mode innermode)
{
  return paradoxical_subreg_p (outermode, innermode) ? innermode : outermode;
}





inline machine_mode
wider_subreg_mode (machine_mode outermode, machine_mode innermode)
{
  return partial_subreg_p (outermode, innermode) ? innermode : outermode;
}



inline machine_mode
wider_subreg_mode (const_rtx x)
{
  return wider_subreg_mode (((machine_mode) (x)->mode), ((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}

extern poly_uint64 subreg_size_highpart_offset (poly_uint64, poly_uint64);



inline poly_uint64
subreg_highpart_offset (machine_mode outermode, machine_mode innermode)
{
  return subreg_size_highpart_offset (GET_MODE_SIZE (outermode),
          GET_MODE_SIZE (innermode));
}

extern poly_int64 byte_lowpart_offset (machine_mode, machine_mode);
extern poly_int64 subreg_memory_offset (machine_mode, machine_mode,
     poly_uint64);
extern poly_int64 subreg_memory_offset (const_rtx);
extern rtx make_safe_from (rtx, rtx);
extern rtx convert_memory_address_addr_space_1 (scalar_int_mode, rtx,
      addr_space_t, bool, bool);
extern rtx convert_memory_address_addr_space (scalar_int_mode, rtx,
           addr_space_t);


extern const char *get_insn_name (int);
extern rtx_insn *get_last_insn_anywhere (void);
extern rtx_insn *get_first_nonnote_insn (void);
extern rtx_insn *get_last_nonnote_insn (void);
extern void start_sequence (void);
extern void push_to_sequence (rtx_insn *);
extern void push_to_sequence2 (rtx_insn *, rtx_insn *);
extern void end_sequence (void);



extern void cwi_output_hex (FILE *, const_rtx);




extern rtx immed_wide_int_const (const poly_wide_int_ref &, machine_mode);


extern rtx force_const_mem (machine_mode, rtx);



struct function;
extern rtx get_pool_constant (const_rtx);
extern rtx get_pool_constant_mark (rtx, bool *);
extern fixed_size_mode get_pool_mode (const_rtx);
extern rtx simplify_subtraction (rtx);
extern void decide_function_section (tree);


extern rtx_insn *emit_insn_before (rtx, rtx);
extern rtx_insn *emit_insn_before_noloc (rtx, rtx_insn *, basic_block);
extern rtx_insn *emit_insn_before_setloc (rtx, rtx_insn *, int);
extern rtx_jump_insn *emit_jump_insn_before (rtx, rtx);
extern rtx_jump_insn *emit_jump_insn_before_noloc (rtx, rtx_insn *);
extern rtx_jump_insn *emit_jump_insn_before_setloc (rtx, rtx_insn *, int);
extern rtx_insn *emit_call_insn_before (rtx, rtx_insn *);
extern rtx_insn *emit_call_insn_before_noloc (rtx, rtx_insn *);
extern rtx_insn *emit_call_insn_before_setloc (rtx, rtx_insn *, int);
extern rtx_insn *emit_debug_insn_before (rtx, rtx_insn *);
extern rtx_insn *emit_debug_insn_before_noloc (rtx, rtx);
extern rtx_insn *emit_debug_insn_before_setloc (rtx, rtx, int);
extern rtx_barrier *emit_barrier_before (rtx);
extern rtx_code_label *emit_label_before (rtx, rtx_insn *);
extern rtx_note *emit_note_before (enum insn_note, rtx_insn *);
extern rtx_insn *emit_insn_after (rtx, rtx);
extern rtx_insn *emit_insn_after_noloc (rtx, rtx, basic_block);
extern rtx_insn *emit_insn_after_setloc (rtx, rtx, int);
extern rtx_jump_insn *emit_jump_insn_after (rtx, rtx);
extern rtx_jump_insn *emit_jump_insn_after_noloc (rtx, rtx);
extern rtx_jump_insn *emit_jump_insn_after_setloc (rtx, rtx, int);
extern rtx_insn *emit_call_insn_after (rtx, rtx);
extern rtx_insn *emit_call_insn_after_noloc (rtx, rtx);
extern rtx_insn *emit_call_insn_after_setloc (rtx, rtx, int);
extern rtx_insn *emit_debug_insn_after (rtx, rtx);
extern rtx_insn *emit_debug_insn_after_noloc (rtx, rtx);
extern rtx_insn *emit_debug_insn_after_setloc (rtx, rtx, int);
extern rtx_barrier *emit_barrier_after (rtx);
extern rtx_insn *emit_label_after (rtx, rtx_insn *);
extern rtx_note *emit_note_after (enum insn_note, rtx_insn *);
extern rtx_insn *emit_insn (rtx);
extern rtx_insn *emit_debug_insn (rtx);
extern rtx_insn *emit_jump_insn (rtx);
extern rtx_insn *emit_call_insn (rtx);
extern rtx_code_label *emit_label (rtx);
extern rtx_jump_table_data *emit_jump_table_data (rtx);
extern rtx_barrier *emit_barrier (void);
extern rtx_note *emit_note (enum insn_note);
extern rtx_note *emit_note_copy (rtx_note *);
extern rtx_insn *gen_clobber (rtx);
extern rtx_insn *emit_clobber (rtx);
extern rtx_insn *gen_use (rtx);
extern rtx_insn *emit_use (rtx);
extern rtx_insn *make_insn_raw (rtx);
extern void add_function_usage_to (rtx, rtx);
extern rtx_call_insn *last_call_insn (void);
extern rtx_insn *previous_insn (rtx_insn *);
extern rtx_insn *next_insn (rtx_insn *);
extern rtx_insn *prev_nonnote_insn (rtx_insn *);
extern rtx_insn *next_nonnote_insn (rtx_insn *);
extern rtx_insn *prev_nondebug_insn (rtx_insn *);
extern rtx_insn *next_nondebug_insn (rtx_insn *);
extern rtx_insn *prev_nonnote_nondebug_insn (rtx_insn *);
extern rtx_insn *prev_nonnote_nondebug_insn_bb (rtx_insn *);
extern rtx_insn *next_nonnote_nondebug_insn (rtx_insn *);
extern rtx_insn *next_nonnote_nondebug_insn_bb (rtx_insn *);
extern rtx_insn *prev_real_insn (rtx_insn *);
extern rtx_insn *next_real_insn (rtx);
extern rtx_insn *prev_real_nondebug_insn (rtx_insn *);
extern rtx_insn *next_real_nondebug_insn (rtx);
extern rtx_insn *prev_active_insn (rtx_insn *);
extern rtx_insn *next_active_insn (rtx_insn *);
extern int active_insn_p (const rtx_insn *);
extern rtx_insn *next_cc0_user (rtx_insn *);
extern rtx_insn *prev_cc0_setter (rtx_insn *);


extern int insn_line (const rtx_insn *);
extern const char * insn_file (const rtx_insn *);
extern tree insn_scope (const rtx_insn *);
extern expanded_location insn_location (const rtx_insn *);
extern location_t prologue_location, epilogue_location;


extern enum rtx_code reverse_condition (enum rtx_code);
extern enum rtx_code reverse_condition_maybe_unordered (enum rtx_code);
extern enum rtx_code swap_condition (enum rtx_code);
extern enum rtx_code unsigned_condition (enum rtx_code);
extern enum rtx_code signed_condition (enum rtx_code);
extern void mark_jump_label (rtx, rtx_insn *, int);


extern rtx_insn *delete_related_insns (rtx);


extern rtx *find_constant_term_loc (rtx *);


extern rtx_insn *try_split (rtx, rtx_insn *, int);


extern rtx_insn *split_insns (rtx, rtx_insn *);


extern rtx simplify_const_unary_operation (enum rtx_code, machine_mode,
        rtx, machine_mode);
extern rtx simplify_unary_operation (enum rtx_code, machine_mode, rtx,
         machine_mode);
extern rtx simplify_const_binary_operation (enum rtx_code, machine_mode,
         rtx, rtx);
extern rtx simplify_binary_operation (enum rtx_code, machine_mode, rtx,
          rtx);
extern rtx simplify_ternary_operation (enum rtx_code, machine_mode,
           machine_mode, rtx, rtx, rtx);
extern rtx simplify_const_relational_operation (enum rtx_code,
      machine_mode, rtx, rtx);
extern rtx simplify_relational_operation (enum rtx_code, machine_mode,
       machine_mode, rtx, rtx);
extern rtx simplify_gen_binary (enum rtx_code, machine_mode, rtx, rtx);
extern rtx simplify_gen_unary (enum rtx_code, machine_mode, rtx,
          machine_mode);
extern rtx simplify_gen_ternary (enum rtx_code, machine_mode,
     machine_mode, rtx, rtx, rtx);
extern rtx simplify_gen_relational (enum rtx_code, machine_mode,
        machine_mode, rtx, rtx);
extern rtx simplify_subreg (machine_mode, rtx, machine_mode, poly_uint64);
extern rtx simplify_gen_subreg (machine_mode, rtx, machine_mode, poly_uint64);
extern rtx lowpart_subreg (machine_mode, rtx, machine_mode);
extern rtx simplify_replace_fn_rtx (rtx, const_rtx,
        rtx (*fn) (rtx, const_rtx, void *), void *);
extern rtx simplify_replace_rtx (rtx, const_rtx, rtx);
extern rtx simplify_rtx (const_rtx);
extern rtx avoid_constant_pool_reference (rtx);
extern rtx delegitimize_mem_from_attrs (rtx);
extern bool mode_signbit_p (machine_mode, const_rtx);
extern bool val_signbit_p (machine_mode, unsigned long);
extern bool val_signbit_known_set_p (machine_mode,
         unsigned long);
extern bool val_signbit_known_clear_p (machine_mode,
           unsigned long);


extern machine_mode choose_hard_reg_mode (unsigned int, unsigned int,
            bool);
extern const HARD_REG_SET &simplifiable_subregs (const subreg_shape &);


extern rtx set_for_reg_notes (rtx);
extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);
extern rtx set_dst_reg_note (rtx, enum reg_note, rtx, rtx);
extern void set_insn_deleted (rtx);



extern rtx single_set_2 (const rtx_insn *, const_rtx);
extern bool contains_symbol_ref_p (const_rtx);
extern bool contains_symbolic_reference_p (const_rtx);



inline rtx single_set (const rtx_insn *insn)
{
  if (!((((enum rtx_code) (insn)->code) == INSN) || (((enum rtx_code) (insn)->code) == DEBUG_INSN) || (((enum rtx_code) (insn)->code) == JUMP_INSN) || (((enum rtx_code) (insn)->code) == CALL_INSN)))
    return (rtx) 0;

  if (((enum rtx_code) (PATTERN (insn))->code) == SET)
    return PATTERN (insn);


  return single_set_2 (insn, PATTERN (insn));
}

extern scalar_int_mode get_address_mode (rtx mem);
extern int rtx_addr_can_trap_p (const_rtx);
extern bool nonzero_address_p (const_rtx);
extern int rtx_unstable_p (const_rtx);
extern bool rtx_varies_p (const_rtx, bool);
extern bool rtx_addr_varies_p (const_rtx, bool);
extern rtx get_call_rtx_from (rtx);
extern long get_integer_term (const_rtx);
extern rtx get_related_value (const_rtx);
extern bool offset_within_block_p (const_rtx, long);
extern void split_const (rtx, rtx *, rtx *);
extern rtx strip_offset (rtx, poly_int64_pod *);
extern poly_int64 get_args_size (const_rtx);
extern bool unsigned_reg_p (rtx);
extern int reg_mentioned_p (const_rtx, const_rtx);
extern int count_occurrences (const_rtx, const_rtx, int);
extern int reg_referenced_p (const_rtx, const_rtx);
extern int reg_used_between_p (const_rtx, const rtx_insn *, const rtx_insn *);
extern int reg_set_between_p (const_rtx, const rtx_insn *, const rtx_insn *);
extern int commutative_operand_precedence (rtx);
extern bool swap_commutative_operands_p (rtx, rtx);
extern int modified_between_p (const_rtx, const rtx_insn *, const rtx_insn *);
extern int no_labels_between_p (const rtx_insn *, const rtx_insn *);
extern int modified_in_p (const_rtx, const_rtx);
extern int reg_set_p (const_rtx, const_rtx);
extern int multiple_sets (const_rtx);
extern int set_noop_p (const_rtx);
extern int noop_move_p (const rtx_insn *);
extern bool refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);
extern int reg_overlap_mentioned_p (const_rtx, const_rtx);
extern const_rtx set_of (const_rtx, const_rtx);
extern void record_hard_reg_sets (rtx, const_rtx, void *);
extern void record_hard_reg_uses (rtx *, void *);
extern void find_all_hard_regs (const_rtx, HARD_REG_SET *);
extern void find_all_hard_reg_sets (const rtx_insn *, HARD_REG_SET *, bool);
extern void note_stores (const_rtx, void (*) (rtx, const_rtx, void *), void *);
extern void note_uses (rtx *, void (*) (rtx *, void *), void *);
extern int dead_or_set_p (const rtx_insn *, const_rtx);
extern int dead_or_set_regno_p (const rtx_insn *, unsigned int);
extern rtx find_reg_note (const_rtx, enum reg_note, const_rtx);
extern rtx find_regno_note (const_rtx, enum reg_note, unsigned int);
extern rtx find_reg_equal_equiv_note (const_rtx);
extern rtx find_constant_src (const rtx_insn *);
extern int find_reg_fusage (const_rtx, enum rtx_code, const_rtx);
extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);
extern rtx alloc_reg_note (enum reg_note, rtx, rtx);
extern void add_reg_note (rtx, enum reg_note, rtx);
extern void add_int_reg_note (rtx_insn *, enum reg_note, int);
extern void add_args_size_note (rtx_insn *, poly_int64);
extern void add_shallow_copy_of_reg_note (rtx_insn *, rtx);
extern rtx duplicate_reg_note (rtx);
extern void remove_note (rtx_insn *, const_rtx);
extern bool remove_reg_equal_equiv_notes (rtx_insn *);
extern void remove_reg_equal_equiv_notes_for_regno (unsigned int);
extern int side_effects_p (const_rtx);
extern int volatile_refs_p (const_rtx);
extern int volatile_insn_p (const_rtx);
extern int may_trap_p_1 (const_rtx, unsigned);
extern int may_trap_p (const_rtx);
extern int may_trap_or_fault_p (const_rtx);
extern bool can_throw_internal (const_rtx);
extern bool can_throw_external (const_rtx);
extern bool insn_could_throw_p (const_rtx);
extern bool insn_nothrow_p (const_rtx);
extern bool can_nonlocal_goto (const rtx_insn *);
extern void copy_reg_eh_region_note_forward (rtx, rtx_insn *, rtx);
extern void copy_reg_eh_region_note_backward (rtx, rtx_insn *, rtx);
extern int inequality_comparisons_p (const_rtx);
extern rtx replace_rtx (rtx, rtx, rtx, bool = false);
extern void replace_label (rtx *, rtx, rtx, bool);
extern void replace_label_in_insn (rtx_insn *, rtx_insn *, rtx_insn *, bool);
extern bool rtx_referenced_p (const_rtx, const_rtx);
extern bool tablejump_p (const rtx_insn *, rtx_insn **, rtx_jump_table_data **);
extern int computed_jump_p (const rtx_insn *);
extern bool tls_referenced_p (const_rtx);
extern bool contains_mem_rtx_p (rtx x);


inline bool
refers_to_regno_p (unsigned int regnum, const_rtx x, rtx* loc = 
# 3463 "../../gcc/rtl.h" 3 4
                                                               __null
# 3463 "../../gcc/rtl.h"
                                                                   )
{
  return refers_to_regno_p (regnum, regnum + 1, x, loc);
}







typedef int (*for_each_inc_dec_fn) (rtx mem, rtx op, rtx dest, rtx src,
        rtx srcoff, void *arg);
extern int for_each_inc_dec (rtx, for_each_inc_dec_fn, void *arg);

typedef int (*rtx_equal_p_callback_function) (const_rtx *, const_rtx *,
                                              rtx *, rtx *);
extern int rtx_equal_p_cb (const_rtx, const_rtx,
                           rtx_equal_p_callback_function);

typedef int (*hash_rtx_callback_function) (const_rtx, machine_mode, rtx *,
                                           machine_mode *);
extern unsigned hash_rtx_cb (const_rtx, machine_mode, int *, int *,
                             bool, hash_rtx_callback_function);

extern rtx regno_use_in (unsigned int, rtx);
extern int auto_inc_p (const_rtx);
extern bool in_insn_list_p (const rtx_insn_list *, const rtx_insn *);
extern void remove_node_from_expr_list (const_rtx, rtx_expr_list **);
extern void remove_node_from_insn_list (const rtx_insn *, rtx_insn_list **);
extern int loc_mentioned_in_p (rtx *, const_rtx);
extern rtx_insn *find_first_parameter_load (rtx_insn *, rtx_insn *);
extern bool keep_with_call_p (const rtx_insn *);
extern bool label_is_jump_target_p (const_rtx, const rtx_insn *);
extern int pattern_cost (rtx, bool);
extern int insn_cost (rtx_insn *, bool);
extern unsigned seq_cost (const rtx_insn *, bool);



extern rtx canonicalize_condition (rtx_insn *, rtx, int, rtx_insn **, rtx,
       int, int);



extern rtx get_condition (rtx_insn *, rtx_insn **, int, int);


struct subreg_info
{

  int offset;




  int nregs;


  bool representable_p;
};

extern void subreg_get_info (unsigned int, machine_mode,
        poly_uint64, machine_mode,
        struct subreg_info *);



extern void free_EXPR_LIST_list (rtx_expr_list **);
extern void free_INSN_LIST_list (rtx_insn_list **);
extern void free_EXPR_LIST_node (rtx);
extern void free_INSN_LIST_node (rtx);
extern rtx_insn_list *alloc_INSN_LIST (rtx, rtx);
extern rtx_insn_list *copy_INSN_LIST (rtx_insn_list *);
extern rtx_insn_list *concat_INSN_LIST (rtx_insn_list *, rtx_insn_list *);
extern rtx_expr_list *alloc_EXPR_LIST (int, rtx, rtx);
extern void remove_free_INSN_LIST_elem (rtx_insn *, rtx_insn_list **);
extern rtx remove_list_elem (rtx, rtx *);
extern rtx_insn *remove_free_INSN_LIST_node (rtx_insn_list **);
extern rtx remove_free_EXPR_LIST_node (rtx_expr_list **);





extern bool resize_reg_info (void);

extern void free_reg_info (void);
extern void init_subregs_of_mode (void);
extern void finish_subregs_of_mode (void);


extern rtx extract_asm_operands (rtx);
extern int asm_noperands (const_rtx);
extern const char *decode_asm_operands (rtx, rtx *, rtx **, const char **,
     machine_mode *, location_t *);
extern void get_referenced_operands (const char *, bool *, unsigned int);

extern enum reg_class reg_preferred_class (int);
extern enum reg_class reg_alternate_class (int);
extern enum reg_class reg_allocno_class (int);
extern void setup_reg_classes (int, enum reg_class, enum reg_class,
          enum reg_class);

extern void split_all_insns (void);
extern unsigned int split_all_insns_noflow (void);


extern rtx const_int_rtx[64 * 2 + 1];





extern rtx const_true_rtx;

extern rtx const_tiny_rtx[4][(int) MAX_MACHINE_MODE];
# 3592 "../../gcc/rtl.h"
extern rtx pc_rtx;
extern rtx cc0_rtx;
extern rtx ret_rtx;
extern rtx simple_return_rtx;
extern rtx_insn *invalid_insn_rtx;
# 3619 "../../gcc/rtl.h"
enum global_rtl_index
{
  GR_STACK_POINTER,
  GR_FRAME_POINTER,
# 3632 "../../gcc/rtl.h"
  GR_HARD_FRAME_POINTER,





  GR_ARG_POINTER,


  GR_VIRTUAL_INCOMING_ARGS,
  GR_VIRTUAL_STACK_ARGS,
  GR_VIRTUAL_STACK_DYNAMIC,
  GR_VIRTUAL_OUTGOING_ARGS,
  GR_VIRTUAL_CFA,
  GR_VIRTUAL_PREFERRED_STACK_BOUNDARY,

  GR_MAX
};


struct target_rtl {
# 3668 "../../gcc/rtl.h"
  rtx x_global_rtl[GR_MAX];


  rtx x_pic_offset_table_rtx;




  rtx x_return_address_pointer_rtx;





  rtx x_initial_regno_reg_rtx[81];


  rtx x_top_of_stack[MAX_MACHINE_MODE];



  rtx x_static_reg_base_value[81];


  struct mem_attrs *x_mode_mem_attrs[(int) MAX_MACHINE_MODE];


  bool target_specific_initialized;
};

extern struct target_rtl default_target_rtl;

extern struct target_rtl *this_target_rtl;
# 3726 "../../gcc/rtl.h"
static inline const struct mem_attrs *
get_mem_attrs (const_rtx x)
{
  struct mem_attrs *attrs;

  attrs = (((x)->u.fld[1]).rt_mem);
  if (!attrs)
    attrs = (this_target_rtl->x_mode_mem_attrs)[(int) ((machine_mode) (x)->mode)];
  return attrs;
}





# 1 "./genrtl.h" 1





# 1 "../../gcc/statistics.h" 1
# 7 "./genrtl.h" 2

static inline rtx
gen_rtx_fmt_0_stat (enum rtx_code code, machine_mode mode )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_ee_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_ue_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_ie_stat (enum rtx_code code, machine_mode mode,
 int arg0,
 rtx arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_E_stat (enum rtx_code code, machine_mode mode,
 rtvec arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtvec) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt_i_stat (enum rtx_code code, machine_mode mode,
 int arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt_uuBeiie_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1,
 basic_block arg2,
 rtx arg3,
 int arg4,
 int arg5,
 rtx arg6 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_bb) = arg2;
  (((rt)->u.fld[3]).rt_rtx) = arg3;
  (((rt)->u.fld[4]).rt_int) = arg4;
  (((rt)->u.fld[5]).rt_int) = arg5;
  (((rt)->u.fld[6]).rt_rtx) = arg6;

  return rt;
}




static inline rtx
gen_rtx_fmt_uuBeiie0_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1,
 basic_block arg2,
 rtx arg3,
 int arg4,
 int arg5,
 rtx arg6 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_bb) = arg2;
  (((rt)->u.fld[3]).rt_rtx) = arg3;
  (((rt)->u.fld[4]).rt_int) = arg4;
  (((rt)->u.fld[5]).rt_int) = arg5;
  (((rt)->u.fld[6]).rt_rtx) = arg6;
  (((rt)->u.fld[7]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_uuBeiiee_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1,
 basic_block arg2,
 rtx arg3,
 int arg4,
 int arg5,
 rtx arg6,
 rtx arg7 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_bb) = arg2;
  (((rt)->u.fld[3]).rt_rtx) = arg3;
  (((rt)->u.fld[4]).rt_int) = arg4;
  (((rt)->u.fld[5]).rt_int) = arg5;
  (((rt)->u.fld[6]).rt_rtx) = arg6;
  (((rt)->u.fld[7]).rt_rtx) = arg7;

  return rt;
}




static inline rtx
gen_rtx_fmt_uuBe0000_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1,
 basic_block arg2,
 rtx arg3 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_bb) = arg2;
  (((rt)->u.fld[3]).rt_rtx) = arg3;
  (((rt)->u.fld[4]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[5]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[6]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[7]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_uu00000_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[3]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[4]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[5]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[6]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_uuB00is_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1,
 basic_block arg2,
 int arg3,
 const char *arg4 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_bb) = arg2;
  (((rt)->u.fld[3]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[4]).rt_rtx) = (rtx) 0;
  (((rt)->u.fld[5]).rt_int) = arg3;
  (((rt)->u.fld[6]).rt_str) = arg4;

  return rt;
}




static inline rtx
gen_rtx_fmt_si_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 int arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_int) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_ssiEEEi_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 const char *arg1,
 int arg2,
 rtvec arg3,
 rtvec arg4,
 rtvec arg5,
 int arg6 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;
  (((rt)->u.fld[2]).rt_int) = arg2;
  (((rt)->u.fld[3]).rt_rtvec) = arg3;
  (((rt)->u.fld[4]).rt_rtvec) = arg4;
  (((rt)->u.fld[5]).rt_rtvec) = arg5;
  (((rt)->u.fld[6]).rt_int) = arg6;

  return rt;
}




static inline rtx
gen_rtx_fmt_Ei_stat (enum rtx_code code, machine_mode mode,
 rtvec arg0,
 int arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtvec) = arg0;
  (((rt)->u.fld[1]).rt_int) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_eEee0_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtvec arg1,
 rtx arg2,
 rtx arg3 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtvec) = arg1;
  (((rt)->u.fld[2]).rt_rtx) = arg2;
  (((rt)->u.fld[3]).rt_rtx) = arg3;
  (((rt)->u.fld[4]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_eee_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtx arg1,
 rtx arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_rtx) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_e_stat (enum rtx_code code, machine_mode mode,
 rtx arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt__stat (enum rtx_code code, machine_mode mode )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));

  return rt;
}




static inline rtx
gen_rtx_fmt_w_stat (enum rtx_code code, machine_mode mode,
 long arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  ((rt)->u.hwint[0]) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt_www_stat (enum rtx_code code, machine_mode mode,
 long arg0,
 long arg1,
 long arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  ((rt)->u.hwint[0]) = arg0;
  ((rt)->u.hwint[1]) = arg1;
  ((rt)->u.hwint[2]) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_s_stat (enum rtx_code code, machine_mode mode,
 const char *arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt_ep_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 poly_uint16 arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_subreg) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_e0_stat (enum rtx_code code, machine_mode mode,
 rtx arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_u_stat (enum rtx_code code, machine_mode mode,
 rtx arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt_s0_stat (enum rtx_code code, machine_mode mode,
 const char *arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = (rtx) 0;

  return rt;
}




static inline rtx
gen_rtx_fmt_te_stat (enum rtx_code code, machine_mode mode,
 tree arg0,
 rtx arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_tree) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_t_stat (enum rtx_code code, machine_mode mode,
 tree arg0 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_tree) = arg0;

  return rt;
}




static inline rtx
gen_rtx_fmt_iss_stat (enum rtx_code code, machine_mode mode,
 int arg0,
 const char *arg1,
 const char *arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;
  (((rt)->u.fld[2]).rt_str) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_is_stat (enum rtx_code code, machine_mode mode,
 int arg0,
 const char *arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_isE_stat (enum rtx_code code, machine_mode mode,
 int arg0,
 const char *arg1,
 rtvec arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;
  (((rt)->u.fld[2]).rt_rtvec) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_iE_stat (enum rtx_code code, machine_mode mode,
 int arg0,
 rtvec arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;
  (((rt)->u.fld[1]).rt_rtvec) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_ss_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 const char *arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_eE_stat (enum rtx_code code, machine_mode mode,
 rtx arg0,
 rtvec arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtx) = arg0;
  (((rt)->u.fld[1]).rt_rtvec) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_ses_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 rtx arg1,
 const char *arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;
  (((rt)->u.fld[2]).rt_str) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_sss_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 const char *arg1,
 const char *arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;
  (((rt)->u.fld[2]).rt_str) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_sse_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 const char *arg1,
 rtx arg2 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;
  (((rt)->u.fld[2]).rt_rtx) = arg2;

  return rt;
}




static inline rtx
gen_rtx_fmt_sies_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 int arg1,
 rtx arg2,
 const char *arg3 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_int) = arg1;
  (((rt)->u.fld[2]).rt_rtx) = arg2;
  (((rt)->u.fld[3]).rt_str) = arg3;

  return rt;
}




static inline rtx
gen_rtx_fmt_sE_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 rtvec arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_rtvec) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_ii_stat (enum rtx_code code, machine_mode mode,
 int arg0,
 int arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_int) = arg0;
  (((rt)->u.fld[1]).rt_int) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_Ee_stat (enum rtx_code code, machine_mode mode,
 rtvec arg0,
 rtx arg1 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_rtvec) = arg0;
  (((rt)->u.fld[1]).rt_rtx) = arg1;

  return rt;
}




static inline rtx
gen_rtx_fmt_sEsE_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 rtvec arg1,
 const char *arg2,
 rtvec arg3 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_rtvec) = arg1;
  (((rt)->u.fld[2]).rt_str) = arg2;
  (((rt)->u.fld[3]).rt_rtvec) = arg3;

  return rt;
}




static inline rtx
gen_rtx_fmt_ssss_stat (enum rtx_code code, machine_mode mode,
 const char *arg0,
 const char *arg1,
 const char *arg2,
 const char *arg3 )
{
  rtx rt;
  rt = rtx_alloc (code );

  ((rt)->mode = (mode));
  (((rt)->u.fld[0]).rt_str) = arg0;
  (((rt)->u.fld[1]).rt_str) = arg1;
  (((rt)->u.fld[2]).rt_str) = arg2;
  (((rt)->u.fld[3]).rt_str) = arg3;

  return rt;
}
# 3742 "../../gcc/rtl.h" 2
# 3753 "../../gcc/rtl.h"
extern rtx_expr_list *gen_rtx_EXPR_LIST (machine_mode, rtx, rtx);
extern rtx_insn_list *gen_rtx_INSN_LIST (machine_mode, rtx, rtx);
extern rtx_insn *
gen_rtx_INSN (machine_mode mode, rtx_insn *prev_insn, rtx_insn *next_insn,
       basic_block bb, rtx pattern, int location, int code,
       rtx reg_notes);
extern rtx gen_rtx_CONST_INT (machine_mode, long);
extern rtx gen_rtx_CONST_VECTOR (machine_mode, rtvec);
extern void set_mode_and_regno (rtx, machine_mode, unsigned int);
extern rtx gen_raw_REG (machine_mode, unsigned int);
extern rtx gen_rtx_REG (machine_mode, unsigned int);
extern rtx gen_rtx_SUBREG (machine_mode, rtx, poly_uint64);
extern rtx gen_rtx_MEM (machine_mode, rtx);
extern rtx gen_rtx_VAR_LOCATION (machine_mode, tree, rtx,
     enum var_init_status);




static inline void
PUT_MODE (rtx x, machine_mode mode)
{
  if ((((enum rtx_code) (x)->code) == REG))
    set_mode_and_regno (x, mode, (rhs_regno(x)));
  else
    ((x)->mode = (mode));
}
# 3862 "../../gcc/rtl.h"
extern rtx output_constant_def (tree, int);
extern rtx lookup_constant_def (tree);




extern int reload_completed;


extern int epilogue_completed;




extern int reload_in_progress;


extern int lra_in_progress;
# 3889 "../../gcc/rtl.h"
extern int regstack_completed;
# 3898 "../../gcc/rtl.h"
extern int cse_not_expected;





extern int rtx_to_tree_code (enum rtx_code);


extern int delete_trivially_dead_insns (rtx_insn *, int);
extern int exp_equiv_p (const_rtx, const_rtx, int, bool);
extern unsigned hash_rtx (const_rtx x, machine_mode, int *, int *, bool);


extern bool check_for_inc_dec (rtx_insn *insn);


extern int comparison_dominates_p (enum rtx_code, enum rtx_code);
extern bool jump_to_label_p (const rtx_insn *);
extern int condjump_p (const rtx_insn *);
extern int any_condjump_p (const rtx_insn *);
extern int any_uncondjump_p (const rtx_insn *);
extern rtx pc_set (const rtx_insn *);
extern rtx condjump_label (const rtx_insn *);
extern int simplejump_p (const rtx_insn *);
extern int returnjump_p (const rtx_insn *);
extern int eh_returnjump_p (rtx_insn *);
extern int onlyjump_p (const rtx_insn *);
extern int only_sets_cc0_p (const_rtx);
extern int sets_cc0_p (const_rtx);
extern int invert_jump_1 (rtx_jump_insn *, rtx);
extern int invert_jump (rtx_jump_insn *, rtx, int);
extern int rtx_renumbered_equal_p (const_rtx, const_rtx);
extern int true_regnum (const_rtx);
extern unsigned int reg_or_subregno (const_rtx);
extern int redirect_jump_1 (rtx_insn *, rtx);
extern void redirect_jump_2 (rtx_jump_insn *, rtx, rtx, int, int);
extern int redirect_jump (rtx_jump_insn *, rtx, int);
extern void rebuild_jump_labels (rtx_insn *);
extern void rebuild_jump_labels_chain (rtx_insn *);
extern rtx reversed_comparison (const_rtx, machine_mode);
extern enum rtx_code reversed_comparison_code (const_rtx, const rtx_insn *);
extern enum rtx_code reversed_comparison_code_parts (enum rtx_code, const_rtx,
           const_rtx, const rtx_insn *);
extern void delete_for_peephole (rtx_insn *, rtx_insn *);
extern int condjump_in_parallel_p (const rtx_insn *);


extern int max_reg_num (void);
extern int max_label_num (void);
extern int get_first_label_num (void);
extern void maybe_set_first_label_num (rtx_code_label *);
extern void delete_insns_since (rtx_insn *);
extern void mark_reg_pointer (rtx, int);
extern void mark_user_reg (rtx);
extern void reset_used_flags (rtx);
extern void set_used_flags (rtx);
extern void reorder_insns (rtx_insn *, rtx_insn *, rtx_insn *);
extern void reorder_insns_nobb (rtx_insn *, rtx_insn *, rtx_insn *);
extern int get_max_insn_count (void);
extern int in_sequence_p (void);
extern void init_emit (void);
extern void init_emit_regs (void);
extern void init_derived_machine_modes (void);
extern void init_emit_once (void);
extern void push_topmost_sequence (void);
extern void pop_topmost_sequence (void);
extern void set_new_first_and_last_insn (rtx_insn *, rtx_insn *);
extern unsigned int unshare_all_rtl (void);
extern void unshare_all_rtl_again (rtx_insn *);
extern void unshare_all_rtl_in_chain (rtx_insn *);
extern void verify_rtl_sharing (void);
extern void add_insn (rtx_insn *);
extern void add_insn_before (rtx, rtx, basic_block);
extern void add_insn_after (rtx, rtx, basic_block);
extern void remove_insn (rtx);
extern rtx_insn *emit (rtx, bool = true);
extern void emit_insn_at_entry (rtx);
extern rtx gen_lowpart_SUBREG (machine_mode, rtx);
extern rtx gen_const_mem (machine_mode, rtx);
extern rtx gen_frame_mem (machine_mode, rtx);
extern rtx gen_tmp_stack_mem (machine_mode, rtx);
extern bool validate_subreg (machine_mode, machine_mode,
        const_rtx, poly_uint64);


extern unsigned int extended_count (const_rtx, machine_mode, int);
extern rtx remove_death (unsigned int, rtx_insn *);
extern void dump_combine_stats (FILE *);
extern void dump_combine_total_stats (FILE *);
extern rtx make_compound_operation (rtx, enum rtx_code);


extern void schedule_insns (void);


extern void schedule_ebbs (void);


extern void sel_sched_fix_param (const char *param, const char *val);


extern const char *print_rtx_head;
extern void debug (const rtx_def &ref);
extern void debug (const rtx_def *ptr);
extern void debug_rtx (const_rtx);
extern void debug_rtx_list (const rtx_insn *, int);
extern void debug_rtx_range (const rtx_insn *, const rtx_insn *);
extern const rtx_insn *debug_rtx_find (const rtx_insn *, int);
extern void print_mem_expr (FILE *, const_tree);
extern void print_rtl (FILE *, const_rtx);
extern void print_simple_rtl (FILE *, const_rtx);
extern int print_rtl_single (FILE *, const_rtx);
extern int print_rtl_single_with_indent (FILE *, const_rtx, int);
extern void print_inline_rtx (FILE *, const_rtx, int);


extern void expand_null_return (void);
extern void expand_naked_return (void);
extern void emit_jump (rtx);


extern rtx move_by_pieces (rtx, rtx, unsigned long,
      unsigned int, int);
extern poly_int64 find_args_size_adjust (rtx_insn *);
extern poly_int64 fixup_args_size_notes (rtx_insn *, rtx_insn *, poly_int64);


extern void init_expmed (void);
extern void expand_inc (rtx, rtx);
extern void expand_dec (rtx, rtx);


extern void init_lower_subreg (void);


extern bool can_copy_p (machine_mode);
extern bool can_assign_to_reg_without_clobbers_p (rtx, machine_mode);
extern rtx fis_get_condition (rtx_insn *);


extern HARD_REG_SET eliminable_regset;
extern void mark_elimination (int, int);


extern int reg_classes_intersect_p (reg_class_t, reg_class_t);
extern int reg_class_subset_p (reg_class_t, reg_class_t);
extern void globalize_reg (tree, int);
extern void init_reg_modes_target (void);
extern void init_regs (void);
extern void reinit_regs (void);
extern void init_fake_stack_mems (void);
extern void save_register_info (void);
extern void init_reg_sets (void);
extern void regclass (rtx, int);
extern void reg_scan (rtx_insn *, unsigned int);
extern void fix_register (const char *, int, int);
extern const HARD_REG_SET *valid_mode_changes_for_regno (unsigned int);


extern int function_invariant_p (const_rtx);


enum libcall_type
{
  LCT_NORMAL = 0,
  LCT_CONST = 1,
  LCT_PURE = 2,
  LCT_NORETURN = 3,
  LCT_THROW = 4,
  LCT_RETURNS_TWICE = 5
};

extern rtx emit_library_call_value_1 (int, rtx, rtx, enum libcall_type,
          machine_mode, int, rtx_mode_t *);
# 4083 "../../gcc/rtl.h"
inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode)
{
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 0, 
# 4086 "../../gcc/rtl.h" 3 4
                                                                   __null
# 4086 "../../gcc/rtl.h"
                                                                       );
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode)
{
  rtx_mode_t args[] = { rtx_mode_t (arg1, arg1_mode) };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 1, args);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode,
     rtx arg2, machine_mode arg2_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode)
  };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 2, args);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode,
     rtx arg2, machine_mode arg2_mode,
     rtx arg3, machine_mode arg3_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode)
  };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 3, args);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode,
     rtx arg2, machine_mode arg2_mode,
     rtx arg3, machine_mode arg3_mode,
     rtx arg4, machine_mode arg4_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode),
    rtx_mode_t (arg4, arg4_mode)
  };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 4, args);
}





inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode)
{
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 0, 
# 4147 "../../gcc/rtl.h" 3 4
                                                                       __null
# 4147 "../../gcc/rtl.h"
                                                                           );
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode)
{
  rtx_mode_t args[] = { rtx_mode_t (arg1, arg1_mode) };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 1, args);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode,
    rtx arg2, machine_mode arg2_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode)
  };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 2, args);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode,
    rtx arg2, machine_mode arg2_mode,
    rtx arg3, machine_mode arg3_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode)
  };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 3, args);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode,
    rtx arg2, machine_mode arg2_mode,
    rtx arg3, machine_mode arg3_mode,
    rtx arg4, machine_mode arg4_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode),
    rtx_mode_t (arg4, arg4_mode)
  };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 4, args);
}


extern void init_varasm_once (void);

extern rtx make_debug_expr_from_rtl (const_rtx);







extern rtx canon_rtx (rtx);
extern int true_dependence (const_rtx, machine_mode, const_rtx);
extern rtx get_addr (rtx);
extern int canon_true_dependence (const_rtx, machine_mode, rtx,
      const_rtx, rtx);
extern int read_dependence (const_rtx, const_rtx);
extern int anti_dependence (const_rtx, const_rtx);
extern int canon_anti_dependence (const_rtx, bool,
      const_rtx, machine_mode, rtx);
extern int output_dependence (const_rtx, const_rtx);
extern int canon_output_dependence (const_rtx, bool,
        const_rtx, machine_mode, rtx);
extern int may_alias_p (const_rtx, const_rtx);
extern void init_alias_target (void);
extern void init_alias_analysis (void);
extern void end_alias_analysis (void);
extern void vt_equate_reg_base_value (const_rtx, const_rtx);
extern bool memory_modified_in_insn_p (const_rtx, const_rtx);
extern bool may_be_sp_based_p (rtx);
extern rtx gen_hard_reg_clobber (machine_mode, unsigned int);
extern rtx get_reg_known_value (unsigned int);
extern bool get_reg_known_equiv_p (unsigned int);
extern rtx get_reg_base_value (unsigned int);


extern int stack_regs_mentioned (const_rtx insn);



extern rtx stack_limit_rtx;


extern unsigned int variable_tracking_main (void);
extern void delete_vta_debug_insns (bool);


extern void get_mode_bounds (scalar_int_mode, int,
        scalar_int_mode, rtx *, rtx *);


extern rtx canon_condition (rtx);
extern void simplify_using_condition (rtx, rtx *, bitmap);


extern unsigned int compute_alignments (void);
extern void update_alignments (vec<rtx> &);
extern int asm_str_count (const char *templ);

struct rtl_hooks
{
  rtx (*gen_lowpart) (machine_mode, rtx);
  rtx (*gen_lowpart_no_emit) (machine_mode, rtx);
  rtx (*reg_nonzero_bits) (const_rtx, scalar_int_mode, scalar_int_mode,
      unsigned long *);
  rtx (*reg_num_sign_bit_copies) (const_rtx, scalar_int_mode, scalar_int_mode,
      unsigned int *);
  bool (*reg_truncated_to_mode) (machine_mode, const_rtx);


};


extern struct rtl_hooks rtl_hooks;


extern const struct rtl_hooks general_rtl_hooks;




extern void insn_locations_init (void);
extern void insn_locations_finalize (void);
extern void set_curr_insn_location (location_t);
extern location_t curr_insn_location (void);


extern void _fatal_insn_not_found (const_rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void _fatal_insn (const char *, const_rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__)) __attribute__ ((__cold__));







extern tree global_regs_decl[81];




struct cgraph_rtl_info {
   unsigned int preferred_incoming_stack_boundary;




  HARD_REG_SET function_used_regs;

  unsigned function_used_regs_valid: 1;
};





inline rtx_code
load_extend_op (machine_mode mode)
{
  scalar_int_mode int_mode;
  if (is_a <scalar_int_mode> (mode, &int_mode)
      && GET_MODE_PRECISION (int_mode) < ((8) * (((global_options.x_ix86_isa_flags & (1UL << 1)) != 0) ? 8 : 4)))
    return UNKNOWN;
  return UNKNOWN;
}




inline rtx
strip_offset_and_add (rtx x, poly_int64_pod *offset)
{
  if (((enum rtx_code) (x)->code) == PLUS)
    {
      poly_int64 suboffset;
      x = strip_offset (x, &suboffset);
      *offset += suboffset;
    }
  return x;
}


extern void gt_ggc_mx (rtx &);
extern void gt_pch_nx (rtx &);
extern void gt_pch_nx (rtx &, gt_pointer_operator, void *);
# 26 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/tree.h" 1
# 23 "../../gcc/tree.h"
# 1 "../../gcc/tree-core.h" 1
# 23 "../../gcc/tree-core.h"
# 1 "../../gcc/../libcpp/include/symtab.h" 1
# 29 "../../gcc/../libcpp/include/symtab.h"
typedef struct ht_identifier ht_identifier;
typedef struct ht_identifier *ht_identifier_ptr;
struct ht_identifier {
  const unsigned char *str;
  unsigned int len;
  unsigned int hash_value;
};




typedef struct ht cpp_hash_table;
typedef struct ht_identifier *hashnode;

enum ht_lookup_option {HT_NO_INSERT = 0, HT_ALLOC};


struct ht
{

  struct obstack stack;

  hashnode *entries;

  hashnode (*alloc_node) (cpp_hash_table *);


  void * (*alloc_subobject) (size_t);

  unsigned int nslots;
  unsigned int nelements;


  struct cpp_reader *pfile;


  unsigned int searches;
  unsigned int collisions;


  bool entries_owned;
};


extern cpp_hash_table *ht_create (unsigned int order);


extern void ht_destroy (cpp_hash_table *);

extern hashnode ht_lookup (cpp_hash_table *, const unsigned char *,
      size_t, enum ht_lookup_option);
extern hashnode ht_lookup_with_hash (cpp_hash_table *, const unsigned char *,
                                     size_t, unsigned int,
                                     enum ht_lookup_option);






typedef int (*ht_cb) (struct cpp_reader *, hashnode, const void *);
extern void ht_forall (cpp_hash_table *, ht_cb, const void *);



extern void ht_purge (cpp_hash_table *, ht_cb, const void *);


extern void ht_load (cpp_hash_table *ht, hashnode *entries,
       unsigned int nslots, unsigned int nelements, bool own);


extern void ht_dump_statistics (cpp_hash_table *);
# 24 "../../gcc/tree-core.h" 2
# 32 "../../gcc/tree-core.h"
struct function;
struct real_value;
struct fixed_value;
struct ptr_info_def;
struct range_info_def;
struct die_struct;
# 134 "../../gcc/tree-core.h"
enum tree_code {
# 1 "./all-tree.def" 1
# 1 "../../gcc/tree.def" 1
# 45 "../../gcc/tree.def"
ERROR_MARK,





IDENTIFIER_NODE,






TREE_LIST,


TREE_VEC,
# 82 "../../gcc/tree.def"
BLOCK,
# 126 "../../gcc/tree.def"
OFFSET_TYPE,
# 139 "../../gcc/tree.def"
ENUMERAL_TYPE,



BOOLEAN_TYPE,
# 153 "../../gcc/tree.def"
INTEGER_TYPE,



REAL_TYPE,
# 166 "../../gcc/tree.def"
POINTER_TYPE,



REFERENCE_TYPE,


NULLPTR_TYPE,




FIXED_POINT_TYPE,
# 187 "../../gcc/tree.def"
COMPLEX_TYPE,




VECTOR_TYPE,
# 208 "../../gcc/tree.def"
ARRAY_TYPE,
# 219 "../../gcc/tree.def"
RECORD_TYPE,





UNION_TYPE,





QUAL_UNION_TYPE,






VOID_TYPE,




POINTER_BOUNDS_TYPE,
# 253 "../../gcc/tree.def"
FUNCTION_TYPE,






METHOD_TYPE,





LANG_TYPE,





VOID_CST,
# 292 "../../gcc/tree.def"
INTEGER_CST,


POLY_INT_CST,


REAL_CST,


FIXED_CST,



COMPLEX_CST,


VECTOR_CST,


STRING_CST,
# 371 "../../gcc/tree.def"
FUNCTION_DECL,
LABEL_DECL,




FIELD_DECL,
VAR_DECL,
CONST_DECL,
PARM_DECL,
TYPE_DECL,
RESULT_DECL,



DEBUG_EXPR_DECL,


DEBUG_BEGIN_STMT,



NAMESPACE_DECL,
# 404 "../../gcc/tree.def"
IMPORTED_DECL,
# 414 "../../gcc/tree.def"
NAMELIST_DECL,



TRANSLATION_UNIT_DECL,
# 431 "../../gcc/tree.def"
COMPONENT_REF,
# 441 "../../gcc/tree.def"
BIT_FIELD_REF,






ARRAY_REF,




ARRAY_RANGE_REF,



REALPART_EXPR,
IMAGPART_EXPR,
# 470 "../../gcc/tree.def"
VIEW_CONVERT_EXPR,


INDIRECT_REF,
# 482 "../../gcc/tree.def"
OBJ_TYPE_REF,
# 501 "../../gcc/tree.def"
CONSTRUCTOR,
# 511 "../../gcc/tree.def"
COMPOUND_EXPR,


MODIFY_EXPR,




INIT_EXPR,







TARGET_EXPR,
# 541 "../../gcc/tree.def"
COND_EXPR,


VEC_DUPLICATE_EXPR,
# 554 "../../gcc/tree.def"
VEC_SERIES_EXPR,
# 566 "../../gcc/tree.def"
VEC_COND_EXPR,
# 580 "../../gcc/tree.def"
VEC_PERM_EXPR,
# 603 "../../gcc/tree.def"
BIND_EXPR,







CALL_EXPR,






WITH_CLEANUP_EXPR,
# 635 "../../gcc/tree.def"
CLEANUP_POINT_EXPR,
# 687 "../../gcc/tree.def"
PLACEHOLDER_EXPR,


PLUS_EXPR,
MINUS_EXPR,
MULT_EXPR,



POINTER_PLUS_EXPR,







POINTER_DIFF_EXPR,



MULT_HIGHPART_EXPR,


TRUNC_DIV_EXPR,


CEIL_DIV_EXPR,


FLOOR_DIV_EXPR,


ROUND_DIV_EXPR,




TRUNC_MOD_EXPR,


CEIL_MOD_EXPR,


FLOOR_MOD_EXPR,


ROUND_MOD_EXPR,


RDIV_EXPR,



EXACT_DIV_EXPR,


FIX_TRUNC_EXPR,


FLOAT_EXPR,


NEGATE_EXPR,




MIN_EXPR,
MAX_EXPR,





ABS_EXPR,
# 777 "../../gcc/tree.def"
LSHIFT_EXPR,
RSHIFT_EXPR,
LROTATE_EXPR,
RROTATE_EXPR,


BIT_IOR_EXPR,
BIT_XOR_EXPR,
BIT_AND_EXPR,
BIT_NOT_EXPR,
# 797 "../../gcc/tree.def"
TRUTH_ANDIF_EXPR,
TRUTH_ORIF_EXPR,
TRUTH_AND_EXPR,
TRUTH_OR_EXPR,
TRUTH_XOR_EXPR,
TRUTH_NOT_EXPR,
# 813 "../../gcc/tree.def"
LT_EXPR,
LE_EXPR,
GT_EXPR,
GE_EXPR,
EQ_EXPR,
NE_EXPR,


UNORDERED_EXPR,
ORDERED_EXPR,


UNLT_EXPR,
UNLE_EXPR,
UNGT_EXPR,
UNGE_EXPR,
UNEQ_EXPR,


LTGT_EXPR,

RANGE_EXPR,



PAREN_EXPR,




CONVERT_EXPR,



ADDR_SPACE_CONVERT_EXPR,




FIXED_CONVERT_EXPR,


NOP_EXPR,


NON_LVALUE_EXPR,






COMPOUND_LITERAL_EXPR,




SAVE_EXPR,



ADDR_EXPR,



FDESC_EXPR,
# 893 "../../gcc/tree.def"
BIT_INSERT_EXPR,



COMPLEX_EXPR,


CONJ_EXPR,




PREDECREMENT_EXPR,
PREINCREMENT_EXPR,
POSTDECREMENT_EXPR,
POSTINCREMENT_EXPR,


VA_ARG_EXPR,






TRY_CATCH_EXPR,




TRY_FINALLY_EXPR,





DECL_EXPR,




LABEL_EXPR,



GOTO_EXPR,






RETURN_EXPR,



EXIT_EXPR,




LOOP_EXPR,
# 966 "../../gcc/tree.def"
SWITCH_EXPR,
# 978 "../../gcc/tree.def"
CASE_LABEL_EXPR,






ASM_EXPR,




SSA_NAME,



CATCH_EXPR,




EH_FILTER_EXPR,



SCEV_KNOWN,



SCEV_NOT_KNOWN,



POLYNOMIAL_CHREC,



STATEMENT_LIST,
# 1034 "../../gcc/tree.def"
ASSERT_EXPR,



TREE_BINFO,






WITH_SIZE_EXPR,
# 1056 "../../gcc/tree.def"
REALIGN_LOAD_EXPR,
# 1072 "../../gcc/tree.def"
TARGET_MEM_REF,
# 1082 "../../gcc/tree.def"
MEM_REF,
# 1091 "../../gcc/tree.def"
OACC_PARALLEL,





OACC_KERNELS,





OACC_DATA,





OACC_HOST_DATA,





OMP_PARALLEL,





OMP_TASK,
# 1147 "../../gcc/tree.def"
OMP_FOR,



OMP_SIMD,



OMP_DISTRIBUTE,



OMP_TASKLOOP,



OACC_LOOP,




OMP_TEAMS,




OMP_TARGET_DATA,




OMP_TARGET,




OMP_SECTIONS,




OMP_ORDERED,





OMP_CRITICAL,




OMP_SINGLE,



OMP_SECTION,



OMP_MASTER,



OMP_TASKGROUP,




OACC_CACHE,



OACC_DECLARE,



OACC_ENTER_DATA,



OACC_EXIT_DATA,



OACC_UPDATE,



OMP_TARGET_UPDATE,



OMP_TARGET_ENTER_DATA,



OMP_TARGET_EXIT_DATA,
# 1255 "../../gcc/tree.def"
OMP_ATOMIC,




OMP_ATOMIC_READ,
# 1270 "../../gcc/tree.def"
OMP_ATOMIC_CAPTURE_OLD,
OMP_ATOMIC_CAPTURE_NEW,


OMP_CLAUSE,



TRANSACTION_EXPR,
# 1289 "../../gcc/tree.def"
DOT_PROD_EXPR,
# 1298 "../../gcc/tree.def"
WIDEN_SUM_EXPR,
# 1314 "../../gcc/tree.def"
SAD_EXPR,






WIDEN_MULT_EXPR,
# 1330 "../../gcc/tree.def"
WIDEN_MULT_PLUS_EXPR,


WIDEN_MULT_MINUS_EXPR,
# 1346 "../../gcc/tree.def"
WIDEN_LSHIFT_EXPR,





FMA_EXPR,






VEC_WIDEN_MULT_HI_EXPR,
VEC_WIDEN_MULT_LO_EXPR,


VEC_WIDEN_MULT_EVEN_EXPR,
VEC_WIDEN_MULT_ODD_EXPR,





VEC_UNPACK_HI_EXPR,
VEC_UNPACK_LO_EXPR,





VEC_UNPACK_FLOAT_HI_EXPR,
VEC_UNPACK_FLOAT_LO_EXPR,





VEC_PACK_TRUNC_EXPR,
VEC_PACK_SAT_EXPR,





VEC_PACK_FIX_TRUNC_EXPR,
# 1400 "../../gcc/tree.def"
VEC_WIDEN_LSHIFT_HI_EXPR,
VEC_WIDEN_LSHIFT_LO_EXPR,






PREDICT_EXPR,


OPTIMIZATION_NODE,


TARGET_OPTION_NODE,





ANNOTATE_EXPR,
# 2 "./all-tree.def" 2
LAST_AND_UNUSED_TREE_CODE,
# 1 "../../gcc/c-family/c-common.def" 1
# 39 "../../gcc/c-family/c-common.def"
C_MAYBE_CONST_EXPR,






EXCESS_PRECISION_EXPR,





USERDEF_LITERAL,



SIZEOF_EXPR,
# 4 "./all-tree.def" 2
# 1 "../../gcc/ada/gcc-interface/ada-tree.def" 1
# 29 "../../gcc/ada/gcc-interface/ada-tree.def"
UNCONSTRAINED_ARRAY_TYPE,





UNCONSTRAINED_ARRAY_REF,




NULL_EXPR,



PLUS_NOMOD_EXPR,



MINUS_NOMOD_EXPR,




POWER_EXPR,




ATTR_ADDR_EXPR,
# 67 "../../gcc/ada/gcc-interface/ada-tree.def"
STMT_STMT,





LOOP_STMT,





EXIT_STMT,
# 5 "./all-tree.def" 2
# 1 "../../gcc/cp/cp-tree.def" 1
# 41 "../../gcc/cp/cp-tree.def"
OFFSET_REF,




PTRMEM_CST,





NEW_EXPR,
VEC_NEW_EXPR,




DELETE_EXPR,
VEC_DELETE_EXPR,




SCOPE_REF,




MEMBER_REF,



TYPE_EXPR,






AGGR_INIT_EXPR,




VEC_INIT_EXPR,



THROW_EXPR,



EMPTY_CLASS_EXPR,
# 107 "../../gcc/cp/cp-tree.def"
BASELINK,
# 124 "../../gcc/cp/cp-tree.def"
TEMPLATE_DECL,
# 159 "../../gcc/cp/cp-tree.def"
TEMPLATE_PARM_INDEX,







TEMPLATE_TEMPLATE_PARM,
# 176 "../../gcc/cp/cp-tree.def"
TEMPLATE_TYPE_PARM,





TYPENAME_TYPE,



TYPEOF_TYPE,





BOUND_TEMPLATE_TEMPLATE_PARM,





UNBOUND_CLASS_TEMPLATE,






USING_DECL,


USING_STMT,




DEFAULT_ARG,







DEFERRED_NOEXCEPT,






TEMPLATE_ID_EXPR,


OVERLOAD,
# 243 "../../gcc/cp/cp-tree.def"
PSEUDO_DTOR_EXPR,



MODOP_EXPR,
CAST_EXPR,
REINTERPRET_CAST_EXPR,
CONST_CAST_EXPR,
STATIC_CAST_EXPR,
DYNAMIC_CAST_EXPR,
IMPLICIT_CONV_EXPR,
DOTSTAR_EXPR,
TYPEID_EXPR,
NOEXCEPT_EXPR,
# 267 "../../gcc/cp/cp-tree.def"
NON_DEPENDENT_EXPR,



CTOR_INITIALIZER,

TRY_BLOCK,

EH_SPEC_BLOCK,





HANDLER,




MUST_NOT_THROW_EXPR,




CLEANUP_STMT,





IF_STMT,



FOR_STMT,




RANGE_FOR_STMT,



WHILE_STMT,



DO_STMT,


BREAK_STMT,


CONTINUE_STMT,




SWITCH_STMT,



EXPR_STMT,

TAG_DEFN,


OFFSETOF_EXPR,




ADDRESSOF_EXPR,


ARROW_EXPR,



ALIGNOF_EXPR,



AT_ENCODE_EXPR,




STMT_EXPR,



UNARY_PLUS_EXPR,







STATIC_ASSERT,
# 386 "../../gcc/cp/cp-tree.def"
TYPE_ARGUMENT_PACK,
# 395 "../../gcc/cp/cp-tree.def"
NONTYPE_ARGUMENT_PACK,
# 418 "../../gcc/cp/cp-tree.def"
TYPE_PACK_EXPANSION,






EXPR_PACK_EXPANSION,
# 437 "../../gcc/cp/cp-tree.def"
ARGUMENT_PACK_SELECT,
# 453 "../../gcc/cp/cp-tree.def"
UNARY_LEFT_FOLD_EXPR,
UNARY_RIGHT_FOLD_EXPR,
BINARY_LEFT_FOLD_EXPR,
BINARY_RIGHT_FOLD_EXPR,





TRAIT_EXPR,
# 472 "../../gcc/cp/cp-tree.def"
LAMBDA_EXPR,
# 481 "../../gcc/cp/cp-tree.def"
DECLTYPE_TYPE,



UNDERLYING_TYPE,



BASES,
# 499 "../../gcc/cp/cp-tree.def"
TEMPLATE_INFO,




CONSTRAINT_INFO,





WILDCARD_DECL,





REQUIRES_EXPR,


SIMPLE_REQ,


TYPE_REQ,





COMPOUND_REQ,


NESTED_REQ,
# 540 "../../gcc/cp/cp-tree.def"
PRED_CONSTR,







CHECK_CONSTR,




EXPR_CONSTR,




TYPE_CONSTR,
# 567 "../../gcc/cp/cp-tree.def"
ICONV_CONSTR,
# 576 "../../gcc/cp/cp-tree.def"
DEDUCT_CONSTR,





EXCEPT_CONSTR,






PARM_CONSTR,



CONJ_CONSTR,
DISJ_CONSTR,
# 6 "./all-tree.def" 2
# 1 "../../gcc/objc/objc-tree.def" 1
# 24 "../../gcc/objc/objc-tree.def"
CLASS_INTERFACE_TYPE,
CLASS_IMPLEMENTATION_TYPE,

CATEGORY_INTERFACE_TYPE,
CATEGORY_IMPLEMENTATION_TYPE,

PROTOCOL_INTERFACE_TYPE,


KEYWORD_DECL,
INSTANCE_METHOD_DECL,
CLASS_METHOD_DECL,
PROPERTY_DECL,


MESSAGE_SEND_EXPR,
CLASS_REFERENCE_EXPR,
# 70 "../../gcc/objc/objc-tree.def"
PROPERTY_REF,
# 6 "./all-tree.def" 2
# 136 "../../gcc/tree-core.h" 2
MAX_TREE_CODES
};
# 152 "../../gcc/tree-core.h"
enum built_in_class {
  NOT_BUILT_IN = 0,
  BUILT_IN_FRONTEND,
  BUILT_IN_MD,
  BUILT_IN_NORMAL
};
# 166 "../../gcc/tree-core.h"
enum built_in_function {
# 1 "../../gcc/builtins.def" 1
# 302 "../../gcc/builtins.def"
BUILT_IN_NONE,


BUILT_IN_ACOS,
BUILT_IN_ACOSF,
BUILT_IN_ACOSH,
BUILT_IN_ACOSHF,
BUILT_IN_ACOSHL,
BUILT_IN_ACOSL,
BUILT_IN_ALIGNED_ALLOC,
BUILT_IN_ASIN,
BUILT_IN_ASINF,
BUILT_IN_ASINH,
BUILT_IN_ASINHF,
BUILT_IN_ASINHL,
BUILT_IN_ASINL,
BUILT_IN_ATAN,
BUILT_IN_ATAN2,
BUILT_IN_ATAN2F,
BUILT_IN_ATAN2L,
BUILT_IN_ATANF,
BUILT_IN_ATANH,
BUILT_IN_ATANHF,
BUILT_IN_ATANHL,
BUILT_IN_ATANL,
BUILT_IN_CBRT,
BUILT_IN_CBRTF,
BUILT_IN_CBRTL,
BUILT_IN_CEIL,
BUILT_IN_CEILF,
BUILT_IN_CEILL,

BUILT_IN_CEILF16, BUILT_IN_CEILF32, BUILT_IN_CEILF64, BUILT_IN_CEILF128, BUILT_IN_CEILF32X, BUILT_IN_CEILF64X, BUILT_IN_CEILF128X,

BUILT_IN_COPYSIGN,
BUILT_IN_COPYSIGNF,
BUILT_IN_COPYSIGNL,

BUILT_IN_COPYSIGNF16, BUILT_IN_COPYSIGNF32, BUILT_IN_COPYSIGNF64, BUILT_IN_COPYSIGNF128, BUILT_IN_COPYSIGNF32X, BUILT_IN_COPYSIGNF64X, BUILT_IN_COPYSIGNF128X,

BUILT_IN_COS,
BUILT_IN_COSF,
BUILT_IN_COSH,
BUILT_IN_COSHF,
BUILT_IN_COSHL,
BUILT_IN_COSL,
BUILT_IN_DREM,
BUILT_IN_DREMF,
BUILT_IN_DREML,
BUILT_IN_ERF,
BUILT_IN_ERFC,
BUILT_IN_ERFCF,
BUILT_IN_ERFCL,
BUILT_IN_ERFF,
BUILT_IN_ERFL,
BUILT_IN_EXP,
BUILT_IN_EXP10,
BUILT_IN_EXP10F,
BUILT_IN_EXP10L,
BUILT_IN_EXP2,
BUILT_IN_EXP2F,
BUILT_IN_EXP2L,
BUILT_IN_EXPF,
BUILT_IN_EXPL,
BUILT_IN_EXPM1,
BUILT_IN_EXPM1F,
BUILT_IN_EXPM1L,
BUILT_IN_FABS,
BUILT_IN_FABSF,
BUILT_IN_FABSL,

BUILT_IN_FABSF16, BUILT_IN_FABSF32, BUILT_IN_FABSF64, BUILT_IN_FABSF128, BUILT_IN_FABSF32X, BUILT_IN_FABSF64X, BUILT_IN_FABSF128X,

BUILT_IN_FABSD32,
BUILT_IN_FABSD64,
BUILT_IN_FABSD128,
BUILT_IN_FDIM,
BUILT_IN_FDIMF,
BUILT_IN_FDIML,
BUILT_IN_FECLEAREXCEPT,
BUILT_IN_FEGETENV,
BUILT_IN_FEGETEXCEPTFLAG,
BUILT_IN_FEGETROUND,
BUILT_IN_FEHOLDEXCEPT,
BUILT_IN_FERAISEEXCEPT,
BUILT_IN_FESETENV,
BUILT_IN_FESETEXCEPTFLAG,
BUILT_IN_FESETROUND,
BUILT_IN_FETESTEXCEPT,
BUILT_IN_FEUPDATEENV,
BUILT_IN_FLOOR,
BUILT_IN_FLOORF,
BUILT_IN_FLOORL,

BUILT_IN_FLOORF16, BUILT_IN_FLOORF32, BUILT_IN_FLOORF64, BUILT_IN_FLOORF128, BUILT_IN_FLOORF32X, BUILT_IN_FLOORF64X, BUILT_IN_FLOORF128X,

BUILT_IN_FMA,
BUILT_IN_FMAF,
BUILT_IN_FMAL,

BUILT_IN_FMAF16, BUILT_IN_FMAF32, BUILT_IN_FMAF64, BUILT_IN_FMAF128, BUILT_IN_FMAF32X, BUILT_IN_FMAF64X, BUILT_IN_FMAF128X,

BUILT_IN_FMAX,
BUILT_IN_FMAXF,
BUILT_IN_FMAXL,

BUILT_IN_FMAXF16, BUILT_IN_FMAXF32, BUILT_IN_FMAXF64, BUILT_IN_FMAXF128, BUILT_IN_FMAXF32X, BUILT_IN_FMAXF64X, BUILT_IN_FMAXF128X,

BUILT_IN_FMIN,
BUILT_IN_FMINF,
BUILT_IN_FMINL,

BUILT_IN_FMINF16, BUILT_IN_FMINF32, BUILT_IN_FMINF64, BUILT_IN_FMINF128, BUILT_IN_FMINF32X, BUILT_IN_FMINF64X, BUILT_IN_FMINF128X,

BUILT_IN_FMOD,
BUILT_IN_FMODF,
BUILT_IN_FMODL,
BUILT_IN_FREXP,
BUILT_IN_FREXPF,
BUILT_IN_FREXPL,
BUILT_IN_GAMMA,
BUILT_IN_GAMMAF,
BUILT_IN_GAMMAL,
BUILT_IN_GAMMA_R,
BUILT_IN_GAMMAF_R,
BUILT_IN_GAMMAL_R,
BUILT_IN_HUGE_VAL,
BUILT_IN_HUGE_VALF,
BUILT_IN_HUGE_VALL,

BUILT_IN_HUGE_VALF16, BUILT_IN_HUGE_VALF32, BUILT_IN_HUGE_VALF64, BUILT_IN_HUGE_VALF128, BUILT_IN_HUGE_VALF32X, BUILT_IN_HUGE_VALF64X, BUILT_IN_HUGE_VALF128X,
BUILT_IN_HYPOT,
BUILT_IN_HYPOTF,
BUILT_IN_HYPOTL,
BUILT_IN_ICEIL,
BUILT_IN_ICEILF,
BUILT_IN_ICEILL,
BUILT_IN_IFLOOR,
BUILT_IN_IFLOORF,
BUILT_IN_IFLOORL,
BUILT_IN_ILOGB,
BUILT_IN_ILOGBF,
BUILT_IN_ILOGBL,
BUILT_IN_INF,
BUILT_IN_INFF,
BUILT_IN_INFL,
BUILT_IN_INFF16, BUILT_IN_INFF32, BUILT_IN_INFF64, BUILT_IN_INFF128, BUILT_IN_INFF32X, BUILT_IN_INFF64X, BUILT_IN_INFF128X,

BUILT_IN_INFD32,
BUILT_IN_INFD64,
BUILT_IN_INFD128,
BUILT_IN_IRINT,
BUILT_IN_IRINTF,
BUILT_IN_IRINTL,
BUILT_IN_IROUND,
BUILT_IN_IROUNDF,
BUILT_IN_IROUNDL,
BUILT_IN_J0,
BUILT_IN_J0F,
BUILT_IN_J0L,
BUILT_IN_J1,
BUILT_IN_J1F,
BUILT_IN_J1L,
BUILT_IN_JN,
BUILT_IN_JNF,
BUILT_IN_JNL,
BUILT_IN_LCEIL,
BUILT_IN_LCEILF,
BUILT_IN_LCEILL,
BUILT_IN_LDEXP,
BUILT_IN_LDEXPF,
BUILT_IN_LDEXPL,
BUILT_IN_LFLOOR,
BUILT_IN_LFLOORF,
BUILT_IN_LFLOORL,
BUILT_IN_LGAMMA,
BUILT_IN_LGAMMAF,
BUILT_IN_LGAMMAL,
BUILT_IN_LGAMMA_R,
BUILT_IN_LGAMMAF_R,
BUILT_IN_LGAMMAL_R,
BUILT_IN_LLCEIL,
BUILT_IN_LLCEILF,
BUILT_IN_LLCEILL,
BUILT_IN_LLFLOOR,
BUILT_IN_LLFLOORF,
BUILT_IN_LLFLOORL,
BUILT_IN_LLRINT,
BUILT_IN_LLRINTF,
BUILT_IN_LLRINTL,
BUILT_IN_LLROUND,
BUILT_IN_LLROUNDF,
BUILT_IN_LLROUNDL,
BUILT_IN_LOG,
BUILT_IN_LOG10,
BUILT_IN_LOG10F,
BUILT_IN_LOG10L,
BUILT_IN_LOG1P,
BUILT_IN_LOG1PF,
BUILT_IN_LOG1PL,
BUILT_IN_LOG2,
BUILT_IN_LOG2F,
BUILT_IN_LOG2L,
BUILT_IN_LOGB,
BUILT_IN_LOGBF,
BUILT_IN_LOGBL,
BUILT_IN_LOGF,
BUILT_IN_LOGL,
BUILT_IN_LRINT,
BUILT_IN_LRINTF,
BUILT_IN_LRINTL,
BUILT_IN_LROUND,
BUILT_IN_LROUNDF,
BUILT_IN_LROUNDL,
BUILT_IN_MODF,
BUILT_IN_MODFF,
BUILT_IN_MODFL,
BUILT_IN_NAN,
BUILT_IN_NANF,
BUILT_IN_NANL,

BUILT_IN_NANF16, BUILT_IN_NANF32, BUILT_IN_NANF64, BUILT_IN_NANF128, BUILT_IN_NANF32X, BUILT_IN_NANF64X, BUILT_IN_NANF128X,
BUILT_IN_NAND32,
BUILT_IN_NAND64,
BUILT_IN_NAND128,
BUILT_IN_NANS,
BUILT_IN_NANSF,
BUILT_IN_NANSL,
BUILT_IN_NANSF16, BUILT_IN_NANSF32, BUILT_IN_NANSF64, BUILT_IN_NANSF128, BUILT_IN_NANSF32X, BUILT_IN_NANSF64X, BUILT_IN_NANSF128X,

BUILT_IN_NEARBYINT,
BUILT_IN_NEARBYINTF,
BUILT_IN_NEARBYINTL,

BUILT_IN_NEARBYINTF16, BUILT_IN_NEARBYINTF32, BUILT_IN_NEARBYINTF64, BUILT_IN_NEARBYINTF128, BUILT_IN_NEARBYINTF32X, BUILT_IN_NEARBYINTF64X, BUILT_IN_NEARBYINTF128X,

BUILT_IN_NEXTAFTER,
BUILT_IN_NEXTAFTERF,
BUILT_IN_NEXTAFTERL,
BUILT_IN_NEXTTOWARD,
BUILT_IN_NEXTTOWARDF,
BUILT_IN_NEXTTOWARDL,
BUILT_IN_POW,
BUILT_IN_POW10,
BUILT_IN_POW10F,
BUILT_IN_POW10L,
BUILT_IN_POWF,
BUILT_IN_POWI,
BUILT_IN_POWIF,
BUILT_IN_POWIL,
BUILT_IN_POWL,
BUILT_IN_REMAINDER,
BUILT_IN_REMAINDERF,
BUILT_IN_REMAINDERL,
BUILT_IN_REMQUO,
BUILT_IN_REMQUOF,
BUILT_IN_REMQUOL,
BUILT_IN_RINT,
BUILT_IN_RINTF,
BUILT_IN_RINTL,

BUILT_IN_RINTF16, BUILT_IN_RINTF32, BUILT_IN_RINTF64, BUILT_IN_RINTF128, BUILT_IN_RINTF32X, BUILT_IN_RINTF64X, BUILT_IN_RINTF128X,

BUILT_IN_ROUND,
BUILT_IN_ROUNDF,
BUILT_IN_ROUNDL,

BUILT_IN_ROUNDF16, BUILT_IN_ROUNDF32, BUILT_IN_ROUNDF64, BUILT_IN_ROUNDF128, BUILT_IN_ROUNDF32X, BUILT_IN_ROUNDF64X, BUILT_IN_ROUNDF128X,

BUILT_IN_SCALB,
BUILT_IN_SCALBF,
BUILT_IN_SCALBL,
BUILT_IN_SCALBLN,
BUILT_IN_SCALBLNF,
BUILT_IN_SCALBLNL,
BUILT_IN_SCALBN,
BUILT_IN_SCALBNF,
BUILT_IN_SCALBNL,
BUILT_IN_SIGNBIT,
BUILT_IN_SIGNBITF,
BUILT_IN_SIGNBITL,
BUILT_IN_SIGNBITD32,
BUILT_IN_SIGNBITD64,
BUILT_IN_SIGNBITD128,
BUILT_IN_SIGNIFICAND,
BUILT_IN_SIGNIFICANDF,
BUILT_IN_SIGNIFICANDL,
BUILT_IN_SIN,
BUILT_IN_SINCOS,
BUILT_IN_SINCOSF,
BUILT_IN_SINCOSL,
BUILT_IN_SINF,
BUILT_IN_SINH,
BUILT_IN_SINHF,
BUILT_IN_SINHL,
BUILT_IN_SINL,
BUILT_IN_SQRT,
BUILT_IN_SQRTF,
BUILT_IN_SQRTL,

BUILT_IN_SQRTF16, BUILT_IN_SQRTF32, BUILT_IN_SQRTF64, BUILT_IN_SQRTF128, BUILT_IN_SQRTF32X, BUILT_IN_SQRTF64X, BUILT_IN_SQRTF128X,

BUILT_IN_TAN,
BUILT_IN_TANF,
BUILT_IN_TANH,
BUILT_IN_TANHF,
BUILT_IN_TANHL,
BUILT_IN_TANL,
BUILT_IN_TGAMMA,
BUILT_IN_TGAMMAF,
BUILT_IN_TGAMMAL,
BUILT_IN_TRUNC,
BUILT_IN_TRUNCF,
BUILT_IN_TRUNCL,

BUILT_IN_TRUNCF16, BUILT_IN_TRUNCF32, BUILT_IN_TRUNCF64, BUILT_IN_TRUNCF128, BUILT_IN_TRUNCF32X, BUILT_IN_TRUNCF64X, BUILT_IN_TRUNCF128X,

BUILT_IN_Y0,
BUILT_IN_Y0F,
BUILT_IN_Y0L,
BUILT_IN_Y1,
BUILT_IN_Y1F,
BUILT_IN_Y1L,
BUILT_IN_YN,
BUILT_IN_YNF,
BUILT_IN_YNL,


BUILT_IN_CABS,
BUILT_IN_CABSF,
BUILT_IN_CABSL,
BUILT_IN_CACOS,
BUILT_IN_CACOSF,
BUILT_IN_CACOSH,
BUILT_IN_CACOSHF,
BUILT_IN_CACOSHL,
BUILT_IN_CACOSL,
BUILT_IN_CARG,
BUILT_IN_CARGF,
BUILT_IN_CARGL,
BUILT_IN_CASIN,
BUILT_IN_CASINF,
BUILT_IN_CASINH,
BUILT_IN_CASINHF,
BUILT_IN_CASINHL,
BUILT_IN_CASINL,
BUILT_IN_CATAN,
BUILT_IN_CATANF,
BUILT_IN_CATANH,
BUILT_IN_CATANHF,
BUILT_IN_CATANHL,
BUILT_IN_CATANL,
BUILT_IN_CCOS,
BUILT_IN_CCOSF,
BUILT_IN_CCOSH,
BUILT_IN_CCOSHF,
BUILT_IN_CCOSHL,
BUILT_IN_CCOSL,
BUILT_IN_CEXP,
BUILT_IN_CEXPF,
BUILT_IN_CEXPL,
BUILT_IN_CEXPI,
BUILT_IN_CEXPIF,
BUILT_IN_CEXPIL,
BUILT_IN_CIMAG,
BUILT_IN_CIMAGF,
BUILT_IN_CIMAGL,
BUILT_IN_CLOG,
BUILT_IN_CLOGF,
BUILT_IN_CLOGL,
BUILT_IN_CLOG10,
BUILT_IN_CLOG10F,
BUILT_IN_CLOG10L,
BUILT_IN_CONJ,
BUILT_IN_CONJF,
BUILT_IN_CONJL,
BUILT_IN_CPOW,
BUILT_IN_CPOWF,
BUILT_IN_CPOWL,
BUILT_IN_CPROJ,
BUILT_IN_CPROJF,
BUILT_IN_CPROJL,
BUILT_IN_CREAL,
BUILT_IN_CREALF,
BUILT_IN_CREALL,
BUILT_IN_CSIN,
BUILT_IN_CSINF,
BUILT_IN_CSINH,
BUILT_IN_CSINHF,
BUILT_IN_CSINHL,
BUILT_IN_CSINL,
BUILT_IN_CSQRT,
BUILT_IN_CSQRTF,
BUILT_IN_CSQRTL,
BUILT_IN_CTAN,
BUILT_IN_CTANF,
BUILT_IN_CTANH,
BUILT_IN_CTANHF,
BUILT_IN_CTANHL,
BUILT_IN_CTANL,




BUILT_IN_BCMP,
BUILT_IN_BCOPY,
BUILT_IN_BZERO,
BUILT_IN_INDEX,
BUILT_IN_MEMCHR,
BUILT_IN_MEMCMP,
BUILT_IN_MEMCPY,
BUILT_IN_MEMMOVE,
BUILT_IN_MEMPCPY,
BUILT_IN_MEMSET,
BUILT_IN_RINDEX,
BUILT_IN_STPCPY,
BUILT_IN_STPNCPY,
BUILT_IN_STRCASECMP,
BUILT_IN_STRCAT,
BUILT_IN_STRCHR,
BUILT_IN_STRCMP,
BUILT_IN_STRCPY,
BUILT_IN_STRCSPN,
BUILT_IN_STRDUP,
BUILT_IN_STRNDUP,
BUILT_IN_STRLEN,
BUILT_IN_STRNCASECMP,
BUILT_IN_STRNCAT,
BUILT_IN_STRNCMP,
BUILT_IN_STRNCPY,
BUILT_IN_STRPBRK,
BUILT_IN_STRRCHR,
BUILT_IN_STRSPN,
BUILT_IN_STRSTR,


BUILT_IN_FPRINTF,
BUILT_IN_FPRINTF_UNLOCKED,
BUILT_IN_PUTC,
BUILT_IN_PUTC_UNLOCKED,
BUILT_IN_FPUTC,
BUILT_IN_FPUTC_UNLOCKED,
BUILT_IN_FPUTS,
BUILT_IN_FPUTS_UNLOCKED,
BUILT_IN_FSCANF,
BUILT_IN_FWRITE,
BUILT_IN_FWRITE_UNLOCKED,
BUILT_IN_PRINTF,
BUILT_IN_PRINTF_UNLOCKED,
BUILT_IN_PUTCHAR,
BUILT_IN_PUTCHAR_UNLOCKED,
BUILT_IN_PUTS,
BUILT_IN_PUTS_UNLOCKED,
BUILT_IN_SCANF,
BUILT_IN_SNPRINTF,

BUILT_IN_SPRINTF,
BUILT_IN_SSCANF,
BUILT_IN_VFPRINTF,
BUILT_IN_VFSCANF,
BUILT_IN_VPRINTF,
BUILT_IN_VSCANF,
BUILT_IN_VSNPRINTF,
BUILT_IN_VSPRINTF,
BUILT_IN_VSSCANF,


BUILT_IN_ISALNUM,
BUILT_IN_ISALPHA,
BUILT_IN_ISASCII,
BUILT_IN_ISBLANK,
BUILT_IN_ISCNTRL,
BUILT_IN_ISDIGIT,
BUILT_IN_ISGRAPH,
BUILT_IN_ISLOWER,
BUILT_IN_ISPRINT,
BUILT_IN_ISPUNCT,
BUILT_IN_ISSPACE,
BUILT_IN_ISUPPER,
BUILT_IN_ISXDIGIT,
BUILT_IN_TOASCII,
BUILT_IN_TOLOWER,
BUILT_IN_TOUPPER,


BUILT_IN_ISWALNUM,
BUILT_IN_ISWALPHA,
BUILT_IN_ISWBLANK,
BUILT_IN_ISWCNTRL,
BUILT_IN_ISWDIGIT,
BUILT_IN_ISWGRAPH,
BUILT_IN_ISWLOWER,
BUILT_IN_ISWPRINT,
BUILT_IN_ISWPUNCT,
BUILT_IN_ISWSPACE,
BUILT_IN_ISWUPPER,
BUILT_IN_ISWXDIGIT,
BUILT_IN_TOWLOWER,
BUILT_IN_TOWUPPER,


BUILT_IN_ADD_OVERFLOW,
BUILT_IN_SUB_OVERFLOW,
BUILT_IN_MUL_OVERFLOW,
BUILT_IN_ADD_OVERFLOW_P,
BUILT_IN_SUB_OVERFLOW_P,
BUILT_IN_MUL_OVERFLOW_P,

BUILT_IN_SADD_OVERFLOW,
BUILT_IN_SADDL_OVERFLOW,
BUILT_IN_SADDLL_OVERFLOW,
BUILT_IN_SSUB_OVERFLOW,
BUILT_IN_SSUBL_OVERFLOW,
BUILT_IN_SSUBLL_OVERFLOW,
BUILT_IN_SMUL_OVERFLOW,
BUILT_IN_SMULL_OVERFLOW,
BUILT_IN_SMULLL_OVERFLOW,
BUILT_IN_UADD_OVERFLOW,
BUILT_IN_UADDL_OVERFLOW,
BUILT_IN_UADDLL_OVERFLOW,
BUILT_IN_USUB_OVERFLOW,
BUILT_IN_USUBL_OVERFLOW,
BUILT_IN_USUBLL_OVERFLOW,
BUILT_IN_UMUL_OVERFLOW,
BUILT_IN_UMULL_OVERFLOW,
BUILT_IN_UMULLL_OVERFLOW,


BUILT_IN_ABORT,
BUILT_IN_ABS,
BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
BUILT_IN_ALLOCA,
BUILT_IN_APPLY,
BUILT_IN_APPLY_ARGS,
BUILT_IN_BSWAP16,
BUILT_IN_BSWAP32,
BUILT_IN_BSWAP64,
BUILT_IN_CLEAR_CACHE,

BUILT_IN_CALLOC,
BUILT_IN_CLASSIFY_TYPE,
BUILT_IN_CLZ,
BUILT_IN_CLZIMAX,
BUILT_IN_CLZL,
BUILT_IN_CLZLL,
BUILT_IN_CONSTANT_P,
BUILT_IN_CTZ,
BUILT_IN_CTZIMAX,
BUILT_IN_CTZL,
BUILT_IN_CTZLL,
BUILT_IN_CLRSB,
BUILT_IN_CLRSBIMAX,
BUILT_IN_CLRSBL,
BUILT_IN_CLRSBLL,
BUILT_IN_DCGETTEXT,
BUILT_IN_DGETTEXT,
BUILT_IN_DWARF_CFA,
BUILT_IN_DWARF_SP_COLUMN,
BUILT_IN_EH_RETURN,
BUILT_IN_EH_RETURN_DATA_REGNO,
BUILT_IN_EXECL,
BUILT_IN_EXECLP,
BUILT_IN_EXECLE,
BUILT_IN_EXECV,
BUILT_IN_EXECVP,
BUILT_IN_EXECVE,
BUILT_IN_EXIT,
BUILT_IN_EXPECT,
BUILT_IN_ASSUME_ALIGNED,
BUILT_IN_EXTEND_POINTER,
BUILT_IN_EXTRACT_RETURN_ADDR,
BUILT_IN_FFS,
BUILT_IN_FFSIMAX,
BUILT_IN_FFSL,
BUILT_IN_FFSLL,
BUILT_IN_FORK,
BUILT_IN_FRAME_ADDRESS,

BUILT_IN_FREE,
BUILT_IN_FROB_RETURN_ADDR,
BUILT_IN_GETTEXT,
BUILT_IN_IMAXABS,
BUILT_IN_INIT_DWARF_REG_SIZES,
BUILT_IN_FINITE,
BUILT_IN_FINITEF,
BUILT_IN_FINITEL,
BUILT_IN_FINITED32,
BUILT_IN_FINITED64,
BUILT_IN_FINITED128,
BUILT_IN_FPCLASSIFY,
BUILT_IN_ISFINITE,
BUILT_IN_ISINF_SIGN,
BUILT_IN_ISINF,
BUILT_IN_ISINFF,
BUILT_IN_ISINFL,
BUILT_IN_ISINFD32,
BUILT_IN_ISINFD64,
BUILT_IN_ISINFD128,
BUILT_IN_ISNAN,
BUILT_IN_ISNANF,
BUILT_IN_ISNANL,
BUILT_IN_ISNAND32,
BUILT_IN_ISNAND64,
BUILT_IN_ISNAND128,
BUILT_IN_ISNORMAL,
BUILT_IN_ISGREATER,
BUILT_IN_ISGREATEREQUAL,
BUILT_IN_ISLESS,
BUILT_IN_ISLESSEQUAL,
BUILT_IN_ISLESSGREATER,
BUILT_IN_ISUNORDERED,
BUILT_IN_LABS,
BUILT_IN_LLABS,
BUILT_IN_LONGJMP,

BUILT_IN_MALLOC,
BUILT_IN_NEXT_ARG,
BUILT_IN_PARITY,
BUILT_IN_PARITYIMAX,
BUILT_IN_PARITYL,
BUILT_IN_PARITYLL,
BUILT_IN_POPCOUNT,
BUILT_IN_POPCOUNTIMAX,
BUILT_IN_POPCOUNTL,
BUILT_IN_POPCOUNTLL,
BUILT_IN_POSIX_MEMALIGN,
BUILT_IN_PREFETCH,
BUILT_IN_REALLOC,
BUILT_IN_RETURN,
BUILT_IN_RETURN_ADDRESS,
BUILT_IN_SAVEREGS,
BUILT_IN_SETJMP,
BUILT_IN_STRFMON,
BUILT_IN_STRFTIME,
BUILT_IN_TRAP,
BUILT_IN_UNREACHABLE,
BUILT_IN_UNWIND_INIT,
BUILT_IN_UPDATE_SETJMP_BUF,
BUILT_IN_VA_COPY,
BUILT_IN_VA_END,
BUILT_IN_VA_START,
BUILT_IN_VA_ARG_PACK,
BUILT_IN_VA_ARG_PACK_LEN,
BUILT_IN__EXIT,
BUILT_IN__EXIT2,


BUILT_IN_INIT_TRAMPOLINE,
BUILT_IN_INIT_HEAP_TRAMPOLINE,
BUILT_IN_ADJUST_TRAMPOLINE,
BUILT_IN_INIT_DESCRIPTOR,
BUILT_IN_ADJUST_DESCRIPTOR,
BUILT_IN_NONLOCAL_GOTO,


BUILT_IN_SETJMP_SETUP,
BUILT_IN_SETJMP_RECEIVER,


BUILT_IN_STACK_SAVE,
BUILT_IN_STACK_RESTORE,
BUILT_IN_ALLOCA_WITH_ALIGN,
BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX,



BUILT_IN_MEMCMP_EQ,


BUILT_IN_OBJECT_SIZE,
BUILT_IN_MEMCPY_CHK,
BUILT_IN_MEMMOVE_CHK,
BUILT_IN_MEMPCPY_CHK,
BUILT_IN_MEMSET_CHK,
BUILT_IN_STPCPY_CHK,
BUILT_IN_STPNCPY_CHK,
BUILT_IN_STRCAT_CHK,
BUILT_IN_STRCPY_CHK,
BUILT_IN_STRNCAT_CHK,
BUILT_IN_STRNCPY_CHK,
BUILT_IN_SNPRINTF_CHK,
BUILT_IN_SPRINTF_CHK,
BUILT_IN_VSNPRINTF_CHK,
BUILT_IN_VSPRINTF_CHK,
BUILT_IN_FPRINTF_CHK,
BUILT_IN_PRINTF_CHK,
BUILT_IN_VFPRINTF_CHK,
BUILT_IN_VPRINTF_CHK,


BUILT_IN_PROFILE_FUNC_ENTER,

BUILT_IN_PROFILE_FUNC_EXIT,



BUILT_IN_THREAD_POINTER,




BUILT_IN_SET_THREAD_POINTER,





BUILT_IN_EMUTLS_GET_ADDRESS,




BUILT_IN_EMUTLS_REGISTER_COMMON,






BUILT_IN_UNWIND_RESUME,
BUILT_IN_CXA_END_CLEANUP,
BUILT_IN_EH_POINTER,
BUILT_IN_EH_FILTER,
BUILT_IN_EH_COPY_VALUES,


BUILT_IN_FILE,
BUILT_IN_FUNCTION,
BUILT_IN_LINE,


# 1 "../../gcc/sync-builtins.def" 1
# 31 "../../gcc/sync-builtins.def"
BUILT_IN_SYNC_FETCH_AND_ADD_N,

BUILT_IN_SYNC_FETCH_AND_ADD_1,

BUILT_IN_SYNC_FETCH_AND_ADD_2,

BUILT_IN_SYNC_FETCH_AND_ADD_4,

BUILT_IN_SYNC_FETCH_AND_ADD_8,

BUILT_IN_SYNC_FETCH_AND_ADD_16,


BUILT_IN_SYNC_FETCH_AND_SUB_N,

BUILT_IN_SYNC_FETCH_AND_SUB_1,

BUILT_IN_SYNC_FETCH_AND_SUB_2,

BUILT_IN_SYNC_FETCH_AND_SUB_4,

BUILT_IN_SYNC_FETCH_AND_SUB_8,

BUILT_IN_SYNC_FETCH_AND_SUB_16,


BUILT_IN_SYNC_FETCH_AND_OR_N,

BUILT_IN_SYNC_FETCH_AND_OR_1,

BUILT_IN_SYNC_FETCH_AND_OR_2,

BUILT_IN_SYNC_FETCH_AND_OR_4,

BUILT_IN_SYNC_FETCH_AND_OR_8,

BUILT_IN_SYNC_FETCH_AND_OR_16,


BUILT_IN_SYNC_FETCH_AND_AND_N,

BUILT_IN_SYNC_FETCH_AND_AND_1,

BUILT_IN_SYNC_FETCH_AND_AND_2,

BUILT_IN_SYNC_FETCH_AND_AND_4,

BUILT_IN_SYNC_FETCH_AND_AND_8,

BUILT_IN_SYNC_FETCH_AND_AND_16,


BUILT_IN_SYNC_FETCH_AND_XOR_N,

BUILT_IN_SYNC_FETCH_AND_XOR_1,

BUILT_IN_SYNC_FETCH_AND_XOR_2,

BUILT_IN_SYNC_FETCH_AND_XOR_4,

BUILT_IN_SYNC_FETCH_AND_XOR_8,

BUILT_IN_SYNC_FETCH_AND_XOR_16,


BUILT_IN_SYNC_FETCH_AND_NAND_N,

BUILT_IN_SYNC_FETCH_AND_NAND_1,

BUILT_IN_SYNC_FETCH_AND_NAND_2,

BUILT_IN_SYNC_FETCH_AND_NAND_4,

BUILT_IN_SYNC_FETCH_AND_NAND_8,

BUILT_IN_SYNC_FETCH_AND_NAND_16,


BUILT_IN_SYNC_ADD_AND_FETCH_N,

BUILT_IN_SYNC_ADD_AND_FETCH_1,

BUILT_IN_SYNC_ADD_AND_FETCH_2,

BUILT_IN_SYNC_ADD_AND_FETCH_4,

BUILT_IN_SYNC_ADD_AND_FETCH_8,

BUILT_IN_SYNC_ADD_AND_FETCH_16,


BUILT_IN_SYNC_SUB_AND_FETCH_N,

BUILT_IN_SYNC_SUB_AND_FETCH_1,

BUILT_IN_SYNC_SUB_AND_FETCH_2,

BUILT_IN_SYNC_SUB_AND_FETCH_4,

BUILT_IN_SYNC_SUB_AND_FETCH_8,

BUILT_IN_SYNC_SUB_AND_FETCH_16,


BUILT_IN_SYNC_OR_AND_FETCH_N,

BUILT_IN_SYNC_OR_AND_FETCH_1,

BUILT_IN_SYNC_OR_AND_FETCH_2,

BUILT_IN_SYNC_OR_AND_FETCH_4,

BUILT_IN_SYNC_OR_AND_FETCH_8,

BUILT_IN_SYNC_OR_AND_FETCH_16,


BUILT_IN_SYNC_AND_AND_FETCH_N,

BUILT_IN_SYNC_AND_AND_FETCH_1,

BUILT_IN_SYNC_AND_AND_FETCH_2,

BUILT_IN_SYNC_AND_AND_FETCH_4,

BUILT_IN_SYNC_AND_AND_FETCH_8,

BUILT_IN_SYNC_AND_AND_FETCH_16,


BUILT_IN_SYNC_XOR_AND_FETCH_N,

BUILT_IN_SYNC_XOR_AND_FETCH_1,

BUILT_IN_SYNC_XOR_AND_FETCH_2,

BUILT_IN_SYNC_XOR_AND_FETCH_4,

BUILT_IN_SYNC_XOR_AND_FETCH_8,

BUILT_IN_SYNC_XOR_AND_FETCH_16,


BUILT_IN_SYNC_NAND_AND_FETCH_N,

BUILT_IN_SYNC_NAND_AND_FETCH_1,

BUILT_IN_SYNC_NAND_AND_FETCH_2,

BUILT_IN_SYNC_NAND_AND_FETCH_4,

BUILT_IN_SYNC_NAND_AND_FETCH_8,

BUILT_IN_SYNC_NAND_AND_FETCH_16,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16,



BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16,



BUILT_IN_SYNC_LOCK_TEST_AND_SET_N,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_1,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_2,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_4,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_8,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_16,



BUILT_IN_SYNC_LOCK_RELEASE_N,

BUILT_IN_SYNC_LOCK_RELEASE_1,

BUILT_IN_SYNC_LOCK_RELEASE_2,

BUILT_IN_SYNC_LOCK_RELEASE_4,

BUILT_IN_SYNC_LOCK_RELEASE_8,

BUILT_IN_SYNC_LOCK_RELEASE_16,


BUILT_IN_SYNC_SYNCHRONIZE,




BUILT_IN_ATOMIC_TEST_AND_SET,


BUILT_IN_ATOMIC_CLEAR,


BUILT_IN_ATOMIC_EXCHANGE,


BUILT_IN_ATOMIC_EXCHANGE_N,


BUILT_IN_ATOMIC_EXCHANGE_1,


BUILT_IN_ATOMIC_EXCHANGE_2,


BUILT_IN_ATOMIC_EXCHANGE_4,


BUILT_IN_ATOMIC_EXCHANGE_8,


BUILT_IN_ATOMIC_EXCHANGE_16,



BUILT_IN_ATOMIC_LOAD,



BUILT_IN_ATOMIC_LOAD_N,


BUILT_IN_ATOMIC_LOAD_1,


BUILT_IN_ATOMIC_LOAD_2,


BUILT_IN_ATOMIC_LOAD_4,


BUILT_IN_ATOMIC_LOAD_8,


BUILT_IN_ATOMIC_LOAD_16,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N,


BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16,




BUILT_IN_ATOMIC_STORE,


BUILT_IN_ATOMIC_STORE_N,


BUILT_IN_ATOMIC_STORE_1,


BUILT_IN_ATOMIC_STORE_2,


BUILT_IN_ATOMIC_STORE_4,


BUILT_IN_ATOMIC_STORE_8,


BUILT_IN_ATOMIC_STORE_16,



BUILT_IN_ATOMIC_ADD_FETCH_N,


BUILT_IN_ATOMIC_ADD_FETCH_1,


BUILT_IN_ATOMIC_ADD_FETCH_2,


BUILT_IN_ATOMIC_ADD_FETCH_4,


BUILT_IN_ATOMIC_ADD_FETCH_8,


BUILT_IN_ATOMIC_ADD_FETCH_16,



BUILT_IN_ATOMIC_SUB_FETCH_N,


BUILT_IN_ATOMIC_SUB_FETCH_1,


BUILT_IN_ATOMIC_SUB_FETCH_2,


BUILT_IN_ATOMIC_SUB_FETCH_4,


BUILT_IN_ATOMIC_SUB_FETCH_8,


BUILT_IN_ATOMIC_SUB_FETCH_16,



BUILT_IN_ATOMIC_AND_FETCH_N,


BUILT_IN_ATOMIC_AND_FETCH_1,


BUILT_IN_ATOMIC_AND_FETCH_2,


BUILT_IN_ATOMIC_AND_FETCH_4,


BUILT_IN_ATOMIC_AND_FETCH_8,


BUILT_IN_ATOMIC_AND_FETCH_16,



BUILT_IN_ATOMIC_NAND_FETCH_N,


BUILT_IN_ATOMIC_NAND_FETCH_1,


BUILT_IN_ATOMIC_NAND_FETCH_2,


BUILT_IN_ATOMIC_NAND_FETCH_4,


BUILT_IN_ATOMIC_NAND_FETCH_8,


BUILT_IN_ATOMIC_NAND_FETCH_16,



BUILT_IN_ATOMIC_XOR_FETCH_N,


BUILT_IN_ATOMIC_XOR_FETCH_1,


BUILT_IN_ATOMIC_XOR_FETCH_2,


BUILT_IN_ATOMIC_XOR_FETCH_4,


BUILT_IN_ATOMIC_XOR_FETCH_8,


BUILT_IN_ATOMIC_XOR_FETCH_16,



BUILT_IN_ATOMIC_OR_FETCH_N,


BUILT_IN_ATOMIC_OR_FETCH_1,


BUILT_IN_ATOMIC_OR_FETCH_2,


BUILT_IN_ATOMIC_OR_FETCH_4,


BUILT_IN_ATOMIC_OR_FETCH_8,


BUILT_IN_ATOMIC_OR_FETCH_16,



BUILT_IN_ATOMIC_FETCH_ADD_N,


BUILT_IN_ATOMIC_FETCH_ADD_1,


BUILT_IN_ATOMIC_FETCH_ADD_2,


BUILT_IN_ATOMIC_FETCH_ADD_4,


BUILT_IN_ATOMIC_FETCH_ADD_8,


BUILT_IN_ATOMIC_FETCH_ADD_16,



BUILT_IN_ATOMIC_FETCH_SUB_N,


BUILT_IN_ATOMIC_FETCH_SUB_1,


BUILT_IN_ATOMIC_FETCH_SUB_2,


BUILT_IN_ATOMIC_FETCH_SUB_4,


BUILT_IN_ATOMIC_FETCH_SUB_8,


BUILT_IN_ATOMIC_FETCH_SUB_16,



BUILT_IN_ATOMIC_FETCH_AND_N,


BUILT_IN_ATOMIC_FETCH_AND_1,


BUILT_IN_ATOMIC_FETCH_AND_2,


BUILT_IN_ATOMIC_FETCH_AND_4,


BUILT_IN_ATOMIC_FETCH_AND_8,


BUILT_IN_ATOMIC_FETCH_AND_16,



BUILT_IN_ATOMIC_FETCH_NAND_N,


BUILT_IN_ATOMIC_FETCH_NAND_1,


BUILT_IN_ATOMIC_FETCH_NAND_2,


BUILT_IN_ATOMIC_FETCH_NAND_4,


BUILT_IN_ATOMIC_FETCH_NAND_8,


BUILT_IN_ATOMIC_FETCH_NAND_16,



BUILT_IN_ATOMIC_FETCH_XOR_N,


BUILT_IN_ATOMIC_FETCH_XOR_1,


BUILT_IN_ATOMIC_FETCH_XOR_2,


BUILT_IN_ATOMIC_FETCH_XOR_4,


BUILT_IN_ATOMIC_FETCH_XOR_8,


BUILT_IN_ATOMIC_FETCH_XOR_16,




BUILT_IN_ATOMIC_FETCH_OR_N,


BUILT_IN_ATOMIC_FETCH_OR_1,


BUILT_IN_ATOMIC_FETCH_OR_2,


BUILT_IN_ATOMIC_FETCH_OR_4,


BUILT_IN_ATOMIC_FETCH_OR_8,


BUILT_IN_ATOMIC_FETCH_OR_16,



BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE,



BUILT_IN_ATOMIC_IS_LOCK_FREE,




BUILT_IN_ATOMIC_THREAD_FENCE,



BUILT_IN_ATOMIC_SIGNAL_FENCE,






BUILT_IN_ATOMIC_FERAISEEXCEPT,
# 1034 "../../gcc/builtins.def" 2


# 1 "../../gcc/omp-builtins.def" 1
# 32 "../../gcc/omp-builtins.def"
BUILT_IN_ACC_GET_DEVICE_TYPE,

BUILT_IN_GOACC_DATA_START,

BUILT_IN_GOACC_DATA_END,

BUILT_IN_GOACC_ENTER_EXIT_DATA,


BUILT_IN_GOACC_PARALLEL,


BUILT_IN_GOACC_UPDATE,


BUILT_IN_GOACC_WAIT,



BUILT_IN_ACC_ON_DEVICE,


BUILT_IN_OMP_GET_THREAD_NUM,

BUILT_IN_OMP_GET_NUM_THREADS,

BUILT_IN_OMP_GET_TEAM_NUM,

BUILT_IN_OMP_GET_NUM_TEAMS,


BUILT_IN_GOMP_ATOMIC_START,

BUILT_IN_GOMP_ATOMIC_END,

BUILT_IN_GOMP_BARRIER,

BUILT_IN_GOMP_BARRIER_CANCEL,

BUILT_IN_GOMP_TASKWAIT,

BUILT_IN_GOMP_TASKYIELD,

BUILT_IN_GOMP_TASKGROUP_START,

BUILT_IN_GOMP_TASKGROUP_END,

BUILT_IN_GOMP_CANCEL,

BUILT_IN_GOMP_CANCELLATION_POINT,

BUILT_IN_GOMP_CRITICAL_START,

BUILT_IN_GOMP_CRITICAL_END,

BUILT_IN_GOMP_CRITICAL_NAME_START,


BUILT_IN_GOMP_CRITICAL_NAME_END,





BUILT_IN_GOMP_LOOP_STATIC_START,



BUILT_IN_GOMP_LOOP_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_GUIDED_START,



BUILT_IN_GOMP_LOOP_RUNTIME_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START,



BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START,



BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START,



BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START,



BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START,



BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START,



BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START,



BUILT_IN_GOMP_LOOP_STATIC_NEXT,

BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT,

BUILT_IN_GOMP_LOOP_GUIDED_NEXT,

BUILT_IN_GOMP_LOOP_RUNTIME_NEXT,

BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT,





BUILT_IN_GOMP_PARALLEL_LOOP_STATIC,



BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC,



BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED,



BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED,



BUILT_IN_GOMP_LOOP_END,

BUILT_IN_GOMP_LOOP_END_CANCEL,

BUILT_IN_GOMP_LOOP_END_NOWAIT,

BUILT_IN_GOMP_ORDERED_START,

BUILT_IN_GOMP_ORDERED_END,

BUILT_IN_GOMP_DOACROSS_POST,

BUILT_IN_GOMP_DOACROSS_WAIT,

BUILT_IN_GOMP_DOACROSS_ULL_POST,

BUILT_IN_GOMP_DOACROSS_ULL_WAIT,

BUILT_IN_GOMP_PARALLEL,

BUILT_IN_GOMP_TASK,


BUILT_IN_GOMP_TASKLOOP,


BUILT_IN_GOMP_TASKLOOP_ULL,


BUILT_IN_GOMP_SECTIONS_START,

BUILT_IN_GOMP_SECTIONS_NEXT,

BUILT_IN_GOMP_PARALLEL_SECTIONS,


BUILT_IN_GOMP_SECTIONS_END,

BUILT_IN_GOMP_SECTIONS_END_CANCEL,


BUILT_IN_GOMP_SECTIONS_END_NOWAIT,


BUILT_IN_GOMP_SINGLE_START,

BUILT_IN_GOMP_SINGLE_COPY_START,

BUILT_IN_GOMP_SINGLE_COPY_END,

BUILT_IN_GOMP_OFFLOAD_REGISTER,

BUILT_IN_GOMP_OFFLOAD_UNREGISTER,


BUILT_IN_GOMP_TARGET,


BUILT_IN_GOMP_TARGET_DATA,

BUILT_IN_GOMP_TARGET_END_DATA,

BUILT_IN_GOMP_TARGET_UPDATE,


BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA,


BUILT_IN_GOMP_TEAMS,

BUILT_IN_GOACC_DECLARE,
# 1037 "../../gcc/builtins.def" 2


# 1 "../../gcc/hsa-builtins.def" 1
# 30 "../../gcc/hsa-builtins.def"
BUILT_IN_HSA_WORKGROUPID,

BUILT_IN_HSA_WORKITEMID,

BUILT_IN_HSA_WORKITEMABSID,

BUILT_IN_HSA_GRIDSIZE,

BUILT_IN_HSA_CURRENTWORKGROUPSIZE,
# 1040 "../../gcc/builtins.def" 2


# 1 "../../gcc/gtm-builtins.def" 1
BUILT_IN_TM_START,


BUILT_IN_TM_COMMIT,

BUILT_IN_TM_COMMIT_EH,

BUILT_IN_TM_ABORT,

BUILT_IN_TM_IRREVOCABLE,


BUILT_IN_TM_MEMCPY,

BUILT_IN_TM_MEMCPY_RNWT,

BUILT_IN_TM_MEMCPY_RTWN,

BUILT_IN_TM_MEMMOVE,

BUILT_IN_TM_MEMSET,


BUILT_IN_TM_GETTMCLONE_IRR,

BUILT_IN_TM_GETTMCLONE_SAFE,



BUILT_IN_TM_MALLOC,

BUILT_IN_TM_CALLOC,

BUILT_IN_TM_FREE,



BUILT_IN_TM_LOG_1,

BUILT_IN_TM_LOG_2,

BUILT_IN_TM_LOG_4,

BUILT_IN_TM_LOG_8,

BUILT_IN_TM_LOG_FLOAT,

BUILT_IN_TM_LOG_DOUBLE,

BUILT_IN_TM_LOG_LDOUBLE,

BUILT_IN_TM_LOG,



BUILT_IN_TM_LOG_M64,
BUILT_IN_TM_LOG_M128,
BUILT_IN_TM_LOG_M256,
# 67 "../../gcc/gtm-builtins.def"
BUILT_IN_TM_STORE_1,

BUILT_IN_TM_STORE_WAR_1,

BUILT_IN_TM_STORE_WAW_1,


BUILT_IN_TM_STORE_2,

BUILT_IN_TM_STORE_WAR_2,

BUILT_IN_TM_STORE_WAW_2,


BUILT_IN_TM_STORE_4,

BUILT_IN_TM_STORE_WAR_4,

BUILT_IN_TM_STORE_WAW_4,


BUILT_IN_TM_STORE_8,

BUILT_IN_TM_STORE_WAR_8,

BUILT_IN_TM_STORE_WAW_8,


BUILT_IN_TM_STORE_FLOAT,

BUILT_IN_TM_STORE_WAR_FLOAT,

BUILT_IN_TM_STORE_WAW_FLOAT,


BUILT_IN_TM_STORE_DOUBLE,

BUILT_IN_TM_STORE_WAR_DOUBLE,

BUILT_IN_TM_STORE_WAW_DOUBLE,



BUILT_IN_TM_STORE_M64,
BUILT_IN_TM_STORE_WAR_M64,
BUILT_IN_TM_STORE_WAW_M64,
BUILT_IN_TM_STORE_M128,
BUILT_IN_TM_STORE_WAR_M128,
BUILT_IN_TM_STORE_WAW_M128,
BUILT_IN_TM_STORE_M256,
BUILT_IN_TM_STORE_WAR_M256,
BUILT_IN_TM_STORE_WAW_M256,

BUILT_IN_TM_STORE_LDOUBLE,

BUILT_IN_TM_STORE_WAR_LDOUBLE,

BUILT_IN_TM_STORE_WAW_LDOUBLE,
# 133 "../../gcc/gtm-builtins.def"
BUILT_IN_TM_LOAD_1,

BUILT_IN_TM_LOAD_RAR_1,

BUILT_IN_TM_LOAD_RAW_1,

BUILT_IN_TM_LOAD_RFW_1,


BUILT_IN_TM_LOAD_2,

BUILT_IN_TM_LOAD_RAR_2,

BUILT_IN_TM_LOAD_RAW_2,

BUILT_IN_TM_LOAD_RFW_2,


BUILT_IN_TM_LOAD_4,

BUILT_IN_TM_LOAD_RAR_4,

BUILT_IN_TM_LOAD_RAW_4,

BUILT_IN_TM_LOAD_RFW_4,


BUILT_IN_TM_LOAD_8,

BUILT_IN_TM_LOAD_RAR_8,

BUILT_IN_TM_LOAD_RAW_8,

BUILT_IN_TM_LOAD_RFW_8,


BUILT_IN_TM_LOAD_FLOAT,

BUILT_IN_TM_LOAD_RAR_FLOAT,

BUILT_IN_TM_LOAD_RAW_FLOAT,

BUILT_IN_TM_LOAD_RFW_FLOAT,


BUILT_IN_TM_LOAD_DOUBLE,

BUILT_IN_TM_LOAD_RAR_DOUBLE,

BUILT_IN_TM_LOAD_RAW_DOUBLE,

BUILT_IN_TM_LOAD_RFW_DOUBLE,



BUILT_IN_TM_LOAD_M64,
BUILT_IN_TM_LOAD_RAR_M64,
BUILT_IN_TM_LOAD_RAW_M64,
BUILT_IN_TM_LOAD_RFW_M64,
BUILT_IN_TM_LOAD_M128,
BUILT_IN_TM_LOAD_RAR_M128,
BUILT_IN_TM_LOAD_RAW_M128,
BUILT_IN_TM_LOAD_RFW_M128,
BUILT_IN_TM_LOAD_M256,
BUILT_IN_TM_LOAD_RAR_M256,
BUILT_IN_TM_LOAD_RAW_M256,
BUILT_IN_TM_LOAD_RFW_M256,

BUILT_IN_TM_LOAD_LDOUBLE,

BUILT_IN_TM_LOAD_RAR_LDOUBLE,

BUILT_IN_TM_LOAD_RAW_LDOUBLE,

BUILT_IN_TM_LOAD_RFW_LDOUBLE,
# 1043 "../../gcc/builtins.def" 2


# 1 "../../gcc/sanitizer.def" 1
# 31 "../../gcc/sanitizer.def"
BEGIN_SANITIZER_BUILTINS,


BUILT_IN_ASAN_INIT,

BUILT_IN_ASAN_VERSION_MISMATCH_CHECK,




BUILT_IN_ASAN_REPORT_LOAD1,

BUILT_IN_ASAN_REPORT_LOAD2,

BUILT_IN_ASAN_REPORT_LOAD4,

BUILT_IN_ASAN_REPORT_LOAD8,

BUILT_IN_ASAN_REPORT_LOAD16,

BUILT_IN_ASAN_REPORT_LOAD_N,


BUILT_IN_ASAN_REPORT_STORE1,

BUILT_IN_ASAN_REPORT_STORE2,

BUILT_IN_ASAN_REPORT_STORE4,

BUILT_IN_ASAN_REPORT_STORE8,

BUILT_IN_ASAN_REPORT_STORE16,

BUILT_IN_ASAN_REPORT_STORE_N,


BUILT_IN_ASAN_REPORT_LOAD1_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD2_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD4_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD8_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD16_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT,



BUILT_IN_ASAN_REPORT_STORE1_NOABORT,


BUILT_IN_ASAN_REPORT_STORE2_NOABORT,


BUILT_IN_ASAN_REPORT_STORE4_NOABORT,


BUILT_IN_ASAN_REPORT_STORE8_NOABORT,


BUILT_IN_ASAN_REPORT_STORE16_NOABORT,


BUILT_IN_ASAN_REPORT_STORE_N_NOABORT,



BUILT_IN_ASAN_LOAD1,

BUILT_IN_ASAN_LOAD2,

BUILT_IN_ASAN_LOAD4,

BUILT_IN_ASAN_LOAD8,

BUILT_IN_ASAN_LOAD16,

BUILT_IN_ASAN_LOADN,

BUILT_IN_ASAN_STORE1,

BUILT_IN_ASAN_STORE2,

BUILT_IN_ASAN_STORE4,

BUILT_IN_ASAN_STORE8,

BUILT_IN_ASAN_STORE16,

BUILT_IN_ASAN_STOREN,

BUILT_IN_ASAN_LOAD1_NOABORT,

BUILT_IN_ASAN_LOAD2_NOABORT,

BUILT_IN_ASAN_LOAD4_NOABORT,

BUILT_IN_ASAN_LOAD8_NOABORT,

BUILT_IN_ASAN_LOAD16_NOABORT,

BUILT_IN_ASAN_LOADN_NOABORT,

BUILT_IN_ASAN_STORE1_NOABORT,

BUILT_IN_ASAN_STORE2_NOABORT,

BUILT_IN_ASAN_STORE4_NOABORT,

BUILT_IN_ASAN_STORE8_NOABORT,

BUILT_IN_ASAN_STORE16_NOABORT,

BUILT_IN_ASAN_STOREN_NOABORT,

BUILT_IN_ASAN_REGISTER_GLOBALS,


BUILT_IN_ASAN_UNREGISTER_GLOBALS,


BUILT_IN_ASAN_HANDLE_NO_RETURN,


BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT,


BUILT_IN_ASAN_AFTER_DYNAMIC_INIT,


BUILT_IN_ASAN_POISON_STACK_MEMORY,


BUILT_IN_ASAN_UNPOISON_STACK_MEMORY,


BUILT_IN_ASAN_ALLOCA_POISON,

BUILT_IN_ASAN_ALLOCAS_UNPOISON,

BUILT_IN_ASAN_POINTER_COMPARE,

BUILT_IN_ASAN_POINTER_SUBTRACT,



BUILT_IN_TSAN_INIT,

BUILT_IN_TSAN_FUNC_ENTRY,

BUILT_IN_TSAN_FUNC_EXIT,

BUILT_IN_TSAN_VPTR_UPDATE,

BUILT_IN_TSAN_READ1,

BUILT_IN_TSAN_READ2,

BUILT_IN_TSAN_READ4,

BUILT_IN_TSAN_READ8,

BUILT_IN_TSAN_READ16,

BUILT_IN_TSAN_WRITE1,

BUILT_IN_TSAN_WRITE2,

BUILT_IN_TSAN_WRITE4,

BUILT_IN_TSAN_WRITE8,

BUILT_IN_TSAN_WRITE16,

BUILT_IN_TSAN_READ_RANGE,

BUILT_IN_TSAN_WRITE_RANGE,


BUILT_IN_TSAN_ATOMIC8_LOAD,


BUILT_IN_TSAN_ATOMIC16_LOAD,


BUILT_IN_TSAN_ATOMIC32_LOAD,


BUILT_IN_TSAN_ATOMIC64_LOAD,


BUILT_IN_TSAN_ATOMIC128_LOAD,



BUILT_IN_TSAN_ATOMIC8_STORE,


BUILT_IN_TSAN_ATOMIC16_STORE,


BUILT_IN_TSAN_ATOMIC32_STORE,


BUILT_IN_TSAN_ATOMIC64_STORE,


BUILT_IN_TSAN_ATOMIC128_STORE,



BUILT_IN_TSAN_ATOMIC8_EXCHANGE,


BUILT_IN_TSAN_ATOMIC16_EXCHANGE,


BUILT_IN_TSAN_ATOMIC32_EXCHANGE,


BUILT_IN_TSAN_ATOMIC64_EXCHANGE,


BUILT_IN_TSAN_ATOMIC128_EXCHANGE,



BUILT_IN_TSAN_ATOMIC8_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC16_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC32_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC64_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC128_FETCH_ADD,



BUILT_IN_TSAN_ATOMIC8_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC16_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC32_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC64_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC128_FETCH_SUB,



BUILT_IN_TSAN_ATOMIC8_FETCH_AND,


BUILT_IN_TSAN_ATOMIC16_FETCH_AND,


BUILT_IN_TSAN_ATOMIC32_FETCH_AND,


BUILT_IN_TSAN_ATOMIC64_FETCH_AND,


BUILT_IN_TSAN_ATOMIC128_FETCH_AND,



BUILT_IN_TSAN_ATOMIC8_FETCH_OR,


BUILT_IN_TSAN_ATOMIC16_FETCH_OR,


BUILT_IN_TSAN_ATOMIC32_FETCH_OR,


BUILT_IN_TSAN_ATOMIC64_FETCH_OR,


BUILT_IN_TSAN_ATOMIC128_FETCH_OR,



BUILT_IN_TSAN_ATOMIC8_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC16_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC32_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC64_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC128_FETCH_XOR,



BUILT_IN_TSAN_ATOMIC8_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC16_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC32_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC64_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC128_FETCH_NAND,



BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG,




BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK,




BUILT_IN_TSAN_ATOMIC_THREAD_FENCE,


BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE,




BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS,



BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE,



BUILT_IN_UBSAN_HANDLE_MISSING_RETURN,



BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE,



BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1,



BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE,



BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT,



BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT,



BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT,



BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT,



BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS,



BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT,



BUILT_IN_UBSAN_HANDLE_NONNULL_ARG,



BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT,



BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1,



BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT,



BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN,



BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT,



BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS,



BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT,





BUILT_IN_SANITIZER_COV_TRACE_PC,


BUILT_IN_SANITIZER_COV_TRACE_CMP1,


BUILT_IN_SANITIZER_COV_TRACE_CMP2,


BUILT_IN_SANITIZER_COV_TRACE_CMP4,


BUILT_IN_SANITIZER_COV_TRACE_CMP8,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8,


BUILT_IN_SANITIZER_COV_TRACE_CMPF,


BUILT_IN_SANITIZER_COV_TRACE_CMPD,


BUILT_IN_SANITIZER_COV_TRACE_SWITCH,




END_SANITIZER_BUILTINS,
# 1046 "../../gcc/builtins.def" 2


# 1 "../../gcc/chkp-builtins.def" 1
# 32 "../../gcc/chkp-builtins.def"
BUILT_IN_CHKP_INTERSECT,
BUILT_IN_CHKP_SIZEOF,
BUILT_IN_CHKP_NARROW,
BUILT_IN_CHKP_BNDCL,
BUILT_IN_CHKP_BNDCU,
BUILT_IN_CHKP_BNDSTX,
BUILT_IN_CHKP_BNDLDX,
BUILT_IN_CHKP_BNDRET,
BUILT_IN_CHKP_BNDMK,
BUILT_IN_CHKP_EXTRACT_LOWER,
BUILT_IN_CHKP_EXTRACT_UPPER,




BUILT_IN_CHKP_SET_PTR_BOUNDS,
BUILT_IN_CHKP_INIT_PTR_BOUNDS,
BUILT_IN_CHKP_NULL_PTR_BOUNDS,
BUILT_IN_CHKP_COPY_PTR_BOUNDS,
BUILT_IN_CHKP_NARROW_PTR_BOUNDS,
BUILT_IN_CHKP_STORE_PTR_BOUNDS,
BUILT_IN_CHKP_CHECK_PTR_LBOUNDS,
BUILT_IN_CHKP_CHECK_PTR_UBOUNDS,
BUILT_IN_CHKP_CHECK_PTR_BOUNDS,
BUILT_IN_CHKP_GET_PTR_LBOUND,
BUILT_IN_CHKP_GET_PTR_UBOUND,


BUILT_IN_CHKP_MEMCPY_NOBND,
BUILT_IN_CHKP_MEMCPY_NOCHK,
BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK,
BUILT_IN_CHKP_MEMMOVE_NOBND,
BUILT_IN_CHKP_MEMMOVE_NOCHK,
BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK,
BUILT_IN_CHKP_MEMPCPY_NOBND,
BUILT_IN_CHKP_MEMPCPY_NOCHK,
BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK,
BUILT_IN_CHKP_MEMSET_NOBND,
BUILT_IN_CHKP_MEMSET_NOCHK,
BUILT_IN_CHKP_MEMSET_NOBND_NOCHK,
# 1049 "../../gcc/builtins.def" 2
# 1091 "../../gcc/builtins.def"
# 1 "../../gcc/brig-builtins.def" 1
# 38 "../../gcc/brig-builtins.def"
BUILT_IN_HSAIL_WORKITEMABSID,



BUILT_IN_HSAIL_GRIDSIZE,



BUILT_IN_HSAIL_WORKITEMFLATABSID_U32,




BUILT_IN_HSAIL_WORKITEMFLATABSID_U64,




BUILT_IN_HSAIL_WORKITEMFLATID,



BUILT_IN_HSAIL_WORKITEMID,



BUILT_IN_HSAIL_WORKGROUPID,



BUILT_IN_HSAIL_CURRENTWORKITEMFLATID,




BUILT_IN_HSAIL_WORKITEMABSID_U64,



BUILT_IN_HSAIL_PACKETID,



BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64,




BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32,




BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE,




BUILT_IN_HSAIL_WORKGROUPSIZE,



BUILT_IN_HSAIL_DIM,



BUILT_IN_HSAIL_GRIDGROUPS,



BUILT_IN_HSAIL_BITEXTRACT_S32,



BUILT_IN_HSAIL_BITEXTRACT_U32,



BUILT_IN_HSAIL_BITEXTRACT_S64,



BUILT_IN_HSAIL_BITEXTRACT_U64,



BUILT_IN_HSAIL_BITINSERT_U32,



BUILT_IN_HSAIL_BITINSERT_U64,




BUILT_IN_HSAIL_BITMASK_B32,



BUILT_IN_HSAIL_BITMASK_B64,



BUILT_IN_HSAIL_BITREV_B32,



BUILT_IN_HSAIL_BITREV_B64,



BUILT_IN_HSAIL_BITSELECT_B32,



BUILT_IN_HSAIL_BITSELECT_U64,



BUILT_IN_HSAIL_FIRSTBIT_U32,



BUILT_IN_HSAIL_FIRSTBIT_S32,



BUILT_IN_HSAIL_FIRSTBIT_U64,



BUILT_IN_HSAIL_FIRSTBIT_S64,



BUILT_IN_HSAIL_LASTBIT_U32,



BUILT_IN_HSAIL_LASTBIT_U64,



BUILT_IN_HSAIL_BORROW_U32,



BUILT_IN_HSAIL_BORROW_U64,



BUILT_IN_HSAIL_CARRY_U32,



BUILT_IN_HSAIL_CARRY_U64,



BUILT_IN_HSAIL_REM_S32,



BUILT_IN_HSAIL_REM_S64,



BUILT_IN_HSAIL_MIN_F32,



BUILT_IN_HSAIL_MAX_F32,



BUILT_IN_HSAIL_MIN_F64,



BUILT_IN_HSAIL_MAX_F64,



BUILT_IN_HSAIL_CLASS_F32,



BUILT_IN_HSAIL_CLASS_F64,



BUILT_IN_HSAIL_CLASS_F32_F16,



BUILT_IN_HSAIL_FRACT_F32,



BUILT_IN_HSAIL_FRACT_F64,



BUILT_IN_HSAIL_BARRIER,



BUILT_IN_HSAIL_INITFBAR,



BUILT_IN_HSAIL_JOINFBAR,



BUILT_IN_HSAIL_WAITFBAR,



BUILT_IN_HSAIL_ARRIVEFBAR,



BUILT_IN_HSAIL_LEAVEFBAR,



BUILT_IN_HSAIL_RELEASEFBAR,



BUILT_IN_HSAIL_BITALIGN,



BUILT_IN_HSAIL_BYTEALIGN,



BUILT_IN_HSAIL_LERP,



BUILT_IN_HSAIL_PACKCVT,




BUILT_IN_HSAIL_UNPACKCVT,



BUILT_IN_HSAIL_SAD_U16X2,



BUILT_IN_HSAIL_SAD_U32,



BUILT_IN_HSAIL_SAD_U8X4,



BUILT_IN_HSAIL_SADHI_U8X4,




BUILT_IN_HSAIL_CLOCK,



BUILT_IN_HSAIL_CUID,



BUILT_IN_HSAIL_MAXCUID,



BUILT_IN_HSAIL_DEBUGTRAP,



BUILT_IN_HSAIL_GROUPBASEPTR,



BUILT_IN_HSAIL_KERNARGBASEPTR_U64,




BUILT_IN_HSAIL_KERNARGBASEPTR_U32,




BUILT_IN_HSAIL_ALLOCA,



BUILT_IN_HSAIL_LDQUEUEWRITEINDEX,




BUILT_IN_HSAIL_LDQUEUEREADINDEX,




BUILT_IN_HSAIL_STQUEUEWRITEINDEX,




BUILT_IN_HSAIL_STQUEUEREADINDEX,




BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX,




BUILT_IN_HSAIL_CASQUEUEWRITEINDEX,




BUILT_IN_HSAIL_SEGMENTP_GLOBAL,




BUILT_IN_HSAIL_SEGMENTP_GROUP,




BUILT_IN_HSAIL_SEGMENTP_PRIVATE,
# 391 "../../gcc/brig-builtins.def"
BUILT_IN_HSAIL_ATOMIC_MIN_S32,



BUILT_IN_HSAIL_ATOMIC_MIN_S64,



BUILT_IN_HSAIL_ATOMIC_MIN_U32,



BUILT_IN_HSAIL_ATOMIC_MIN_U64,



BUILT_IN_HSAIL_ATOMIC_MAX_S32,



BUILT_IN_HSAIL_ATOMIC_MAX_S64,



BUILT_IN_HSAIL_ATOMIC_MAX_U32,



BUILT_IN_HSAIL_ATOMIC_MAX_U64,



BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32,




BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64,




BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32,




BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64,
# 448 "../../gcc/brig-builtins.def"
BUILT_IN_HSAIL_SAT_ADD_U64,



BUILT_IN_HSAIL_SAT_ADD_S64,



BUILT_IN_HSAIL_SAT_ADD_U32,



BUILT_IN_HSAIL_SAT_ADD_S32,



BUILT_IN_HSAIL_SAT_ADD_U16,



BUILT_IN_HSAIL_SAT_ADD_S16,



BUILT_IN_HSAIL_SAT_ADD_U8,



BUILT_IN_HSAIL_SAT_ADD_S8,



BUILT_IN_HSAIL_SAT_SUB_U64,



BUILT_IN_HSAIL_SAT_SUB_S64,



BUILT_IN_HSAIL_SAT_SUB_U32,



BUILT_IN_HSAIL_SAT_SUB_S32,



BUILT_IN_HSAIL_SAT_SUB_U16,



BUILT_IN_HSAIL_SAT_SUB_S16,



BUILT_IN_HSAIL_SAT_SUB_U8,



BUILT_IN_HSAIL_SAT_SUB_S8,



BUILT_IN_HSAIL_SAT_MUL_U64,



BUILT_IN_HSAIL_SAT_MUL_S64,



BUILT_IN_HSAIL_SAT_MUL_U32,



BUILT_IN_HSAIL_SAT_MUL_S32,



BUILT_IN_HSAIL_SAT_MUL_U16,



BUILT_IN_HSAIL_SAT_MUL_S16,



BUILT_IN_HSAIL_SAT_MUL_U8,



BUILT_IN_HSAIL_SAT_MUL_S8,







BUILT_IN_HSAIL_FTZ_F32_F16,


BUILT_IN_HSAIL_FTZ_F32,


BUILT_IN_HSAIL_FTZ_F64,


BUILT_IN_HSAIL_PUSH_FRAME,


BUILT_IN_HSAIL_POP_FRAME,


BUILT_IN_HSAIL_SETWORKITEMID,


BUILT_IN_HSAIL_LAUNCH_WG_FUNC,



BUILT_IN_HSAIL_LAUNCH_KERNEL,



BUILT_IN_HSAIL_F32_TO_F16,


BUILT_IN_HSAIL_F16_TO_F32,







BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64,
# 1092 "../../gcc/builtins.def" 2
# 168 "../../gcc/tree-core.h" 2

  BEGIN_CHKP_BUILTINS,




# 1 "../../gcc/builtins.def" 1
# 302 "../../gcc/builtins.def"


























































































































































































































































































































































































































BUILT_IN_MEMCPY_CHKP = BUILT_IN_MEMCPY + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_MEMMOVE_CHKP = BUILT_IN_MEMMOVE + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_MEMPCPY_CHKP = BUILT_IN_MEMPCPY + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_MEMSET_CHKP = BUILT_IN_MEMSET + BEGIN_CHKP_BUILTINS + 1,

BUILT_IN_STPCPY_CHKP = BUILT_IN_STPCPY + BEGIN_CHKP_BUILTINS + 1,


BUILT_IN_STRCAT_CHKP = BUILT_IN_STRCAT + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_STRCHR_CHKP = BUILT_IN_STRCHR + BEGIN_CHKP_BUILTINS + 1,

BUILT_IN_STRCPY_CHKP = BUILT_IN_STRCPY + BEGIN_CHKP_BUILTINS + 1,



BUILT_IN_STRLEN_CHKP = BUILT_IN_STRLEN + BEGIN_CHKP_BUILTINS + 1,




















































































































































































































































BUILT_IN_MEMCPY_CHK_CHKP = BUILT_IN_MEMCPY_CHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_MEMMOVE_CHK_CHKP = BUILT_IN_MEMMOVE_CHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_MEMPCPY_CHK_CHKP = BUILT_IN_MEMPCPY_CHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_MEMSET_CHK_CHKP = BUILT_IN_MEMSET_CHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_STPCPY_CHK_CHKP = BUILT_IN_STPCPY_CHK + BEGIN_CHKP_BUILTINS + 1,

BUILT_IN_STRCAT_CHK_CHKP = BUILT_IN_STRCAT_CHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_STRCPY_CHK_CHKP = BUILT_IN_STRCPY_CHK + BEGIN_CHKP_BUILTINS + 1,





















































# 1 "../../gcc/sync-builtins.def" 1
# 31 "../../gcc/sync-builtins.def"






































































































































































































































































































































































































































































































































































































# 1034 "../../gcc/builtins.def" 2


# 1 "../../gcc/omp-builtins.def" 1
# 32 "../../gcc/omp-builtins.def"










































































































































































































































































































































# 1037 "../../gcc/builtins.def" 2


# 1 "../../gcc/hsa-builtins.def" 1
# 30 "../../gcc/hsa-builtins.def"









# 1040 "../../gcc/builtins.def" 2


# 1 "../../gcc/gtm-builtins.def" 1


























































# 67 "../../gcc/gtm-builtins.def"


























































# 133 "../../gcc/gtm-builtins.def"











































































# 1043 "../../gcc/builtins.def" 2


# 1 "../../gcc/sanitizer.def" 1
# 31 "../../gcc/sanitizer.def"













































































































































































































































































































































































































































































































































































# 1046 "../../gcc/builtins.def" 2


# 1 "../../gcc/chkp-builtins.def" 1
# 32 "../../gcc/chkp-builtins.def"



BUILT_IN_CHKP_BNDCL_CHKP = BUILT_IN_CHKP_BNDCL + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_BNDCU_CHKP = BUILT_IN_CHKP_BNDCU + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_BNDSTX_CHKP = BUILT_IN_CHKP_BNDSTX + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_BNDLDX_CHKP = BUILT_IN_CHKP_BNDLDX + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_BNDRET_CHKP = BUILT_IN_CHKP_BNDRET + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_BNDMK_CHKP = BUILT_IN_CHKP_BNDMK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_EXTRACT_LOWER_CHKP = BUILT_IN_CHKP_EXTRACT_LOWER + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_EXTRACT_UPPER_CHKP = BUILT_IN_CHKP_EXTRACT_UPPER + BEGIN_CHKP_BUILTINS + 1,




BUILT_IN_CHKP_SET_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_SET_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_INIT_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_INIT_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_NULL_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_NULL_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_COPY_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_COPY_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_NARROW_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_NARROW_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_STORE_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_STORE_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_CHECK_PTR_LBOUNDS_CHKP = BUILT_IN_CHKP_CHECK_PTR_LBOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_CHECK_PTR_UBOUNDS_CHKP = BUILT_IN_CHKP_CHECK_PTR_UBOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_CHECK_PTR_BOUNDS_CHKP = BUILT_IN_CHKP_CHECK_PTR_BOUNDS + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_GET_PTR_LBOUND_CHKP = BUILT_IN_CHKP_GET_PTR_LBOUND + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_GET_PTR_UBOUND_CHKP = BUILT_IN_CHKP_GET_PTR_UBOUND + BEGIN_CHKP_BUILTINS + 1,


BUILT_IN_CHKP_MEMCPY_NOBND_CHKP = BUILT_IN_CHKP_MEMCPY_NOBND + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMCPY_NOCHK_CHKP = BUILT_IN_CHKP_MEMCPY_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK_CHKP = BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMMOVE_NOBND_CHKP = BUILT_IN_CHKP_MEMMOVE_NOBND + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMMOVE_NOCHK_CHKP = BUILT_IN_CHKP_MEMMOVE_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK_CHKP = BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMPCPY_NOBND_CHKP = BUILT_IN_CHKP_MEMPCPY_NOBND + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMPCPY_NOCHK_CHKP = BUILT_IN_CHKP_MEMPCPY_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK_CHKP = BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMSET_NOBND_CHKP = BUILT_IN_CHKP_MEMSET_NOBND + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMSET_NOCHK_CHKP = BUILT_IN_CHKP_MEMSET_NOCHK + BEGIN_CHKP_BUILTINS + 1,
BUILT_IN_CHKP_MEMSET_NOBND_NOCHK_CHKP = BUILT_IN_CHKP_MEMSET_NOBND_NOCHK + BEGIN_CHKP_BUILTINS + 1,
# 1049 "../../gcc/builtins.def" 2
# 1091 "../../gcc/builtins.def"
# 1 "../../gcc/brig-builtins.def" 1
# 38 "../../gcc/brig-builtins.def"
























































































































































































































































































































































# 391 "../../gcc/brig-builtins.def"
















































# 448 "../../gcc/brig-builtins.def"































































































































































































































# 1092 "../../gcc/builtins.def" 2
# 175 "../../gcc/tree-core.h" 2

  END_CHKP_BUILTINS = BEGIN_CHKP_BUILTINS * 2 + 1,



  BUILT_IN_COMPLEX_MUL_MIN,
  BUILT_IN_COMPLEX_MUL_MAX
    = BUILT_IN_COMPLEX_MUL_MIN
      + MAX_MODE_COMPLEX_FLOAT
      - MIN_MODE_COMPLEX_FLOAT,

  BUILT_IN_COMPLEX_DIV_MIN,
  BUILT_IN_COMPLEX_DIV_MAX
    = BUILT_IN_COMPLEX_DIV_MIN
      + MAX_MODE_COMPLEX_FLOAT
      - MIN_MODE_COMPLEX_FLOAT,


  END_BUILTINS
};


enum internal_fn {

# 1 "../../gcc/internal-fn.def" 1
# 118 "../../gcc/internal-fn.def"
IFN_MASK_LOAD,
IFN_LOAD_LANES,
IFN_MASK_LOAD_LANES,


IFN_GATHER_LOAD,
IFN_MASK_GATHER_LOAD,


IFN_SCATTER_STORE,
IFN_MASK_SCATTER_STORE,


IFN_MASK_STORE,
IFN_STORE_LANES,
IFN_MASK_STORE_LANES,


IFN_WHILE_ULT,

IFN_VEC_SHL_INSERT,


IFN_COND_ADD,
IFN_COND_SUB,
IFN_COND_MIN,

IFN_COND_MAX,

IFN_COND_AND,

IFN_COND_IOR,

IFN_COND_XOR,


IFN_RSQRT,

IFN_REDUC_PLUS,

IFN_REDUC_MAX,

IFN_REDUC_MIN,

IFN_REDUC_AND,

IFN_REDUC_IOR,

IFN_REDUC_XOR,



IFN_EXTRACT_LAST,



IFN_FOLD_EXTRACT_LAST,


IFN_FOLD_LEFT_PLUS,



IFN_ACOS,
IFN_ASIN,
IFN_ATAN,
IFN_COS,
IFN_EXP,
IFN_EXP10,
IFN_EXP2,
IFN_EXPM1,
IFN_LOG,
IFN_LOG10,
IFN_LOG1P,
IFN_LOG2,
IFN_LOGB,
IFN_SIGNIFICAND,
IFN_SIN,
IFN_SQRT,
IFN_TAN,


IFN_CEIL,
IFN_FLOOR,
IFN_NEARBYINT,
IFN_RINT,
IFN_ROUND,
IFN_TRUNC,


IFN_ATAN2,
IFN_COPYSIGN,
IFN_FMOD,
IFN_POW,
IFN_REMAINDER,
IFN_SCALB,
IFN_FMIN,
IFN_FMAX,
IFN_XORSIGN,


IFN_LDEXP,


IFN_CLRSB,
IFN_CLZ,
IFN_CTZ,
IFN_FFS,
IFN_PARITY,
IFN_POPCOUNT,

IFN_GOMP_USE_SIMT,
IFN_GOMP_SIMT_ENTER,
IFN_GOMP_SIMT_ENTER_ALLOC,
IFN_GOMP_SIMT_EXIT,
IFN_GOMP_SIMT_LANE,
IFN_GOMP_SIMT_VF,
IFN_GOMP_SIMT_LAST_LANE,
IFN_GOMP_SIMT_ORDERED_PRED,
IFN_GOMP_SIMT_VOTE_ANY,
IFN_GOMP_SIMT_XCHG_BFLY,
IFN_GOMP_SIMT_XCHG_IDX,
IFN_GOMP_SIMD_LANE,
IFN_GOMP_SIMD_VF,
IFN_GOMP_SIMD_LAST_LANE,
IFN_GOMP_SIMD_ORDERED_START,
IFN_GOMP_SIMD_ORDERED_END,
IFN_LOOP_VECTORIZED,
IFN_LOOP_DIST_ALIAS,
IFN_ANNOTATE,
IFN_UBSAN_NULL,
IFN_UBSAN_BOUNDS,
IFN_UBSAN_VPTR,
IFN_UBSAN_CHECK_ADD,
IFN_UBSAN_CHECK_SUB,
IFN_UBSAN_CHECK_MUL,
IFN_UBSAN_PTR,
IFN_UBSAN_OBJECT_SIZE,
IFN_ABNORMAL_DISPATCHER,
IFN_BUILTIN_EXPECT,
IFN_ASAN_CHECK,
IFN_ASAN_MARK,
IFN_ASAN_POISON,
IFN_ASAN_POISON_USE,
IFN_ADD_OVERFLOW,
IFN_SUB_OVERFLOW,
IFN_MUL_OVERFLOW,
IFN_TSAN_FUNC_EXIT,
IFN_VA_ARG,





IFN_UNIQUE,
IFN_PHI,







IFN_GOACC_DIM_SIZE,
IFN_GOACC_DIM_POS,


IFN_GOACC_LOOP,


IFN_GOACC_REDUCTION,



IFN_GOACC_TILE,



IFN_SET_EDOM,




IFN_ATOMIC_BIT_TEST_AND_SET,
IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT,
IFN_ATOMIC_BIT_TEST_AND_RESET,
IFN_ATOMIC_COMPARE_EXCHANGE,


IFN_FALLTHROUGH,


IFN_LAUNDER,


IFN_DIVMOD,


IFN_NOP,
# 200 "../../gcc/tree-core.h" 2
  IFN_LAST
};






enum combined_fn {


# 1 "../../gcc/builtins.def" 1
# 302 "../../gcc/builtins.def"
CFN_BUILT_IN_NONE = int (BUILT_IN_NONE),


CFN_BUILT_IN_ACOS = int (BUILT_IN_ACOS),
CFN_BUILT_IN_ACOSF = int (BUILT_IN_ACOSF),
CFN_BUILT_IN_ACOSH = int (BUILT_IN_ACOSH),
CFN_BUILT_IN_ACOSHF = int (BUILT_IN_ACOSHF),
CFN_BUILT_IN_ACOSHL = int (BUILT_IN_ACOSHL),
CFN_BUILT_IN_ACOSL = int (BUILT_IN_ACOSL),
CFN_BUILT_IN_ALIGNED_ALLOC = int (BUILT_IN_ALIGNED_ALLOC),
CFN_BUILT_IN_ASIN = int (BUILT_IN_ASIN),
CFN_BUILT_IN_ASINF = int (BUILT_IN_ASINF),
CFN_BUILT_IN_ASINH = int (BUILT_IN_ASINH),
CFN_BUILT_IN_ASINHF = int (BUILT_IN_ASINHF),
CFN_BUILT_IN_ASINHL = int (BUILT_IN_ASINHL),
CFN_BUILT_IN_ASINL = int (BUILT_IN_ASINL),
CFN_BUILT_IN_ATAN = int (BUILT_IN_ATAN),
CFN_BUILT_IN_ATAN2 = int (BUILT_IN_ATAN2),
CFN_BUILT_IN_ATAN2F = int (BUILT_IN_ATAN2F),
CFN_BUILT_IN_ATAN2L = int (BUILT_IN_ATAN2L),
CFN_BUILT_IN_ATANF = int (BUILT_IN_ATANF),
CFN_BUILT_IN_ATANH = int (BUILT_IN_ATANH),
CFN_BUILT_IN_ATANHF = int (BUILT_IN_ATANHF),
CFN_BUILT_IN_ATANHL = int (BUILT_IN_ATANHL),
CFN_BUILT_IN_ATANL = int (BUILT_IN_ATANL),
CFN_BUILT_IN_CBRT = int (BUILT_IN_CBRT),
CFN_BUILT_IN_CBRTF = int (BUILT_IN_CBRTF),
CFN_BUILT_IN_CBRTL = int (BUILT_IN_CBRTL),
CFN_BUILT_IN_CEIL = int (BUILT_IN_CEIL),
CFN_BUILT_IN_CEILF = int (BUILT_IN_CEILF),
CFN_BUILT_IN_CEILL = int (BUILT_IN_CEILL),

CFN_BUILT_IN_CEILF16 = int (BUILT_IN_CEILF16), CFN_BUILT_IN_CEILF32 = int (BUILT_IN_CEILF32), CFN_BUILT_IN_CEILF64 = int (BUILT_IN_CEILF64), CFN_BUILT_IN_CEILF128 = int (BUILT_IN_CEILF128), CFN_BUILT_IN_CEILF32X = int (BUILT_IN_CEILF32X), CFN_BUILT_IN_CEILF64X = int (BUILT_IN_CEILF64X), CFN_BUILT_IN_CEILF128X = int (BUILT_IN_CEILF128X),

CFN_BUILT_IN_COPYSIGN = int (BUILT_IN_COPYSIGN),
CFN_BUILT_IN_COPYSIGNF = int (BUILT_IN_COPYSIGNF),
CFN_BUILT_IN_COPYSIGNL = int (BUILT_IN_COPYSIGNL),

CFN_BUILT_IN_COPYSIGNF16 = int (BUILT_IN_COPYSIGNF16), CFN_BUILT_IN_COPYSIGNF32 = int (BUILT_IN_COPYSIGNF32), CFN_BUILT_IN_COPYSIGNF64 = int (BUILT_IN_COPYSIGNF64), CFN_BUILT_IN_COPYSIGNF128 = int (BUILT_IN_COPYSIGNF128), CFN_BUILT_IN_COPYSIGNF32X = int (BUILT_IN_COPYSIGNF32X), CFN_BUILT_IN_COPYSIGNF64X = int (BUILT_IN_COPYSIGNF64X), CFN_BUILT_IN_COPYSIGNF128X = int (BUILT_IN_COPYSIGNF128X),

CFN_BUILT_IN_COS = int (BUILT_IN_COS),
CFN_BUILT_IN_COSF = int (BUILT_IN_COSF),
CFN_BUILT_IN_COSH = int (BUILT_IN_COSH),
CFN_BUILT_IN_COSHF = int (BUILT_IN_COSHF),
CFN_BUILT_IN_COSHL = int (BUILT_IN_COSHL),
CFN_BUILT_IN_COSL = int (BUILT_IN_COSL),
CFN_BUILT_IN_DREM = int (BUILT_IN_DREM),
CFN_BUILT_IN_DREMF = int (BUILT_IN_DREMF),
CFN_BUILT_IN_DREML = int (BUILT_IN_DREML),
CFN_BUILT_IN_ERF = int (BUILT_IN_ERF),
CFN_BUILT_IN_ERFC = int (BUILT_IN_ERFC),
CFN_BUILT_IN_ERFCF = int (BUILT_IN_ERFCF),
CFN_BUILT_IN_ERFCL = int (BUILT_IN_ERFCL),
CFN_BUILT_IN_ERFF = int (BUILT_IN_ERFF),
CFN_BUILT_IN_ERFL = int (BUILT_IN_ERFL),
CFN_BUILT_IN_EXP = int (BUILT_IN_EXP),
CFN_BUILT_IN_EXP10 = int (BUILT_IN_EXP10),
CFN_BUILT_IN_EXP10F = int (BUILT_IN_EXP10F),
CFN_BUILT_IN_EXP10L = int (BUILT_IN_EXP10L),
CFN_BUILT_IN_EXP2 = int (BUILT_IN_EXP2),
CFN_BUILT_IN_EXP2F = int (BUILT_IN_EXP2F),
CFN_BUILT_IN_EXP2L = int (BUILT_IN_EXP2L),
CFN_BUILT_IN_EXPF = int (BUILT_IN_EXPF),
CFN_BUILT_IN_EXPL = int (BUILT_IN_EXPL),
CFN_BUILT_IN_EXPM1 = int (BUILT_IN_EXPM1),
CFN_BUILT_IN_EXPM1F = int (BUILT_IN_EXPM1F),
CFN_BUILT_IN_EXPM1L = int (BUILT_IN_EXPM1L),
CFN_BUILT_IN_FABS = int (BUILT_IN_FABS),
CFN_BUILT_IN_FABSF = int (BUILT_IN_FABSF),
CFN_BUILT_IN_FABSL = int (BUILT_IN_FABSL),

CFN_BUILT_IN_FABSF16 = int (BUILT_IN_FABSF16), CFN_BUILT_IN_FABSF32 = int (BUILT_IN_FABSF32), CFN_BUILT_IN_FABSF64 = int (BUILT_IN_FABSF64), CFN_BUILT_IN_FABSF128 = int (BUILT_IN_FABSF128), CFN_BUILT_IN_FABSF32X = int (BUILT_IN_FABSF32X), CFN_BUILT_IN_FABSF64X = int (BUILT_IN_FABSF64X), CFN_BUILT_IN_FABSF128X = int (BUILT_IN_FABSF128X),

CFN_BUILT_IN_FABSD32 = int (BUILT_IN_FABSD32),
CFN_BUILT_IN_FABSD64 = int (BUILT_IN_FABSD64),
CFN_BUILT_IN_FABSD128 = int (BUILT_IN_FABSD128),
CFN_BUILT_IN_FDIM = int (BUILT_IN_FDIM),
CFN_BUILT_IN_FDIMF = int (BUILT_IN_FDIMF),
CFN_BUILT_IN_FDIML = int (BUILT_IN_FDIML),
CFN_BUILT_IN_FECLEAREXCEPT = int (BUILT_IN_FECLEAREXCEPT),
CFN_BUILT_IN_FEGETENV = int (BUILT_IN_FEGETENV),
CFN_BUILT_IN_FEGETEXCEPTFLAG = int (BUILT_IN_FEGETEXCEPTFLAG),
CFN_BUILT_IN_FEGETROUND = int (BUILT_IN_FEGETROUND),
CFN_BUILT_IN_FEHOLDEXCEPT = int (BUILT_IN_FEHOLDEXCEPT),
CFN_BUILT_IN_FERAISEEXCEPT = int (BUILT_IN_FERAISEEXCEPT),
CFN_BUILT_IN_FESETENV = int (BUILT_IN_FESETENV),
CFN_BUILT_IN_FESETEXCEPTFLAG = int (BUILT_IN_FESETEXCEPTFLAG),
CFN_BUILT_IN_FESETROUND = int (BUILT_IN_FESETROUND),
CFN_BUILT_IN_FETESTEXCEPT = int (BUILT_IN_FETESTEXCEPT),
CFN_BUILT_IN_FEUPDATEENV = int (BUILT_IN_FEUPDATEENV),
CFN_BUILT_IN_FLOOR = int (BUILT_IN_FLOOR),
CFN_BUILT_IN_FLOORF = int (BUILT_IN_FLOORF),
CFN_BUILT_IN_FLOORL = int (BUILT_IN_FLOORL),

CFN_BUILT_IN_FLOORF16 = int (BUILT_IN_FLOORF16), CFN_BUILT_IN_FLOORF32 = int (BUILT_IN_FLOORF32), CFN_BUILT_IN_FLOORF64 = int (BUILT_IN_FLOORF64), CFN_BUILT_IN_FLOORF128 = int (BUILT_IN_FLOORF128), CFN_BUILT_IN_FLOORF32X = int (BUILT_IN_FLOORF32X), CFN_BUILT_IN_FLOORF64X = int (BUILT_IN_FLOORF64X), CFN_BUILT_IN_FLOORF128X = int (BUILT_IN_FLOORF128X),

CFN_BUILT_IN_FMA = int (BUILT_IN_FMA),
CFN_BUILT_IN_FMAF = int (BUILT_IN_FMAF),
CFN_BUILT_IN_FMAL = int (BUILT_IN_FMAL),

CFN_BUILT_IN_FMAF16 = int (BUILT_IN_FMAF16), CFN_BUILT_IN_FMAF32 = int (BUILT_IN_FMAF32), CFN_BUILT_IN_FMAF64 = int (BUILT_IN_FMAF64), CFN_BUILT_IN_FMAF128 = int (BUILT_IN_FMAF128), CFN_BUILT_IN_FMAF32X = int (BUILT_IN_FMAF32X), CFN_BUILT_IN_FMAF64X = int (BUILT_IN_FMAF64X), CFN_BUILT_IN_FMAF128X = int (BUILT_IN_FMAF128X),

CFN_BUILT_IN_FMAX = int (BUILT_IN_FMAX),
CFN_BUILT_IN_FMAXF = int (BUILT_IN_FMAXF),
CFN_BUILT_IN_FMAXL = int (BUILT_IN_FMAXL),

CFN_BUILT_IN_FMAXF16 = int (BUILT_IN_FMAXF16), CFN_BUILT_IN_FMAXF32 = int (BUILT_IN_FMAXF32), CFN_BUILT_IN_FMAXF64 = int (BUILT_IN_FMAXF64), CFN_BUILT_IN_FMAXF128 = int (BUILT_IN_FMAXF128), CFN_BUILT_IN_FMAXF32X = int (BUILT_IN_FMAXF32X), CFN_BUILT_IN_FMAXF64X = int (BUILT_IN_FMAXF64X), CFN_BUILT_IN_FMAXF128X = int (BUILT_IN_FMAXF128X),

CFN_BUILT_IN_FMIN = int (BUILT_IN_FMIN),
CFN_BUILT_IN_FMINF = int (BUILT_IN_FMINF),
CFN_BUILT_IN_FMINL = int (BUILT_IN_FMINL),

CFN_BUILT_IN_FMINF16 = int (BUILT_IN_FMINF16), CFN_BUILT_IN_FMINF32 = int (BUILT_IN_FMINF32), CFN_BUILT_IN_FMINF64 = int (BUILT_IN_FMINF64), CFN_BUILT_IN_FMINF128 = int (BUILT_IN_FMINF128), CFN_BUILT_IN_FMINF32X = int (BUILT_IN_FMINF32X), CFN_BUILT_IN_FMINF64X = int (BUILT_IN_FMINF64X), CFN_BUILT_IN_FMINF128X = int (BUILT_IN_FMINF128X),

CFN_BUILT_IN_FMOD = int (BUILT_IN_FMOD),
CFN_BUILT_IN_FMODF = int (BUILT_IN_FMODF),
CFN_BUILT_IN_FMODL = int (BUILT_IN_FMODL),
CFN_BUILT_IN_FREXP = int (BUILT_IN_FREXP),
CFN_BUILT_IN_FREXPF = int (BUILT_IN_FREXPF),
CFN_BUILT_IN_FREXPL = int (BUILT_IN_FREXPL),
CFN_BUILT_IN_GAMMA = int (BUILT_IN_GAMMA),
CFN_BUILT_IN_GAMMAF = int (BUILT_IN_GAMMAF),
CFN_BUILT_IN_GAMMAL = int (BUILT_IN_GAMMAL),
CFN_BUILT_IN_GAMMA_R = int (BUILT_IN_GAMMA_R),
CFN_BUILT_IN_GAMMAF_R = int (BUILT_IN_GAMMAF_R),
CFN_BUILT_IN_GAMMAL_R = int (BUILT_IN_GAMMAL_R),
CFN_BUILT_IN_HUGE_VAL = int (BUILT_IN_HUGE_VAL),
CFN_BUILT_IN_HUGE_VALF = int (BUILT_IN_HUGE_VALF),
CFN_BUILT_IN_HUGE_VALL = int (BUILT_IN_HUGE_VALL),

CFN_BUILT_IN_HUGE_VALF16 = int (BUILT_IN_HUGE_VALF16), CFN_BUILT_IN_HUGE_VALF32 = int (BUILT_IN_HUGE_VALF32), CFN_BUILT_IN_HUGE_VALF64 = int (BUILT_IN_HUGE_VALF64), CFN_BUILT_IN_HUGE_VALF128 = int (BUILT_IN_HUGE_VALF128), CFN_BUILT_IN_HUGE_VALF32X = int (BUILT_IN_HUGE_VALF32X), CFN_BUILT_IN_HUGE_VALF64X = int (BUILT_IN_HUGE_VALF64X), CFN_BUILT_IN_HUGE_VALF128X = int (BUILT_IN_HUGE_VALF128X),
CFN_BUILT_IN_HYPOT = int (BUILT_IN_HYPOT),
CFN_BUILT_IN_HYPOTF = int (BUILT_IN_HYPOTF),
CFN_BUILT_IN_HYPOTL = int (BUILT_IN_HYPOTL),
CFN_BUILT_IN_ICEIL = int (BUILT_IN_ICEIL),
CFN_BUILT_IN_ICEILF = int (BUILT_IN_ICEILF),
CFN_BUILT_IN_ICEILL = int (BUILT_IN_ICEILL),
CFN_BUILT_IN_IFLOOR = int (BUILT_IN_IFLOOR),
CFN_BUILT_IN_IFLOORF = int (BUILT_IN_IFLOORF),
CFN_BUILT_IN_IFLOORL = int (BUILT_IN_IFLOORL),
CFN_BUILT_IN_ILOGB = int (BUILT_IN_ILOGB),
CFN_BUILT_IN_ILOGBF = int (BUILT_IN_ILOGBF),
CFN_BUILT_IN_ILOGBL = int (BUILT_IN_ILOGBL),
CFN_BUILT_IN_INF = int (BUILT_IN_INF),
CFN_BUILT_IN_INFF = int (BUILT_IN_INFF),
CFN_BUILT_IN_INFL = int (BUILT_IN_INFL),
CFN_BUILT_IN_INFF16 = int (BUILT_IN_INFF16), CFN_BUILT_IN_INFF32 = int (BUILT_IN_INFF32), CFN_BUILT_IN_INFF64 = int (BUILT_IN_INFF64), CFN_BUILT_IN_INFF128 = int (BUILT_IN_INFF128), CFN_BUILT_IN_INFF32X = int (BUILT_IN_INFF32X), CFN_BUILT_IN_INFF64X = int (BUILT_IN_INFF64X), CFN_BUILT_IN_INFF128X = int (BUILT_IN_INFF128X),

CFN_BUILT_IN_INFD32 = int (BUILT_IN_INFD32),
CFN_BUILT_IN_INFD64 = int (BUILT_IN_INFD64),
CFN_BUILT_IN_INFD128 = int (BUILT_IN_INFD128),
CFN_BUILT_IN_IRINT = int (BUILT_IN_IRINT),
CFN_BUILT_IN_IRINTF = int (BUILT_IN_IRINTF),
CFN_BUILT_IN_IRINTL = int (BUILT_IN_IRINTL),
CFN_BUILT_IN_IROUND = int (BUILT_IN_IROUND),
CFN_BUILT_IN_IROUNDF = int (BUILT_IN_IROUNDF),
CFN_BUILT_IN_IROUNDL = int (BUILT_IN_IROUNDL),
CFN_BUILT_IN_J0 = int (BUILT_IN_J0),
CFN_BUILT_IN_J0F = int (BUILT_IN_J0F),
CFN_BUILT_IN_J0L = int (BUILT_IN_J0L),
CFN_BUILT_IN_J1 = int (BUILT_IN_J1),
CFN_BUILT_IN_J1F = int (BUILT_IN_J1F),
CFN_BUILT_IN_J1L = int (BUILT_IN_J1L),
CFN_BUILT_IN_JN = int (BUILT_IN_JN),
CFN_BUILT_IN_JNF = int (BUILT_IN_JNF),
CFN_BUILT_IN_JNL = int (BUILT_IN_JNL),
CFN_BUILT_IN_LCEIL = int (BUILT_IN_LCEIL),
CFN_BUILT_IN_LCEILF = int (BUILT_IN_LCEILF),
CFN_BUILT_IN_LCEILL = int (BUILT_IN_LCEILL),
CFN_BUILT_IN_LDEXP = int (BUILT_IN_LDEXP),
CFN_BUILT_IN_LDEXPF = int (BUILT_IN_LDEXPF),
CFN_BUILT_IN_LDEXPL = int (BUILT_IN_LDEXPL),
CFN_BUILT_IN_LFLOOR = int (BUILT_IN_LFLOOR),
CFN_BUILT_IN_LFLOORF = int (BUILT_IN_LFLOORF),
CFN_BUILT_IN_LFLOORL = int (BUILT_IN_LFLOORL),
CFN_BUILT_IN_LGAMMA = int (BUILT_IN_LGAMMA),
CFN_BUILT_IN_LGAMMAF = int (BUILT_IN_LGAMMAF),
CFN_BUILT_IN_LGAMMAL = int (BUILT_IN_LGAMMAL),
CFN_BUILT_IN_LGAMMA_R = int (BUILT_IN_LGAMMA_R),
CFN_BUILT_IN_LGAMMAF_R = int (BUILT_IN_LGAMMAF_R),
CFN_BUILT_IN_LGAMMAL_R = int (BUILT_IN_LGAMMAL_R),
CFN_BUILT_IN_LLCEIL = int (BUILT_IN_LLCEIL),
CFN_BUILT_IN_LLCEILF = int (BUILT_IN_LLCEILF),
CFN_BUILT_IN_LLCEILL = int (BUILT_IN_LLCEILL),
CFN_BUILT_IN_LLFLOOR = int (BUILT_IN_LLFLOOR),
CFN_BUILT_IN_LLFLOORF = int (BUILT_IN_LLFLOORF),
CFN_BUILT_IN_LLFLOORL = int (BUILT_IN_LLFLOORL),
CFN_BUILT_IN_LLRINT = int (BUILT_IN_LLRINT),
CFN_BUILT_IN_LLRINTF = int (BUILT_IN_LLRINTF),
CFN_BUILT_IN_LLRINTL = int (BUILT_IN_LLRINTL),
CFN_BUILT_IN_LLROUND = int (BUILT_IN_LLROUND),
CFN_BUILT_IN_LLROUNDF = int (BUILT_IN_LLROUNDF),
CFN_BUILT_IN_LLROUNDL = int (BUILT_IN_LLROUNDL),
CFN_BUILT_IN_LOG = int (BUILT_IN_LOG),
CFN_BUILT_IN_LOG10 = int (BUILT_IN_LOG10),
CFN_BUILT_IN_LOG10F = int (BUILT_IN_LOG10F),
CFN_BUILT_IN_LOG10L = int (BUILT_IN_LOG10L),
CFN_BUILT_IN_LOG1P = int (BUILT_IN_LOG1P),
CFN_BUILT_IN_LOG1PF = int (BUILT_IN_LOG1PF),
CFN_BUILT_IN_LOG1PL = int (BUILT_IN_LOG1PL),
CFN_BUILT_IN_LOG2 = int (BUILT_IN_LOG2),
CFN_BUILT_IN_LOG2F = int (BUILT_IN_LOG2F),
CFN_BUILT_IN_LOG2L = int (BUILT_IN_LOG2L),
CFN_BUILT_IN_LOGB = int (BUILT_IN_LOGB),
CFN_BUILT_IN_LOGBF = int (BUILT_IN_LOGBF),
CFN_BUILT_IN_LOGBL = int (BUILT_IN_LOGBL),
CFN_BUILT_IN_LOGF = int (BUILT_IN_LOGF),
CFN_BUILT_IN_LOGL = int (BUILT_IN_LOGL),
CFN_BUILT_IN_LRINT = int (BUILT_IN_LRINT),
CFN_BUILT_IN_LRINTF = int (BUILT_IN_LRINTF),
CFN_BUILT_IN_LRINTL = int (BUILT_IN_LRINTL),
CFN_BUILT_IN_LROUND = int (BUILT_IN_LROUND),
CFN_BUILT_IN_LROUNDF = int (BUILT_IN_LROUNDF),
CFN_BUILT_IN_LROUNDL = int (BUILT_IN_LROUNDL),
CFN_BUILT_IN_MODF = int (BUILT_IN_MODF),
CFN_BUILT_IN_MODFF = int (BUILT_IN_MODFF),
CFN_BUILT_IN_MODFL = int (BUILT_IN_MODFL),
CFN_BUILT_IN_NAN = int (BUILT_IN_NAN),
CFN_BUILT_IN_NANF = int (BUILT_IN_NANF),
CFN_BUILT_IN_NANL = int (BUILT_IN_NANL),

CFN_BUILT_IN_NANF16 = int (BUILT_IN_NANF16), CFN_BUILT_IN_NANF32 = int (BUILT_IN_NANF32), CFN_BUILT_IN_NANF64 = int (BUILT_IN_NANF64), CFN_BUILT_IN_NANF128 = int (BUILT_IN_NANF128), CFN_BUILT_IN_NANF32X = int (BUILT_IN_NANF32X), CFN_BUILT_IN_NANF64X = int (BUILT_IN_NANF64X), CFN_BUILT_IN_NANF128X = int (BUILT_IN_NANF128X),
CFN_BUILT_IN_NAND32 = int (BUILT_IN_NAND32),
CFN_BUILT_IN_NAND64 = int (BUILT_IN_NAND64),
CFN_BUILT_IN_NAND128 = int (BUILT_IN_NAND128),
CFN_BUILT_IN_NANS = int (BUILT_IN_NANS),
CFN_BUILT_IN_NANSF = int (BUILT_IN_NANSF),
CFN_BUILT_IN_NANSL = int (BUILT_IN_NANSL),
CFN_BUILT_IN_NANSF16 = int (BUILT_IN_NANSF16), CFN_BUILT_IN_NANSF32 = int (BUILT_IN_NANSF32), CFN_BUILT_IN_NANSF64 = int (BUILT_IN_NANSF64), CFN_BUILT_IN_NANSF128 = int (BUILT_IN_NANSF128), CFN_BUILT_IN_NANSF32X = int (BUILT_IN_NANSF32X), CFN_BUILT_IN_NANSF64X = int (BUILT_IN_NANSF64X), CFN_BUILT_IN_NANSF128X = int (BUILT_IN_NANSF128X),

CFN_BUILT_IN_NEARBYINT = int (BUILT_IN_NEARBYINT),
CFN_BUILT_IN_NEARBYINTF = int (BUILT_IN_NEARBYINTF),
CFN_BUILT_IN_NEARBYINTL = int (BUILT_IN_NEARBYINTL),

CFN_BUILT_IN_NEARBYINTF16 = int (BUILT_IN_NEARBYINTF16), CFN_BUILT_IN_NEARBYINTF32 = int (BUILT_IN_NEARBYINTF32), CFN_BUILT_IN_NEARBYINTF64 = int (BUILT_IN_NEARBYINTF64), CFN_BUILT_IN_NEARBYINTF128 = int (BUILT_IN_NEARBYINTF128), CFN_BUILT_IN_NEARBYINTF32X = int (BUILT_IN_NEARBYINTF32X), CFN_BUILT_IN_NEARBYINTF64X = int (BUILT_IN_NEARBYINTF64X), CFN_BUILT_IN_NEARBYINTF128X = int (BUILT_IN_NEARBYINTF128X),

CFN_BUILT_IN_NEXTAFTER = int (BUILT_IN_NEXTAFTER),
CFN_BUILT_IN_NEXTAFTERF = int (BUILT_IN_NEXTAFTERF),
CFN_BUILT_IN_NEXTAFTERL = int (BUILT_IN_NEXTAFTERL),
CFN_BUILT_IN_NEXTTOWARD = int (BUILT_IN_NEXTTOWARD),
CFN_BUILT_IN_NEXTTOWARDF = int (BUILT_IN_NEXTTOWARDF),
CFN_BUILT_IN_NEXTTOWARDL = int (BUILT_IN_NEXTTOWARDL),
CFN_BUILT_IN_POW = int (BUILT_IN_POW),
CFN_BUILT_IN_POW10 = int (BUILT_IN_POW10),
CFN_BUILT_IN_POW10F = int (BUILT_IN_POW10F),
CFN_BUILT_IN_POW10L = int (BUILT_IN_POW10L),
CFN_BUILT_IN_POWF = int (BUILT_IN_POWF),
CFN_BUILT_IN_POWI = int (BUILT_IN_POWI),
CFN_BUILT_IN_POWIF = int (BUILT_IN_POWIF),
CFN_BUILT_IN_POWIL = int (BUILT_IN_POWIL),
CFN_BUILT_IN_POWL = int (BUILT_IN_POWL),
CFN_BUILT_IN_REMAINDER = int (BUILT_IN_REMAINDER),
CFN_BUILT_IN_REMAINDERF = int (BUILT_IN_REMAINDERF),
CFN_BUILT_IN_REMAINDERL = int (BUILT_IN_REMAINDERL),
CFN_BUILT_IN_REMQUO = int (BUILT_IN_REMQUO),
CFN_BUILT_IN_REMQUOF = int (BUILT_IN_REMQUOF),
CFN_BUILT_IN_REMQUOL = int (BUILT_IN_REMQUOL),
CFN_BUILT_IN_RINT = int (BUILT_IN_RINT),
CFN_BUILT_IN_RINTF = int (BUILT_IN_RINTF),
CFN_BUILT_IN_RINTL = int (BUILT_IN_RINTL),

CFN_BUILT_IN_RINTF16 = int (BUILT_IN_RINTF16), CFN_BUILT_IN_RINTF32 = int (BUILT_IN_RINTF32), CFN_BUILT_IN_RINTF64 = int (BUILT_IN_RINTF64), CFN_BUILT_IN_RINTF128 = int (BUILT_IN_RINTF128), CFN_BUILT_IN_RINTF32X = int (BUILT_IN_RINTF32X), CFN_BUILT_IN_RINTF64X = int (BUILT_IN_RINTF64X), CFN_BUILT_IN_RINTF128X = int (BUILT_IN_RINTF128X),

CFN_BUILT_IN_ROUND = int (BUILT_IN_ROUND),
CFN_BUILT_IN_ROUNDF = int (BUILT_IN_ROUNDF),
CFN_BUILT_IN_ROUNDL = int (BUILT_IN_ROUNDL),

CFN_BUILT_IN_ROUNDF16 = int (BUILT_IN_ROUNDF16), CFN_BUILT_IN_ROUNDF32 = int (BUILT_IN_ROUNDF32), CFN_BUILT_IN_ROUNDF64 = int (BUILT_IN_ROUNDF64), CFN_BUILT_IN_ROUNDF128 = int (BUILT_IN_ROUNDF128), CFN_BUILT_IN_ROUNDF32X = int (BUILT_IN_ROUNDF32X), CFN_BUILT_IN_ROUNDF64X = int (BUILT_IN_ROUNDF64X), CFN_BUILT_IN_ROUNDF128X = int (BUILT_IN_ROUNDF128X),

CFN_BUILT_IN_SCALB = int (BUILT_IN_SCALB),
CFN_BUILT_IN_SCALBF = int (BUILT_IN_SCALBF),
CFN_BUILT_IN_SCALBL = int (BUILT_IN_SCALBL),
CFN_BUILT_IN_SCALBLN = int (BUILT_IN_SCALBLN),
CFN_BUILT_IN_SCALBLNF = int (BUILT_IN_SCALBLNF),
CFN_BUILT_IN_SCALBLNL = int (BUILT_IN_SCALBLNL),
CFN_BUILT_IN_SCALBN = int (BUILT_IN_SCALBN),
CFN_BUILT_IN_SCALBNF = int (BUILT_IN_SCALBNF),
CFN_BUILT_IN_SCALBNL = int (BUILT_IN_SCALBNL),
CFN_BUILT_IN_SIGNBIT = int (BUILT_IN_SIGNBIT),
CFN_BUILT_IN_SIGNBITF = int (BUILT_IN_SIGNBITF),
CFN_BUILT_IN_SIGNBITL = int (BUILT_IN_SIGNBITL),
CFN_BUILT_IN_SIGNBITD32 = int (BUILT_IN_SIGNBITD32),
CFN_BUILT_IN_SIGNBITD64 = int (BUILT_IN_SIGNBITD64),
CFN_BUILT_IN_SIGNBITD128 = int (BUILT_IN_SIGNBITD128),
CFN_BUILT_IN_SIGNIFICAND = int (BUILT_IN_SIGNIFICAND),
CFN_BUILT_IN_SIGNIFICANDF = int (BUILT_IN_SIGNIFICANDF),
CFN_BUILT_IN_SIGNIFICANDL = int (BUILT_IN_SIGNIFICANDL),
CFN_BUILT_IN_SIN = int (BUILT_IN_SIN),
CFN_BUILT_IN_SINCOS = int (BUILT_IN_SINCOS),
CFN_BUILT_IN_SINCOSF = int (BUILT_IN_SINCOSF),
CFN_BUILT_IN_SINCOSL = int (BUILT_IN_SINCOSL),
CFN_BUILT_IN_SINF = int (BUILT_IN_SINF),
CFN_BUILT_IN_SINH = int (BUILT_IN_SINH),
CFN_BUILT_IN_SINHF = int (BUILT_IN_SINHF),
CFN_BUILT_IN_SINHL = int (BUILT_IN_SINHL),
CFN_BUILT_IN_SINL = int (BUILT_IN_SINL),
CFN_BUILT_IN_SQRT = int (BUILT_IN_SQRT),
CFN_BUILT_IN_SQRTF = int (BUILT_IN_SQRTF),
CFN_BUILT_IN_SQRTL = int (BUILT_IN_SQRTL),

CFN_BUILT_IN_SQRTF16 = int (BUILT_IN_SQRTF16), CFN_BUILT_IN_SQRTF32 = int (BUILT_IN_SQRTF32), CFN_BUILT_IN_SQRTF64 = int (BUILT_IN_SQRTF64), CFN_BUILT_IN_SQRTF128 = int (BUILT_IN_SQRTF128), CFN_BUILT_IN_SQRTF32X = int (BUILT_IN_SQRTF32X), CFN_BUILT_IN_SQRTF64X = int (BUILT_IN_SQRTF64X), CFN_BUILT_IN_SQRTF128X = int (BUILT_IN_SQRTF128X),

CFN_BUILT_IN_TAN = int (BUILT_IN_TAN),
CFN_BUILT_IN_TANF = int (BUILT_IN_TANF),
CFN_BUILT_IN_TANH = int (BUILT_IN_TANH),
CFN_BUILT_IN_TANHF = int (BUILT_IN_TANHF),
CFN_BUILT_IN_TANHL = int (BUILT_IN_TANHL),
CFN_BUILT_IN_TANL = int (BUILT_IN_TANL),
CFN_BUILT_IN_TGAMMA = int (BUILT_IN_TGAMMA),
CFN_BUILT_IN_TGAMMAF = int (BUILT_IN_TGAMMAF),
CFN_BUILT_IN_TGAMMAL = int (BUILT_IN_TGAMMAL),
CFN_BUILT_IN_TRUNC = int (BUILT_IN_TRUNC),
CFN_BUILT_IN_TRUNCF = int (BUILT_IN_TRUNCF),
CFN_BUILT_IN_TRUNCL = int (BUILT_IN_TRUNCL),

CFN_BUILT_IN_TRUNCF16 = int (BUILT_IN_TRUNCF16), CFN_BUILT_IN_TRUNCF32 = int (BUILT_IN_TRUNCF32), CFN_BUILT_IN_TRUNCF64 = int (BUILT_IN_TRUNCF64), CFN_BUILT_IN_TRUNCF128 = int (BUILT_IN_TRUNCF128), CFN_BUILT_IN_TRUNCF32X = int (BUILT_IN_TRUNCF32X), CFN_BUILT_IN_TRUNCF64X = int (BUILT_IN_TRUNCF64X), CFN_BUILT_IN_TRUNCF128X = int (BUILT_IN_TRUNCF128X),

CFN_BUILT_IN_Y0 = int (BUILT_IN_Y0),
CFN_BUILT_IN_Y0F = int (BUILT_IN_Y0F),
CFN_BUILT_IN_Y0L = int (BUILT_IN_Y0L),
CFN_BUILT_IN_Y1 = int (BUILT_IN_Y1),
CFN_BUILT_IN_Y1F = int (BUILT_IN_Y1F),
CFN_BUILT_IN_Y1L = int (BUILT_IN_Y1L),
CFN_BUILT_IN_YN = int (BUILT_IN_YN),
CFN_BUILT_IN_YNF = int (BUILT_IN_YNF),
CFN_BUILT_IN_YNL = int (BUILT_IN_YNL),


CFN_BUILT_IN_CABS = int (BUILT_IN_CABS),
CFN_BUILT_IN_CABSF = int (BUILT_IN_CABSF),
CFN_BUILT_IN_CABSL = int (BUILT_IN_CABSL),
CFN_BUILT_IN_CACOS = int (BUILT_IN_CACOS),
CFN_BUILT_IN_CACOSF = int (BUILT_IN_CACOSF),
CFN_BUILT_IN_CACOSH = int (BUILT_IN_CACOSH),
CFN_BUILT_IN_CACOSHF = int (BUILT_IN_CACOSHF),
CFN_BUILT_IN_CACOSHL = int (BUILT_IN_CACOSHL),
CFN_BUILT_IN_CACOSL = int (BUILT_IN_CACOSL),
CFN_BUILT_IN_CARG = int (BUILT_IN_CARG),
CFN_BUILT_IN_CARGF = int (BUILT_IN_CARGF),
CFN_BUILT_IN_CARGL = int (BUILT_IN_CARGL),
CFN_BUILT_IN_CASIN = int (BUILT_IN_CASIN),
CFN_BUILT_IN_CASINF = int (BUILT_IN_CASINF),
CFN_BUILT_IN_CASINH = int (BUILT_IN_CASINH),
CFN_BUILT_IN_CASINHF = int (BUILT_IN_CASINHF),
CFN_BUILT_IN_CASINHL = int (BUILT_IN_CASINHL),
CFN_BUILT_IN_CASINL = int (BUILT_IN_CASINL),
CFN_BUILT_IN_CATAN = int (BUILT_IN_CATAN),
CFN_BUILT_IN_CATANF = int (BUILT_IN_CATANF),
CFN_BUILT_IN_CATANH = int (BUILT_IN_CATANH),
CFN_BUILT_IN_CATANHF = int (BUILT_IN_CATANHF),
CFN_BUILT_IN_CATANHL = int (BUILT_IN_CATANHL),
CFN_BUILT_IN_CATANL = int (BUILT_IN_CATANL),
CFN_BUILT_IN_CCOS = int (BUILT_IN_CCOS),
CFN_BUILT_IN_CCOSF = int (BUILT_IN_CCOSF),
CFN_BUILT_IN_CCOSH = int (BUILT_IN_CCOSH),
CFN_BUILT_IN_CCOSHF = int (BUILT_IN_CCOSHF),
CFN_BUILT_IN_CCOSHL = int (BUILT_IN_CCOSHL),
CFN_BUILT_IN_CCOSL = int (BUILT_IN_CCOSL),
CFN_BUILT_IN_CEXP = int (BUILT_IN_CEXP),
CFN_BUILT_IN_CEXPF = int (BUILT_IN_CEXPF),
CFN_BUILT_IN_CEXPL = int (BUILT_IN_CEXPL),
CFN_BUILT_IN_CEXPI = int (BUILT_IN_CEXPI),
CFN_BUILT_IN_CEXPIF = int (BUILT_IN_CEXPIF),
CFN_BUILT_IN_CEXPIL = int (BUILT_IN_CEXPIL),
CFN_BUILT_IN_CIMAG = int (BUILT_IN_CIMAG),
CFN_BUILT_IN_CIMAGF = int (BUILT_IN_CIMAGF),
CFN_BUILT_IN_CIMAGL = int (BUILT_IN_CIMAGL),
CFN_BUILT_IN_CLOG = int (BUILT_IN_CLOG),
CFN_BUILT_IN_CLOGF = int (BUILT_IN_CLOGF),
CFN_BUILT_IN_CLOGL = int (BUILT_IN_CLOGL),
CFN_BUILT_IN_CLOG10 = int (BUILT_IN_CLOG10),
CFN_BUILT_IN_CLOG10F = int (BUILT_IN_CLOG10F),
CFN_BUILT_IN_CLOG10L = int (BUILT_IN_CLOG10L),
CFN_BUILT_IN_CONJ = int (BUILT_IN_CONJ),
CFN_BUILT_IN_CONJF = int (BUILT_IN_CONJF),
CFN_BUILT_IN_CONJL = int (BUILT_IN_CONJL),
CFN_BUILT_IN_CPOW = int (BUILT_IN_CPOW),
CFN_BUILT_IN_CPOWF = int (BUILT_IN_CPOWF),
CFN_BUILT_IN_CPOWL = int (BUILT_IN_CPOWL),
CFN_BUILT_IN_CPROJ = int (BUILT_IN_CPROJ),
CFN_BUILT_IN_CPROJF = int (BUILT_IN_CPROJF),
CFN_BUILT_IN_CPROJL = int (BUILT_IN_CPROJL),
CFN_BUILT_IN_CREAL = int (BUILT_IN_CREAL),
CFN_BUILT_IN_CREALF = int (BUILT_IN_CREALF),
CFN_BUILT_IN_CREALL = int (BUILT_IN_CREALL),
CFN_BUILT_IN_CSIN = int (BUILT_IN_CSIN),
CFN_BUILT_IN_CSINF = int (BUILT_IN_CSINF),
CFN_BUILT_IN_CSINH = int (BUILT_IN_CSINH),
CFN_BUILT_IN_CSINHF = int (BUILT_IN_CSINHF),
CFN_BUILT_IN_CSINHL = int (BUILT_IN_CSINHL),
CFN_BUILT_IN_CSINL = int (BUILT_IN_CSINL),
CFN_BUILT_IN_CSQRT = int (BUILT_IN_CSQRT),
CFN_BUILT_IN_CSQRTF = int (BUILT_IN_CSQRTF),
CFN_BUILT_IN_CSQRTL = int (BUILT_IN_CSQRTL),
CFN_BUILT_IN_CTAN = int (BUILT_IN_CTAN),
CFN_BUILT_IN_CTANF = int (BUILT_IN_CTANF),
CFN_BUILT_IN_CTANH = int (BUILT_IN_CTANH),
CFN_BUILT_IN_CTANHF = int (BUILT_IN_CTANHF),
CFN_BUILT_IN_CTANHL = int (BUILT_IN_CTANHL),
CFN_BUILT_IN_CTANL = int (BUILT_IN_CTANL),




CFN_BUILT_IN_BCMP = int (BUILT_IN_BCMP),
CFN_BUILT_IN_BCOPY = int (BUILT_IN_BCOPY),
CFN_BUILT_IN_BZERO = int (BUILT_IN_BZERO),
CFN_BUILT_IN_INDEX = int (BUILT_IN_INDEX),
CFN_BUILT_IN_MEMCHR = int (BUILT_IN_MEMCHR),
CFN_BUILT_IN_MEMCMP = int (BUILT_IN_MEMCMP),
CFN_BUILT_IN_MEMCPY = int (BUILT_IN_MEMCPY),
CFN_BUILT_IN_MEMMOVE = int (BUILT_IN_MEMMOVE),
CFN_BUILT_IN_MEMPCPY = int (BUILT_IN_MEMPCPY),
CFN_BUILT_IN_MEMSET = int (BUILT_IN_MEMSET),
CFN_BUILT_IN_RINDEX = int (BUILT_IN_RINDEX),
CFN_BUILT_IN_STPCPY = int (BUILT_IN_STPCPY),
CFN_BUILT_IN_STPNCPY = int (BUILT_IN_STPNCPY),
CFN_BUILT_IN_STRCASECMP = int (BUILT_IN_STRCASECMP),
CFN_BUILT_IN_STRCAT = int (BUILT_IN_STRCAT),
CFN_BUILT_IN_STRCHR = int (BUILT_IN_STRCHR),
CFN_BUILT_IN_STRCMP = int (BUILT_IN_STRCMP),
CFN_BUILT_IN_STRCPY = int (BUILT_IN_STRCPY),
CFN_BUILT_IN_STRCSPN = int (BUILT_IN_STRCSPN),
CFN_BUILT_IN_STRDUP = int (BUILT_IN_STRDUP),
CFN_BUILT_IN_STRNDUP = int (BUILT_IN_STRNDUP),
CFN_BUILT_IN_STRLEN = int (BUILT_IN_STRLEN),
CFN_BUILT_IN_STRNCASECMP = int (BUILT_IN_STRNCASECMP),
CFN_BUILT_IN_STRNCAT = int (BUILT_IN_STRNCAT),
CFN_BUILT_IN_STRNCMP = int (BUILT_IN_STRNCMP),
CFN_BUILT_IN_STRNCPY = int (BUILT_IN_STRNCPY),
CFN_BUILT_IN_STRPBRK = int (BUILT_IN_STRPBRK),
CFN_BUILT_IN_STRRCHR = int (BUILT_IN_STRRCHR),
CFN_BUILT_IN_STRSPN = int (BUILT_IN_STRSPN),
CFN_BUILT_IN_STRSTR = int (BUILT_IN_STRSTR),


CFN_BUILT_IN_FPRINTF = int (BUILT_IN_FPRINTF),
CFN_BUILT_IN_FPRINTF_UNLOCKED = int (BUILT_IN_FPRINTF_UNLOCKED),
CFN_BUILT_IN_PUTC = int (BUILT_IN_PUTC),
CFN_BUILT_IN_PUTC_UNLOCKED = int (BUILT_IN_PUTC_UNLOCKED),
CFN_BUILT_IN_FPUTC = int (BUILT_IN_FPUTC),
CFN_BUILT_IN_FPUTC_UNLOCKED = int (BUILT_IN_FPUTC_UNLOCKED),
CFN_BUILT_IN_FPUTS = int (BUILT_IN_FPUTS),
CFN_BUILT_IN_FPUTS_UNLOCKED = int (BUILT_IN_FPUTS_UNLOCKED),
CFN_BUILT_IN_FSCANF = int (BUILT_IN_FSCANF),
CFN_BUILT_IN_FWRITE = int (BUILT_IN_FWRITE),
CFN_BUILT_IN_FWRITE_UNLOCKED = int (BUILT_IN_FWRITE_UNLOCKED),
CFN_BUILT_IN_PRINTF = int (BUILT_IN_PRINTF),
CFN_BUILT_IN_PRINTF_UNLOCKED = int (BUILT_IN_PRINTF_UNLOCKED),
CFN_BUILT_IN_PUTCHAR = int (BUILT_IN_PUTCHAR),
CFN_BUILT_IN_PUTCHAR_UNLOCKED = int (BUILT_IN_PUTCHAR_UNLOCKED),
CFN_BUILT_IN_PUTS = int (BUILT_IN_PUTS),
CFN_BUILT_IN_PUTS_UNLOCKED = int (BUILT_IN_PUTS_UNLOCKED),
CFN_BUILT_IN_SCANF = int (BUILT_IN_SCANF),
CFN_BUILT_IN_SNPRINTF = int (BUILT_IN_SNPRINTF),

CFN_BUILT_IN_SPRINTF = int (BUILT_IN_SPRINTF),
CFN_BUILT_IN_SSCANF = int (BUILT_IN_SSCANF),
CFN_BUILT_IN_VFPRINTF = int (BUILT_IN_VFPRINTF),
CFN_BUILT_IN_VFSCANF = int (BUILT_IN_VFSCANF),
CFN_BUILT_IN_VPRINTF = int (BUILT_IN_VPRINTF),
CFN_BUILT_IN_VSCANF = int (BUILT_IN_VSCANF),
CFN_BUILT_IN_VSNPRINTF = int (BUILT_IN_VSNPRINTF),
CFN_BUILT_IN_VSPRINTF = int (BUILT_IN_VSPRINTF),
CFN_BUILT_IN_VSSCANF = int (BUILT_IN_VSSCANF),


CFN_BUILT_IN_ISALNUM = int (BUILT_IN_ISALNUM),
CFN_BUILT_IN_ISALPHA = int (BUILT_IN_ISALPHA),
CFN_BUILT_IN_ISASCII = int (BUILT_IN_ISASCII),
CFN_BUILT_IN_ISBLANK = int (BUILT_IN_ISBLANK),
CFN_BUILT_IN_ISCNTRL = int (BUILT_IN_ISCNTRL),
CFN_BUILT_IN_ISDIGIT = int (BUILT_IN_ISDIGIT),
CFN_BUILT_IN_ISGRAPH = int (BUILT_IN_ISGRAPH),
CFN_BUILT_IN_ISLOWER = int (BUILT_IN_ISLOWER),
CFN_BUILT_IN_ISPRINT = int (BUILT_IN_ISPRINT),
CFN_BUILT_IN_ISPUNCT = int (BUILT_IN_ISPUNCT),
CFN_BUILT_IN_ISSPACE = int (BUILT_IN_ISSPACE),
CFN_BUILT_IN_ISUPPER = int (BUILT_IN_ISUPPER),
CFN_BUILT_IN_ISXDIGIT = int (BUILT_IN_ISXDIGIT),
CFN_BUILT_IN_TOASCII = int (BUILT_IN_TOASCII),
CFN_BUILT_IN_TOLOWER = int (BUILT_IN_TOLOWER),
CFN_BUILT_IN_TOUPPER = int (BUILT_IN_TOUPPER),


CFN_BUILT_IN_ISWALNUM = int (BUILT_IN_ISWALNUM),
CFN_BUILT_IN_ISWALPHA = int (BUILT_IN_ISWALPHA),
CFN_BUILT_IN_ISWBLANK = int (BUILT_IN_ISWBLANK),
CFN_BUILT_IN_ISWCNTRL = int (BUILT_IN_ISWCNTRL),
CFN_BUILT_IN_ISWDIGIT = int (BUILT_IN_ISWDIGIT),
CFN_BUILT_IN_ISWGRAPH = int (BUILT_IN_ISWGRAPH),
CFN_BUILT_IN_ISWLOWER = int (BUILT_IN_ISWLOWER),
CFN_BUILT_IN_ISWPRINT = int (BUILT_IN_ISWPRINT),
CFN_BUILT_IN_ISWPUNCT = int (BUILT_IN_ISWPUNCT),
CFN_BUILT_IN_ISWSPACE = int (BUILT_IN_ISWSPACE),
CFN_BUILT_IN_ISWUPPER = int (BUILT_IN_ISWUPPER),
CFN_BUILT_IN_ISWXDIGIT = int (BUILT_IN_ISWXDIGIT),
CFN_BUILT_IN_TOWLOWER = int (BUILT_IN_TOWLOWER),
CFN_BUILT_IN_TOWUPPER = int (BUILT_IN_TOWUPPER),


CFN_BUILT_IN_ADD_OVERFLOW = int (BUILT_IN_ADD_OVERFLOW),
CFN_BUILT_IN_SUB_OVERFLOW = int (BUILT_IN_SUB_OVERFLOW),
CFN_BUILT_IN_MUL_OVERFLOW = int (BUILT_IN_MUL_OVERFLOW),
CFN_BUILT_IN_ADD_OVERFLOW_P = int (BUILT_IN_ADD_OVERFLOW_P),
CFN_BUILT_IN_SUB_OVERFLOW_P = int (BUILT_IN_SUB_OVERFLOW_P),
CFN_BUILT_IN_MUL_OVERFLOW_P = int (BUILT_IN_MUL_OVERFLOW_P),

CFN_BUILT_IN_SADD_OVERFLOW = int (BUILT_IN_SADD_OVERFLOW),
CFN_BUILT_IN_SADDL_OVERFLOW = int (BUILT_IN_SADDL_OVERFLOW),
CFN_BUILT_IN_SADDLL_OVERFLOW = int (BUILT_IN_SADDLL_OVERFLOW),
CFN_BUILT_IN_SSUB_OVERFLOW = int (BUILT_IN_SSUB_OVERFLOW),
CFN_BUILT_IN_SSUBL_OVERFLOW = int (BUILT_IN_SSUBL_OVERFLOW),
CFN_BUILT_IN_SSUBLL_OVERFLOW = int (BUILT_IN_SSUBLL_OVERFLOW),
CFN_BUILT_IN_SMUL_OVERFLOW = int (BUILT_IN_SMUL_OVERFLOW),
CFN_BUILT_IN_SMULL_OVERFLOW = int (BUILT_IN_SMULL_OVERFLOW),
CFN_BUILT_IN_SMULLL_OVERFLOW = int (BUILT_IN_SMULLL_OVERFLOW),
CFN_BUILT_IN_UADD_OVERFLOW = int (BUILT_IN_UADD_OVERFLOW),
CFN_BUILT_IN_UADDL_OVERFLOW = int (BUILT_IN_UADDL_OVERFLOW),
CFN_BUILT_IN_UADDLL_OVERFLOW = int (BUILT_IN_UADDLL_OVERFLOW),
CFN_BUILT_IN_USUB_OVERFLOW = int (BUILT_IN_USUB_OVERFLOW),
CFN_BUILT_IN_USUBL_OVERFLOW = int (BUILT_IN_USUBL_OVERFLOW),
CFN_BUILT_IN_USUBLL_OVERFLOW = int (BUILT_IN_USUBLL_OVERFLOW),
CFN_BUILT_IN_UMUL_OVERFLOW = int (BUILT_IN_UMUL_OVERFLOW),
CFN_BUILT_IN_UMULL_OVERFLOW = int (BUILT_IN_UMULL_OVERFLOW),
CFN_BUILT_IN_UMULLL_OVERFLOW = int (BUILT_IN_UMULLL_OVERFLOW),


CFN_BUILT_IN_ABORT = int (BUILT_IN_ABORT),
CFN_BUILT_IN_ABS = int (BUILT_IN_ABS),
CFN_BUILT_IN_AGGREGATE_INCOMING_ADDRESS = int (BUILT_IN_AGGREGATE_INCOMING_ADDRESS),
CFN_BUILT_IN_ALLOCA = int (BUILT_IN_ALLOCA),
CFN_BUILT_IN_APPLY = int (BUILT_IN_APPLY),
CFN_BUILT_IN_APPLY_ARGS = int (BUILT_IN_APPLY_ARGS),
CFN_BUILT_IN_BSWAP16 = int (BUILT_IN_BSWAP16),
CFN_BUILT_IN_BSWAP32 = int (BUILT_IN_BSWAP32),
CFN_BUILT_IN_BSWAP64 = int (BUILT_IN_BSWAP64),
CFN_BUILT_IN_CLEAR_CACHE = int (BUILT_IN_CLEAR_CACHE),

CFN_BUILT_IN_CALLOC = int (BUILT_IN_CALLOC),
CFN_BUILT_IN_CLASSIFY_TYPE = int (BUILT_IN_CLASSIFY_TYPE),
CFN_BUILT_IN_CLZ = int (BUILT_IN_CLZ),
CFN_BUILT_IN_CLZIMAX = int (BUILT_IN_CLZIMAX),
CFN_BUILT_IN_CLZL = int (BUILT_IN_CLZL),
CFN_BUILT_IN_CLZLL = int (BUILT_IN_CLZLL),
CFN_BUILT_IN_CONSTANT_P = int (BUILT_IN_CONSTANT_P),
CFN_BUILT_IN_CTZ = int (BUILT_IN_CTZ),
CFN_BUILT_IN_CTZIMAX = int (BUILT_IN_CTZIMAX),
CFN_BUILT_IN_CTZL = int (BUILT_IN_CTZL),
CFN_BUILT_IN_CTZLL = int (BUILT_IN_CTZLL),
CFN_BUILT_IN_CLRSB = int (BUILT_IN_CLRSB),
CFN_BUILT_IN_CLRSBIMAX = int (BUILT_IN_CLRSBIMAX),
CFN_BUILT_IN_CLRSBL = int (BUILT_IN_CLRSBL),
CFN_BUILT_IN_CLRSBLL = int (BUILT_IN_CLRSBLL),
CFN_BUILT_IN_DCGETTEXT = int (BUILT_IN_DCGETTEXT),
CFN_BUILT_IN_DGETTEXT = int (BUILT_IN_DGETTEXT),
CFN_BUILT_IN_DWARF_CFA = int (BUILT_IN_DWARF_CFA),
CFN_BUILT_IN_DWARF_SP_COLUMN = int (BUILT_IN_DWARF_SP_COLUMN),
CFN_BUILT_IN_EH_RETURN = int (BUILT_IN_EH_RETURN),
CFN_BUILT_IN_EH_RETURN_DATA_REGNO = int (BUILT_IN_EH_RETURN_DATA_REGNO),
CFN_BUILT_IN_EXECL = int (BUILT_IN_EXECL),
CFN_BUILT_IN_EXECLP = int (BUILT_IN_EXECLP),
CFN_BUILT_IN_EXECLE = int (BUILT_IN_EXECLE),
CFN_BUILT_IN_EXECV = int (BUILT_IN_EXECV),
CFN_BUILT_IN_EXECVP = int (BUILT_IN_EXECVP),
CFN_BUILT_IN_EXECVE = int (BUILT_IN_EXECVE),
CFN_BUILT_IN_EXIT = int (BUILT_IN_EXIT),
CFN_BUILT_IN_EXPECT = int (BUILT_IN_EXPECT),
CFN_BUILT_IN_ASSUME_ALIGNED = int (BUILT_IN_ASSUME_ALIGNED),
CFN_BUILT_IN_EXTEND_POINTER = int (BUILT_IN_EXTEND_POINTER),
CFN_BUILT_IN_EXTRACT_RETURN_ADDR = int (BUILT_IN_EXTRACT_RETURN_ADDR),
CFN_BUILT_IN_FFS = int (BUILT_IN_FFS),
CFN_BUILT_IN_FFSIMAX = int (BUILT_IN_FFSIMAX),
CFN_BUILT_IN_FFSL = int (BUILT_IN_FFSL),
CFN_BUILT_IN_FFSLL = int (BUILT_IN_FFSLL),
CFN_BUILT_IN_FORK = int (BUILT_IN_FORK),
CFN_BUILT_IN_FRAME_ADDRESS = int (BUILT_IN_FRAME_ADDRESS),

CFN_BUILT_IN_FREE = int (BUILT_IN_FREE),
CFN_BUILT_IN_FROB_RETURN_ADDR = int (BUILT_IN_FROB_RETURN_ADDR),
CFN_BUILT_IN_GETTEXT = int (BUILT_IN_GETTEXT),
CFN_BUILT_IN_IMAXABS = int (BUILT_IN_IMAXABS),
CFN_BUILT_IN_INIT_DWARF_REG_SIZES = int (BUILT_IN_INIT_DWARF_REG_SIZES),
CFN_BUILT_IN_FINITE = int (BUILT_IN_FINITE),
CFN_BUILT_IN_FINITEF = int (BUILT_IN_FINITEF),
CFN_BUILT_IN_FINITEL = int (BUILT_IN_FINITEL),
CFN_BUILT_IN_FINITED32 = int (BUILT_IN_FINITED32),
CFN_BUILT_IN_FINITED64 = int (BUILT_IN_FINITED64),
CFN_BUILT_IN_FINITED128 = int (BUILT_IN_FINITED128),
CFN_BUILT_IN_FPCLASSIFY = int (BUILT_IN_FPCLASSIFY),
CFN_BUILT_IN_ISFINITE = int (BUILT_IN_ISFINITE),
CFN_BUILT_IN_ISINF_SIGN = int (BUILT_IN_ISINF_SIGN),
CFN_BUILT_IN_ISINF = int (BUILT_IN_ISINF),
CFN_BUILT_IN_ISINFF = int (BUILT_IN_ISINFF),
CFN_BUILT_IN_ISINFL = int (BUILT_IN_ISINFL),
CFN_BUILT_IN_ISINFD32 = int (BUILT_IN_ISINFD32),
CFN_BUILT_IN_ISINFD64 = int (BUILT_IN_ISINFD64),
CFN_BUILT_IN_ISINFD128 = int (BUILT_IN_ISINFD128),
CFN_BUILT_IN_ISNAN = int (BUILT_IN_ISNAN),
CFN_BUILT_IN_ISNANF = int (BUILT_IN_ISNANF),
CFN_BUILT_IN_ISNANL = int (BUILT_IN_ISNANL),
CFN_BUILT_IN_ISNAND32 = int (BUILT_IN_ISNAND32),
CFN_BUILT_IN_ISNAND64 = int (BUILT_IN_ISNAND64),
CFN_BUILT_IN_ISNAND128 = int (BUILT_IN_ISNAND128),
CFN_BUILT_IN_ISNORMAL = int (BUILT_IN_ISNORMAL),
CFN_BUILT_IN_ISGREATER = int (BUILT_IN_ISGREATER),
CFN_BUILT_IN_ISGREATEREQUAL = int (BUILT_IN_ISGREATEREQUAL),
CFN_BUILT_IN_ISLESS = int (BUILT_IN_ISLESS),
CFN_BUILT_IN_ISLESSEQUAL = int (BUILT_IN_ISLESSEQUAL),
CFN_BUILT_IN_ISLESSGREATER = int (BUILT_IN_ISLESSGREATER),
CFN_BUILT_IN_ISUNORDERED = int (BUILT_IN_ISUNORDERED),
CFN_BUILT_IN_LABS = int (BUILT_IN_LABS),
CFN_BUILT_IN_LLABS = int (BUILT_IN_LLABS),
CFN_BUILT_IN_LONGJMP = int (BUILT_IN_LONGJMP),

CFN_BUILT_IN_MALLOC = int (BUILT_IN_MALLOC),
CFN_BUILT_IN_NEXT_ARG = int (BUILT_IN_NEXT_ARG),
CFN_BUILT_IN_PARITY = int (BUILT_IN_PARITY),
CFN_BUILT_IN_PARITYIMAX = int (BUILT_IN_PARITYIMAX),
CFN_BUILT_IN_PARITYL = int (BUILT_IN_PARITYL),
CFN_BUILT_IN_PARITYLL = int (BUILT_IN_PARITYLL),
CFN_BUILT_IN_POPCOUNT = int (BUILT_IN_POPCOUNT),
CFN_BUILT_IN_POPCOUNTIMAX = int (BUILT_IN_POPCOUNTIMAX),
CFN_BUILT_IN_POPCOUNTL = int (BUILT_IN_POPCOUNTL),
CFN_BUILT_IN_POPCOUNTLL = int (BUILT_IN_POPCOUNTLL),
CFN_BUILT_IN_POSIX_MEMALIGN = int (BUILT_IN_POSIX_MEMALIGN),
CFN_BUILT_IN_PREFETCH = int (BUILT_IN_PREFETCH),
CFN_BUILT_IN_REALLOC = int (BUILT_IN_REALLOC),
CFN_BUILT_IN_RETURN = int (BUILT_IN_RETURN),
CFN_BUILT_IN_RETURN_ADDRESS = int (BUILT_IN_RETURN_ADDRESS),
CFN_BUILT_IN_SAVEREGS = int (BUILT_IN_SAVEREGS),
CFN_BUILT_IN_SETJMP = int (BUILT_IN_SETJMP),
CFN_BUILT_IN_STRFMON = int (BUILT_IN_STRFMON),
CFN_BUILT_IN_STRFTIME = int (BUILT_IN_STRFTIME),
CFN_BUILT_IN_TRAP = int (BUILT_IN_TRAP),
CFN_BUILT_IN_UNREACHABLE = int (BUILT_IN_UNREACHABLE),
CFN_BUILT_IN_UNWIND_INIT = int (BUILT_IN_UNWIND_INIT),
CFN_BUILT_IN_UPDATE_SETJMP_BUF = int (BUILT_IN_UPDATE_SETJMP_BUF),
CFN_BUILT_IN_VA_COPY = int (BUILT_IN_VA_COPY),
CFN_BUILT_IN_VA_END = int (BUILT_IN_VA_END),
CFN_BUILT_IN_VA_START = int (BUILT_IN_VA_START),
CFN_BUILT_IN_VA_ARG_PACK = int (BUILT_IN_VA_ARG_PACK),
CFN_BUILT_IN_VA_ARG_PACK_LEN = int (BUILT_IN_VA_ARG_PACK_LEN),
CFN_BUILT_IN__EXIT = int (BUILT_IN__EXIT),
CFN_BUILT_IN__EXIT2 = int (BUILT_IN__EXIT2),


CFN_BUILT_IN_INIT_TRAMPOLINE = int (BUILT_IN_INIT_TRAMPOLINE),
CFN_BUILT_IN_INIT_HEAP_TRAMPOLINE = int (BUILT_IN_INIT_HEAP_TRAMPOLINE),
CFN_BUILT_IN_ADJUST_TRAMPOLINE = int (BUILT_IN_ADJUST_TRAMPOLINE),
CFN_BUILT_IN_INIT_DESCRIPTOR = int (BUILT_IN_INIT_DESCRIPTOR),
CFN_BUILT_IN_ADJUST_DESCRIPTOR = int (BUILT_IN_ADJUST_DESCRIPTOR),
CFN_BUILT_IN_NONLOCAL_GOTO = int (BUILT_IN_NONLOCAL_GOTO),


CFN_BUILT_IN_SETJMP_SETUP = int (BUILT_IN_SETJMP_SETUP),
CFN_BUILT_IN_SETJMP_RECEIVER = int (BUILT_IN_SETJMP_RECEIVER),


CFN_BUILT_IN_STACK_SAVE = int (BUILT_IN_STACK_SAVE),
CFN_BUILT_IN_STACK_RESTORE = int (BUILT_IN_STACK_RESTORE),
CFN_BUILT_IN_ALLOCA_WITH_ALIGN = int (BUILT_IN_ALLOCA_WITH_ALIGN),
CFN_BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX = int (BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX),



CFN_BUILT_IN_MEMCMP_EQ = int (BUILT_IN_MEMCMP_EQ),


CFN_BUILT_IN_OBJECT_SIZE = int (BUILT_IN_OBJECT_SIZE),
CFN_BUILT_IN_MEMCPY_CHK = int (BUILT_IN_MEMCPY_CHK),
CFN_BUILT_IN_MEMMOVE_CHK = int (BUILT_IN_MEMMOVE_CHK),
CFN_BUILT_IN_MEMPCPY_CHK = int (BUILT_IN_MEMPCPY_CHK),
CFN_BUILT_IN_MEMSET_CHK = int (BUILT_IN_MEMSET_CHK),
CFN_BUILT_IN_STPCPY_CHK = int (BUILT_IN_STPCPY_CHK),
CFN_BUILT_IN_STPNCPY_CHK = int (BUILT_IN_STPNCPY_CHK),
CFN_BUILT_IN_STRCAT_CHK = int (BUILT_IN_STRCAT_CHK),
CFN_BUILT_IN_STRCPY_CHK = int (BUILT_IN_STRCPY_CHK),
CFN_BUILT_IN_STRNCAT_CHK = int (BUILT_IN_STRNCAT_CHK),
CFN_BUILT_IN_STRNCPY_CHK = int (BUILT_IN_STRNCPY_CHK),
CFN_BUILT_IN_SNPRINTF_CHK = int (BUILT_IN_SNPRINTF_CHK),
CFN_BUILT_IN_SPRINTF_CHK = int (BUILT_IN_SPRINTF_CHK),
CFN_BUILT_IN_VSNPRINTF_CHK = int (BUILT_IN_VSNPRINTF_CHK),
CFN_BUILT_IN_VSPRINTF_CHK = int (BUILT_IN_VSPRINTF_CHK),
CFN_BUILT_IN_FPRINTF_CHK = int (BUILT_IN_FPRINTF_CHK),
CFN_BUILT_IN_PRINTF_CHK = int (BUILT_IN_PRINTF_CHK),
CFN_BUILT_IN_VFPRINTF_CHK = int (BUILT_IN_VFPRINTF_CHK),
CFN_BUILT_IN_VPRINTF_CHK = int (BUILT_IN_VPRINTF_CHK),


CFN_BUILT_IN_PROFILE_FUNC_ENTER = int (BUILT_IN_PROFILE_FUNC_ENTER),

CFN_BUILT_IN_PROFILE_FUNC_EXIT = int (BUILT_IN_PROFILE_FUNC_EXIT),



CFN_BUILT_IN_THREAD_POINTER = int (BUILT_IN_THREAD_POINTER),




CFN_BUILT_IN_SET_THREAD_POINTER = int (BUILT_IN_SET_THREAD_POINTER),





CFN_BUILT_IN_EMUTLS_GET_ADDRESS = int (BUILT_IN_EMUTLS_GET_ADDRESS),




CFN_BUILT_IN_EMUTLS_REGISTER_COMMON = int (BUILT_IN_EMUTLS_REGISTER_COMMON),






CFN_BUILT_IN_UNWIND_RESUME = int (BUILT_IN_UNWIND_RESUME),
CFN_BUILT_IN_CXA_END_CLEANUP = int (BUILT_IN_CXA_END_CLEANUP),
CFN_BUILT_IN_EH_POINTER = int (BUILT_IN_EH_POINTER),
CFN_BUILT_IN_EH_FILTER = int (BUILT_IN_EH_FILTER),
CFN_BUILT_IN_EH_COPY_VALUES = int (BUILT_IN_EH_COPY_VALUES),


CFN_BUILT_IN_FILE = int (BUILT_IN_FILE),
CFN_BUILT_IN_FUNCTION = int (BUILT_IN_FUNCTION),
CFN_BUILT_IN_LINE = int (BUILT_IN_LINE),


# 1 "../../gcc/sync-builtins.def" 1
# 31 "../../gcc/sync-builtins.def"
CFN_BUILT_IN_SYNC_FETCH_AND_ADD_N = int (BUILT_IN_SYNC_FETCH_AND_ADD_N),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_1 = int (BUILT_IN_SYNC_FETCH_AND_ADD_1),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_2 = int (BUILT_IN_SYNC_FETCH_AND_ADD_2),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_4 = int (BUILT_IN_SYNC_FETCH_AND_ADD_4),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_8 = int (BUILT_IN_SYNC_FETCH_AND_ADD_8),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_16 = int (BUILT_IN_SYNC_FETCH_AND_ADD_16),


CFN_BUILT_IN_SYNC_FETCH_AND_SUB_N = int (BUILT_IN_SYNC_FETCH_AND_SUB_N),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_1 = int (BUILT_IN_SYNC_FETCH_AND_SUB_1),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_2 = int (BUILT_IN_SYNC_FETCH_AND_SUB_2),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_4 = int (BUILT_IN_SYNC_FETCH_AND_SUB_4),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_8 = int (BUILT_IN_SYNC_FETCH_AND_SUB_8),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_16 = int (BUILT_IN_SYNC_FETCH_AND_SUB_16),


CFN_BUILT_IN_SYNC_FETCH_AND_OR_N = int (BUILT_IN_SYNC_FETCH_AND_OR_N),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_1 = int (BUILT_IN_SYNC_FETCH_AND_OR_1),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_2 = int (BUILT_IN_SYNC_FETCH_AND_OR_2),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_4 = int (BUILT_IN_SYNC_FETCH_AND_OR_4),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_8 = int (BUILT_IN_SYNC_FETCH_AND_OR_8),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_16 = int (BUILT_IN_SYNC_FETCH_AND_OR_16),


CFN_BUILT_IN_SYNC_FETCH_AND_AND_N = int (BUILT_IN_SYNC_FETCH_AND_AND_N),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_1 = int (BUILT_IN_SYNC_FETCH_AND_AND_1),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_2 = int (BUILT_IN_SYNC_FETCH_AND_AND_2),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_4 = int (BUILT_IN_SYNC_FETCH_AND_AND_4),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_8 = int (BUILT_IN_SYNC_FETCH_AND_AND_8),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_16 = int (BUILT_IN_SYNC_FETCH_AND_AND_16),


CFN_BUILT_IN_SYNC_FETCH_AND_XOR_N = int (BUILT_IN_SYNC_FETCH_AND_XOR_N),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_1 = int (BUILT_IN_SYNC_FETCH_AND_XOR_1),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_2 = int (BUILT_IN_SYNC_FETCH_AND_XOR_2),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_4 = int (BUILT_IN_SYNC_FETCH_AND_XOR_4),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_8 = int (BUILT_IN_SYNC_FETCH_AND_XOR_8),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_16 = int (BUILT_IN_SYNC_FETCH_AND_XOR_16),


CFN_BUILT_IN_SYNC_FETCH_AND_NAND_N = int (BUILT_IN_SYNC_FETCH_AND_NAND_N),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_1 = int (BUILT_IN_SYNC_FETCH_AND_NAND_1),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_2 = int (BUILT_IN_SYNC_FETCH_AND_NAND_2),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_4 = int (BUILT_IN_SYNC_FETCH_AND_NAND_4),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_8 = int (BUILT_IN_SYNC_FETCH_AND_NAND_8),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_16 = int (BUILT_IN_SYNC_FETCH_AND_NAND_16),


CFN_BUILT_IN_SYNC_ADD_AND_FETCH_N = int (BUILT_IN_SYNC_ADD_AND_FETCH_N),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_1 = int (BUILT_IN_SYNC_ADD_AND_FETCH_1),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_2 = int (BUILT_IN_SYNC_ADD_AND_FETCH_2),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_4 = int (BUILT_IN_SYNC_ADD_AND_FETCH_4),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_8 = int (BUILT_IN_SYNC_ADD_AND_FETCH_8),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_16 = int (BUILT_IN_SYNC_ADD_AND_FETCH_16),


CFN_BUILT_IN_SYNC_SUB_AND_FETCH_N = int (BUILT_IN_SYNC_SUB_AND_FETCH_N),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_1 = int (BUILT_IN_SYNC_SUB_AND_FETCH_1),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_2 = int (BUILT_IN_SYNC_SUB_AND_FETCH_2),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_4 = int (BUILT_IN_SYNC_SUB_AND_FETCH_4),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_8 = int (BUILT_IN_SYNC_SUB_AND_FETCH_8),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_16 = int (BUILT_IN_SYNC_SUB_AND_FETCH_16),


CFN_BUILT_IN_SYNC_OR_AND_FETCH_N = int (BUILT_IN_SYNC_OR_AND_FETCH_N),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_1 = int (BUILT_IN_SYNC_OR_AND_FETCH_1),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_2 = int (BUILT_IN_SYNC_OR_AND_FETCH_2),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_4 = int (BUILT_IN_SYNC_OR_AND_FETCH_4),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_8 = int (BUILT_IN_SYNC_OR_AND_FETCH_8),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_16 = int (BUILT_IN_SYNC_OR_AND_FETCH_16),


CFN_BUILT_IN_SYNC_AND_AND_FETCH_N = int (BUILT_IN_SYNC_AND_AND_FETCH_N),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_1 = int (BUILT_IN_SYNC_AND_AND_FETCH_1),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_2 = int (BUILT_IN_SYNC_AND_AND_FETCH_2),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_4 = int (BUILT_IN_SYNC_AND_AND_FETCH_4),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_8 = int (BUILT_IN_SYNC_AND_AND_FETCH_8),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_16 = int (BUILT_IN_SYNC_AND_AND_FETCH_16),


CFN_BUILT_IN_SYNC_XOR_AND_FETCH_N = int (BUILT_IN_SYNC_XOR_AND_FETCH_N),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_1 = int (BUILT_IN_SYNC_XOR_AND_FETCH_1),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_2 = int (BUILT_IN_SYNC_XOR_AND_FETCH_2),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_4 = int (BUILT_IN_SYNC_XOR_AND_FETCH_4),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_8 = int (BUILT_IN_SYNC_XOR_AND_FETCH_8),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_16 = int (BUILT_IN_SYNC_XOR_AND_FETCH_16),


CFN_BUILT_IN_SYNC_NAND_AND_FETCH_N = int (BUILT_IN_SYNC_NAND_AND_FETCH_N),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_1 = int (BUILT_IN_SYNC_NAND_AND_FETCH_1),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_2 = int (BUILT_IN_SYNC_NAND_AND_FETCH_2),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_4 = int (BUILT_IN_SYNC_NAND_AND_FETCH_4),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_8 = int (BUILT_IN_SYNC_NAND_AND_FETCH_8),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_16 = int (BUILT_IN_SYNC_NAND_AND_FETCH_16),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16),



CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16),



CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_N = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_N),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_1 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_1),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_2 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_2),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_4 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_4),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_8 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_8),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_16 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_16),



CFN_BUILT_IN_SYNC_LOCK_RELEASE_N = int (BUILT_IN_SYNC_LOCK_RELEASE_N),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_1 = int (BUILT_IN_SYNC_LOCK_RELEASE_1),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_2 = int (BUILT_IN_SYNC_LOCK_RELEASE_2),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_4 = int (BUILT_IN_SYNC_LOCK_RELEASE_4),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_8 = int (BUILT_IN_SYNC_LOCK_RELEASE_8),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_16 = int (BUILT_IN_SYNC_LOCK_RELEASE_16),


CFN_BUILT_IN_SYNC_SYNCHRONIZE = int (BUILT_IN_SYNC_SYNCHRONIZE),




CFN_BUILT_IN_ATOMIC_TEST_AND_SET = int (BUILT_IN_ATOMIC_TEST_AND_SET),


CFN_BUILT_IN_ATOMIC_CLEAR = int (BUILT_IN_ATOMIC_CLEAR),


CFN_BUILT_IN_ATOMIC_EXCHANGE = int (BUILT_IN_ATOMIC_EXCHANGE),


CFN_BUILT_IN_ATOMIC_EXCHANGE_N = int (BUILT_IN_ATOMIC_EXCHANGE_N),


CFN_BUILT_IN_ATOMIC_EXCHANGE_1 = int (BUILT_IN_ATOMIC_EXCHANGE_1),


CFN_BUILT_IN_ATOMIC_EXCHANGE_2 = int (BUILT_IN_ATOMIC_EXCHANGE_2),


CFN_BUILT_IN_ATOMIC_EXCHANGE_4 = int (BUILT_IN_ATOMIC_EXCHANGE_4),


CFN_BUILT_IN_ATOMIC_EXCHANGE_8 = int (BUILT_IN_ATOMIC_EXCHANGE_8),


CFN_BUILT_IN_ATOMIC_EXCHANGE_16 = int (BUILT_IN_ATOMIC_EXCHANGE_16),



CFN_BUILT_IN_ATOMIC_LOAD = int (BUILT_IN_ATOMIC_LOAD),



CFN_BUILT_IN_ATOMIC_LOAD_N = int (BUILT_IN_ATOMIC_LOAD_N),


CFN_BUILT_IN_ATOMIC_LOAD_1 = int (BUILT_IN_ATOMIC_LOAD_1),


CFN_BUILT_IN_ATOMIC_LOAD_2 = int (BUILT_IN_ATOMIC_LOAD_2),


CFN_BUILT_IN_ATOMIC_LOAD_4 = int (BUILT_IN_ATOMIC_LOAD_4),


CFN_BUILT_IN_ATOMIC_LOAD_8 = int (BUILT_IN_ATOMIC_LOAD_8),


CFN_BUILT_IN_ATOMIC_LOAD_16 = int (BUILT_IN_ATOMIC_LOAD_16),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N),


CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16),




CFN_BUILT_IN_ATOMIC_STORE = int (BUILT_IN_ATOMIC_STORE),


CFN_BUILT_IN_ATOMIC_STORE_N = int (BUILT_IN_ATOMIC_STORE_N),


CFN_BUILT_IN_ATOMIC_STORE_1 = int (BUILT_IN_ATOMIC_STORE_1),


CFN_BUILT_IN_ATOMIC_STORE_2 = int (BUILT_IN_ATOMIC_STORE_2),


CFN_BUILT_IN_ATOMIC_STORE_4 = int (BUILT_IN_ATOMIC_STORE_4),


CFN_BUILT_IN_ATOMIC_STORE_8 = int (BUILT_IN_ATOMIC_STORE_8),


CFN_BUILT_IN_ATOMIC_STORE_16 = int (BUILT_IN_ATOMIC_STORE_16),



CFN_BUILT_IN_ATOMIC_ADD_FETCH_N = int (BUILT_IN_ATOMIC_ADD_FETCH_N),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_1 = int (BUILT_IN_ATOMIC_ADD_FETCH_1),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_2 = int (BUILT_IN_ATOMIC_ADD_FETCH_2),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_4 = int (BUILT_IN_ATOMIC_ADD_FETCH_4),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_8 = int (BUILT_IN_ATOMIC_ADD_FETCH_8),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_16 = int (BUILT_IN_ATOMIC_ADD_FETCH_16),



CFN_BUILT_IN_ATOMIC_SUB_FETCH_N = int (BUILT_IN_ATOMIC_SUB_FETCH_N),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_1 = int (BUILT_IN_ATOMIC_SUB_FETCH_1),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_2 = int (BUILT_IN_ATOMIC_SUB_FETCH_2),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_4 = int (BUILT_IN_ATOMIC_SUB_FETCH_4),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_8 = int (BUILT_IN_ATOMIC_SUB_FETCH_8),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_16 = int (BUILT_IN_ATOMIC_SUB_FETCH_16),



CFN_BUILT_IN_ATOMIC_AND_FETCH_N = int (BUILT_IN_ATOMIC_AND_FETCH_N),


CFN_BUILT_IN_ATOMIC_AND_FETCH_1 = int (BUILT_IN_ATOMIC_AND_FETCH_1),


CFN_BUILT_IN_ATOMIC_AND_FETCH_2 = int (BUILT_IN_ATOMIC_AND_FETCH_2),


CFN_BUILT_IN_ATOMIC_AND_FETCH_4 = int (BUILT_IN_ATOMIC_AND_FETCH_4),


CFN_BUILT_IN_ATOMIC_AND_FETCH_8 = int (BUILT_IN_ATOMIC_AND_FETCH_8),


CFN_BUILT_IN_ATOMIC_AND_FETCH_16 = int (BUILT_IN_ATOMIC_AND_FETCH_16),



CFN_BUILT_IN_ATOMIC_NAND_FETCH_N = int (BUILT_IN_ATOMIC_NAND_FETCH_N),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_1 = int (BUILT_IN_ATOMIC_NAND_FETCH_1),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_2 = int (BUILT_IN_ATOMIC_NAND_FETCH_2),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_4 = int (BUILT_IN_ATOMIC_NAND_FETCH_4),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_8 = int (BUILT_IN_ATOMIC_NAND_FETCH_8),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_16 = int (BUILT_IN_ATOMIC_NAND_FETCH_16),



CFN_BUILT_IN_ATOMIC_XOR_FETCH_N = int (BUILT_IN_ATOMIC_XOR_FETCH_N),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_1 = int (BUILT_IN_ATOMIC_XOR_FETCH_1),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_2 = int (BUILT_IN_ATOMIC_XOR_FETCH_2),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_4 = int (BUILT_IN_ATOMIC_XOR_FETCH_4),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_8 = int (BUILT_IN_ATOMIC_XOR_FETCH_8),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_16 = int (BUILT_IN_ATOMIC_XOR_FETCH_16),



CFN_BUILT_IN_ATOMIC_OR_FETCH_N = int (BUILT_IN_ATOMIC_OR_FETCH_N),


CFN_BUILT_IN_ATOMIC_OR_FETCH_1 = int (BUILT_IN_ATOMIC_OR_FETCH_1),


CFN_BUILT_IN_ATOMIC_OR_FETCH_2 = int (BUILT_IN_ATOMIC_OR_FETCH_2),


CFN_BUILT_IN_ATOMIC_OR_FETCH_4 = int (BUILT_IN_ATOMIC_OR_FETCH_4),


CFN_BUILT_IN_ATOMIC_OR_FETCH_8 = int (BUILT_IN_ATOMIC_OR_FETCH_8),


CFN_BUILT_IN_ATOMIC_OR_FETCH_16 = int (BUILT_IN_ATOMIC_OR_FETCH_16),



CFN_BUILT_IN_ATOMIC_FETCH_ADD_N = int (BUILT_IN_ATOMIC_FETCH_ADD_N),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_1 = int (BUILT_IN_ATOMIC_FETCH_ADD_1),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_2 = int (BUILT_IN_ATOMIC_FETCH_ADD_2),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_4 = int (BUILT_IN_ATOMIC_FETCH_ADD_4),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_8 = int (BUILT_IN_ATOMIC_FETCH_ADD_8),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_16 = int (BUILT_IN_ATOMIC_FETCH_ADD_16),



CFN_BUILT_IN_ATOMIC_FETCH_SUB_N = int (BUILT_IN_ATOMIC_FETCH_SUB_N),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_1 = int (BUILT_IN_ATOMIC_FETCH_SUB_1),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_2 = int (BUILT_IN_ATOMIC_FETCH_SUB_2),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_4 = int (BUILT_IN_ATOMIC_FETCH_SUB_4),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_8 = int (BUILT_IN_ATOMIC_FETCH_SUB_8),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_16 = int (BUILT_IN_ATOMIC_FETCH_SUB_16),



CFN_BUILT_IN_ATOMIC_FETCH_AND_N = int (BUILT_IN_ATOMIC_FETCH_AND_N),


CFN_BUILT_IN_ATOMIC_FETCH_AND_1 = int (BUILT_IN_ATOMIC_FETCH_AND_1),


CFN_BUILT_IN_ATOMIC_FETCH_AND_2 = int (BUILT_IN_ATOMIC_FETCH_AND_2),


CFN_BUILT_IN_ATOMIC_FETCH_AND_4 = int (BUILT_IN_ATOMIC_FETCH_AND_4),


CFN_BUILT_IN_ATOMIC_FETCH_AND_8 = int (BUILT_IN_ATOMIC_FETCH_AND_8),


CFN_BUILT_IN_ATOMIC_FETCH_AND_16 = int (BUILT_IN_ATOMIC_FETCH_AND_16),



CFN_BUILT_IN_ATOMIC_FETCH_NAND_N = int (BUILT_IN_ATOMIC_FETCH_NAND_N),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_1 = int (BUILT_IN_ATOMIC_FETCH_NAND_1),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_2 = int (BUILT_IN_ATOMIC_FETCH_NAND_2),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_4 = int (BUILT_IN_ATOMIC_FETCH_NAND_4),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_8 = int (BUILT_IN_ATOMIC_FETCH_NAND_8),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_16 = int (BUILT_IN_ATOMIC_FETCH_NAND_16),



CFN_BUILT_IN_ATOMIC_FETCH_XOR_N = int (BUILT_IN_ATOMIC_FETCH_XOR_N),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_1 = int (BUILT_IN_ATOMIC_FETCH_XOR_1),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_2 = int (BUILT_IN_ATOMIC_FETCH_XOR_2),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_4 = int (BUILT_IN_ATOMIC_FETCH_XOR_4),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_8 = int (BUILT_IN_ATOMIC_FETCH_XOR_8),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_16 = int (BUILT_IN_ATOMIC_FETCH_XOR_16),




CFN_BUILT_IN_ATOMIC_FETCH_OR_N = int (BUILT_IN_ATOMIC_FETCH_OR_N),


CFN_BUILT_IN_ATOMIC_FETCH_OR_1 = int (BUILT_IN_ATOMIC_FETCH_OR_1),


CFN_BUILT_IN_ATOMIC_FETCH_OR_2 = int (BUILT_IN_ATOMIC_FETCH_OR_2),


CFN_BUILT_IN_ATOMIC_FETCH_OR_4 = int (BUILT_IN_ATOMIC_FETCH_OR_4),


CFN_BUILT_IN_ATOMIC_FETCH_OR_8 = int (BUILT_IN_ATOMIC_FETCH_OR_8),


CFN_BUILT_IN_ATOMIC_FETCH_OR_16 = int (BUILT_IN_ATOMIC_FETCH_OR_16),



CFN_BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE = int (BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE),



CFN_BUILT_IN_ATOMIC_IS_LOCK_FREE = int (BUILT_IN_ATOMIC_IS_LOCK_FREE),




CFN_BUILT_IN_ATOMIC_THREAD_FENCE = int (BUILT_IN_ATOMIC_THREAD_FENCE),



CFN_BUILT_IN_ATOMIC_SIGNAL_FENCE = int (BUILT_IN_ATOMIC_SIGNAL_FENCE),






CFN_BUILT_IN_ATOMIC_FERAISEEXCEPT = int (BUILT_IN_ATOMIC_FERAISEEXCEPT),
# 1034 "../../gcc/builtins.def" 2


# 1 "../../gcc/omp-builtins.def" 1
# 32 "../../gcc/omp-builtins.def"
CFN_BUILT_IN_ACC_GET_DEVICE_TYPE = int (BUILT_IN_ACC_GET_DEVICE_TYPE),

CFN_BUILT_IN_GOACC_DATA_START = int (BUILT_IN_GOACC_DATA_START),

CFN_BUILT_IN_GOACC_DATA_END = int (BUILT_IN_GOACC_DATA_END),

CFN_BUILT_IN_GOACC_ENTER_EXIT_DATA = int (BUILT_IN_GOACC_ENTER_EXIT_DATA),


CFN_BUILT_IN_GOACC_PARALLEL = int (BUILT_IN_GOACC_PARALLEL),


CFN_BUILT_IN_GOACC_UPDATE = int (BUILT_IN_GOACC_UPDATE),


CFN_BUILT_IN_GOACC_WAIT = int (BUILT_IN_GOACC_WAIT),



CFN_BUILT_IN_ACC_ON_DEVICE = int (BUILT_IN_ACC_ON_DEVICE),


CFN_BUILT_IN_OMP_GET_THREAD_NUM = int (BUILT_IN_OMP_GET_THREAD_NUM),

CFN_BUILT_IN_OMP_GET_NUM_THREADS = int (BUILT_IN_OMP_GET_NUM_THREADS),

CFN_BUILT_IN_OMP_GET_TEAM_NUM = int (BUILT_IN_OMP_GET_TEAM_NUM),

CFN_BUILT_IN_OMP_GET_NUM_TEAMS = int (BUILT_IN_OMP_GET_NUM_TEAMS),


CFN_BUILT_IN_GOMP_ATOMIC_START = int (BUILT_IN_GOMP_ATOMIC_START),

CFN_BUILT_IN_GOMP_ATOMIC_END = int (BUILT_IN_GOMP_ATOMIC_END),

CFN_BUILT_IN_GOMP_BARRIER = int (BUILT_IN_GOMP_BARRIER),

CFN_BUILT_IN_GOMP_BARRIER_CANCEL = int (BUILT_IN_GOMP_BARRIER_CANCEL),

CFN_BUILT_IN_GOMP_TASKWAIT = int (BUILT_IN_GOMP_TASKWAIT),

CFN_BUILT_IN_GOMP_TASKYIELD = int (BUILT_IN_GOMP_TASKYIELD),

CFN_BUILT_IN_GOMP_TASKGROUP_START = int (BUILT_IN_GOMP_TASKGROUP_START),

CFN_BUILT_IN_GOMP_TASKGROUP_END = int (BUILT_IN_GOMP_TASKGROUP_END),

CFN_BUILT_IN_GOMP_CANCEL = int (BUILT_IN_GOMP_CANCEL),

CFN_BUILT_IN_GOMP_CANCELLATION_POINT = int (BUILT_IN_GOMP_CANCELLATION_POINT),

CFN_BUILT_IN_GOMP_CRITICAL_START = int (BUILT_IN_GOMP_CRITICAL_START),

CFN_BUILT_IN_GOMP_CRITICAL_END = int (BUILT_IN_GOMP_CRITICAL_END),

CFN_BUILT_IN_GOMP_CRITICAL_NAME_START = int (BUILT_IN_GOMP_CRITICAL_NAME_START),


CFN_BUILT_IN_GOMP_CRITICAL_NAME_END = int (BUILT_IN_GOMP_CRITICAL_NAME_END),





CFN_BUILT_IN_GOMP_LOOP_STATIC_START = int (BUILT_IN_GOMP_LOOP_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_GUIDED_START = int (BUILT_IN_GOMP_LOOP_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START = int (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_STATIC_NEXT),

CFN_BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT),

CFN_BUILT_IN_GOMP_LOOP_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_GUIDED_NEXT),

CFN_BUILT_IN_GOMP_LOOP_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_RUNTIME_NEXT),

CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT),





CFN_BUILT_IN_GOMP_PARALLEL_LOOP_STATIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED = int (BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED),



CFN_BUILT_IN_GOMP_LOOP_END = int (BUILT_IN_GOMP_LOOP_END),

CFN_BUILT_IN_GOMP_LOOP_END_CANCEL = int (BUILT_IN_GOMP_LOOP_END_CANCEL),

CFN_BUILT_IN_GOMP_LOOP_END_NOWAIT = int (BUILT_IN_GOMP_LOOP_END_NOWAIT),

CFN_BUILT_IN_GOMP_ORDERED_START = int (BUILT_IN_GOMP_ORDERED_START),

CFN_BUILT_IN_GOMP_ORDERED_END = int (BUILT_IN_GOMP_ORDERED_END),

CFN_BUILT_IN_GOMP_DOACROSS_POST = int (BUILT_IN_GOMP_DOACROSS_POST),

CFN_BUILT_IN_GOMP_DOACROSS_WAIT = int (BUILT_IN_GOMP_DOACROSS_WAIT),

CFN_BUILT_IN_GOMP_DOACROSS_ULL_POST = int (BUILT_IN_GOMP_DOACROSS_ULL_POST),

CFN_BUILT_IN_GOMP_DOACROSS_ULL_WAIT = int (BUILT_IN_GOMP_DOACROSS_ULL_WAIT),

CFN_BUILT_IN_GOMP_PARALLEL = int (BUILT_IN_GOMP_PARALLEL),

CFN_BUILT_IN_GOMP_TASK = int (BUILT_IN_GOMP_TASK),


CFN_BUILT_IN_GOMP_TASKLOOP = int (BUILT_IN_GOMP_TASKLOOP),


CFN_BUILT_IN_GOMP_TASKLOOP_ULL = int (BUILT_IN_GOMP_TASKLOOP_ULL),


CFN_BUILT_IN_GOMP_SECTIONS_START = int (BUILT_IN_GOMP_SECTIONS_START),

CFN_BUILT_IN_GOMP_SECTIONS_NEXT = int (BUILT_IN_GOMP_SECTIONS_NEXT),

CFN_BUILT_IN_GOMP_PARALLEL_SECTIONS = int (BUILT_IN_GOMP_PARALLEL_SECTIONS),


CFN_BUILT_IN_GOMP_SECTIONS_END = int (BUILT_IN_GOMP_SECTIONS_END),

CFN_BUILT_IN_GOMP_SECTIONS_END_CANCEL = int (BUILT_IN_GOMP_SECTIONS_END_CANCEL),


CFN_BUILT_IN_GOMP_SECTIONS_END_NOWAIT = int (BUILT_IN_GOMP_SECTIONS_END_NOWAIT),


CFN_BUILT_IN_GOMP_SINGLE_START = int (BUILT_IN_GOMP_SINGLE_START),

CFN_BUILT_IN_GOMP_SINGLE_COPY_START = int (BUILT_IN_GOMP_SINGLE_COPY_START),

CFN_BUILT_IN_GOMP_SINGLE_COPY_END = int (BUILT_IN_GOMP_SINGLE_COPY_END),

CFN_BUILT_IN_GOMP_OFFLOAD_REGISTER = int (BUILT_IN_GOMP_OFFLOAD_REGISTER),

CFN_BUILT_IN_GOMP_OFFLOAD_UNREGISTER = int (BUILT_IN_GOMP_OFFLOAD_UNREGISTER),


CFN_BUILT_IN_GOMP_TARGET = int (BUILT_IN_GOMP_TARGET),


CFN_BUILT_IN_GOMP_TARGET_DATA = int (BUILT_IN_GOMP_TARGET_DATA),

CFN_BUILT_IN_GOMP_TARGET_END_DATA = int (BUILT_IN_GOMP_TARGET_END_DATA),

CFN_BUILT_IN_GOMP_TARGET_UPDATE = int (BUILT_IN_GOMP_TARGET_UPDATE),


CFN_BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA = int (BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA),


CFN_BUILT_IN_GOMP_TEAMS = int (BUILT_IN_GOMP_TEAMS),

CFN_BUILT_IN_GOACC_DECLARE = int (BUILT_IN_GOACC_DECLARE),
# 1037 "../../gcc/builtins.def" 2


# 1 "../../gcc/hsa-builtins.def" 1
# 30 "../../gcc/hsa-builtins.def"
CFN_BUILT_IN_HSA_WORKGROUPID = int (BUILT_IN_HSA_WORKGROUPID),

CFN_BUILT_IN_HSA_WORKITEMID = int (BUILT_IN_HSA_WORKITEMID),

CFN_BUILT_IN_HSA_WORKITEMABSID = int (BUILT_IN_HSA_WORKITEMABSID),

CFN_BUILT_IN_HSA_GRIDSIZE = int (BUILT_IN_HSA_GRIDSIZE),

CFN_BUILT_IN_HSA_CURRENTWORKGROUPSIZE = int (BUILT_IN_HSA_CURRENTWORKGROUPSIZE),
# 1040 "../../gcc/builtins.def" 2


# 1 "../../gcc/gtm-builtins.def" 1
CFN_BUILT_IN_TM_START = int (BUILT_IN_TM_START),


CFN_BUILT_IN_TM_COMMIT = int (BUILT_IN_TM_COMMIT),

CFN_BUILT_IN_TM_COMMIT_EH = int (BUILT_IN_TM_COMMIT_EH),

CFN_BUILT_IN_TM_ABORT = int (BUILT_IN_TM_ABORT),

CFN_BUILT_IN_TM_IRREVOCABLE = int (BUILT_IN_TM_IRREVOCABLE),


CFN_BUILT_IN_TM_MEMCPY = int (BUILT_IN_TM_MEMCPY),

CFN_BUILT_IN_TM_MEMCPY_RNWT = int (BUILT_IN_TM_MEMCPY_RNWT),

CFN_BUILT_IN_TM_MEMCPY_RTWN = int (BUILT_IN_TM_MEMCPY_RTWN),

CFN_BUILT_IN_TM_MEMMOVE = int (BUILT_IN_TM_MEMMOVE),

CFN_BUILT_IN_TM_MEMSET = int (BUILT_IN_TM_MEMSET),


CFN_BUILT_IN_TM_GETTMCLONE_IRR = int (BUILT_IN_TM_GETTMCLONE_IRR),

CFN_BUILT_IN_TM_GETTMCLONE_SAFE = int (BUILT_IN_TM_GETTMCLONE_SAFE),



CFN_BUILT_IN_TM_MALLOC = int (BUILT_IN_TM_MALLOC),

CFN_BUILT_IN_TM_CALLOC = int (BUILT_IN_TM_CALLOC),

CFN_BUILT_IN_TM_FREE = int (BUILT_IN_TM_FREE),



CFN_BUILT_IN_TM_LOG_1 = int (BUILT_IN_TM_LOG_1),

CFN_BUILT_IN_TM_LOG_2 = int (BUILT_IN_TM_LOG_2),

CFN_BUILT_IN_TM_LOG_4 = int (BUILT_IN_TM_LOG_4),

CFN_BUILT_IN_TM_LOG_8 = int (BUILT_IN_TM_LOG_8),

CFN_BUILT_IN_TM_LOG_FLOAT = int (BUILT_IN_TM_LOG_FLOAT),

CFN_BUILT_IN_TM_LOG_DOUBLE = int (BUILT_IN_TM_LOG_DOUBLE),

CFN_BUILT_IN_TM_LOG_LDOUBLE = int (BUILT_IN_TM_LOG_LDOUBLE),

CFN_BUILT_IN_TM_LOG = int (BUILT_IN_TM_LOG),



CFN_BUILT_IN_TM_LOG_M64 = int (BUILT_IN_TM_LOG_M64),
CFN_BUILT_IN_TM_LOG_M128 = int (BUILT_IN_TM_LOG_M128),
CFN_BUILT_IN_TM_LOG_M256 = int (BUILT_IN_TM_LOG_M256),
# 67 "../../gcc/gtm-builtins.def"
CFN_BUILT_IN_TM_STORE_1 = int (BUILT_IN_TM_STORE_1),

CFN_BUILT_IN_TM_STORE_WAR_1 = int (BUILT_IN_TM_STORE_WAR_1),

CFN_BUILT_IN_TM_STORE_WAW_1 = int (BUILT_IN_TM_STORE_WAW_1),


CFN_BUILT_IN_TM_STORE_2 = int (BUILT_IN_TM_STORE_2),

CFN_BUILT_IN_TM_STORE_WAR_2 = int (BUILT_IN_TM_STORE_WAR_2),

CFN_BUILT_IN_TM_STORE_WAW_2 = int (BUILT_IN_TM_STORE_WAW_2),


CFN_BUILT_IN_TM_STORE_4 = int (BUILT_IN_TM_STORE_4),

CFN_BUILT_IN_TM_STORE_WAR_4 = int (BUILT_IN_TM_STORE_WAR_4),

CFN_BUILT_IN_TM_STORE_WAW_4 = int (BUILT_IN_TM_STORE_WAW_4),


CFN_BUILT_IN_TM_STORE_8 = int (BUILT_IN_TM_STORE_8),

CFN_BUILT_IN_TM_STORE_WAR_8 = int (BUILT_IN_TM_STORE_WAR_8),

CFN_BUILT_IN_TM_STORE_WAW_8 = int (BUILT_IN_TM_STORE_WAW_8),


CFN_BUILT_IN_TM_STORE_FLOAT = int (BUILT_IN_TM_STORE_FLOAT),

CFN_BUILT_IN_TM_STORE_WAR_FLOAT = int (BUILT_IN_TM_STORE_WAR_FLOAT),

CFN_BUILT_IN_TM_STORE_WAW_FLOAT = int (BUILT_IN_TM_STORE_WAW_FLOAT),


CFN_BUILT_IN_TM_STORE_DOUBLE = int (BUILT_IN_TM_STORE_DOUBLE),

CFN_BUILT_IN_TM_STORE_WAR_DOUBLE = int (BUILT_IN_TM_STORE_WAR_DOUBLE),

CFN_BUILT_IN_TM_STORE_WAW_DOUBLE = int (BUILT_IN_TM_STORE_WAW_DOUBLE),



CFN_BUILT_IN_TM_STORE_M64 = int (BUILT_IN_TM_STORE_M64),
CFN_BUILT_IN_TM_STORE_WAR_M64 = int (BUILT_IN_TM_STORE_WAR_M64),
CFN_BUILT_IN_TM_STORE_WAW_M64 = int (BUILT_IN_TM_STORE_WAW_M64),
CFN_BUILT_IN_TM_STORE_M128 = int (BUILT_IN_TM_STORE_M128),
CFN_BUILT_IN_TM_STORE_WAR_M128 = int (BUILT_IN_TM_STORE_WAR_M128),
CFN_BUILT_IN_TM_STORE_WAW_M128 = int (BUILT_IN_TM_STORE_WAW_M128),
CFN_BUILT_IN_TM_STORE_M256 = int (BUILT_IN_TM_STORE_M256),
CFN_BUILT_IN_TM_STORE_WAR_M256 = int (BUILT_IN_TM_STORE_WAR_M256),
CFN_BUILT_IN_TM_STORE_WAW_M256 = int (BUILT_IN_TM_STORE_WAW_M256),

CFN_BUILT_IN_TM_STORE_LDOUBLE = int (BUILT_IN_TM_STORE_LDOUBLE),

CFN_BUILT_IN_TM_STORE_WAR_LDOUBLE = int (BUILT_IN_TM_STORE_WAR_LDOUBLE),

CFN_BUILT_IN_TM_STORE_WAW_LDOUBLE = int (BUILT_IN_TM_STORE_WAW_LDOUBLE),
# 133 "../../gcc/gtm-builtins.def"
CFN_BUILT_IN_TM_LOAD_1 = int (BUILT_IN_TM_LOAD_1),

CFN_BUILT_IN_TM_LOAD_RAR_1 = int (BUILT_IN_TM_LOAD_RAR_1),

CFN_BUILT_IN_TM_LOAD_RAW_1 = int (BUILT_IN_TM_LOAD_RAW_1),

CFN_BUILT_IN_TM_LOAD_RFW_1 = int (BUILT_IN_TM_LOAD_RFW_1),


CFN_BUILT_IN_TM_LOAD_2 = int (BUILT_IN_TM_LOAD_2),

CFN_BUILT_IN_TM_LOAD_RAR_2 = int (BUILT_IN_TM_LOAD_RAR_2),

CFN_BUILT_IN_TM_LOAD_RAW_2 = int (BUILT_IN_TM_LOAD_RAW_2),

CFN_BUILT_IN_TM_LOAD_RFW_2 = int (BUILT_IN_TM_LOAD_RFW_2),


CFN_BUILT_IN_TM_LOAD_4 = int (BUILT_IN_TM_LOAD_4),

CFN_BUILT_IN_TM_LOAD_RAR_4 = int (BUILT_IN_TM_LOAD_RAR_4),

CFN_BUILT_IN_TM_LOAD_RAW_4 = int (BUILT_IN_TM_LOAD_RAW_4),

CFN_BUILT_IN_TM_LOAD_RFW_4 = int (BUILT_IN_TM_LOAD_RFW_4),


CFN_BUILT_IN_TM_LOAD_8 = int (BUILT_IN_TM_LOAD_8),

CFN_BUILT_IN_TM_LOAD_RAR_8 = int (BUILT_IN_TM_LOAD_RAR_8),

CFN_BUILT_IN_TM_LOAD_RAW_8 = int (BUILT_IN_TM_LOAD_RAW_8),

CFN_BUILT_IN_TM_LOAD_RFW_8 = int (BUILT_IN_TM_LOAD_RFW_8),


CFN_BUILT_IN_TM_LOAD_FLOAT = int (BUILT_IN_TM_LOAD_FLOAT),

CFN_BUILT_IN_TM_LOAD_RAR_FLOAT = int (BUILT_IN_TM_LOAD_RAR_FLOAT),

CFN_BUILT_IN_TM_LOAD_RAW_FLOAT = int (BUILT_IN_TM_LOAD_RAW_FLOAT),

CFN_BUILT_IN_TM_LOAD_RFW_FLOAT = int (BUILT_IN_TM_LOAD_RFW_FLOAT),


CFN_BUILT_IN_TM_LOAD_DOUBLE = int (BUILT_IN_TM_LOAD_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RAR_DOUBLE = int (BUILT_IN_TM_LOAD_RAR_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RAW_DOUBLE = int (BUILT_IN_TM_LOAD_RAW_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RFW_DOUBLE = int (BUILT_IN_TM_LOAD_RFW_DOUBLE),



CFN_BUILT_IN_TM_LOAD_M64 = int (BUILT_IN_TM_LOAD_M64),
CFN_BUILT_IN_TM_LOAD_RAR_M64 = int (BUILT_IN_TM_LOAD_RAR_M64),
CFN_BUILT_IN_TM_LOAD_RAW_M64 = int (BUILT_IN_TM_LOAD_RAW_M64),
CFN_BUILT_IN_TM_LOAD_RFW_M64 = int (BUILT_IN_TM_LOAD_RFW_M64),
CFN_BUILT_IN_TM_LOAD_M128 = int (BUILT_IN_TM_LOAD_M128),
CFN_BUILT_IN_TM_LOAD_RAR_M128 = int (BUILT_IN_TM_LOAD_RAR_M128),
CFN_BUILT_IN_TM_LOAD_RAW_M128 = int (BUILT_IN_TM_LOAD_RAW_M128),
CFN_BUILT_IN_TM_LOAD_RFW_M128 = int (BUILT_IN_TM_LOAD_RFW_M128),
CFN_BUILT_IN_TM_LOAD_M256 = int (BUILT_IN_TM_LOAD_M256),
CFN_BUILT_IN_TM_LOAD_RAR_M256 = int (BUILT_IN_TM_LOAD_RAR_M256),
CFN_BUILT_IN_TM_LOAD_RAW_M256 = int (BUILT_IN_TM_LOAD_RAW_M256),
CFN_BUILT_IN_TM_LOAD_RFW_M256 = int (BUILT_IN_TM_LOAD_RFW_M256),

CFN_BUILT_IN_TM_LOAD_LDOUBLE = int (BUILT_IN_TM_LOAD_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RAR_LDOUBLE = int (BUILT_IN_TM_LOAD_RAR_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RAW_LDOUBLE = int (BUILT_IN_TM_LOAD_RAW_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RFW_LDOUBLE = int (BUILT_IN_TM_LOAD_RFW_LDOUBLE),
# 1043 "../../gcc/builtins.def" 2


# 1 "../../gcc/sanitizer.def" 1
# 31 "../../gcc/sanitizer.def"
CFN_BEGIN_SANITIZER_BUILTINS = int (BEGIN_SANITIZER_BUILTINS),


CFN_BUILT_IN_ASAN_INIT = int (BUILT_IN_ASAN_INIT),

CFN_BUILT_IN_ASAN_VERSION_MISMATCH_CHECK = int (BUILT_IN_ASAN_VERSION_MISMATCH_CHECK),




CFN_BUILT_IN_ASAN_REPORT_LOAD1 = int (BUILT_IN_ASAN_REPORT_LOAD1),

CFN_BUILT_IN_ASAN_REPORT_LOAD2 = int (BUILT_IN_ASAN_REPORT_LOAD2),

CFN_BUILT_IN_ASAN_REPORT_LOAD4 = int (BUILT_IN_ASAN_REPORT_LOAD4),

CFN_BUILT_IN_ASAN_REPORT_LOAD8 = int (BUILT_IN_ASAN_REPORT_LOAD8),

CFN_BUILT_IN_ASAN_REPORT_LOAD16 = int (BUILT_IN_ASAN_REPORT_LOAD16),

CFN_BUILT_IN_ASAN_REPORT_LOAD_N = int (BUILT_IN_ASAN_REPORT_LOAD_N),


CFN_BUILT_IN_ASAN_REPORT_STORE1 = int (BUILT_IN_ASAN_REPORT_STORE1),

CFN_BUILT_IN_ASAN_REPORT_STORE2 = int (BUILT_IN_ASAN_REPORT_STORE2),

CFN_BUILT_IN_ASAN_REPORT_STORE4 = int (BUILT_IN_ASAN_REPORT_STORE4),

CFN_BUILT_IN_ASAN_REPORT_STORE8 = int (BUILT_IN_ASAN_REPORT_STORE8),

CFN_BUILT_IN_ASAN_REPORT_STORE16 = int (BUILT_IN_ASAN_REPORT_STORE16),

CFN_BUILT_IN_ASAN_REPORT_STORE_N = int (BUILT_IN_ASAN_REPORT_STORE_N),


CFN_BUILT_IN_ASAN_REPORT_LOAD1_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD1_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD2_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD2_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD4_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD4_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD8_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD8_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD16_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD16_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT),



CFN_BUILT_IN_ASAN_REPORT_STORE1_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE1_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE2_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE2_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE4_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE4_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE8_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE8_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE16_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE16_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE_N_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE_N_NOABORT),



CFN_BUILT_IN_ASAN_LOAD1 = int (BUILT_IN_ASAN_LOAD1),

CFN_BUILT_IN_ASAN_LOAD2 = int (BUILT_IN_ASAN_LOAD2),

CFN_BUILT_IN_ASAN_LOAD4 = int (BUILT_IN_ASAN_LOAD4),

CFN_BUILT_IN_ASAN_LOAD8 = int (BUILT_IN_ASAN_LOAD8),

CFN_BUILT_IN_ASAN_LOAD16 = int (BUILT_IN_ASAN_LOAD16),

CFN_BUILT_IN_ASAN_LOADN = int (BUILT_IN_ASAN_LOADN),

CFN_BUILT_IN_ASAN_STORE1 = int (BUILT_IN_ASAN_STORE1),

CFN_BUILT_IN_ASAN_STORE2 = int (BUILT_IN_ASAN_STORE2),

CFN_BUILT_IN_ASAN_STORE4 = int (BUILT_IN_ASAN_STORE4),

CFN_BUILT_IN_ASAN_STORE8 = int (BUILT_IN_ASAN_STORE8),

CFN_BUILT_IN_ASAN_STORE16 = int (BUILT_IN_ASAN_STORE16),

CFN_BUILT_IN_ASAN_STOREN = int (BUILT_IN_ASAN_STOREN),

CFN_BUILT_IN_ASAN_LOAD1_NOABORT = int (BUILT_IN_ASAN_LOAD1_NOABORT),

CFN_BUILT_IN_ASAN_LOAD2_NOABORT = int (BUILT_IN_ASAN_LOAD2_NOABORT),

CFN_BUILT_IN_ASAN_LOAD4_NOABORT = int (BUILT_IN_ASAN_LOAD4_NOABORT),

CFN_BUILT_IN_ASAN_LOAD8_NOABORT = int (BUILT_IN_ASAN_LOAD8_NOABORT),

CFN_BUILT_IN_ASAN_LOAD16_NOABORT = int (BUILT_IN_ASAN_LOAD16_NOABORT),

CFN_BUILT_IN_ASAN_LOADN_NOABORT = int (BUILT_IN_ASAN_LOADN_NOABORT),

CFN_BUILT_IN_ASAN_STORE1_NOABORT = int (BUILT_IN_ASAN_STORE1_NOABORT),

CFN_BUILT_IN_ASAN_STORE2_NOABORT = int (BUILT_IN_ASAN_STORE2_NOABORT),

CFN_BUILT_IN_ASAN_STORE4_NOABORT = int (BUILT_IN_ASAN_STORE4_NOABORT),

CFN_BUILT_IN_ASAN_STORE8_NOABORT = int (BUILT_IN_ASAN_STORE8_NOABORT),

CFN_BUILT_IN_ASAN_STORE16_NOABORT = int (BUILT_IN_ASAN_STORE16_NOABORT),

CFN_BUILT_IN_ASAN_STOREN_NOABORT = int (BUILT_IN_ASAN_STOREN_NOABORT),

CFN_BUILT_IN_ASAN_REGISTER_GLOBALS = int (BUILT_IN_ASAN_REGISTER_GLOBALS),


CFN_BUILT_IN_ASAN_UNREGISTER_GLOBALS = int (BUILT_IN_ASAN_UNREGISTER_GLOBALS),


CFN_BUILT_IN_ASAN_HANDLE_NO_RETURN = int (BUILT_IN_ASAN_HANDLE_NO_RETURN),


CFN_BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT = int (BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT),


CFN_BUILT_IN_ASAN_AFTER_DYNAMIC_INIT = int (BUILT_IN_ASAN_AFTER_DYNAMIC_INIT),


CFN_BUILT_IN_ASAN_POISON_STACK_MEMORY = int (BUILT_IN_ASAN_POISON_STACK_MEMORY),


CFN_BUILT_IN_ASAN_UNPOISON_STACK_MEMORY = int (BUILT_IN_ASAN_UNPOISON_STACK_MEMORY),


CFN_BUILT_IN_ASAN_ALLOCA_POISON = int (BUILT_IN_ASAN_ALLOCA_POISON),

CFN_BUILT_IN_ASAN_ALLOCAS_UNPOISON = int (BUILT_IN_ASAN_ALLOCAS_UNPOISON),

CFN_BUILT_IN_ASAN_POINTER_COMPARE = int (BUILT_IN_ASAN_POINTER_COMPARE),

CFN_BUILT_IN_ASAN_POINTER_SUBTRACT = int (BUILT_IN_ASAN_POINTER_SUBTRACT),



CFN_BUILT_IN_TSAN_INIT = int (BUILT_IN_TSAN_INIT),

CFN_BUILT_IN_TSAN_FUNC_ENTRY = int (BUILT_IN_TSAN_FUNC_ENTRY),

CFN_BUILT_IN_TSAN_FUNC_EXIT = int (BUILT_IN_TSAN_FUNC_EXIT),

CFN_BUILT_IN_TSAN_VPTR_UPDATE = int (BUILT_IN_TSAN_VPTR_UPDATE),

CFN_BUILT_IN_TSAN_READ1 = int (BUILT_IN_TSAN_READ1),

CFN_BUILT_IN_TSAN_READ2 = int (BUILT_IN_TSAN_READ2),

CFN_BUILT_IN_TSAN_READ4 = int (BUILT_IN_TSAN_READ4),

CFN_BUILT_IN_TSAN_READ8 = int (BUILT_IN_TSAN_READ8),

CFN_BUILT_IN_TSAN_READ16 = int (BUILT_IN_TSAN_READ16),

CFN_BUILT_IN_TSAN_WRITE1 = int (BUILT_IN_TSAN_WRITE1),

CFN_BUILT_IN_TSAN_WRITE2 = int (BUILT_IN_TSAN_WRITE2),

CFN_BUILT_IN_TSAN_WRITE4 = int (BUILT_IN_TSAN_WRITE4),

CFN_BUILT_IN_TSAN_WRITE8 = int (BUILT_IN_TSAN_WRITE8),

CFN_BUILT_IN_TSAN_WRITE16 = int (BUILT_IN_TSAN_WRITE16),

CFN_BUILT_IN_TSAN_READ_RANGE = int (BUILT_IN_TSAN_READ_RANGE),

CFN_BUILT_IN_TSAN_WRITE_RANGE = int (BUILT_IN_TSAN_WRITE_RANGE),


CFN_BUILT_IN_TSAN_ATOMIC8_LOAD = int (BUILT_IN_TSAN_ATOMIC8_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC16_LOAD = int (BUILT_IN_TSAN_ATOMIC16_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC32_LOAD = int (BUILT_IN_TSAN_ATOMIC32_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC64_LOAD = int (BUILT_IN_TSAN_ATOMIC64_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC128_LOAD = int (BUILT_IN_TSAN_ATOMIC128_LOAD),



CFN_BUILT_IN_TSAN_ATOMIC8_STORE = int (BUILT_IN_TSAN_ATOMIC8_STORE),


CFN_BUILT_IN_TSAN_ATOMIC16_STORE = int (BUILT_IN_TSAN_ATOMIC16_STORE),


CFN_BUILT_IN_TSAN_ATOMIC32_STORE = int (BUILT_IN_TSAN_ATOMIC32_STORE),


CFN_BUILT_IN_TSAN_ATOMIC64_STORE = int (BUILT_IN_TSAN_ATOMIC64_STORE),


CFN_BUILT_IN_TSAN_ATOMIC128_STORE = int (BUILT_IN_TSAN_ATOMIC128_STORE),



CFN_BUILT_IN_TSAN_ATOMIC8_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC8_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC16_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC16_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC32_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC32_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC64_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC64_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC128_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC128_EXCHANGE),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC8_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC16_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC32_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC64_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC128_FETCH_ADD),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC8_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC16_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC32_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC64_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC128_FETCH_SUB),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC8_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC16_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC32_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC64_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC128_FETCH_AND),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC8_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC16_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC32_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC64_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC128_FETCH_OR),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC8_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC16_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC32_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC64_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC128_FETCH_XOR),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC8_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC16_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC32_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC64_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC128_FETCH_NAND),



CFN_BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG),




CFN_BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK),




CFN_BUILT_IN_TSAN_ATOMIC_THREAD_FENCE = int (BUILT_IN_TSAN_ATOMIC_THREAD_FENCE),


CFN_BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE = int (BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE),




CFN_BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS = int (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS),



CFN_BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE = int (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE),



CFN_BUILT_IN_UBSAN_HANDLE_MISSING_RETURN = int (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN),



CFN_BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE = int (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE),



CFN_BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1 = int (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1),



CFN_BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE = int (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE),



CFN_BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT = int (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT = int (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT = int (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT = int (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS = int (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS),



CFN_BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT = int (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_ARG = int (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT = int (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1 = int (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT = int (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN = int (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN),



CFN_BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT = int (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS = int (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS),



CFN_BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT = int (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT),





CFN_BUILT_IN_SANITIZER_COV_TRACE_PC = int (BUILT_IN_SANITIZER_COV_TRACE_PC),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP1 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP1),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP2 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP2),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP4 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP4),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP8 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP8),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMPF = int (BUILT_IN_SANITIZER_COV_TRACE_CMPF),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMPD = int (BUILT_IN_SANITIZER_COV_TRACE_CMPD),


CFN_BUILT_IN_SANITIZER_COV_TRACE_SWITCH = int (BUILT_IN_SANITIZER_COV_TRACE_SWITCH),




CFN_END_SANITIZER_BUILTINS = int (END_SANITIZER_BUILTINS),
# 1046 "../../gcc/builtins.def" 2


# 1 "../../gcc/chkp-builtins.def" 1
# 32 "../../gcc/chkp-builtins.def"
CFN_BUILT_IN_CHKP_INTERSECT = int (BUILT_IN_CHKP_INTERSECT),
CFN_BUILT_IN_CHKP_SIZEOF = int (BUILT_IN_CHKP_SIZEOF),
CFN_BUILT_IN_CHKP_NARROW = int (BUILT_IN_CHKP_NARROW),
CFN_BUILT_IN_CHKP_BNDCL = int (BUILT_IN_CHKP_BNDCL),
CFN_BUILT_IN_CHKP_BNDCU = int (BUILT_IN_CHKP_BNDCU),
CFN_BUILT_IN_CHKP_BNDSTX = int (BUILT_IN_CHKP_BNDSTX),
CFN_BUILT_IN_CHKP_BNDLDX = int (BUILT_IN_CHKP_BNDLDX),
CFN_BUILT_IN_CHKP_BNDRET = int (BUILT_IN_CHKP_BNDRET),
CFN_BUILT_IN_CHKP_BNDMK = int (BUILT_IN_CHKP_BNDMK),
CFN_BUILT_IN_CHKP_EXTRACT_LOWER = int (BUILT_IN_CHKP_EXTRACT_LOWER),
CFN_BUILT_IN_CHKP_EXTRACT_UPPER = int (BUILT_IN_CHKP_EXTRACT_UPPER),




CFN_BUILT_IN_CHKP_SET_PTR_BOUNDS = int (BUILT_IN_CHKP_SET_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_INIT_PTR_BOUNDS = int (BUILT_IN_CHKP_INIT_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_NULL_PTR_BOUNDS = int (BUILT_IN_CHKP_NULL_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_COPY_PTR_BOUNDS = int (BUILT_IN_CHKP_COPY_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_NARROW_PTR_BOUNDS = int (BUILT_IN_CHKP_NARROW_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_STORE_PTR_BOUNDS = int (BUILT_IN_CHKP_STORE_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_CHECK_PTR_LBOUNDS = int (BUILT_IN_CHKP_CHECK_PTR_LBOUNDS),
CFN_BUILT_IN_CHKP_CHECK_PTR_UBOUNDS = int (BUILT_IN_CHKP_CHECK_PTR_UBOUNDS),
CFN_BUILT_IN_CHKP_CHECK_PTR_BOUNDS = int (BUILT_IN_CHKP_CHECK_PTR_BOUNDS),
CFN_BUILT_IN_CHKP_GET_PTR_LBOUND = int (BUILT_IN_CHKP_GET_PTR_LBOUND),
CFN_BUILT_IN_CHKP_GET_PTR_UBOUND = int (BUILT_IN_CHKP_GET_PTR_UBOUND),


CFN_BUILT_IN_CHKP_MEMCPY_NOBND = int (BUILT_IN_CHKP_MEMCPY_NOBND),
CFN_BUILT_IN_CHKP_MEMCPY_NOCHK = int (BUILT_IN_CHKP_MEMCPY_NOCHK),
CFN_BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK = int (BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK),
CFN_BUILT_IN_CHKP_MEMMOVE_NOBND = int (BUILT_IN_CHKP_MEMMOVE_NOBND),
CFN_BUILT_IN_CHKP_MEMMOVE_NOCHK = int (BUILT_IN_CHKP_MEMMOVE_NOCHK),
CFN_BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK = int (BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK),
CFN_BUILT_IN_CHKP_MEMPCPY_NOBND = int (BUILT_IN_CHKP_MEMPCPY_NOBND),
CFN_BUILT_IN_CHKP_MEMPCPY_NOCHK = int (BUILT_IN_CHKP_MEMPCPY_NOCHK),
CFN_BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK = int (BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK),
CFN_BUILT_IN_CHKP_MEMSET_NOBND = int (BUILT_IN_CHKP_MEMSET_NOBND),
CFN_BUILT_IN_CHKP_MEMSET_NOCHK = int (BUILT_IN_CHKP_MEMSET_NOCHK),
CFN_BUILT_IN_CHKP_MEMSET_NOBND_NOCHK = int (BUILT_IN_CHKP_MEMSET_NOBND_NOCHK),
# 1049 "../../gcc/builtins.def" 2
# 1091 "../../gcc/builtins.def"
# 1 "../../gcc/brig-builtins.def" 1
# 38 "../../gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_WORKITEMABSID = int (BUILT_IN_HSAIL_WORKITEMABSID),



CFN_BUILT_IN_HSAIL_GRIDSIZE = int (BUILT_IN_HSAIL_GRIDSIZE),



CFN_BUILT_IN_HSAIL_WORKITEMFLATABSID_U32 = int (BUILT_IN_HSAIL_WORKITEMFLATABSID_U32),




CFN_BUILT_IN_HSAIL_WORKITEMFLATABSID_U64 = int (BUILT_IN_HSAIL_WORKITEMFLATABSID_U64),




CFN_BUILT_IN_HSAIL_WORKITEMFLATID = int (BUILT_IN_HSAIL_WORKITEMFLATID),



CFN_BUILT_IN_HSAIL_WORKITEMID = int (BUILT_IN_HSAIL_WORKITEMID),



CFN_BUILT_IN_HSAIL_WORKGROUPID = int (BUILT_IN_HSAIL_WORKGROUPID),



CFN_BUILT_IN_HSAIL_CURRENTWORKITEMFLATID = int (BUILT_IN_HSAIL_CURRENTWORKITEMFLATID),




CFN_BUILT_IN_HSAIL_WORKITEMABSID_U64 = int (BUILT_IN_HSAIL_WORKITEMABSID_U64),



CFN_BUILT_IN_HSAIL_PACKETID = int (BUILT_IN_HSAIL_PACKETID),



CFN_BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64 = int (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64),




CFN_BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32 = int (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32),




CFN_BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE = int (BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE),




CFN_BUILT_IN_HSAIL_WORKGROUPSIZE = int (BUILT_IN_HSAIL_WORKGROUPSIZE),



CFN_BUILT_IN_HSAIL_DIM = int (BUILT_IN_HSAIL_DIM),



CFN_BUILT_IN_HSAIL_GRIDGROUPS = int (BUILT_IN_HSAIL_GRIDGROUPS),



CFN_BUILT_IN_HSAIL_BITEXTRACT_S32 = int (BUILT_IN_HSAIL_BITEXTRACT_S32),



CFN_BUILT_IN_HSAIL_BITEXTRACT_U32 = int (BUILT_IN_HSAIL_BITEXTRACT_U32),



CFN_BUILT_IN_HSAIL_BITEXTRACT_S64 = int (BUILT_IN_HSAIL_BITEXTRACT_S64),



CFN_BUILT_IN_HSAIL_BITEXTRACT_U64 = int (BUILT_IN_HSAIL_BITEXTRACT_U64),



CFN_BUILT_IN_HSAIL_BITINSERT_U32 = int (BUILT_IN_HSAIL_BITINSERT_U32),



CFN_BUILT_IN_HSAIL_BITINSERT_U64 = int (BUILT_IN_HSAIL_BITINSERT_U64),




CFN_BUILT_IN_HSAIL_BITMASK_B32 = int (BUILT_IN_HSAIL_BITMASK_B32),



CFN_BUILT_IN_HSAIL_BITMASK_B64 = int (BUILT_IN_HSAIL_BITMASK_B64),



CFN_BUILT_IN_HSAIL_BITREV_B32 = int (BUILT_IN_HSAIL_BITREV_B32),



CFN_BUILT_IN_HSAIL_BITREV_B64 = int (BUILT_IN_HSAIL_BITREV_B64),



CFN_BUILT_IN_HSAIL_BITSELECT_B32 = int (BUILT_IN_HSAIL_BITSELECT_B32),



CFN_BUILT_IN_HSAIL_BITSELECT_U64 = int (BUILT_IN_HSAIL_BITSELECT_U64),



CFN_BUILT_IN_HSAIL_FIRSTBIT_U32 = int (BUILT_IN_HSAIL_FIRSTBIT_U32),



CFN_BUILT_IN_HSAIL_FIRSTBIT_S32 = int (BUILT_IN_HSAIL_FIRSTBIT_S32),



CFN_BUILT_IN_HSAIL_FIRSTBIT_U64 = int (BUILT_IN_HSAIL_FIRSTBIT_U64),



CFN_BUILT_IN_HSAIL_FIRSTBIT_S64 = int (BUILT_IN_HSAIL_FIRSTBIT_S64),



CFN_BUILT_IN_HSAIL_LASTBIT_U32 = int (BUILT_IN_HSAIL_LASTBIT_U32),



CFN_BUILT_IN_HSAIL_LASTBIT_U64 = int (BUILT_IN_HSAIL_LASTBIT_U64),



CFN_BUILT_IN_HSAIL_BORROW_U32 = int (BUILT_IN_HSAIL_BORROW_U32),



CFN_BUILT_IN_HSAIL_BORROW_U64 = int (BUILT_IN_HSAIL_BORROW_U64),



CFN_BUILT_IN_HSAIL_CARRY_U32 = int (BUILT_IN_HSAIL_CARRY_U32),



CFN_BUILT_IN_HSAIL_CARRY_U64 = int (BUILT_IN_HSAIL_CARRY_U64),



CFN_BUILT_IN_HSAIL_REM_S32 = int (BUILT_IN_HSAIL_REM_S32),



CFN_BUILT_IN_HSAIL_REM_S64 = int (BUILT_IN_HSAIL_REM_S64),



CFN_BUILT_IN_HSAIL_MIN_F32 = int (BUILT_IN_HSAIL_MIN_F32),



CFN_BUILT_IN_HSAIL_MAX_F32 = int (BUILT_IN_HSAIL_MAX_F32),



CFN_BUILT_IN_HSAIL_MIN_F64 = int (BUILT_IN_HSAIL_MIN_F64),



CFN_BUILT_IN_HSAIL_MAX_F64 = int (BUILT_IN_HSAIL_MAX_F64),



CFN_BUILT_IN_HSAIL_CLASS_F32 = int (BUILT_IN_HSAIL_CLASS_F32),



CFN_BUILT_IN_HSAIL_CLASS_F64 = int (BUILT_IN_HSAIL_CLASS_F64),



CFN_BUILT_IN_HSAIL_CLASS_F32_F16 = int (BUILT_IN_HSAIL_CLASS_F32_F16),



CFN_BUILT_IN_HSAIL_FRACT_F32 = int (BUILT_IN_HSAIL_FRACT_F32),



CFN_BUILT_IN_HSAIL_FRACT_F64 = int (BUILT_IN_HSAIL_FRACT_F64),



CFN_BUILT_IN_HSAIL_BARRIER = int (BUILT_IN_HSAIL_BARRIER),



CFN_BUILT_IN_HSAIL_INITFBAR = int (BUILT_IN_HSAIL_INITFBAR),



CFN_BUILT_IN_HSAIL_JOINFBAR = int (BUILT_IN_HSAIL_JOINFBAR),



CFN_BUILT_IN_HSAIL_WAITFBAR = int (BUILT_IN_HSAIL_WAITFBAR),



CFN_BUILT_IN_HSAIL_ARRIVEFBAR = int (BUILT_IN_HSAIL_ARRIVEFBAR),



CFN_BUILT_IN_HSAIL_LEAVEFBAR = int (BUILT_IN_HSAIL_LEAVEFBAR),



CFN_BUILT_IN_HSAIL_RELEASEFBAR = int (BUILT_IN_HSAIL_RELEASEFBAR),



CFN_BUILT_IN_HSAIL_BITALIGN = int (BUILT_IN_HSAIL_BITALIGN),



CFN_BUILT_IN_HSAIL_BYTEALIGN = int (BUILT_IN_HSAIL_BYTEALIGN),



CFN_BUILT_IN_HSAIL_LERP = int (BUILT_IN_HSAIL_LERP),



CFN_BUILT_IN_HSAIL_PACKCVT = int (BUILT_IN_HSAIL_PACKCVT),




CFN_BUILT_IN_HSAIL_UNPACKCVT = int (BUILT_IN_HSAIL_UNPACKCVT),



CFN_BUILT_IN_HSAIL_SAD_U16X2 = int (BUILT_IN_HSAIL_SAD_U16X2),



CFN_BUILT_IN_HSAIL_SAD_U32 = int (BUILT_IN_HSAIL_SAD_U32),



CFN_BUILT_IN_HSAIL_SAD_U8X4 = int (BUILT_IN_HSAIL_SAD_U8X4),



CFN_BUILT_IN_HSAIL_SADHI_U8X4 = int (BUILT_IN_HSAIL_SADHI_U8X4),




CFN_BUILT_IN_HSAIL_CLOCK = int (BUILT_IN_HSAIL_CLOCK),



CFN_BUILT_IN_HSAIL_CUID = int (BUILT_IN_HSAIL_CUID),



CFN_BUILT_IN_HSAIL_MAXCUID = int (BUILT_IN_HSAIL_MAXCUID),



CFN_BUILT_IN_HSAIL_DEBUGTRAP = int (BUILT_IN_HSAIL_DEBUGTRAP),



CFN_BUILT_IN_HSAIL_GROUPBASEPTR = int (BUILT_IN_HSAIL_GROUPBASEPTR),



CFN_BUILT_IN_HSAIL_KERNARGBASEPTR_U64 = int (BUILT_IN_HSAIL_KERNARGBASEPTR_U64),




CFN_BUILT_IN_HSAIL_KERNARGBASEPTR_U32 = int (BUILT_IN_HSAIL_KERNARGBASEPTR_U32),




CFN_BUILT_IN_HSAIL_ALLOCA = int (BUILT_IN_HSAIL_ALLOCA),



CFN_BUILT_IN_HSAIL_LDQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_LDQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_LDQUEUEREADINDEX = int (BUILT_IN_HSAIL_LDQUEUEREADINDEX),




CFN_BUILT_IN_HSAIL_STQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_STQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_STQUEUEREADINDEX = int (BUILT_IN_HSAIL_STQUEUEREADINDEX),




CFN_BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_CASQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_CASQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_SEGMENTP_GLOBAL = int (BUILT_IN_HSAIL_SEGMENTP_GLOBAL),




CFN_BUILT_IN_HSAIL_SEGMENTP_GROUP = int (BUILT_IN_HSAIL_SEGMENTP_GROUP),




CFN_BUILT_IN_HSAIL_SEGMENTP_PRIVATE = int (BUILT_IN_HSAIL_SEGMENTP_PRIVATE),
# 391 "../../gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_ATOMIC_MIN_S32 = int (BUILT_IN_HSAIL_ATOMIC_MIN_S32),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_S64 = int (BUILT_IN_HSAIL_ATOMIC_MIN_S64),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_U32 = int (BUILT_IN_HSAIL_ATOMIC_MIN_U32),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_U64 = int (BUILT_IN_HSAIL_ATOMIC_MIN_U64),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_S32 = int (BUILT_IN_HSAIL_ATOMIC_MAX_S32),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_S64 = int (BUILT_IN_HSAIL_ATOMIC_MAX_S64),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_U32 = int (BUILT_IN_HSAIL_ATOMIC_MAX_U32),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_U64 = int (BUILT_IN_HSAIL_ATOMIC_MAX_U64),



CFN_BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32 = int (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64 = int (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32 = int (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64 = int (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64),
# 448 "../../gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_SAT_ADD_U64 = int (BUILT_IN_HSAIL_SAT_ADD_U64),



CFN_BUILT_IN_HSAIL_SAT_ADD_S64 = int (BUILT_IN_HSAIL_SAT_ADD_S64),



CFN_BUILT_IN_HSAIL_SAT_ADD_U32 = int (BUILT_IN_HSAIL_SAT_ADD_U32),



CFN_BUILT_IN_HSAIL_SAT_ADD_S32 = int (BUILT_IN_HSAIL_SAT_ADD_S32),



CFN_BUILT_IN_HSAIL_SAT_ADD_U16 = int (BUILT_IN_HSAIL_SAT_ADD_U16),



CFN_BUILT_IN_HSAIL_SAT_ADD_S16 = int (BUILT_IN_HSAIL_SAT_ADD_S16),



CFN_BUILT_IN_HSAIL_SAT_ADD_U8 = int (BUILT_IN_HSAIL_SAT_ADD_U8),



CFN_BUILT_IN_HSAIL_SAT_ADD_S8 = int (BUILT_IN_HSAIL_SAT_ADD_S8),



CFN_BUILT_IN_HSAIL_SAT_SUB_U64 = int (BUILT_IN_HSAIL_SAT_SUB_U64),



CFN_BUILT_IN_HSAIL_SAT_SUB_S64 = int (BUILT_IN_HSAIL_SAT_SUB_S64),



CFN_BUILT_IN_HSAIL_SAT_SUB_U32 = int (BUILT_IN_HSAIL_SAT_SUB_U32),



CFN_BUILT_IN_HSAIL_SAT_SUB_S32 = int (BUILT_IN_HSAIL_SAT_SUB_S32),



CFN_BUILT_IN_HSAIL_SAT_SUB_U16 = int (BUILT_IN_HSAIL_SAT_SUB_U16),



CFN_BUILT_IN_HSAIL_SAT_SUB_S16 = int (BUILT_IN_HSAIL_SAT_SUB_S16),



CFN_BUILT_IN_HSAIL_SAT_SUB_U8 = int (BUILT_IN_HSAIL_SAT_SUB_U8),



CFN_BUILT_IN_HSAIL_SAT_SUB_S8 = int (BUILT_IN_HSAIL_SAT_SUB_S8),



CFN_BUILT_IN_HSAIL_SAT_MUL_U64 = int (BUILT_IN_HSAIL_SAT_MUL_U64),



CFN_BUILT_IN_HSAIL_SAT_MUL_S64 = int (BUILT_IN_HSAIL_SAT_MUL_S64),



CFN_BUILT_IN_HSAIL_SAT_MUL_U32 = int (BUILT_IN_HSAIL_SAT_MUL_U32),



CFN_BUILT_IN_HSAIL_SAT_MUL_S32 = int (BUILT_IN_HSAIL_SAT_MUL_S32),



CFN_BUILT_IN_HSAIL_SAT_MUL_U16 = int (BUILT_IN_HSAIL_SAT_MUL_U16),



CFN_BUILT_IN_HSAIL_SAT_MUL_S16 = int (BUILT_IN_HSAIL_SAT_MUL_S16),



CFN_BUILT_IN_HSAIL_SAT_MUL_U8 = int (BUILT_IN_HSAIL_SAT_MUL_U8),



CFN_BUILT_IN_HSAIL_SAT_MUL_S8 = int (BUILT_IN_HSAIL_SAT_MUL_S8),







CFN_BUILT_IN_HSAIL_FTZ_F32_F16 = int (BUILT_IN_HSAIL_FTZ_F32_F16),


CFN_BUILT_IN_HSAIL_FTZ_F32 = int (BUILT_IN_HSAIL_FTZ_F32),


CFN_BUILT_IN_HSAIL_FTZ_F64 = int (BUILT_IN_HSAIL_FTZ_F64),


CFN_BUILT_IN_HSAIL_PUSH_FRAME = int (BUILT_IN_HSAIL_PUSH_FRAME),


CFN_BUILT_IN_HSAIL_POP_FRAME = int (BUILT_IN_HSAIL_POP_FRAME),


CFN_BUILT_IN_HSAIL_SETWORKITEMID = int (BUILT_IN_HSAIL_SETWORKITEMID),


CFN_BUILT_IN_HSAIL_LAUNCH_WG_FUNC = int (BUILT_IN_HSAIL_LAUNCH_WG_FUNC),



CFN_BUILT_IN_HSAIL_LAUNCH_KERNEL = int (BUILT_IN_HSAIL_LAUNCH_KERNEL),



CFN_BUILT_IN_HSAIL_F32_TO_F16 = int (BUILT_IN_HSAIL_F32_TO_F16),


CFN_BUILT_IN_HSAIL_F16_TO_F32 = int (BUILT_IN_HSAIL_F16_TO_F32),







CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64),
# 1092 "../../gcc/builtins.def" 2
# 212 "../../gcc/tree-core.h" 2




# 1 "../../gcc/builtins.def" 1
# 302 "../../gcc/builtins.def"


























































































































































































































































































































































































































CFN_BUILT_IN_MEMCPY_CHKP = int (BUILT_IN_MEMCPY_CHKP),
CFN_BUILT_IN_MEMMOVE_CHKP = int (BUILT_IN_MEMMOVE_CHKP),
CFN_BUILT_IN_MEMPCPY_CHKP = int (BUILT_IN_MEMPCPY_CHKP),
CFN_BUILT_IN_MEMSET_CHKP = int (BUILT_IN_MEMSET_CHKP),

CFN_BUILT_IN_STPCPY_CHKP = int (BUILT_IN_STPCPY_CHKP),


CFN_BUILT_IN_STRCAT_CHKP = int (BUILT_IN_STRCAT_CHKP),
CFN_BUILT_IN_STRCHR_CHKP = int (BUILT_IN_STRCHR_CHKP),

CFN_BUILT_IN_STRCPY_CHKP = int (BUILT_IN_STRCPY_CHKP),



CFN_BUILT_IN_STRLEN_CHKP = int (BUILT_IN_STRLEN_CHKP),




















































































































































































































































CFN_BUILT_IN_MEMCPY_CHK_CHKP = int (BUILT_IN_MEMCPY_CHK_CHKP),
CFN_BUILT_IN_MEMMOVE_CHK_CHKP = int (BUILT_IN_MEMMOVE_CHK_CHKP),
CFN_BUILT_IN_MEMPCPY_CHK_CHKP = int (BUILT_IN_MEMPCPY_CHK_CHKP),
CFN_BUILT_IN_MEMSET_CHK_CHKP = int (BUILT_IN_MEMSET_CHK_CHKP),
CFN_BUILT_IN_STPCPY_CHK_CHKP = int (BUILT_IN_STPCPY_CHK_CHKP),

CFN_BUILT_IN_STRCAT_CHK_CHKP = int (BUILT_IN_STRCAT_CHK_CHKP),
CFN_BUILT_IN_STRCPY_CHK_CHKP = int (BUILT_IN_STRCPY_CHK_CHKP),





















































# 1 "../../gcc/sync-builtins.def" 1
# 31 "../../gcc/sync-builtins.def"






































































































































































































































































































































































































































































































































































































# 1034 "../../gcc/builtins.def" 2


# 1 "../../gcc/omp-builtins.def" 1
# 32 "../../gcc/omp-builtins.def"










































































































































































































































































































































# 1037 "../../gcc/builtins.def" 2


# 1 "../../gcc/hsa-builtins.def" 1
# 30 "../../gcc/hsa-builtins.def"









# 1040 "../../gcc/builtins.def" 2


# 1 "../../gcc/gtm-builtins.def" 1


























































# 67 "../../gcc/gtm-builtins.def"


























































# 133 "../../gcc/gtm-builtins.def"











































































# 1043 "../../gcc/builtins.def" 2


# 1 "../../gcc/sanitizer.def" 1
# 31 "../../gcc/sanitizer.def"













































































































































































































































































































































































































































































































































































# 1046 "../../gcc/builtins.def" 2


# 1 "../../gcc/chkp-builtins.def" 1
# 32 "../../gcc/chkp-builtins.def"



CFN_BUILT_IN_CHKP_BNDCL_CHKP = int (BUILT_IN_CHKP_BNDCL_CHKP),
CFN_BUILT_IN_CHKP_BNDCU_CHKP = int (BUILT_IN_CHKP_BNDCU_CHKP),
CFN_BUILT_IN_CHKP_BNDSTX_CHKP = int (BUILT_IN_CHKP_BNDSTX_CHKP),
CFN_BUILT_IN_CHKP_BNDLDX_CHKP = int (BUILT_IN_CHKP_BNDLDX_CHKP),
CFN_BUILT_IN_CHKP_BNDRET_CHKP = int (BUILT_IN_CHKP_BNDRET_CHKP),
CFN_BUILT_IN_CHKP_BNDMK_CHKP = int (BUILT_IN_CHKP_BNDMK_CHKP),
CFN_BUILT_IN_CHKP_EXTRACT_LOWER_CHKP = int (BUILT_IN_CHKP_EXTRACT_LOWER_CHKP),
CFN_BUILT_IN_CHKP_EXTRACT_UPPER_CHKP = int (BUILT_IN_CHKP_EXTRACT_UPPER_CHKP),




CFN_BUILT_IN_CHKP_SET_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_SET_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_INIT_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_INIT_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_NULL_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_NULL_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_COPY_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_COPY_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_NARROW_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_NARROW_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_STORE_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_STORE_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_CHECK_PTR_LBOUNDS_CHKP = int (BUILT_IN_CHKP_CHECK_PTR_LBOUNDS_CHKP),
CFN_BUILT_IN_CHKP_CHECK_PTR_UBOUNDS_CHKP = int (BUILT_IN_CHKP_CHECK_PTR_UBOUNDS_CHKP),
CFN_BUILT_IN_CHKP_CHECK_PTR_BOUNDS_CHKP = int (BUILT_IN_CHKP_CHECK_PTR_BOUNDS_CHKP),
CFN_BUILT_IN_CHKP_GET_PTR_LBOUND_CHKP = int (BUILT_IN_CHKP_GET_PTR_LBOUND_CHKP),
CFN_BUILT_IN_CHKP_GET_PTR_UBOUND_CHKP = int (BUILT_IN_CHKP_GET_PTR_UBOUND_CHKP),


CFN_BUILT_IN_CHKP_MEMCPY_NOBND_CHKP = int (BUILT_IN_CHKP_MEMCPY_NOBND_CHKP),
CFN_BUILT_IN_CHKP_MEMCPY_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMCPY_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMMOVE_NOBND_CHKP = int (BUILT_IN_CHKP_MEMMOVE_NOBND_CHKP),
CFN_BUILT_IN_CHKP_MEMMOVE_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMMOVE_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMPCPY_NOBND_CHKP = int (BUILT_IN_CHKP_MEMPCPY_NOBND_CHKP),
CFN_BUILT_IN_CHKP_MEMPCPY_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMPCPY_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMSET_NOBND_CHKP = int (BUILT_IN_CHKP_MEMSET_NOBND_CHKP),
CFN_BUILT_IN_CHKP_MEMSET_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMSET_NOCHK_CHKP),
CFN_BUILT_IN_CHKP_MEMSET_NOBND_NOCHK_CHKP = int (BUILT_IN_CHKP_MEMSET_NOBND_NOCHK_CHKP),
# 1049 "../../gcc/builtins.def" 2
# 1091 "../../gcc/builtins.def"
# 1 "../../gcc/brig-builtins.def" 1
# 38 "../../gcc/brig-builtins.def"
























































































































































































































































































































































# 391 "../../gcc/brig-builtins.def"
















































# 448 "../../gcc/brig-builtins.def"































































































































































































































# 1092 "../../gcc/builtins.def" 2
# 217 "../../gcc/tree-core.h" 2



# 1 "../../gcc/internal-fn.def" 1
# 118 "../../gcc/internal-fn.def"
CFN_MASK_LOAD = int (END_BUILTINS) + int (IFN_MASK_LOAD),
CFN_LOAD_LANES = int (END_BUILTINS) + int (IFN_LOAD_LANES),
CFN_MASK_LOAD_LANES = int (END_BUILTINS) + int (IFN_MASK_LOAD_LANES),


CFN_GATHER_LOAD = int (END_BUILTINS) + int (IFN_GATHER_LOAD),
CFN_MASK_GATHER_LOAD = int (END_BUILTINS) + int (IFN_MASK_GATHER_LOAD),


CFN_SCATTER_STORE = int (END_BUILTINS) + int (IFN_SCATTER_STORE),
CFN_MASK_SCATTER_STORE = int (END_BUILTINS) + int (IFN_MASK_SCATTER_STORE),


CFN_MASK_STORE = int (END_BUILTINS) + int (IFN_MASK_STORE),
CFN_STORE_LANES = int (END_BUILTINS) + int (IFN_STORE_LANES),
CFN_MASK_STORE_LANES = int (END_BUILTINS) + int (IFN_MASK_STORE_LANES),


CFN_WHILE_ULT = int (END_BUILTINS) + int (IFN_WHILE_ULT),

CFN_VEC_SHL_INSERT = int (END_BUILTINS) + int (IFN_VEC_SHL_INSERT),


CFN_COND_ADD = int (END_BUILTINS) + int (IFN_COND_ADD),
CFN_COND_SUB = int (END_BUILTINS) + int (IFN_COND_SUB),
CFN_COND_MIN = int (END_BUILTINS) + int (IFN_COND_MIN),

CFN_COND_MAX = int (END_BUILTINS) + int (IFN_COND_MAX),

CFN_COND_AND = int (END_BUILTINS) + int (IFN_COND_AND),

CFN_COND_IOR = int (END_BUILTINS) + int (IFN_COND_IOR),

CFN_COND_XOR = int (END_BUILTINS) + int (IFN_COND_XOR),


CFN_RSQRT = int (END_BUILTINS) + int (IFN_RSQRT),

CFN_REDUC_PLUS = int (END_BUILTINS) + int (IFN_REDUC_PLUS),

CFN_REDUC_MAX = int (END_BUILTINS) + int (IFN_REDUC_MAX),

CFN_REDUC_MIN = int (END_BUILTINS) + int (IFN_REDUC_MIN),

CFN_REDUC_AND = int (END_BUILTINS) + int (IFN_REDUC_AND),

CFN_REDUC_IOR = int (END_BUILTINS) + int (IFN_REDUC_IOR),

CFN_REDUC_XOR = int (END_BUILTINS) + int (IFN_REDUC_XOR),



CFN_EXTRACT_LAST = int (END_BUILTINS) + int (IFN_EXTRACT_LAST),



CFN_FOLD_EXTRACT_LAST = int (END_BUILTINS) + int (IFN_FOLD_EXTRACT_LAST),


CFN_FOLD_LEFT_PLUS = int (END_BUILTINS) + int (IFN_FOLD_LEFT_PLUS),



CFN_ACOS = int (END_BUILTINS) + int (IFN_ACOS),
CFN_ASIN = int (END_BUILTINS) + int (IFN_ASIN),
CFN_ATAN = int (END_BUILTINS) + int (IFN_ATAN),
CFN_COS = int (END_BUILTINS) + int (IFN_COS),
CFN_EXP = int (END_BUILTINS) + int (IFN_EXP),
CFN_EXP10 = int (END_BUILTINS) + int (IFN_EXP10),
CFN_EXP2 = int (END_BUILTINS) + int (IFN_EXP2),
CFN_EXPM1 = int (END_BUILTINS) + int (IFN_EXPM1),
CFN_LOG = int (END_BUILTINS) + int (IFN_LOG),
CFN_LOG10 = int (END_BUILTINS) + int (IFN_LOG10),
CFN_LOG1P = int (END_BUILTINS) + int (IFN_LOG1P),
CFN_LOG2 = int (END_BUILTINS) + int (IFN_LOG2),
CFN_LOGB = int (END_BUILTINS) + int (IFN_LOGB),
CFN_SIGNIFICAND = int (END_BUILTINS) + int (IFN_SIGNIFICAND),
CFN_SIN = int (END_BUILTINS) + int (IFN_SIN),
CFN_SQRT = int (END_BUILTINS) + int (IFN_SQRT),
CFN_TAN = int (END_BUILTINS) + int (IFN_TAN),


CFN_CEIL = int (END_BUILTINS) + int (IFN_CEIL),
CFN_FLOOR = int (END_BUILTINS) + int (IFN_FLOOR),
CFN_NEARBYINT = int (END_BUILTINS) + int (IFN_NEARBYINT),
CFN_RINT = int (END_BUILTINS) + int (IFN_RINT),
CFN_ROUND = int (END_BUILTINS) + int (IFN_ROUND),
CFN_TRUNC = int (END_BUILTINS) + int (IFN_TRUNC),


CFN_ATAN2 = int (END_BUILTINS) + int (IFN_ATAN2),
CFN_COPYSIGN = int (END_BUILTINS) + int (IFN_COPYSIGN),
CFN_FMOD = int (END_BUILTINS) + int (IFN_FMOD),
CFN_POW = int (END_BUILTINS) + int (IFN_POW),
CFN_REMAINDER = int (END_BUILTINS) + int (IFN_REMAINDER),
CFN_SCALB = int (END_BUILTINS) + int (IFN_SCALB),
CFN_FMIN = int (END_BUILTINS) + int (IFN_FMIN),
CFN_FMAX = int (END_BUILTINS) + int (IFN_FMAX),
CFN_XORSIGN = int (END_BUILTINS) + int (IFN_XORSIGN),


CFN_LDEXP = int (END_BUILTINS) + int (IFN_LDEXP),


CFN_CLRSB = int (END_BUILTINS) + int (IFN_CLRSB),
CFN_CLZ = int (END_BUILTINS) + int (IFN_CLZ),
CFN_CTZ = int (END_BUILTINS) + int (IFN_CTZ),
CFN_FFS = int (END_BUILTINS) + int (IFN_FFS),
CFN_PARITY = int (END_BUILTINS) + int (IFN_PARITY),
CFN_POPCOUNT = int (END_BUILTINS) + int (IFN_POPCOUNT),

CFN_GOMP_USE_SIMT = int (END_BUILTINS) + int (IFN_GOMP_USE_SIMT),
CFN_GOMP_SIMT_ENTER = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ENTER),
CFN_GOMP_SIMT_ENTER_ALLOC = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ENTER_ALLOC),
CFN_GOMP_SIMT_EXIT = int (END_BUILTINS) + int (IFN_GOMP_SIMT_EXIT),
CFN_GOMP_SIMT_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMT_LANE),
CFN_GOMP_SIMT_VF = int (END_BUILTINS) + int (IFN_GOMP_SIMT_VF),
CFN_GOMP_SIMT_LAST_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMT_LAST_LANE),
CFN_GOMP_SIMT_ORDERED_PRED = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ORDERED_PRED),
CFN_GOMP_SIMT_VOTE_ANY = int (END_BUILTINS) + int (IFN_GOMP_SIMT_VOTE_ANY),
CFN_GOMP_SIMT_XCHG_BFLY = int (END_BUILTINS) + int (IFN_GOMP_SIMT_XCHG_BFLY),
CFN_GOMP_SIMT_XCHG_IDX = int (END_BUILTINS) + int (IFN_GOMP_SIMT_XCHG_IDX),
CFN_GOMP_SIMD_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMD_LANE),
CFN_GOMP_SIMD_VF = int (END_BUILTINS) + int (IFN_GOMP_SIMD_VF),
CFN_GOMP_SIMD_LAST_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMD_LAST_LANE),
CFN_GOMP_SIMD_ORDERED_START = int (END_BUILTINS) + int (IFN_GOMP_SIMD_ORDERED_START),
CFN_GOMP_SIMD_ORDERED_END = int (END_BUILTINS) + int (IFN_GOMP_SIMD_ORDERED_END),
CFN_LOOP_VECTORIZED = int (END_BUILTINS) + int (IFN_LOOP_VECTORIZED),
CFN_LOOP_DIST_ALIAS = int (END_BUILTINS) + int (IFN_LOOP_DIST_ALIAS),
CFN_ANNOTATE = int (END_BUILTINS) + int (IFN_ANNOTATE),
CFN_UBSAN_NULL = int (END_BUILTINS) + int (IFN_UBSAN_NULL),
CFN_UBSAN_BOUNDS = int (END_BUILTINS) + int (IFN_UBSAN_BOUNDS),
CFN_UBSAN_VPTR = int (END_BUILTINS) + int (IFN_UBSAN_VPTR),
CFN_UBSAN_CHECK_ADD = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_ADD),
CFN_UBSAN_CHECK_SUB = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_SUB),
CFN_UBSAN_CHECK_MUL = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_MUL),
CFN_UBSAN_PTR = int (END_BUILTINS) + int (IFN_UBSAN_PTR),
CFN_UBSAN_OBJECT_SIZE = int (END_BUILTINS) + int (IFN_UBSAN_OBJECT_SIZE),
CFN_ABNORMAL_DISPATCHER = int (END_BUILTINS) + int (IFN_ABNORMAL_DISPATCHER),
CFN_BUILTIN_EXPECT = int (END_BUILTINS) + int (IFN_BUILTIN_EXPECT),
CFN_ASAN_CHECK = int (END_BUILTINS) + int (IFN_ASAN_CHECK),
CFN_ASAN_MARK = int (END_BUILTINS) + int (IFN_ASAN_MARK),
CFN_ASAN_POISON = int (END_BUILTINS) + int (IFN_ASAN_POISON),
CFN_ASAN_POISON_USE = int (END_BUILTINS) + int (IFN_ASAN_POISON_USE),
CFN_ADD_OVERFLOW = int (END_BUILTINS) + int (IFN_ADD_OVERFLOW),
CFN_SUB_OVERFLOW = int (END_BUILTINS) + int (IFN_SUB_OVERFLOW),
CFN_MUL_OVERFLOW = int (END_BUILTINS) + int (IFN_MUL_OVERFLOW),
CFN_TSAN_FUNC_EXIT = int (END_BUILTINS) + int (IFN_TSAN_FUNC_EXIT),
CFN_VA_ARG = int (END_BUILTINS) + int (IFN_VA_ARG),





CFN_UNIQUE = int (END_BUILTINS) + int (IFN_UNIQUE),
CFN_PHI = int (END_BUILTINS) + int (IFN_PHI),







CFN_GOACC_DIM_SIZE = int (END_BUILTINS) + int (IFN_GOACC_DIM_SIZE),
CFN_GOACC_DIM_POS = int (END_BUILTINS) + int (IFN_GOACC_DIM_POS),


CFN_GOACC_LOOP = int (END_BUILTINS) + int (IFN_GOACC_LOOP),


CFN_GOACC_REDUCTION = int (END_BUILTINS) + int (IFN_GOACC_REDUCTION),



CFN_GOACC_TILE = int (END_BUILTINS) + int (IFN_GOACC_TILE),



CFN_SET_EDOM = int (END_BUILTINS) + int (IFN_SET_EDOM),




CFN_ATOMIC_BIT_TEST_AND_SET = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_SET),
CFN_ATOMIC_BIT_TEST_AND_COMPLEMENT = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT),
CFN_ATOMIC_BIT_TEST_AND_RESET = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_RESET),
CFN_ATOMIC_COMPARE_EXCHANGE = int (END_BUILTINS) + int (IFN_ATOMIC_COMPARE_EXCHANGE),


CFN_FALLTHROUGH = int (END_BUILTINS) + int (IFN_FALLTHROUGH),


CFN_LAUNDER = int (END_BUILTINS) + int (IFN_LAUNDER),


CFN_DIVMOD = int (END_BUILTINS) + int (IFN_DIVMOD),


CFN_NOP = int (END_BUILTINS) + int (IFN_NOP),
# 221 "../../gcc/tree-core.h" 2

  CFN_LAST
};



enum tree_code_class {
  tcc_exceptional,
  tcc_constant,

  tcc_type,
  tcc_declaration,
  tcc_reference,
  tcc_comparison,
  tcc_unary,
  tcc_binary,
  tcc_statement,

  tcc_vl_exp,

  tcc_expression
};



enum omp_clause_code {


  OMP_CLAUSE_ERROR = 0,


  OMP_CLAUSE_PRIVATE,


  OMP_CLAUSE_SHARED,


  OMP_CLAUSE_FIRSTPRIVATE,


  OMP_CLAUSE_LASTPRIVATE,
# 273 "../../gcc/tree-core.h"
  OMP_CLAUSE_REDUCTION,


  OMP_CLAUSE_COPYIN,


  OMP_CLAUSE_COPYPRIVATE,


  OMP_CLAUSE_LINEAR,


  OMP_CLAUSE_ALIGNED,


  OMP_CLAUSE_DEPEND,


  OMP_CLAUSE_UNIFORM,



  OMP_CLAUSE_TO_DECLARE,


  OMP_CLAUSE_LINK,


  OMP_CLAUSE_FROM,


  OMP_CLAUSE_TO,







  OMP_CLAUSE_MAP,



  OMP_CLAUSE_USE_DEVICE_PTR,


  OMP_CLAUSE_IS_DEVICE_PTR,



  OMP_CLAUSE__CACHE_,







  OMP_CLAUSE_GANG,


  OMP_CLAUSE_ASYNC,


  OMP_CLAUSE_WAIT,


  OMP_CLAUSE_AUTO,


  OMP_CLAUSE_SEQ,


  OMP_CLAUSE__LOOPTEMP_,


  OMP_CLAUSE_IF,


  OMP_CLAUSE_NUM_THREADS,


  OMP_CLAUSE_SCHEDULE,


  OMP_CLAUSE_NOWAIT,


  OMP_CLAUSE_ORDERED,


  OMP_CLAUSE_DEFAULT,


  OMP_CLAUSE_COLLAPSE,


  OMP_CLAUSE_UNTIED,


  OMP_CLAUSE_FINAL,


  OMP_CLAUSE_MERGEABLE,


  OMP_CLAUSE_DEVICE,


  OMP_CLAUSE_DIST_SCHEDULE,


  OMP_CLAUSE_INBRANCH,


  OMP_CLAUSE_NOTINBRANCH,


  OMP_CLAUSE_NUM_TEAMS,


  OMP_CLAUSE_THREAD_LIMIT,


  OMP_CLAUSE_PROC_BIND,


  OMP_CLAUSE_SAFELEN,


  OMP_CLAUSE_SIMDLEN,


  OMP_CLAUSE_FOR,


  OMP_CLAUSE_PARALLEL,


  OMP_CLAUSE_SECTIONS,


  OMP_CLAUSE_TASKGROUP,


  OMP_CLAUSE_PRIORITY,


  OMP_CLAUSE_GRAINSIZE,


  OMP_CLAUSE_NUM_TASKS,


  OMP_CLAUSE_NOGROUP,


  OMP_CLAUSE_THREADS,


  OMP_CLAUSE_SIMD,


  OMP_CLAUSE_HINT,


  OMP_CLAUSE_DEFAULTMAP,


  OMP_CLAUSE__SIMDUID_,



  OMP_CLAUSE__SIMT_,


  OMP_CLAUSE_INDEPENDENT,


  OMP_CLAUSE_WORKER,


  OMP_CLAUSE_VECTOR,


  OMP_CLAUSE_NUM_GANGS,


  OMP_CLAUSE_NUM_WORKERS,


  OMP_CLAUSE_VECTOR_LENGTH,


  OMP_CLAUSE_TILE,



  OMP_CLAUSE__GRIDDIM_
};



enum tree_node_structure_enum {
# 1 "../../gcc/treestruct.def" 1
# 33 "../../gcc/treestruct.def"
TS_BASE,
TS_TYPED,
TS_COMMON,
TS_INT_CST,
TS_POLY_INT_CST,
TS_REAL_CST,
TS_FIXED_CST,
TS_VECTOR,
TS_STRING,
TS_COMPLEX,
TS_IDENTIFIER,
TS_DECL_MINIMAL,
TS_DECL_COMMON,
TS_DECL_WRTL,
TS_DECL_NON_COMMON,
TS_DECL_WITH_VIS,
TS_FIELD_DECL,
TS_VAR_DECL,
TS_PARM_DECL,
TS_LABEL_DECL,
TS_RESULT_DECL,
TS_CONST_DECL,
TS_TYPE_DECL,
TS_FUNCTION_DECL,
TS_TRANSLATION_UNIT_DECL,
TS_TYPE_COMMON,
TS_TYPE_WITH_LANG_SPECIFIC,
TS_TYPE_NON_COMMON,
TS_LIST,
TS_VEC,
TS_EXP,
TS_SSA_NAME,
TS_BLOCK,
TS_BINFO,
TS_STATEMENT_LIST,
TS_CONSTRUCTOR,
TS_OMP_CLAUSE,
TS_OPTIMIZATION,
TS_TARGET_OPTION,
# 478 "../../gcc/tree-core.h" 2
  LAST_TS_ENUM
};


enum omp_clause_schedule_kind {
  OMP_CLAUSE_SCHEDULE_STATIC,
  OMP_CLAUSE_SCHEDULE_DYNAMIC,
  OMP_CLAUSE_SCHEDULE_GUIDED,
  OMP_CLAUSE_SCHEDULE_AUTO,
  OMP_CLAUSE_SCHEDULE_RUNTIME,
  OMP_CLAUSE_SCHEDULE_MASK = (1 << 3) - 1,
  OMP_CLAUSE_SCHEDULE_MONOTONIC = (1 << 3),
  OMP_CLAUSE_SCHEDULE_NONMONOTONIC = (1 << 4),
  OMP_CLAUSE_SCHEDULE_LAST = 2 * OMP_CLAUSE_SCHEDULE_NONMONOTONIC - 1
};

enum omp_clause_default_kind {
  OMP_CLAUSE_DEFAULT_UNSPECIFIED,
  OMP_CLAUSE_DEFAULT_SHARED,
  OMP_CLAUSE_DEFAULT_NONE,
  OMP_CLAUSE_DEFAULT_PRIVATE,
  OMP_CLAUSE_DEFAULT_FIRSTPRIVATE,
  OMP_CLAUSE_DEFAULT_PRESENT,
  OMP_CLAUSE_DEFAULT_LAST
};




enum cv_qualifier {
  TYPE_UNQUALIFIED = 0x0,
  TYPE_QUAL_CONST = 0x1,
  TYPE_QUAL_VOLATILE = 0x2,
  TYPE_QUAL_RESTRICT = 0x4,
  TYPE_QUAL_ATOMIC = 0x8
};


enum tree_index {
  TI_ERROR_MARK,
  TI_INTQI_TYPE,
  TI_INTHI_TYPE,
  TI_INTSI_TYPE,
  TI_INTDI_TYPE,
  TI_INTTI_TYPE,

  TI_UINTQI_TYPE,
  TI_UINTHI_TYPE,
  TI_UINTSI_TYPE,
  TI_UINTDI_TYPE,
  TI_UINTTI_TYPE,

  TI_ATOMICQI_TYPE,
  TI_ATOMICHI_TYPE,
  TI_ATOMICSI_TYPE,
  TI_ATOMICDI_TYPE,
  TI_ATOMICTI_TYPE,

  TI_UINT16_TYPE,
  TI_UINT32_TYPE,
  TI_UINT64_TYPE,

  TI_VOID,

  TI_INTEGER_ZERO,
  TI_INTEGER_ONE,
  TI_INTEGER_THREE,
  TI_INTEGER_MINUS_ONE,
  TI_NULL_POINTER,

  TI_SIZE_ZERO,
  TI_SIZE_ONE,

  TI_BITSIZE_ZERO,
  TI_BITSIZE_ONE,
  TI_BITSIZE_UNIT,

  TI_PUBLIC,
  TI_PROTECTED,
  TI_PRIVATE,

  TI_BOOLEAN_FALSE,
  TI_BOOLEAN_TRUE,

  TI_FLOAT_TYPE,
  TI_DOUBLE_TYPE,
  TI_LONG_DOUBLE_TYPE,







  TI_FLOAT16_TYPE,
  TI_FLOATN_TYPE_FIRST = TI_FLOAT16_TYPE,
  TI_FLOATN_NX_TYPE_FIRST = TI_FLOAT16_TYPE,
  TI_FLOAT32_TYPE,
  TI_FLOAT64_TYPE,
  TI_FLOAT128_TYPE,
  TI_FLOATN_TYPE_LAST = TI_FLOAT128_TYPE,

  TI_FLOAT32X_TYPE,
  TI_FLOATNX_TYPE_FIRST = TI_FLOAT32X_TYPE,
  TI_FLOAT64X_TYPE,
  TI_FLOAT128X_TYPE,
  TI_FLOATNX_TYPE_LAST = TI_FLOAT128X_TYPE,
  TI_FLOATN_NX_TYPE_LAST = TI_FLOAT128X_TYPE,
# 594 "../../gcc/tree-core.h"
  TI_COMPLEX_INTEGER_TYPE,
  TI_COMPLEX_FLOAT_TYPE,
  TI_COMPLEX_DOUBLE_TYPE,
  TI_COMPLEX_LONG_DOUBLE_TYPE,

  TI_COMPLEX_FLOAT16_TYPE,
  TI_COMPLEX_FLOATN_NX_TYPE_FIRST = TI_COMPLEX_FLOAT16_TYPE,
  TI_COMPLEX_FLOAT32_TYPE,
  TI_COMPLEX_FLOAT64_TYPE,
  TI_COMPLEX_FLOAT128_TYPE,
  TI_COMPLEX_FLOAT32X_TYPE,
  TI_COMPLEX_FLOAT64X_TYPE,
  TI_COMPLEX_FLOAT128X_TYPE,

  TI_FLOAT_PTR_TYPE,
  TI_DOUBLE_PTR_TYPE,
  TI_LONG_DOUBLE_PTR_TYPE,
  TI_INTEGER_PTR_TYPE,

  TI_VOID_TYPE,
  TI_PTR_TYPE,
  TI_CONST_PTR_TYPE,
  TI_SIZE_TYPE,
  TI_PID_TYPE,
  TI_PTRDIFF_TYPE,
  TI_VA_LIST_TYPE,
  TI_VA_LIST_GPR_COUNTER_FIELD,
  TI_VA_LIST_FPR_COUNTER_FIELD,
  TI_BOOLEAN_TYPE,
  TI_FILEPTR_TYPE,
  TI_CONST_TM_PTR_TYPE,
  TI_FENV_T_PTR_TYPE,
  TI_CONST_FENV_T_PTR_TYPE,
  TI_FEXCEPT_T_PTR_TYPE,
  TI_CONST_FEXCEPT_T_PTR_TYPE,
  TI_POINTER_SIZED_TYPE,

  TI_POINTER_BOUNDS_TYPE,

  TI_DFLOAT32_TYPE,
  TI_DFLOAT64_TYPE,
  TI_DFLOAT128_TYPE,
  TI_DFLOAT32_PTR_TYPE,
  TI_DFLOAT64_PTR_TYPE,
  TI_DFLOAT128_PTR_TYPE,

  TI_VOID_LIST_NODE,

  TI_MAIN_IDENTIFIER,

  TI_SAT_SFRACT_TYPE,
  TI_SAT_FRACT_TYPE,
  TI_SAT_LFRACT_TYPE,
  TI_SAT_LLFRACT_TYPE,
  TI_SAT_USFRACT_TYPE,
  TI_SAT_UFRACT_TYPE,
  TI_SAT_ULFRACT_TYPE,
  TI_SAT_ULLFRACT_TYPE,
  TI_SFRACT_TYPE,
  TI_FRACT_TYPE,
  TI_LFRACT_TYPE,
  TI_LLFRACT_TYPE,
  TI_USFRACT_TYPE,
  TI_UFRACT_TYPE,
  TI_ULFRACT_TYPE,
  TI_ULLFRACT_TYPE,
  TI_SAT_SACCUM_TYPE,
  TI_SAT_ACCUM_TYPE,
  TI_SAT_LACCUM_TYPE,
  TI_SAT_LLACCUM_TYPE,
  TI_SAT_USACCUM_TYPE,
  TI_SAT_UACCUM_TYPE,
  TI_SAT_ULACCUM_TYPE,
  TI_SAT_ULLACCUM_TYPE,
  TI_SACCUM_TYPE,
  TI_ACCUM_TYPE,
  TI_LACCUM_TYPE,
  TI_LLACCUM_TYPE,
  TI_USACCUM_TYPE,
  TI_UACCUM_TYPE,
  TI_ULACCUM_TYPE,
  TI_ULLACCUM_TYPE,
  TI_QQ_TYPE,
  TI_HQ_TYPE,
  TI_SQ_TYPE,
  TI_DQ_TYPE,
  TI_TQ_TYPE,
  TI_UQQ_TYPE,
  TI_UHQ_TYPE,
  TI_USQ_TYPE,
  TI_UDQ_TYPE,
  TI_UTQ_TYPE,
  TI_SAT_QQ_TYPE,
  TI_SAT_HQ_TYPE,
  TI_SAT_SQ_TYPE,
  TI_SAT_DQ_TYPE,
  TI_SAT_TQ_TYPE,
  TI_SAT_UQQ_TYPE,
  TI_SAT_UHQ_TYPE,
  TI_SAT_USQ_TYPE,
  TI_SAT_UDQ_TYPE,
  TI_SAT_UTQ_TYPE,
  TI_HA_TYPE,
  TI_SA_TYPE,
  TI_DA_TYPE,
  TI_TA_TYPE,
  TI_UHA_TYPE,
  TI_USA_TYPE,
  TI_UDA_TYPE,
  TI_UTA_TYPE,
  TI_SAT_HA_TYPE,
  TI_SAT_SA_TYPE,
  TI_SAT_DA_TYPE,
  TI_SAT_TA_TYPE,
  TI_SAT_UHA_TYPE,
  TI_SAT_USA_TYPE,
  TI_SAT_UDA_TYPE,
  TI_SAT_UTA_TYPE,

  TI_OPTIMIZATION_DEFAULT,
  TI_OPTIMIZATION_CURRENT,
  TI_TARGET_OPTION_DEFAULT,
  TI_TARGET_OPTION_CURRENT,
  TI_CURRENT_TARGET_PRAGMA,
  TI_CURRENT_OPTIMIZE_PRAGMA,

  TI_MAX
};





enum integer_type_kind {
  itk_char,
  itk_signed_char,
  itk_unsigned_char,
  itk_short,
  itk_unsigned_short,
  itk_int,
  itk_unsigned_int,
  itk_long,
  itk_unsigned_long,
  itk_long_long,
  itk_unsigned_long_long,

  itk_intN_0,
  itk_unsigned_intN_0,
  itk_intN_1,
  itk_unsigned_intN_1,
  itk_intN_2,
  itk_unsigned_intN_2,
  itk_intN_3,
  itk_unsigned_intN_3,

  itk_none
};
# 772 "../../gcc/tree-core.h"
enum ptrmemfunc_vbit_where_t {
  ptrmemfunc_vbit_in_pfn,
  ptrmemfunc_vbit_in_delta
};



enum attribute_flags {



  ATTR_FLAG_DECL_NEXT = 1,



  ATTR_FLAG_FUNCTION_NEXT = 2,



  ATTR_FLAG_ARRAY_NEXT = 4,


  ATTR_FLAG_TYPE_IN_PLACE = 8,



  ATTR_FLAG_BUILT_IN = 16,

  ATTR_FLAG_CXX11 = 32
};


enum size_type_kind {
  stk_sizetype,
  stk_ssizetype,
  stk_bitsizetype,
  stk_sbitsizetype,
  stk_type_kind_last
};

enum operand_equal_flag {
  OEP_ONLY_CONST = 1,
  OEP_PURE_SAME = 2,
  OEP_MATCH_SIDE_EFFECTS = 4,
  OEP_ADDRESS_OF = 8,

  OEP_NO_HASH_CHECK = 16,

  OEP_HASH_CHECK = 32,

  OEP_LEXICOGRAPHIC = 64
};



enum tree_node_kind {
  d_kind,
  t_kind,
  b_kind,
  s_kind,
  r_kind,
  e_kind,
  c_kind,
  id_kind,
  vec_kind,
  binfo_kind,
  ssa_name_kind,
  constr_kind,
  x_kind,
  lang_decl,
  lang_type,
  omp_clause_kind,
  all_kinds
};

enum annot_expr_kind {
  annot_expr_ivdep_kind,
  annot_expr_unroll_kind,
  annot_expr_no_vector_kind,
  annot_expr_vector_kind,
  annot_expr_parallel_kind,
  annot_expr_kind_last
};







struct alias_pair {
  tree decl;
  tree target;
};


typedef unsigned short priority_type;


typedef tree (*walk_tree_fn) (tree *, int *, void *);


typedef tree (*walk_tree_lh) (tree *, int *, tree (*) (tree *, int *, void *),
         void *, hash_set<tree> *);
# 902 "../../gcc/tree-core.h"
struct tree_base {
  enum tree_code code : 16;

  unsigned side_effects_flag : 1;
  unsigned constant_flag : 1;
  unsigned addressable_flag : 1;
  unsigned volatile_flag : 1;
  unsigned readonly_flag : 1;
  unsigned asm_written_flag: 1;
  unsigned nowarning_flag : 1;
  unsigned visited : 1;

  unsigned used_flag : 1;
  unsigned nothrow_flag : 1;
  unsigned static_flag : 1;
  unsigned public_flag : 1;
  unsigned private_flag : 1;
  unsigned protected_flag : 1;
  unsigned deprecated_flag : 1;
  unsigned default_def_flag : 1;

  union {


    struct {
      unsigned lang_flag_0 : 1;
      unsigned lang_flag_1 : 1;
      unsigned lang_flag_2 : 1;
      unsigned lang_flag_3 : 1;
      unsigned lang_flag_4 : 1;
      unsigned lang_flag_5 : 1;
      unsigned lang_flag_6 : 1;
      unsigned saturating_flag : 1;

      unsigned unsigned_flag : 1;
      unsigned packed_flag : 1;
      unsigned user_align : 1;
      unsigned nameless_flag : 1;
      unsigned atomic_flag : 1;
      unsigned spare0 : 3;

      unsigned spare1 : 8;




      unsigned address_space : 8;
    } bits;






    struct {


      unsigned char unextended;



      unsigned char extended;





      unsigned char offset;
    } int_length;


    int length;


    struct {

      unsigned int log2_npatterns : 8;


      unsigned int nelts_per_pattern : 8;


      unsigned int unused : 16;
    } vector_cst;


    unsigned int version;


    unsigned int chrec_var;


    enum internal_fn ifn;






    struct {
      unsigned short clique;
      unsigned short base;
    } dependence_info;
  } u;
};
# 1300 "../../gcc/tree-core.h"
struct tree_typed {
  struct tree_base base;
  tree type;
};

struct tree_common {
  struct tree_typed typed;
  tree chain;
};

struct tree_int_cst {
  struct tree_typed typed;
  long val[1];
};


struct tree_real_cst {
  struct tree_typed typed;
  struct real_value * real_cst_ptr;
};

struct tree_fixed_cst {
  struct tree_typed typed;
  struct fixed_value * fixed_cst_ptr;
};

struct tree_string {
  struct tree_typed typed;
  int length;
  char str[1];
};

struct tree_complex {
  struct tree_typed typed;
  tree real;
  tree imag;
};

struct tree_vector {
  struct tree_typed typed;
  tree elts[1];
};

struct tree_poly_int_cst {
  struct tree_typed typed;
  tree coeffs[1];
};

struct tree_identifier {
  struct tree_common common;
  struct ht_identifier id;
};

struct tree_list {
  struct tree_common common;
  tree purpose;
  tree value;
};

struct tree_vec {
  struct tree_common common;
  tree a[1];
};





struct constructor_elt {
  tree index;
  tree value;
};

struct tree_constructor {
  struct tree_typed typed;
  vec<constructor_elt, va_gc> *elts;
};

enum omp_clause_depend_kind
{
  OMP_CLAUSE_DEPEND_IN,
  OMP_CLAUSE_DEPEND_OUT,
  OMP_CLAUSE_DEPEND_INOUT,
  OMP_CLAUSE_DEPEND_SOURCE,
  OMP_CLAUSE_DEPEND_SINK,
  OMP_CLAUSE_DEPEND_LAST
};

enum omp_clause_proc_bind_kind
{

  OMP_CLAUSE_PROC_BIND_FALSE = 0,
  OMP_CLAUSE_PROC_BIND_TRUE = 1,
  OMP_CLAUSE_PROC_BIND_MASTER = 2,
  OMP_CLAUSE_PROC_BIND_CLOSE = 3,
  OMP_CLAUSE_PROC_BIND_SPREAD = 4,
  OMP_CLAUSE_PROC_BIND_LAST
};

enum omp_clause_linear_kind
{
  OMP_CLAUSE_LINEAR_DEFAULT,
  OMP_CLAUSE_LINEAR_REF,
  OMP_CLAUSE_LINEAR_VAL,
  OMP_CLAUSE_LINEAR_UVAL
};

struct tree_exp {
  struct tree_typed typed;
  location_t locus;
  tree

    operands[1];
};



struct ssa_use_operand_t {
  struct ssa_use_operand_t* prev;
  struct ssa_use_operand_t* next;





  union { gimple *stmt; tree ssa_name; } loc;
  tree * use;
};

struct tree_ssa_name {
  struct tree_typed typed;


  tree var;


  gimple *def_stmt;


  union ssa_name_info_type {

    struct ptr_info_def *ptr_info;

    struct range_info_def *range_info;
  }
                                                   info;


  struct ssa_use_operand_t imm_uses;
};

struct phi_arg_d {


  struct ssa_use_operand_t imm_use;
  tree def;
  location_t locus;
};

struct tree_omp_clause {
  struct tree_common common;
  location_t locus;
  enum omp_clause_code code;
  union omp_clause_subcode {
    enum omp_clause_default_kind default_kind;
    enum omp_clause_schedule_kind schedule_kind;
    enum omp_clause_depend_kind depend_kind;

    unsigned int map_kind;
    enum omp_clause_proc_bind_kind proc_bind_kind;
    enum tree_code reduction_code;
    enum omp_clause_linear_kind linear_kind;
    enum tree_code if_modifier;


    unsigned int dimension;
  } subcode;



  gimple_seq gimple_reduction_init;
  gimple_seq gimple_reduction_merge;

  tree
    ops[1];
};

struct tree_block {
  struct tree_base base;
  tree chain;

  unsigned abstract_flag : 1;
  unsigned block_num : 31;

  location_t locus;
  location_t end_locus;

  tree vars;
  vec<tree, va_gc> *nonlocalized_vars;

  tree subblocks;
  tree supercontext;
  tree abstract_origin;
  tree fragment_origin;
  tree fragment_chain;


  struct die_struct *die;
};

struct tree_type_common {
  struct tree_common common;
  tree size;
  tree size_unit;
  tree attributes;
  unsigned int uid;

  unsigned int precision : 10;
  unsigned no_force_blk_flag : 1;
  unsigned needs_constructing_flag : 1;
  unsigned transparent_aggr_flag : 1;
  unsigned restrict_flag : 1;
  unsigned contains_placeholder_bits : 2;

  enum machine_mode mode : 8;

  unsigned string_flag : 1;
  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned lang_flag_7 : 1;






  unsigned align : 6;
  unsigned warn_if_not_align : 6;
  unsigned typeless_storage : 1;
  unsigned empty_flag : 1;
  unsigned spare : 17;

  alias_set_type alias_set;
  tree pointer_to;
  tree reference_to;
  union tree_type_symtab {
    int address;
    struct die_struct * die;
  } symtab;
  tree canonical;
  tree next_variant;
  tree main_variant;
  tree context;
  tree name;
};

struct tree_type_with_lang_specific {
  struct tree_type_common common;

  struct lang_type *lang_specific;
};

struct tree_type_non_common {
  struct tree_type_with_lang_specific with_lang_specific;
  tree values;
  tree minval;
  tree maxval;
  tree lang_1;
};

struct tree_binfo {
  struct tree_common common;

  tree offset;
  tree vtable;
  tree virtuals;
  tree vptr_field;
  vec<tree, va_gc> *base_accesses;
  tree inheritance;

  tree vtt_subvtt;
  tree vtt_vptr;

  vec<tree, va_gc> base_binfos;
};

struct tree_decl_minimal {
  struct tree_common common;
  location_t locus;
  unsigned int uid;
  tree name;
  tree context;
};

struct tree_decl_common {
  struct tree_decl_minimal common;
  tree size;

  enum machine_mode mode : 8;

  unsigned nonlocal_flag : 1;
  unsigned virtual_flag : 1;
  unsigned ignored_flag : 1;
  unsigned abstract_flag : 1;
  unsigned artificial_flag : 1;
  unsigned preserve_flag: 1;
  unsigned debug_expr_is_from : 1;

  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned lang_flag_7 : 1;
  unsigned lang_flag_8 : 1;



  unsigned decl_flag_0 : 1;



  unsigned decl_flag_1 : 1;



  unsigned decl_flag_2 : 1;

  unsigned decl_flag_3 : 1;


  unsigned gimple_reg_flag : 1;

  unsigned decl_by_reference_flag : 1;

  unsigned decl_read_flag : 1;

  unsigned decl_nonshareable_flag : 1;


  unsigned int off_align : 6;


  unsigned int align : 6;



  unsigned int warn_if_not_align : 6;




  unsigned int pt_uid;

  tree size_unit;
  tree initial;
  tree attributes;
  tree abstract_origin;


  struct lang_decl *lang_specific;
};

struct tree_decl_with_rtl {
  struct tree_decl_common common;
  rtx rtl;
};

struct tree_field_decl {
  struct tree_decl_common common;

  tree offset;
  tree bit_field_type;
  tree qualifier;
  tree bit_offset;
  tree fcontext;
};

struct tree_label_decl {
  struct tree_decl_with_rtl common;
  int label_decl_uid;
  int eh_landing_pad_nr;
};

struct tree_result_decl {
  struct tree_decl_with_rtl common;
};

struct tree_const_decl {
  struct tree_decl_common common;
};

struct tree_parm_decl {
  struct tree_decl_with_rtl common;
  rtx incoming_rtl;
};

struct tree_decl_with_vis {
 struct tree_decl_with_rtl common;
 tree assembler_name;
 struct symtab_node *symtab_node;


 unsigned defer_output : 1;
 unsigned hard_register : 1;
 unsigned common_flag : 1;
 unsigned in_text_section : 1;
 unsigned in_constant_pool : 1;
 unsigned dllimport_flag : 1;

 unsigned weak_flag : 1;

 unsigned seen_in_bind_expr : 1;
 unsigned comdat_flag : 1;

 enum symbol_visibility visibility : 2;
 unsigned visibility_specified : 1;


 unsigned init_priority_p : 1;

 unsigned shadowed_for_var_p : 1;

 unsigned cxx_constructor : 1;

 unsigned cxx_destructor : 1;

 unsigned final : 1;

 unsigned regdecl_flag : 1;

};

struct tree_var_decl {
  struct tree_decl_with_vis common;
};

struct tree_decl_non_common {
  struct tree_decl_with_vis common;

  tree result;
};






struct tree_function_decl {
  struct tree_decl_non_common common;

  struct function *f;


  tree arguments;

  tree personality;


  tree function_specific_target;
  tree function_specific_optimization;


  tree saved_tree;

  tree vindex;





  enum built_in_function function_code : 12;
  enum built_in_class built_in_class : 2;

  unsigned static_ctor_flag : 1;
  unsigned static_dtor_flag : 1;

  unsigned uninlinable : 1;
  unsigned possibly_inlined : 1;
  unsigned novops_flag : 1;
  unsigned returns_twice_flag : 1;
  unsigned malloc_flag : 1;
  unsigned operator_new_flag : 1;
  unsigned declared_inline_flag : 1;
  unsigned no_inline_warning_flag : 1;

  unsigned no_instrument_function_entry_exit : 1;
  unsigned no_limit_stack : 1;
  unsigned disregard_inline_limits : 1;
  unsigned pure_flag : 1;
  unsigned looping_const_or_pure_flag : 1;
  unsigned has_debug_args_flag : 1;
  unsigned tm_clone_flag : 1;
  unsigned versioned_function : 1;

};

struct tree_translation_unit_decl {
  struct tree_decl_common common;

  const char * language;


};

struct tree_type_decl {
  struct tree_decl_non_common common;

};

struct tree_statement_list_node
 {
  struct tree_statement_list_node *prev;
  struct tree_statement_list_node *next;
  tree stmt;
};

struct tree_statement_list
 {
  struct tree_typed typed;
  struct tree_statement_list_node *head;
  struct tree_statement_list_node *tail;
};




struct tree_optimization_option {
  struct tree_base base;


  struct cl_optimization *opts;



  void * optabs;



  struct target_optabs * base_optabs;
};



struct target_globals;



struct tree_target_option {
  struct tree_base base;


  struct target_globals *globals;


  struct cl_target_option *opts;
};




union
                                                         tree_node {
  struct tree_base base;
  struct tree_typed typed;
  struct tree_common common;
  struct tree_int_cst int_cst;
  struct tree_poly_int_cst poly_int_cst;
  struct tree_real_cst real_cst;
  struct tree_fixed_cst fixed_cst;
  struct tree_vector vector;
  struct tree_string string;
  struct tree_complex complex;
  struct tree_identifier identifier;
  struct tree_decl_minimal decl_minimal;
  struct tree_decl_common decl_common;
  struct tree_decl_with_rtl decl_with_rtl;
  struct tree_decl_non_common
    decl_non_common;
  struct tree_parm_decl parm_decl;
  struct tree_decl_with_vis decl_with_vis;
  struct tree_var_decl var_decl;
  struct tree_field_decl field_decl;
  struct tree_label_decl label_decl;
  struct tree_result_decl result_decl;
  struct tree_const_decl const_decl;
  struct tree_type_decl type_decl;
  struct tree_function_decl function_decl;
  struct tree_translation_unit_decl
    translation_unit_decl;
  struct tree_type_common type_common;
  struct tree_type_with_lang_specific
    type_with_lang_specific;
  struct tree_type_non_common
    type_non_common;
  struct tree_list list;
  struct tree_vec vec;
  struct tree_exp exp;
  struct tree_ssa_name ssa_name;
  struct tree_block block;
  struct tree_binfo binfo;
  struct tree_statement_list stmt_list;
  struct tree_constructor constructor;
  struct tree_omp_clause omp_clause;
  struct tree_optimization_option optimization;
  struct tree_target_option target_option;
};


struct attribute_spec {


  const char *name;

  int min_length;


  int max_length;







  bool decl_required;


  bool type_required;




  bool function_type_required;

  bool affects_type_identity;
# 1957 "../../gcc/tree-core.h"
  tree (*handler) (tree *node, tree name, tree args,
     int flags, bool *no_add_attrs);




  struct exclusions {
    const char *name;
    bool function;
    bool variable;
    bool type;
  };



  const exclusions *exclude;
};







typedef struct record_layout_info_s {

  tree t;


  tree offset;

  unsigned int offset_align;

  tree bitpos;

  unsigned int record_align;


  unsigned int unpacked_align;

  tree prev_field;


  vec<tree, va_gc> *pending_statics;

  int remaining_in_alignment;


  int packed_maybe_necessary;
} *record_layout_info;


struct function_args_iterator {
  tree next;
};


struct tree_map_base {
  tree from;
};



struct tree_map {
  struct tree_map_base base;
  unsigned int hash;
  tree to;
};


struct tree_decl_map {
  struct tree_map_base base;
  tree to;
};


struct tree_int_map {
  struct tree_map_base base;
  unsigned int to;
};


struct tree_vec_map {
  struct tree_map_base base;
  vec<tree, va_gc> *to;
};






struct call_expr_arg_iterator {
  tree t;
  int n;
  int i;
};

struct const_call_expr_arg_iterator {
  const_tree t;
  int n;
  int i;
};



struct builtin_info_type {
  tree decl;


  unsigned implicit_p : 1;

  unsigned declared_p : 1;
};



struct floatn_type_info {

  int n;


  bool extended;
};






extern bool tree_contains_struct[MAX_TREE_CODES][64];


extern const enum tree_code_class tree_code_type[];



extern const char *const tree_code_class_strings[];


extern const unsigned char tree_code_length[];


extern vec<alias_pair, va_gc> *alias_pairs;


extern const char *const built_in_class_names[(BUILT_IN_NORMAL + 1)];


extern const char * built_in_names[(int) END_BUILTINS];


extern unsigned const char omp_clause_num_ops[];
extern const char * const omp_clause_code_name[];


extern vec<tree, va_gc> *all_translation_units;


extern tree global_trees[TI_MAX];



extern tree integer_types[itk_none];


extern tree sizetype_tab[(int) stk_type_kind_last];


extern uint64_t tree_node_counts[];
extern uint64_t tree_node_sizes[];




extern bool in_gimple_form;


extern builtin_info_type builtin_info[(int)END_BUILTINS];


extern unsigned int maximum_field_alignment;


extern tree current_function_decl;


extern const char * current_function_func_begin_label;


extern const floatn_type_info floatn_nx_types[(TI_FLOATN_NX_TYPE_LAST - TI_FLOATN_NX_TYPE_FIRST + 1)];
# 24 "../../gcc/tree.h" 2



inline combined_fn
as_combined_fn (built_in_function fn)
{
  return combined_fn (int (fn));
}



inline combined_fn
as_combined_fn (internal_fn fn)
{
  return combined_fn (int (fn) + int (END_BUILTINS));
}



inline bool
builtin_fn_p (combined_fn code)
{
  return int (code) < int (END_BUILTINS);
}




inline built_in_function
as_builtin_fn (combined_fn code)
{
  ((void)(!(builtin_fn_p (code)) ? fancy_abort ("../../gcc/tree.h", 55, __FUNCTION__), 0 : 0));
  return built_in_function (int (code));
}



inline bool
internal_fn_p (combined_fn code)
{
  return int (code) >= int (END_BUILTINS);
}




inline internal_fn
as_internal_fn (combined_fn code)
{
  ((void)(!(internal_fn_p (code)) ? fancy_abort ("../../gcc/tree.h", 73, __FUNCTION__), 0 : 0));
  return internal_fn (int (code) - int (END_BUILTINS));
}
# 337 "../../gcc/tree.h"
extern void tree_contains_struct_check_failed (const_tree,
            const enum tree_node_structure_enum,
            const char *, int, const char *)
  __attribute__ ((__noreturn__)) __attribute__ ((__cold__));

extern void tree_check_failed (const_tree, const char *, int, const char *,
          ...) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_not_check_failed (const_tree, const char *, int, const char *,
       ...) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_class_check_failed (const_tree, const enum tree_code_class,
         const char *, int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_range_check_failed (const_tree, const char *, int,
         const char *, enum tree_code,
         enum tree_code)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_not_class_check_failed (const_tree,
      const enum tree_code_class,
      const char *, int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_int_cst_elt_check_failed (int, int, const char *,
        int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_vec_elt_check_failed (int, int, const char *,
           int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void phi_node_elt_check_failed (int, int, const char *,
           int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_operand_check_failed (int, const_tree,
           const char *, int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void omp_clause_check_failed (const_tree, const char *, int,
         const char *, enum omp_clause_code)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void omp_clause_operand_check_failed (int, const_tree, const char *,
                 int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void omp_clause_range_check_failed (const_tree, const char *, int,
          const char *, enum omp_clause_code,
          enum omp_clause_code)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 414 "../../gcc/tree.h"
# 1 "./tree-check.h" 1
# 415 "../../gcc/tree.h" 2
# 1185 "../../gcc/tree.h"
static inline source_range
get_expr_source_range (tree expr)
{
  location_t loc = ((((expr)) && ((tree_code_type[(int) (((enum tree_code) ((expr))->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) ((expr))->base.code))]) <= tcc_expression)) ? (expr)->exp.locus : ((source_location) 0));
  return get_range_from_loc (line_table, loc);
}

extern void protected_set_expr_location (tree, location_t);

extern tree maybe_wrap_with_location (tree, location_t);
# 1886 "../../gcc/tree.h"
extern machine_mode element_mode (const_tree);
extern machine_mode vector_type_mode (const_tree);
# 2537 "../../gcc/tree.h"
extern tree decl_value_expr_lookup (tree);
extern void decl_value_expr_insert (tree, tree);
# 2817 "../../gcc/tree.h"
extern tree decl_debug_expr_lookup (tree);
extern void decl_debug_expr_insert (tree, tree);
# 2829 "../../gcc/tree.h"
extern priority_type decl_init_priority_lookup (tree);
extern priority_type decl_fini_priority_lookup (tree);
extern void decl_init_priority_insert (tree, priority_type);
extern void decl_fini_priority_insert (tree, priority_type);
# 3004 "../../gcc/tree.h"
extern vec<tree, va_gc> **decl_debug_args_lookup (tree);
extern vec<tree, va_gc> **decl_debug_args_insert (tree);
# 3113 "../../gcc/tree.h"
extern tree build_optimization_node (struct gcc_options *opts);
# 3122 "../../gcc/tree.h"
extern tree build_target_option_node (struct gcc_options *opts);

extern void prepare_target_option_nodes_for_pch (void);



inline tree
tree_check (tree __t, const char *__f, int __l, const char *__g, tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) != __c)
    tree_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline tree
tree_not_check (tree __t, const char *__f, int __l, const char *__g,
                enum tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) == __c)
    tree_not_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline tree
tree_check2 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline tree
tree_not_check2 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline tree
tree_check3 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline tree
tree_not_check3 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline tree
tree_check4 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline tree
tree_not_check4 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline tree
tree_check5 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4
      && ((enum tree_code) (__t)->base.code) != __c5)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline tree
tree_not_check5 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4
      || ((enum tree_code) (__t)->base.code) == __c5)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline tree
contains_struct_check (tree __t, const enum tree_node_structure_enum __s,
                       const char *__f, int __l, const char *__g)
{
  if (tree_contains_struct[((enum tree_code) (__t)->base.code)][__s] != 1)
      tree_contains_struct_check_failed (__t, __s, __f, __l, __g);
  return __t;
}

inline tree
tree_class_check (tree __t, const enum tree_code_class __class,
                  const char *__f, int __l, const char *__g)
{
  if (tree_code_type[(int) (((enum tree_code) (__t)->base.code))] != __class)
    tree_class_check_failed (__t, __class, __f, __l, __g);
  return __t;
}

inline tree
tree_range_check (tree __t,
                  enum tree_code __code1, enum tree_code __code2,
                  const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) < __code1 || ((enum tree_code) (__t)->base.code) > __code2)
    tree_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}

inline tree
omp_clause_subcode_check (tree __t, enum omp_clause_code __code,
                          const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__t->omp_clause.code != __code)
    omp_clause_check_failed (__t, __f, __l, __g, __code);
  return __t;
}

inline tree
omp_clause_range_check (tree __t,
                        enum omp_clause_code __code1,
                        enum omp_clause_code __code2,
                        const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if ((int) __t->omp_clause.code < (int) __code1
      || (int) __t->omp_clause.code > (int) __code2)
    omp_clause_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}



inline tree
expr_check (tree __t, const char *__f, int __l, const char *__g)
{
  char const __c = tree_code_type[(int) (((enum tree_code) (__t)->base.code))];
  if (!((__c) >= tcc_reference && (__c) <= tcc_expression))
    tree_class_check_failed (__t, tcc_expression, __f, __l, __g);
  return __t;
}



inline tree
non_type_check (tree __t, const char *__f, int __l, const char *__g)
{
  if ((tree_code_type[(int) (((enum tree_code) (__t)->base.code))] == tcc_type))
    tree_not_class_check_failed (__t, tcc_type, __f, __l, __g);
  return __t;
}

inline const long *
tree_int_cst_elt_check (const_tree __t, int __i,
   const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != INTEGER_CST)
    tree_check_failed (__t, __f, __l, __g, INTEGER_CST, 0);
  if (__i < 0 || __i >= __t->base.u.int_length.extended)
    tree_int_cst_elt_check_failed (__i, __t->base.u.int_length.extended,
       __f, __l, __g);
  return &(const_cast<union tree_node *> (((__t))))->int_cst.val[__i];
}

inline long *
tree_int_cst_elt_check (tree __t, int __i,
   const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != INTEGER_CST)
    tree_check_failed (__t, __f, __l, __g, INTEGER_CST, 0);
  if (__i < 0 || __i >= __t->base.u.int_length.extended)
    tree_int_cst_elt_check_failed (__i, __t->base.u.int_length.extended,
       __f, __l, __g);
  return &(const_cast<union tree_node *> (((__t))))->int_cst.val[__i];
}




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-overflow"


inline tree *
tree_vec_elt_check (tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != TREE_VEC)
    tree_check_failed (__t, __f, __l, __g, TREE_VEC, 0);
  if (__i < 0 || __i >= __t->base.u.length)
    tree_vec_elt_check_failed (__i, __t->base.u.length, __f, __l, __g);
  return &(const_cast<union tree_node *> (((__t))))->vec.a[__i];
}


#pragma GCC diagnostic pop


inline tree *
omp_clause_elt_check (tree __t, int __i,
                      const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__i < 0 || __i >= omp_clause_num_ops [__t->omp_clause.code])
    omp_clause_operand_check_failed (__i, __t, __f, __l, __g);
  return &__t->omp_clause.ops[__i];
}



inline tree
any_integral_type_check (tree __t, const char *__f, int __l, const char *__g)
{
  if (!((((enum tree_code) (__t)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (__t)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (__t)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (__t)->base.code) == COMPLEX_TYPE || (((enum tree_code) (__t)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "../../gcc/tree.h", 3377, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "../../gcc/tree.h", 3377, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "../../gcc/tree.h", 3377, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))))
    tree_check_failed (__t, __f, __l, __g, BOOLEAN_TYPE, ENUMERAL_TYPE,
         INTEGER_TYPE, 0);
  return __t;
}

inline const_tree
tree_check (const_tree __t, const char *__f, int __l, const char *__g,
     tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) != __c)
    tree_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline const_tree
tree_not_check (const_tree __t, const char *__f, int __l, const char *__g,
                enum tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) == __c)
    tree_not_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline const_tree
tree_check2 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline const_tree
tree_not_check2 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline const_tree
tree_check3 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline const_tree
tree_not_check3 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline const_tree
tree_check4 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline const_tree
tree_not_check4 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline const_tree
tree_check5 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4
      && ((enum tree_code) (__t)->base.code) != __c5)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline const_tree
tree_not_check5 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4
      || ((enum tree_code) (__t)->base.code) == __c5)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline const_tree
contains_struct_check (const_tree __t, const enum tree_node_structure_enum __s,
                       const char *__f, int __l, const char *__g)
{
  if (tree_contains_struct[((enum tree_code) (__t)->base.code)][__s] != 1)
      tree_contains_struct_check_failed (__t, __s, __f, __l, __g);
  return __t;
}

inline const_tree
tree_class_check (const_tree __t, const enum tree_code_class __class,
                  const char *__f, int __l, const char *__g)
{
  if (tree_code_type[(int) (((enum tree_code) (__t)->base.code))] != __class)
    tree_class_check_failed (__t, __class, __f, __l, __g);
  return __t;
}

inline const_tree
tree_range_check (const_tree __t,
                  enum tree_code __code1, enum tree_code __code2,
                  const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) < __code1 || ((enum tree_code) (__t)->base.code) > __code2)
    tree_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}

inline const_tree
omp_clause_subcode_check (const_tree __t, enum omp_clause_code __code,
                          const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__t->omp_clause.code != __code)
    omp_clause_check_failed (__t, __f, __l, __g, __code);
  return __t;
}

inline const_tree
omp_clause_range_check (const_tree __t,
                        enum omp_clause_code __code1,
                        enum omp_clause_code __code2,
                        const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if ((int) __t->omp_clause.code < (int) __code1
      || (int) __t->omp_clause.code > (int) __code2)
    omp_clause_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}

inline const_tree
expr_check (const_tree __t, const char *__f, int __l, const char *__g)
{
  char const __c = tree_code_type[(int) (((enum tree_code) (__t)->base.code))];
  if (!((__c) >= tcc_reference && (__c) <= tcc_expression))
    tree_class_check_failed (__t, tcc_expression, __f, __l, __g);
  return __t;
}

inline const_tree
non_type_check (const_tree __t, const char *__f, int __l, const char *__g)
{
  if ((tree_code_type[(int) (((enum tree_code) (__t)->base.code))] == tcc_type))
    tree_not_class_check_failed (__t, tcc_type, __f, __l, __g);
  return __t;
}


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-overflow"


inline const_tree *
tree_vec_elt_check (const_tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != TREE_VEC)
    tree_check_failed (__t, __f, __l, __g, TREE_VEC, 0);
  if (__i < 0 || __i >= __t->base.u.length)
    tree_vec_elt_check_failed (__i, __t->base.u.length, __f, __l, __g);
  return (const_cast<const_tree *> ((&__t->vec.a[__i])));

}


#pragma GCC diagnostic pop


inline const_tree *
omp_clause_elt_check (const_tree __t, int __i,
                      const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__i < 0 || __i >= omp_clause_num_ops [__t->omp_clause.code])
    omp_clause_operand_check_failed (__i, __t, __f, __l, __g);
  return (const_cast<const_tree *> ((&__t->omp_clause.ops[__i])));
}

inline const_tree
any_integral_type_check (const_tree __t, const char *__f, int __l,
    const char *__g)
{
  if (!((((enum tree_code) (__t)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (__t)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (__t)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (__t)->base.code) == COMPLEX_TYPE || (((enum tree_code) (__t)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "../../gcc/tree.h", 3603, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "../../gcc/tree.h", 3603, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "../../gcc/tree.h", 3603, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))))
    tree_check_failed (__t, __f, __l, __g, BOOLEAN_TYPE, ENUMERAL_TYPE,
         INTEGER_TYPE, 0);
  return __t;
}






static inline int
tree_operand_length (const_tree node)
{
  if ((tree_code_type[(int) (((enum tree_code) (node)->base.code))] == tcc_vl_exp))
    return ((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((node), (tcc_vl_exp), "../../gcc/tree.h", 3618, __FUNCTION__))->exp.operands[0]), (0), "../../gcc/tree.h", 3618, __FUNCTION__))));
  else
    return tree_code_length[(int) (((enum tree_code) (node)->base.code))];
}




inline tree *
tree_operand_check (tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  const_tree __u = (expr_check ((__t), "../../gcc/tree.h", 3630, __FUNCTION__));
  if (__i < 0 || __i >= tree_operand_length (__u))
    tree_operand_check_failed (__i, __u, __f, __l, __g);
  return &(const_cast<union tree_node *> (((__u))))->exp.operands[__i];
}

inline tree *
tree_operand_check_code (tree __t, enum tree_code __code, int __i,
                         const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != __code)
    tree_check_failed (__t, __f, __l, __g, __code, 0);
  if (__i < 0 || __i >= tree_operand_length (__t))
    tree_operand_check_failed (__i, __t, __f, __l, __g);
  return &__t->exp.operands[__i];
}

inline const_tree *
tree_operand_check (const_tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  const_tree __u = (expr_check ((__t), "../../gcc/tree.h", 3651, __FUNCTION__));
  if (__i < 0 || __i >= tree_operand_length (__u))
    tree_operand_check_failed (__i, __u, __f, __l, __g);
  return (const_cast<const_tree *> ((&__u->exp.operands[__i])));
}

inline const_tree *
tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,
                         const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != __code)
    tree_check_failed (__t, __f, __l, __g, __code, 0);
  if (__i < 0 || __i >= tree_operand_length (__t))
    tree_operand_check_failed (__i, __t, __f, __l, __g);
  return (const_cast<const_tree *> ((&__t->exp.operands[__i])));
}





inline bool
id_equal (const_tree id, const char *str)
{
  return !strcmp (((const char *) (tree_check ((id), "../../gcc/tree.h", 3675, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str), str);
}

inline bool
id_equal (const char *str, const_tree id)
{
  return !strcmp (str, ((const char *) (tree_check ((id), "../../gcc/tree.h", 3681, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
}



inline poly_uint64
TYPE_VECTOR_SUBPARTS (const_tree node)
{
  static_assert ((1 <= 2), "NUM_POLY_INT_COEFFS <= 2");
  unsigned int precision = (tree_check ((node), "../../gcc/tree.h", 3690, __FUNCTION__, (VECTOR_TYPE)))->type_common.precision;
  if (1 == 2)
    {
      poly_uint64 res = 0;
      res.coeffs[0] = 1 << (precision & 0xff);
      if (precision & 0x100)
 res.coeffs[1] = 1 << (precision & 0xff);
      return res;
    }
  else
    return 1 << precision;
}




inline void
SET_TYPE_VECTOR_SUBPARTS (tree node, poly_uint64 subparts)
{
  static_assert ((1 <= 2), "NUM_POLY_INT_COEFFS <= 2");
  unsigned long coeff0 = subparts.coeffs[0];
  int index = exact_log2 (coeff0);
  ((void)(!(index >= 0) ? fancy_abort ("../../gcc/tree.h", 3712, __FUNCTION__), 0 : 0));
  if (1 == 2)
    {
      unsigned long coeff1 = subparts.coeffs[1];
      ((void)(!(coeff1 == 0 || coeff1 == coeff0) ? fancy_abort ("../../gcc/tree.h", 3716, __FUNCTION__), 0 : 0));
      (tree_check ((node), "../../gcc/tree.h", 3717, __FUNCTION__, (VECTOR_TYPE)))->type_common.precision
 = index + (coeff1 != 0 ? 0x100 : 0);
    }
  else
    (tree_check ((node), "../../gcc/tree.h", 3721, __FUNCTION__, (VECTOR_TYPE)))->type_common.precision = index;
}




static inline bool
valid_vector_subparts_p (poly_uint64 subparts)
{
  unsigned long coeff0 = subparts.coeffs[0];
  if (!pow2p_hwi (coeff0))
    return false;
  if (1 == 2)
    {
      unsigned long coeff1 = subparts.coeffs[1];
      if (coeff1 != 0 && coeff1 != coeff0)
 return false;
    }
  return true;
}
# 3752 "../../gcc/tree.h"
inline bool
location_wrapper_p (const_tree exp)
{
# 3763 "../../gcc/tree.h"
  if ((((enum tree_code) (exp)->base.code) == NON_LVALUE_EXPR
       || ((enum tree_code) (exp)->base.code) == VIEW_CONVERT_EXPR)
      && ((tree_check2 ((exp), "../../gcc/tree.h", 3765, __FUNCTION__, (NON_LVALUE_EXPR), (VIEW_CONVERT_EXPR)))->base.public_flag))
    return true;
  return false;
}



inline tree
tree_strip_any_location_wrapper (tree exp)
{
  if (location_wrapper_p (exp))
    return (*((const_cast<tree*> (tree_operand_check ((exp), (0), "../../gcc/tree.h", 3776, __FUNCTION__)))));
  else
    return exp;
}
# 4017 "../../gcc/tree.h"
inline unsigned int
vector_cst_encoded_nelts (const_tree t)
{
  return (1U << ((tree_check ((t), "../../gcc/tree.h", 4020, __FUNCTION__, (VECTOR_CST)))->base.u.vector_cst.log2_npatterns)) * ((tree_check ((t), "../../gcc/tree.h", 4020, __FUNCTION__, (VECTOR_CST)))->base.u.vector_cst.nelts_per_pattern);
}

extern tree decl_assembler_name (tree);
extern void overwrite_decl_assembler_name (tree decl, tree name);
extern tree decl_comdat_group (const_tree);
extern tree decl_comdat_group_id (const_tree);
extern const char *decl_section_name (const_tree);
extern void set_decl_section_name (tree, const char *);
extern enum tls_model decl_tls_model (const_tree);
extern void set_decl_tls_model (tree, enum tls_model);




extern size_t tree_size (const_tree);




extern size_t tree_code_size (enum tree_code);


extern int allocate_decl_uid (void);





extern tree make_node (enum tree_code );



extern void free_node (tree);



extern tree copy_node (tree );



extern tree copy_list (tree);



extern tree build_case_label (tree, tree, tree);


extern tree make_tree_binfo (unsigned );



extern tree make_int_cst (int, int );



extern tree make_tree_vec (int );



extern tree grow_tree_vec (tree v, int );



extern tree build_nt (enum tree_code, ...);
extern tree build_nt_call_vec (tree, vec<tree, va_gc> *);

extern tree build0 (enum tree_code, tree );
extern tree build1 (enum tree_code, tree, tree );
extern tree build2 (enum tree_code, tree, tree, tree );
extern tree build3 (enum tree_code, tree, tree, tree, tree );
extern tree build4 (enum tree_code, tree, tree, tree, tree,
      tree );
extern tree build5 (enum tree_code, tree, tree, tree, tree, tree,
      tree );



static inline tree
build1_loc (location_t loc, enum tree_code code, tree type,
     tree arg1 )
{
  tree t = build1 (code, type, arg1 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "../../gcc/tree.h", 4104, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build2_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1 )
{
  tree t = build2 (code, type, arg0, arg1 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "../../gcc/tree.h", 4114, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build3_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1, tree arg2 )
{
  tree t = build3 (code, type, arg0, arg1, arg2 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "../../gcc/tree.h", 4124, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build4_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1, tree arg2, tree arg3 )
{
  tree t = build4 (code, type, arg0, arg1, arg2, arg3 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "../../gcc/tree.h", 4134, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build5_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1, tree arg2, tree arg3, tree arg4 )
{
  tree t = build5 (code, type, arg0, arg1, arg2, arg3,
   arg4 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "../../gcc/tree.h", 4145, __FUNCTION__))->exp.locus = (loc);
  return t;
}



extern tree double_int_to_tree (tree, double_int);

extern tree wide_int_to_tree (tree type, const poly_wide_int_ref &cst);
extern tree force_fit_type (tree, const poly_wide_int_ref &, int, bool);




extern tree build_int_cst (tree, poly_int64);
extern tree build_int_cstu (tree type, poly_uint64);
extern tree build_int_cst_type (tree, poly_int64);
extern tree make_vector (unsigned, unsigned );
extern tree build_vector_from_ctor (tree, vec<constructor_elt, va_gc> *);
extern tree build_vector_from_val (tree, tree);
extern tree build_vec_series (tree, tree, tree);
extern tree build_index_vector (tree, poly_uint64, poly_uint64);
extern void recompute_constructor_flags (tree);
extern void verify_constructor_flags (tree);
extern tree build_constructor (tree, vec<constructor_elt, va_gc> *);
extern tree build_constructor_single (tree, tree, tree);
extern tree build_constructor_from_list (tree, tree);
extern tree build_constructor_va (tree, int, ...);
extern tree build_real_from_int_cst (tree, const_tree);
extern tree build_complex (tree, tree, tree);
extern tree build_complex_inf (tree, bool);
extern tree build_each_one_cst (tree);
extern tree build_one_cst (tree);
extern tree build_minus_one_cst (tree);
extern tree build_all_ones_cst (tree);
extern tree build_zero_cst (tree);
extern tree build_string (int, const char *);
extern tree build_poly_int_cst (tree, const poly_wide_int_ref &);
extern tree build_tree_list (tree, tree );
extern tree build_tree_list_vec (const vec<tree, va_gc> * );
extern tree build_decl (location_t, enum tree_code,
   tree, tree );
extern tree build_fn_decl (const char *, tree);
extern tree build_translation_unit_decl (tree);
extern tree build_block (tree, tree, tree, tree);
extern tree build_empty_stmt (location_t);
extern tree build_omp_clause (location_t, enum omp_clause_code);

extern tree build_vl_exp (enum tree_code, int );

extern tree build_call_nary (tree, tree, int, ...);
extern tree build_call_valist (tree, tree, int, va_list);


extern tree build_call_array_loc (location_t, tree, tree, int, const tree *);
extern tree build_call_vec (tree, tree, vec<tree, va_gc> *);
extern tree build_call_expr_loc_array (location_t, tree, int, tree *);
extern tree build_call_expr_loc_vec (location_t, tree, vec<tree, va_gc> *);
extern tree build_call_expr_loc (location_t, tree, int, ...);
extern tree build_call_expr (tree, int, ...);
extern tree build_call_expr_internal_loc (location_t, enum internal_fn,
       tree, int, ...);
extern tree build_call_expr_internal_loc_array (location_t, enum internal_fn,
      tree, int, const tree *);
extern tree maybe_build_call_expr_loc (location_t, combined_fn, tree,
           int, ...);
extern tree build_alloca_call_expr (tree, unsigned int, long);
extern tree build_string_literal (int, const char *);



extern tree signed_or_unsigned_type_for (int, tree);
extern tree signed_type_for (tree);
extern tree unsigned_type_for (tree);
extern tree truth_type_for (tree);
extern tree build_pointer_type_for_mode (tree, machine_mode, bool);
extern tree build_pointer_type (tree);
extern tree build_reference_type_for_mode (tree, machine_mode, bool);
extern tree build_reference_type (tree);
extern tree build_vector_type_for_mode (tree, machine_mode);
extern tree build_vector_type (tree, poly_int64);
extern tree build_truth_vector_type (poly_uint64, poly_uint64);
extern tree build_same_sized_truth_vector_type (tree vectype);
extern tree build_opaque_vector_type (tree, poly_int64);
extern tree build_index_type (tree);
extern tree build_array_type (tree, tree, bool = false);
extern tree build_nonshared_array_type (tree, tree);
extern tree build_array_type_nelts (tree, poly_uint64);
extern tree build_function_type (tree, tree);
extern tree build_function_type_list (tree, ...);
extern tree build_varargs_function_type_list (tree, ...);
extern tree build_function_type_array (tree, int, tree *);
extern tree build_varargs_function_type_array (tree, int, tree *);





extern tree build_method_type_directly (tree, tree, tree);
extern tree build_method_type (tree, tree);
extern tree build_offset_type (tree, tree);
extern tree build_complex_type (tree, bool named = false);
extern tree array_type_nelts (const_tree);

extern tree value_member (tree, tree);
extern tree purpose_member (const_tree, tree);
extern bool vec_member (const_tree, vec<tree, va_gc> *);
extern tree chain_index (int, tree);

extern int tree_int_cst_equal (const_tree, const_tree);

extern bool tree_fits_shwi_p (const_tree) __attribute__ ((__pure__));
extern bool tree_fits_poly_int64_p (const_tree) __attribute__ ((__pure__));
extern bool tree_fits_uhwi_p (const_tree) __attribute__ ((__pure__));
extern bool tree_fits_poly_uint64_p (const_tree) __attribute__ ((__pure__));
extern long tree_to_shwi (const_tree);
extern poly_int64 tree_to_poly_int64 (const_tree);
extern unsigned long tree_to_uhwi (const_tree);
extern poly_uint64 tree_to_poly_uint64 (const_tree);
# 4294 "../../gcc/tree.h"
extern int tree_int_cst_sgn (const_tree);
extern int tree_int_cst_sign_bit (const_tree);
extern unsigned int tree_int_cst_min_precision (tree, signop);
extern tree strip_array_types (tree);
extern tree excess_precision_type (tree);
extern bool valid_constant_size_p (const_tree);




inline bool
poly_int_tree_p (const_tree t, poly_int64_pod *value)
{
  if (tree_fits_poly_int64_p (t))
    {
      *value = tree_to_poly_int64 (t);
      return true;
    }
  return false;
}




inline bool
poly_int_tree_p (const_tree t, poly_uint64_pod *value)
{
  if (tree_fits_poly_uint64_p (t))
    {
      *value = tree_to_poly_uint64 (t);
      return true;
    }
  return false;
}





extern tree make_tree (tree, rtx);




extern bool check_lang_type (const_tree cand, const_tree base);



extern bool check_base_type (const_tree cand, const_tree base);




extern bool check_qualified_type (const_tree, const_tree, int);





extern tree get_qualified_type (tree, int);




extern tree build_qualified_type (tree, int );



extern tree build_aligned_type (tree, unsigned int);
# 4376 "../../gcc/tree.h"
extern tree build_distinct_type_copy (tree );
extern tree build_variant_type_copy (tree );






extern hashval_t type_hash_canon_hash (tree);
extern tree type_hash_canon (unsigned int, tree);

extern tree convert (tree, tree);
extern unsigned int expr_align (const_tree);
extern tree size_in_bytes_loc (location_t, const_tree);
inline tree
size_in_bytes (const_tree t)
{
  return size_in_bytes_loc (input_location, t);
}

extern long int_size_in_bytes (const_tree);
extern long max_int_size_in_bytes (const_tree);
extern tree bit_position (const_tree);
extern tree byte_position (const_tree);
extern long int_byte_position (const_tree);
# 4427 "../../gcc/tree.h"
extern tree chainon (tree, tree);



extern tree tree_cons (tree, tree, tree );



extern tree tree_last (tree);



extern tree nreverse (tree);




extern int list_length (const_tree);



extern tree first_field (const_tree);




extern bool initializer_zerop (const_tree);

extern wide_int vector_cst_int_elt (const_tree, unsigned int);
extern tree vector_cst_elt (const_tree, unsigned int);




extern tree uniform_vector_p (const_tree);



extern vec<tree, va_gc> *ctor_to_vec (tree);



extern int zerop (const_tree);



extern int integer_zerop (const_tree);



extern int integer_onep (const_tree);




extern int integer_each_onep (const_tree);




extern int integer_all_onesp (const_tree);




extern int integer_minus_onep (const_tree);




extern int integer_pow2p (const_tree);




extern int integer_nonzerop (const_tree);




extern int integer_truep (const_tree);

extern bool cst_and_fits_in_hwi (const_tree);
extern tree num_ending_zeros (const_tree);




extern int fixed_zerop (const_tree);




extern tree staticp (tree);





extern tree save_expr (tree);



extern bool tree_invariant_p (tree);




extern tree skip_simple_arithmetic (tree);




extern tree skip_simple_constant_arithmetic (tree);



enum tree_node_structure_enum tree_node_structure (const_tree);




extern bool contains_placeholder_p (const_tree);
# 4561 "../../gcc/tree.h"
extern bool type_contains_placeholder_p (tree);
# 4570 "../../gcc/tree.h"
extern void find_placeholder_in_expr (tree, vec<tree> *);
# 4588 "../../gcc/tree.h"
extern tree substitute_in_expr (tree, tree, tree);
# 4599 "../../gcc/tree.h"
extern tree substitute_placeholder_in_expr (tree, tree);
# 4613 "../../gcc/tree.h"
extern tree stabilize_reference (tree);






extern tree get_unwidened (tree, tree);






extern tree get_narrower (tree, int *);



static inline bool
handled_component_p (const_tree t)
{
  switch (((enum tree_code) (t)->base.code))
    {
    case COMPONENT_REF:
    case BIT_FIELD_REF:
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case VIEW_CONVERT_EXPR:
      return true;

    default:
      return false;
    }
}



static inline bool
reverse_storage_order_for_component_p (tree t)
{

  if ((((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4656, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4656, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4656, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4656, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE)) || (((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4656, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE))
    return false;

  if (((enum tree_code) (t)->base.code) == REALPART_EXPR || ((enum tree_code) (t)->base.code) == IMAGPART_EXPR)
    t = (*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4660, __FUNCTION__)))));

  switch (((enum tree_code) (t)->base.code))
    {
    case ARRAY_REF:
    case COMPONENT_REF:


      return (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4668, __FUNCTION__)))))), (TS_TYPED), "../../gcc/tree.h", 4668, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4668, __FUNCTION__)))))), (TS_TYPED), "../../gcc/tree.h", 4668, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4668, __FUNCTION__)))))), (TS_TYPED), "../../gcc/tree.h", 4668, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4668, __FUNCTION__)))))), (TS_TYPED), "../../gcc/tree.h", 4668, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE))
      && ((tree_check4 ((((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4669, __FUNCTION__)))))), (TS_TYPED), "../../gcc/tree.h", 4669, __FUNCTION__))->typed.type)), "../../gcc/tree.h", 4669, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag);

    case BIT_FIELD_REF:
    case MEM_REF:
      return ((tree_check2 ((t), "../../gcc/tree.h", 4673, __FUNCTION__, (BIT_FIELD_REF), (MEM_REF)))->base.default_def_flag);

    case ARRAY_RANGE_REF:
    case VIEW_CONVERT_EXPR:
    default:
      return false;
    }

  (fancy_abort ("../../gcc/tree.h", 4681, __FUNCTION__));
}







static inline bool
storage_order_barrier_p (const_tree t)
{
  if (((enum tree_code) (t)->base.code) != VIEW_CONVERT_EXPR)
    return false;

  if ((((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4696, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4696, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4696, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4696, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE))
      && ((tree_check4 ((((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 4697, __FUNCTION__))->typed.type)), "../../gcc/tree.h", 4697, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    return true;

  tree op = (*((const_cast<tree*> (tree_operand_check ((t), (0), "../../gcc/tree.h", 4700, __FUNCTION__)))));

  if ((((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "../../gcc/tree.h", 4702, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "../../gcc/tree.h", 4702, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "../../gcc/tree.h", 4702, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "../../gcc/tree.h", 4702, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE))
      && ((tree_check4 ((((contains_struct_check ((op), (TS_TYPED), "../../gcc/tree.h", 4703, __FUNCTION__))->typed.type)), "../../gcc/tree.h", 4703, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    return true;

  return false;
}




extern tree get_containing_scope (const_tree);



extern const_tree get_ultimate_context (const_tree);



extern tree decl_function_context (const_tree);



extern tree decl_type_context (const_tree);


extern int real_zerop (const_tree);



static inline void
function_args_iter_init (function_args_iterator *i, const_tree fntype)
{
  i->next = ((tree_check2 ((fntype), "../../gcc/tree.h", 4734, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))->type_non_common.values);
}




static inline tree *
function_args_iter_cond_ptr (function_args_iterator *i)
{
  return (i->next) ? &((tree_check ((i->next), "../../gcc/tree.h", 4743, __FUNCTION__, (TREE_LIST)))->list.value) : 
# 4743 "../../gcc/tree.h" 3 4
                                            __null
# 4743 "../../gcc/tree.h"
                                                ;
}




static inline tree
function_args_iter_cond (function_args_iterator *i)
{
  return (i->next) ? ((tree_check ((i->next), "../../gcc/tree.h", 4752, __FUNCTION__, (TREE_LIST)))->list.value) : (tree) 
# 4752 "../../gcc/tree.h" 3 4
                                           __null
# 4752 "../../gcc/tree.h"
                                                    ;
}


static inline void
function_args_iter_next (function_args_iterator *i)
{
  ((void)(!(i->next != (tree) 
# 4759 "../../gcc/tree.h" 3 4
 __null
# 4759 "../../gcc/tree.h"
 ) ? fancy_abort ("../../gcc/tree.h", 4759, __FUNCTION__), 0 : 0));
  i->next = ((contains_struct_check ((i->next), (TS_COMMON), "../../gcc/tree.h", 4760, __FUNCTION__))->common.chain);
}



static inline bool
inlined_function_outer_scope_p (const_tree block)
{
 return ((IS_ADHOC_LOC (((tree_check ((block), "../../gcc/tree.h", 4768, __FUNCTION__, (BLOCK)))->block.locus))) ? get_location_from_adhoc_loc (line_table, ((tree_check ((block), "../../gcc/tree.h", 4768, __FUNCTION__, (BLOCK)))->block.locus)) : (((tree_check ((block), "../../gcc/tree.h", 4768, __FUNCTION__, (BLOCK)))->block.locus))) != ((source_location) 0);
}
# 4788 "../../gcc/tree.h"
extern unsigned crc32_unsigned_n (unsigned, unsigned, unsigned);
extern unsigned crc32_string (unsigned, const char *);
inline unsigned
crc32_unsigned (unsigned chksum, unsigned value)
{
  return crc32_unsigned_n (chksum, value, 4);
}
inline unsigned
crc32_byte (unsigned chksum, char byte)
{
  return crc32_unsigned_n (chksum, byte, 1);
}
extern void clean_symbol_name (char *);
extern tree get_file_function_name (const char *);
extern tree get_callee_fndecl (const_tree);
extern combined_fn get_call_combined_fn (const_tree);
extern int type_num_arguments (const_tree);
extern bool associative_tree_code (enum tree_code);
extern bool commutative_tree_code (enum tree_code);
extern bool commutative_ternary_tree_code (enum tree_code);
extern bool operation_can_overflow (enum tree_code);
extern bool operation_no_trapping_overflow (tree, enum tree_code);
extern tree upper_bound_in_type (tree, tree);
extern tree lower_bound_in_type (tree, tree);
extern int operand_equal_for_phi_arg_p (const_tree, const_tree);
extern tree create_artificial_label (location_t);
extern const char *get_name (tree);
extern bool stdarg_p (const_tree);
extern bool prototype_p (const_tree);
extern bool is_typedef_decl (const_tree x);
extern bool typedef_variant_p (const_tree);
extern bool auto_var_in_fn_p (const_tree, const_tree);
extern tree build_low_bits_mask (tree, unsigned);
extern bool tree_nop_conversion_p (const_tree, const_tree);
extern tree tree_strip_nop_conversions (tree);
extern tree tree_strip_sign_nop_conversions (tree);
extern const_tree strip_invariant_refs (const_tree);
extern tree lhd_gcc_personality (void);
extern void assign_assembler_name_if_needed (tree);
extern void warn_deprecated_use (tree, tree);
extern void cache_integer_cst (tree);
extern const char *combined_fn_name (combined_fn);





static inline int
struct_ptr_eq (const void *a, const void *b)
{
  const void * const * x = (const void * const *) a;
  const void * const * y = (const void * const *) b;
  return *x == *y;
}

static inline hashval_t
struct_ptr_hash (const void *a)
{
  const void * const * x = (const void * const *) a;
  return (intptr_t)*x >> 4;
}


static inline bool
truth_value_p (enum tree_code code)
{
  return (tree_code_type[(int) (code)] == tcc_comparison
   || code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR
   || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR
   || code == TRUTH_XOR_EXPR || code == TRUTH_NOT_EXPR);
}



static inline bool
ptrofftype_p (tree type)
{
  return ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE)
   && ((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 4866, __FUNCTION__))->type_common.precision) == ((tree_class_check ((sizetype_tab[(int) stk_sizetype]), (tcc_type), "../../gcc/tree.h", 4866, __FUNCTION__))->type_common.precision)
   && ((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 4867, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((sizetype_tab[(int) stk_sizetype]), (tcc_type), "../../gcc/tree.h", 4867, __FUNCTION__))->base.u.bits.unsigned_flag));
}




static inline bool
complete_or_array_type_p (const_tree type)
{
  return (((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 4876, __FUNCTION__))->type_common.size) != (tree) 
# 4876 "../../gcc/tree.h" 3 4
        __null
# 4876 "../../gcc/tree.h"
        )
         || (((enum tree_code) (type)->base.code) == ARRAY_TYPE
      && (((tree_class_check ((((contains_struct_check ((type), (TS_TYPED), "../../gcc/tree.h", 4878, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 4878, __FUNCTION__))->type_common.size) != (tree) 
# 4878 "../../gcc/tree.h" 3 4
        __null
# 4878 "../../gcc/tree.h"
        ));
}



inline bool
poly_int_tree_p (const_tree t)
{
  return (((enum tree_code) (t)->base.code) == INTEGER_CST || (1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST));
}




inline poly_uint64
bit_field_size (const_tree t)
{
  return tree_to_poly_uint64 ((*((const_cast<tree*> (tree_operand_check ((t), (1), "../../gcc/tree.h", 4895, __FUNCTION__))))));
}




inline poly_uint64
bit_field_offset (const_tree t)
{
  return tree_to_poly_uint64 ((*((const_cast<tree*> (tree_operand_check ((t), (2), "../../gcc/tree.h", 4904, __FUNCTION__))))));
}

extern tree strip_float_extensions (tree);
extern int really_constant_p (const_tree);
extern bool ptrdiff_tree_p (const_tree, poly_int64_pod *);
extern bool decl_address_invariant_p (const_tree);
extern bool decl_address_ip_invariant_p (const_tree);
extern bool int_fits_type_p (const_tree, const_tree);

extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);

extern bool variably_modified_type_p (tree, tree);
extern int tree_log2 (const_tree);
extern int tree_floor_log2 (const_tree);
extern unsigned int tree_ctz (const_tree);
extern int simple_cst_equal (const_tree, const_tree);

namespace inchash
{

extern void add_expr (const_tree, hash &, unsigned int = 0);

}



static inline hashval_t iterative_hash_expr(const_tree tree, hashval_t seed)
{
  inchash::hash hstate (seed);
  inchash::add_expr (tree, hstate);
  return hstate.end ();
}

extern int compare_tree_int (const_tree, unsigned long);
extern int type_list_equal (const_tree, const_tree);
extern int chain_member (const_tree, const_tree);
extern void dump_tree_statistics (void);
extern void recompute_tree_invariant_for_addr_expr (tree);
extern bool needs_to_live_in_memory (const_tree);
extern tree reconstruct_complex_type (tree, tree);
extern int real_onep (const_tree);
extern int real_minus_onep (const_tree);
extern void init_ttree (void);
extern void build_common_tree_nodes (bool);
extern void build_common_builtin_nodes (void);
extern tree build_nonstandard_integer_type (unsigned long, int);
extern tree build_nonstandard_boolean_type (unsigned long);
extern tree build_range_type (tree, tree, tree);
extern tree build_nonshared_range_type (tree, tree, tree);
extern bool subrange_type_for_debug_p (const_tree, tree *, tree *);
extern long int_cst_value (const_tree);
extern tree tree_block (tree);
extern void tree_set_block (tree, tree);
extern location_t *block_nonartificial_location (tree);
extern location_t tree_nonartificial_location (tree);
extern tree block_ultimate_origin (const_tree);
extern tree get_binfo_at_offset (tree, poly_int64, tree);
extern bool virtual_method_call_p (const_tree);
extern tree obj_type_ref_class (const_tree ref);
extern bool types_same_for_odr (const_tree type1, const_tree type2,
    bool strict=false);
extern bool contains_bitfld_component_ref_p (const_tree);
extern bool block_may_fallthru (const_tree);
extern void using_eh_for_cleanups (void);
extern bool using_eh_for_cleanups_p (void);
extern const char *get_tree_code_name (enum tree_code);
extern void set_call_expr_flags (tree, int);
extern tree walk_tree_1 (tree*, walk_tree_fn, void*, hash_set<tree>*,
    walk_tree_lh);
extern tree walk_tree_without_duplicates_1 (tree*, walk_tree_fn, void*,
         walk_tree_lh);





extern tree drop_tree_overflow (tree);




extern tree get_base_address (tree t);



extern tree array_ref_element_size (tree);



extern tree array_ref_up_bound (tree);



extern tree array_ref_low_bound (tree);




extern bool array_at_struct_end_p (tree);



extern tree component_ref_field_offset (tree);

extern int tree_map_base_eq (const void *, const void *);
extern unsigned int tree_map_base_hash (const void *);
extern int tree_map_base_marked_p (const void *);
extern void __attribute__ ((__used__)) verify_type (const_tree t);
extern bool gimple_canonical_types_compatible_p (const_tree, const_tree,
       bool trust_type_canonical = true);
extern bool type_with_interoperable_signedness (const_tree);
extern bitmap get_nonnull_args (const_tree);
extern int get_range_pos_neg (tree);



inline enum tree_code
tree_code_for_canonical_type_merging (enum tree_code code)
{






  if (code == ENUMERAL_TYPE)
    return INTEGER_TYPE;





  if (code == REFERENCE_TYPE)
    return POINTER_TYPE;
  return code;
}
# 5051 "../../gcc/tree.h"
inline bool
canonical_type_used_p (const_tree t)
{
  return !((((enum tree_code) (t)->base.code) == POINTER_TYPE || ((enum tree_code) (t)->base.code) == REFERENCE_TYPE)
    || ((enum tree_code) (t)->base.code) == ARRAY_TYPE
    || ((enum tree_code) (t)->base.code) == VECTOR_TYPE);
}


extern unsigned int tree_map_hash (const void *);



extern unsigned int tree_decl_map_hash (const void *);


struct tree_decl_map_cache_hasher : ggc_cache_ptr_hash<tree_decl_map>
{
  static hashval_t hash (tree_decl_map *m) { return tree_decl_map_hash (m); }
  static bool
  equal (tree_decl_map *a, tree_decl_map *b)
  {
    return tree_map_base_eq (a, b);
  }

  static int
  keep_cache_entry (tree_decl_map *&m)
  {
    return ggc_marked_p (m->base.from);
  }
};
# 5094 "../../gcc/tree.h"
struct tree_cache_traits
  : simple_cache_map_traits<default_hash_traits<tree>, tree> { };
typedef hash_map<tree,tree,tree_cache_traits> tree_cache_map;



static inline void
init_call_expr_arg_iterator (tree exp, call_expr_arg_iterator *iter)
{
  iter->t = exp;
  iter->n = (((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((exp), (tcc_vl_exp), "../../gcc/tree.h", 5104, __FUNCTION__))->exp.operands[0]), (0), "../../gcc/tree.h", 5104, __FUNCTION__)))) - 3);
  iter->i = 0;
}

static inline void
init_const_call_expr_arg_iterator (const_tree exp, const_call_expr_arg_iterator *iter)
{
  iter->t = exp;
  iter->n = (((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((exp), (tcc_vl_exp), "../../gcc/tree.h", 5112, __FUNCTION__))->exp.operands[0]), (0), "../../gcc/tree.h", 5112, __FUNCTION__)))) - 3);
  iter->i = 0;
}



static inline tree
next_call_expr_arg (call_expr_arg_iterator *iter)
{
  tree result;
  if (iter->i >= iter->n)
    return (tree) 
# 5123 "../../gcc/tree.h" 3 4
          __null
# 5123 "../../gcc/tree.h"
                   ;
  result = (*((const_cast<tree*> (tree_operand_check (((tree_check ((iter->t), "../../gcc/tree.h", 5124, __FUNCTION__, (CALL_EXPR)))), ((iter->i) + 3), "../../gcc/tree.h", 5124, __FUNCTION__)))));
  iter->i++;
  return result;
}

static inline const_tree
next_const_call_expr_arg (const_call_expr_arg_iterator *iter)
{
  const_tree result;
  if (iter->i >= iter->n)
    return (tree) 
# 5134 "../../gcc/tree.h" 3 4
          __null
# 5134 "../../gcc/tree.h"
                   ;
  result = (*((const_cast<tree*> (tree_operand_check (((tree_check ((iter->t), "../../gcc/tree.h", 5135, __FUNCTION__, (CALL_EXPR)))), ((iter->i) + 3), "../../gcc/tree.h", 5135, __FUNCTION__)))));
  iter->i++;
  return result;
}





static inline tree
first_call_expr_arg (tree exp, call_expr_arg_iterator *iter)
{
  init_call_expr_arg_iterator (exp, iter);
  return next_call_expr_arg (iter);
}

static inline const_tree
first_const_call_expr_arg (const_tree exp, const_call_expr_arg_iterator *iter)
{
  init_const_call_expr_arg_iterator (exp, iter);
  return next_const_call_expr_arg (iter);
}



static inline bool
more_call_expr_args_p (const call_expr_arg_iterator *iter)
{
  return (iter->i < iter->n);
}
# 5177 "../../gcc/tree.h"
static inline bool
is_lang_specific (const_tree t)
{
  return ((enum tree_code) (t)->base.code) == LANG_TYPE || ((enum tree_code) (t)->base.code) >= ((int) LAST_AND_UNUSED_TREE_CODE);
}






static inline tree
builtin_decl_explicit (enum built_in_function fncode)
{
  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("../../gcc/tree.h", 5191, __FUNCTION__), 0 : 0));

  return builtin_info[(size_t)fncode].decl;
}


static inline tree
builtin_decl_implicit (enum built_in_function fncode)
{
  size_t uns_fncode = (size_t)fncode;
  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("../../gcc/tree.h", 5201, __FUNCTION__), 0 : 0));

  if (!builtin_info[uns_fncode].implicit_p)
    return (tree) 
# 5204 "../../gcc/tree.h" 3 4
          __null
# 5204 "../../gcc/tree.h"
                   ;

  return builtin_info[uns_fncode].decl;
}




static inline void
set_builtin_decl (enum built_in_function fncode, tree decl, bool implicit_p)
{
  size_t ufncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1))) && (decl != (tree) 
# 5217 "../../gcc/tree.h" 3 4
 __null 
# 5217 "../../gcc/tree.h"
 || !implicit_p)) ? fancy_abort (
                                              "../../gcc/tree.h"
# 5217 "../../gcc/tree.h"
  ,
                                              5218
# 5217 "../../gcc/tree.h"
  , __FUNCTION__), 0 : 0))
                                               ;

  builtin_info[ufncode].decl = decl;
  builtin_info[ufncode].implicit_p = implicit_p;
  builtin_info[ufncode].declared_p = false;
}



static inline void
set_builtin_decl_implicit_p (enum built_in_function fncode, bool implicit_p)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1))) && builtin_info[uns_fncode].decl != (tree) 
# 5232 "../../gcc/tree.h" 3 4
 __null
# 5232 "../../gcc/tree.h"
 ) ? fancy_abort (
                                                      "../../gcc/tree.h"
# 5232 "../../gcc/tree.h"
  ,
                                                      5233
# 5232 "../../gcc/tree.h"
  , __FUNCTION__), 0 : 0))
                                                       ;

  builtin_info[uns_fncode].implicit_p = implicit_p;
}



static inline void
set_builtin_decl_declared_p (enum built_in_function fncode, bool declared_p)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1))) && builtin_info[uns_fncode].decl != (tree) 
# 5245 "../../gcc/tree.h" 3 4
 __null
# 5245 "../../gcc/tree.h"
 ) ? fancy_abort (
                                                      "../../gcc/tree.h"
# 5245 "../../gcc/tree.h"
  ,
                                                      5246
# 5245 "../../gcc/tree.h"
  , __FUNCTION__), 0 : 0))
                                                       ;

  builtin_info[uns_fncode].declared_p = declared_p;
}




static inline bool
builtin_decl_explicit_p (enum built_in_function fncode)
{
  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("../../gcc/tree.h", 5257, __FUNCTION__), 0 : 0));
  return (builtin_info[(size_t)fncode].decl != (tree) 
# 5258 "../../gcc/tree.h" 3 4
                                              __null
# 5258 "../../gcc/tree.h"
                                                       );
}



static inline bool
builtin_decl_implicit_p (enum built_in_function fncode)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("../../gcc/tree.h", 5268, __FUNCTION__), 0 : 0));
  return (builtin_info[uns_fncode].decl != (tree) 
# 5269 "../../gcc/tree.h" 3 4
                                          __null
   
# 5270 "../../gcc/tree.h"
  && builtin_info[uns_fncode].implicit_p);
}



static inline bool
builtin_decl_declared_p (enum built_in_function fncode)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("../../gcc/tree.h", 5280, __FUNCTION__), 0 : 0));
  return (builtin_info[uns_fncode].decl != (tree) 
# 5281 "../../gcc/tree.h" 3 4
                                          __null
   
# 5282 "../../gcc/tree.h"
  && builtin_info[uns_fncode].declared_p);
}




static inline bool
is_global_var (const_tree t)
{
  return (((t)->base.static_flag) || ((contains_struct_check ((t), (TS_DECL_COMMON), "../../gcc/tree.h", 5291, __FUNCTION__))->decl_common.decl_flag_1));
}





static inline bool
may_be_aliased (const_tree var)
{
  return (((enum tree_code) (var)->base.code) != CONST_DECL
   && (((var)->base.public_flag)
       || ((contains_struct_check ((var), (TS_DECL_COMMON), "../../gcc/tree.h", 5303, __FUNCTION__))->decl_common.decl_flag_1)
       || ((var)->base.addressable_flag))
   && !((((var)->base.static_flag) || ((var)->base.public_flag) || ((contains_struct_check ((var), (TS_DECL_COMMON), "../../gcc/tree.h", 5305, __FUNCTION__))->decl_common.decl_flag_1))
        && ((((non_type_check ((var), "../../gcc/tree.h", 5306, __FUNCTION__))->base.readonly_flag)
      && !((tree_class_check ((((contains_struct_check ((var), (TS_TYPED), "../../gcc/tree.h", 5307, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 5307, __FUNCTION__))->type_common.needs_constructing_flag))
     || (((enum tree_code) (var)->base.code) == VAR_DECL
         && ((tree_check ((var), "../../gcc/tree.h", 5309, __FUNCTION__, (VAR_DECL)))->base.nothrow_flag)))));
}


static inline struct cl_optimization *
opts_for_fn (const_tree fndecl)
{
  tree fn_opts = ((tree_check ((fndecl), "../../gcc/tree.h", 5316, __FUNCTION__, (FUNCTION_DECL)))->function_decl.function_specific_optimization);
  if (fn_opts == (tree) 
# 5317 "../../gcc/tree.h" 3 4
                __null
# 5317 "../../gcc/tree.h"
                         )
    fn_opts = global_trees[TI_OPTIMIZATION_DEFAULT];
  return ((tree_check ((fn_opts), "../../gcc/tree.h", 5319, __FUNCTION__, (OPTIMIZATION_NODE)))->optimization.opts);
}


static inline cl_target_option *
target_opts_for_fn (const_tree fndecl)
{
  tree fn_opts = ((tree_check ((fndecl), "../../gcc/tree.h", 5326, __FUNCTION__, (FUNCTION_DECL)))->function_decl.function_specific_target);
  if (fn_opts == (tree) 
# 5327 "../../gcc/tree.h" 3 4
                __null
# 5327 "../../gcc/tree.h"
                         )
    fn_opts = global_trees[TI_TARGET_OPTION_DEFAULT];
  return fn_opts == (tree) 
# 5329 "../../gcc/tree.h" 3 4
                   __null 
# 5329 "../../gcc/tree.h"
                             ? 
# 5329 "../../gcc/tree.h" 3 4
                               __null 
# 5329 "../../gcc/tree.h"
                                    : ((tree_check ((fn_opts), "../../gcc/tree.h", 5329, __FUNCTION__, (TARGET_OPTION_NODE)))->target_option.opts);
}
# 5339 "../../gcc/tree.h"
extern const char *anon_aggrname_format();
extern bool anon_aggrname_p (const_tree);


namespace wi
{
  class unextended_tree
  {
  private:
    const_tree m_t;

  public:
    unextended_tree () {}
    unextended_tree (const_tree t) : m_t (t) {}

    unsigned int get_precision () const;
    const long *get_val () const;
    unsigned int get_len () const;
    const_tree get_tree () const { return m_t; }
  };

  template <>
  struct int_traits <unextended_tree>
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = false;
  };

  template <int N>
  class extended_tree
  {
  private:
    const_tree m_t;

  public:
    extended_tree () {}
    extended_tree (const_tree);

    unsigned int get_precision () const;
    const long *get_val () const;
    unsigned int get_len () const;
    const_tree get_tree () const { return m_t; }
  };

  template <int N>
  struct int_traits <extended_tree <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
  };

  typedef extended_tree <(((128 + 64) / 64) * 64)> widest_extended_tree;
  typedef extended_tree <((64 + 4 + 64 - 1) & ~(64 - 1))> offset_extended_tree;

  typedef const generic_wide_int <widest_extended_tree> tree_to_widest_ref;
  typedef const generic_wide_int <offset_extended_tree> tree_to_offset_ref;
  typedef const generic_wide_int<wide_int_ref_storage<false, false> >
    tree_to_wide_ref;

  tree_to_widest_ref to_widest (const_tree);
  tree_to_offset_ref to_offset (const_tree);
  tree_to_wide_ref to_wide (const_tree);
  wide_int to_wide (const_tree, unsigned int);

  typedef const poly_int <1,
     generic_wide_int <widest_extended_tree> >
    tree_to_poly_widest_ref;
  typedef const poly_int <1,
     generic_wide_int <offset_extended_tree> >
    tree_to_poly_offset_ref;
  typedef const poly_int <1,
     generic_wide_int <unextended_tree> >
    tree_to_poly_wide_ref;

  tree_to_poly_widest_ref to_poly_widest (const_tree);
  tree_to_poly_offset_ref to_poly_offset (const_tree);
  tree_to_poly_wide_ref to_poly_wide (const_tree);

  template <int N>
  struct ints_for <generic_wide_int <extended_tree <N> >, CONST_PRECISION>
  {
    typedef generic_wide_int <extended_tree <N> > extended;
    static extended zero (const extended &);
  };

  template <>
  struct ints_for <generic_wide_int <unextended_tree>, VAR_PRECISION>
  {
    typedef generic_wide_int <unextended_tree> unextended;
    static unextended zero (const unextended &);
  };
}
# 5469 "../../gcc/tree.h"
inline wi::tree_to_widest_ref
wi::to_widest (const_tree t)
{
  return t;
}
# 5494 "../../gcc/tree.h"
inline wi::tree_to_offset_ref
wi::to_offset (const_tree t)
{
  return t;
}
# 5524 "../../gcc/tree.h"
inline wi::tree_to_wide_ref
wi::to_wide (const_tree t)
{
  return wi::storage_ref (&(*tree_int_cst_elt_check ((t), (0), "../../gcc/tree.h", 5527, __FUNCTION__)), ((tree_check ((t), "../../gcc/tree.h", 5527, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.unextended),
     ((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 5528, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 5528, __FUNCTION__))->type_common.precision));
}





inline wide_int
wi::to_wide (const_tree t, unsigned int prec)
{
  return wide_int::from (wi::to_wide (t), prec, ((signop) ((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 5538, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 5538, __FUNCTION__))->base.u.bits.unsigned_flag)));
}

template <int N>
inline wi::extended_tree <N>::extended_tree (const_tree t)
  : m_t (t)
{
  ((void)(!(((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 5545, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 5545, __FUNCTION__))->type_common.precision) <= N) ? fancy_abort ("../../gcc/tree.h", 5545, __FUNCTION__), 0 : 0));
}

template <int N>
inline unsigned int
wi::extended_tree <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
wi::extended_tree <N>::get_val () const
{
  return &(*tree_int_cst_elt_check ((m_t), (0), "../../gcc/tree.h", 5559, __FUNCTION__));
}

template <int N>
inline unsigned int
wi::extended_tree <N>::get_len () const
{
  if (N == ((64 + 4 + 64 - 1) & ~(64 - 1)))
    return ((tree_check ((m_t), "../../gcc/tree.h", 5567, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.offset);
  else if (N >= (((128 + 64) / 64) * 64))
    return ((tree_check ((m_t), "../../gcc/tree.h", 5569, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.extended);
  else



    (fancy_abort ("../../gcc/tree.h", 5574, __FUNCTION__));
}

inline unsigned int
wi::unextended_tree::get_precision () const
{
  return ((tree_class_check ((((contains_struct_check ((m_t), (TS_TYPED), "../../gcc/tree.h", 5580, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 5580, __FUNCTION__))->type_common.precision);
}

inline const long *
wi::unextended_tree::get_val () const
{
  return &(*tree_int_cst_elt_check ((m_t), (0), "../../gcc/tree.h", 5586, __FUNCTION__));
}

inline unsigned int
wi::unextended_tree::get_len () const
{
  return ((tree_check ((m_t), "../../gcc/tree.h", 5592, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.unextended);
}



inline wi::tree_to_poly_wide_ref
poly_int_cst_value (const_tree x)
{
  poly_int <1, generic_wide_int <wi::unextended_tree> > res;
  for (unsigned int i = 0; i < 1; ++i)
    res.coeffs[i] = ((tree_check ((x), "../../gcc/tree.h", 5602, __FUNCTION__, (POLY_INT_CST)))->poly_int_cst.coeffs[i]);
  return res;
}




inline wi::tree_to_poly_widest_ref
wi::to_poly_widest (const_tree t)
{
  if ((1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST))
    {
      poly_int <1,
  generic_wide_int <widest_extended_tree> > res;
      for (unsigned int i = 0; i < 1; ++i)
 res.coeffs[i] = ((tree_check ((t), "../../gcc/tree.h", 5617, __FUNCTION__, (POLY_INT_CST)))->poly_int_cst.coeffs[i]);
      return res;
    }
  return t;
}




inline wi::tree_to_poly_offset_ref
wi::to_poly_offset (const_tree t)
{
  if ((1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST))
    {
      poly_int <1,
  generic_wide_int <offset_extended_tree> > res;
      for (unsigned int i = 0; i < 1; ++i)
 res.coeffs[i] = ((tree_check ((t), "../../gcc/tree.h", 5634, __FUNCTION__, (POLY_INT_CST)))->poly_int_cst.coeffs[i]);
      return res;
    }
  return t;
}




inline wi::tree_to_poly_wide_ref
wi::to_poly_wide (const_tree t)
{
  if ((1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST))
    return poly_int_cst_value (t);
  return t;
}

template <int N>
inline generic_wide_int <wi::extended_tree <N> >
wi::ints_for <generic_wide_int <wi::extended_tree <N> >,
       wi::CONST_PRECISION>::zero (const extended &x)
{
  return build_zero_cst (((contains_struct_check ((x.get_tree ()), (TS_TYPED), "../../gcc/tree.h", 5656, __FUNCTION__))->typed.type));
}

inline generic_wide_int <wi::unextended_tree>
wi::ints_for <generic_wide_int <wi::unextended_tree>,
       wi::VAR_PRECISION>::zero (const unextended &x)
{
  return build_zero_cst (((contains_struct_check ((x.get_tree ()), (TS_TYPED), "../../gcc/tree.h", 5663, __FUNCTION__))->typed.type));
}

namespace wi
{
  template <typename T>
  bool fits_to_boolean_p (const T &x, const_tree);

  template <typename T>
  bool fits_to_tree_p (const T &x, const_tree);

  wide_int min_value (const_tree);
  wide_int max_value (const_tree);
  wide_int from_mpz (const_tree, mpz_t, bool);
}

template <typename T>
bool
wi::fits_to_boolean_p (const T &x, const_tree type)
{
  typedef typename poly_int_traits<T>::int_type int_type;
  return ((!maybe_ne (x, int_type (0)))
   || (!maybe_ne (x, int_type (((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5685, __FUNCTION__))->base.u.bits.unsigned_flag) ? 1 : -1))));
}

template <typename T>
bool
wi::fits_to_tree_p (const T &x, const_tree type)
{


  if (((enum tree_code) (type)->base.code) == BOOLEAN_TYPE)
    return fits_to_boolean_p (x, type);

  if (((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5697, __FUNCTION__))->base.u.bits.unsigned_flag))
    return (!maybe_ne (x, zext (x, ((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5698, __FUNCTION__))->type_common.precision))));
  else
    return (!maybe_ne (x, sext (x, ((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5700, __FUNCTION__))->type_common.precision))));
}



inline wide_int
wi::min_value (const_tree type)
{
  return min_value (((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5708, __FUNCTION__))->type_common.precision), ((signop) ((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5708, __FUNCTION__))->base.u.bits.unsigned_flag)));
}



inline wide_int
wi::max_value (const_tree type)
{
  return max_value (((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5716, __FUNCTION__))->type_common.precision), ((signop) ((tree_class_check ((type), (tcc_type), "../../gcc/tree.h", 5716, __FUNCTION__))->base.u.bits.unsigned_flag)));
}




inline bool
tree_int_cst_lt (const_tree t1, const_tree t2)
{
  return wi::to_widest (t1) < wi::to_widest (t2);
}




inline bool
tree_int_cst_le (const_tree t1, const_tree t2)
{
  return wi::to_widest (t1) <= wi::to_widest (t2);
}





inline int
tree_int_cst_compare (const_tree t1, const_tree t2)
{
  return wi::cmps (wi::to_widest (t1), wi::to_widest (t2));
}







extern void set_decl_rtl (tree, rtx);
extern bool complete_ctor_at_level_p (const_tree, long, const_tree);




extern tree get_inner_reference (tree, poly_int64_pod *, poly_int64_pod *,
     tree *, machine_mode *, int *, int *, int *);

extern tree build_personality_function (const char *);

struct int_n_trees_t {

  tree signed_type;
  tree unsigned_type;
};


extern bool int_n_enabled_p[1];
extern struct int_n_trees_t int_n_trees[1];





inline long
int_bit_position (const_tree field)
{
  return ((wi::to_offset (((tree_check ((field), "../../gcc/tree.h", 5781, __FUNCTION__, (FIELD_DECL)))->field_decl.offset)) << 3)
   + wi::to_offset (((tree_check ((field), "../../gcc/tree.h", 5782, __FUNCTION__, (FIELD_DECL)))->field_decl.bit_offset))).to_shwi ();
}



inline bool
type_with_alias_set_p (const_tree t)
{

  if (((enum tree_code) (t)->base.code) == FUNCTION_TYPE || ((enum tree_code) (t)->base.code) == METHOD_TYPE)
    return false;

  if ((((tree_class_check ((t), (tcc_type), "../../gcc/tree.h", 5794, __FUNCTION__))->type_common.size) != (tree) 
# 5794 "../../gcc/tree.h" 3 4
     __null
# 5794 "../../gcc/tree.h"
     ))
    return true;



  if (((enum tree_code) (t)->base.code) == ARRAY_TYPE && (((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "../../gcc/tree.h", 5799, __FUNCTION__))->typed.type)), (tcc_type), "../../gcc/tree.h", 5799, __FUNCTION__))->type_common.size) != (tree) 
# 5799 "../../gcc/tree.h" 3 4
                                    __null
# 5799 "../../gcc/tree.h"
                                    ))
    return true;

  return false;
}

extern location_t set_block (location_t loc, tree block);

extern void gt_ggc_mx (tree &);
extern void gt_pch_nx (tree &);
extern void gt_pch_nx (tree &, gt_pointer_operator, void *);

extern bool nonnull_arg_p (const_tree);
extern bool is_redundant_typedef (const_tree);
extern bool default_is_empty_record (const_tree);
extern long arg_int_size_in_bytes (const_tree);
extern tree arg_size_in_bytes (const_tree);
extern bool expr_type_first_operand_type_p (tree_code);

extern location_t
set_source_range (tree expr, location_t start, location_t finish);

extern location_t
set_source_range (tree expr, source_range src_range);

static inline source_range
get_decl_source_range (tree decl)
{
  location_t loc = ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "../../gcc/tree.h", 5827, __FUNCTION__))->decl_minimal.locus);
  return get_range_from_loc (line_table, loc);
}


inline bool
desired_pro_or_demotion_p (const_tree to_type, const_tree from_type)
{
  unsigned int to_type_precision = ((tree_class_check ((to_type), (tcc_type), "../../gcc/tree.h", 5835, __FUNCTION__))->type_common.precision);


  if (to_type_precision <= GET_MODE_PRECISION (word_mode))
    return true;


  return to_type_precision <= ((tree_class_check ((from_type), (tcc_type), "../../gcc/tree.h", 5842, __FUNCTION__))->type_common.precision);
}



struct builtin_structptr_type
{
  tree& node;
  tree& base;
  const char *str;
};
extern const builtin_structptr_type builtin_structptr_types[6];



inline bool
type_has_mode_precision_p (const_tree t)
{
  return (!maybe_ne (((tree_class_check ((t), (tcc_type), "../../gcc/tree.h", 5860, __FUNCTION__))->type_common.precision), GET_MODE_PRECISION (((((enum tree_code) ((tree_class_check ((t), (tcc_type), "../../gcc/tree.h", 5860, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (t) : (t)->type_common.mode))));
}
# 27 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/gimple.h" 1
# 25 "../../gcc/gimple.h"
# 1 "../../gcc/tree-ssa-alias.h" 1
# 28 "../../gcc/tree-ssa-alias.h"
struct pt_solution
{


  unsigned int anything : 1;



  unsigned int nonlocal : 1;



  unsigned int escaped : 1;



  unsigned int ipa_escaped : 1;



  unsigned int null : 1;


  unsigned int vars_contains_nonlocal : 1;

  unsigned int vars_contains_escaped : 1;


  unsigned int vars_contains_escaped_heap : 1;


  unsigned int vars_contains_restrict : 1;

  unsigned int vars_contains_interposable : 1;


  bitmap vars;
};





struct ao_ref
{


  tree ref;





  tree base;

  poly_int64 offset;

  poly_int64 size;

  poly_int64 max_size;


  alias_set_type ref_alias_set;


  alias_set_type base_alias_set;


  bool volatile_p;

  bool max_size_known_p () const;
};




inline bool
ao_ref::max_size_known_p () const
{
  return known_size_p (max_size);
}


extern void ao_ref_init (ao_ref *, tree);
extern void ao_ref_init_from_ptr_and_size (ao_ref *, tree, tree);
extern tree ao_ref_base (ao_ref *);
extern alias_set_type ao_ref_alias_set (ao_ref *);
extern alias_set_type ao_ref_base_alias_set (ao_ref *);
extern bool ptr_deref_may_alias_global_p (tree);
extern bool ptr_derefs_may_alias_p (tree, tree);
extern bool ptrs_compare_unequal (tree, tree);
extern bool ref_may_alias_global_p (tree);
extern bool ref_may_alias_global_p (ao_ref *);
extern bool refs_may_alias_p (tree, tree);
extern bool refs_may_alias_p_1 (ao_ref *, ao_ref *, bool);
extern bool refs_anti_dependent_p (tree, tree);
extern bool refs_output_dependent_p (tree, tree);
extern bool ref_maybe_used_by_stmt_p (gimple *, tree);
extern bool ref_maybe_used_by_stmt_p (gimple *, ao_ref *);
extern bool stmt_may_clobber_global_p (gimple *);
extern bool stmt_may_clobber_ref_p (gimple *, tree);
extern bool stmt_may_clobber_ref_p_1 (gimple *, ao_ref *);
extern bool call_may_clobber_ref_p (gcall *, tree);
extern bool call_may_clobber_ref_p_1 (gcall *, ao_ref *);
extern bool stmt_kills_ref_p (gimple *, tree);
extern bool stmt_kills_ref_p (gimple *, ao_ref *);
extern tree get_continuation_for_phi (gimple *, ao_ref *,
          unsigned int *, bitmap *, bool,
          void *(*)(ao_ref *, tree, void *, bool *),
          void *);
extern void *walk_non_aliased_vuses (ao_ref *, tree,
         void *(*)(ao_ref *, tree,
            unsigned int, void *),
         void *(*)(ao_ref *, tree, void *, bool *),
         tree (*)(tree),
         void *);
extern int walk_aliased_vdefs (ao_ref *, tree,
          bool (*)(ao_ref *, tree, void *),
          void *, bitmap *,
          bool *function_entry_reached = 
# 147 "../../gcc/tree-ssa-alias.h" 3 4
                                        __null
# 147 "../../gcc/tree-ssa-alias.h"
                                            ,
          unsigned int limit = 0);
extern void dump_alias_info (FILE *);
extern void debug_alias_info (void);
extern void dump_points_to_solution (FILE *, struct pt_solution *);
extern void debug (pt_solution &ref);
extern void debug (pt_solution *ptr);
extern void dump_points_to_info_for (FILE *, tree);
extern void debug_points_to_info_for (tree);
extern void dump_alias_stats (FILE *);



extern unsigned int compute_may_aliases (void);
extern bool pt_solution_empty_p (struct pt_solution *);
extern bool pt_solution_singleton_or_null_p (struct pt_solution *, unsigned *);
extern bool pt_solution_includes_global (struct pt_solution *);
extern bool pt_solution_includes (struct pt_solution *, const_tree);
extern bool pt_solutions_intersect (struct pt_solution *, struct pt_solution *);
extern void pt_solution_reset (struct pt_solution *);
extern void pt_solution_set (struct pt_solution *, bitmap, bool);
extern void pt_solution_set_var (struct pt_solution *, tree);

extern void dump_pta_stats (FILE *);

extern struct pt_solution ipa_escaped_pt;





static inline bool
ranges_overlap_p (long pos1,
    unsigned long size1,
    long pos2,
    unsigned long size2)
{
  if (size1 == 0 || size2 == 0)
    return false;
  if (pos1 >= pos2
      && (size2 == (unsigned long)-1
   || pos1 < (pos2 + (long) size2)))
    return true;
  if (pos2 >= pos1
      && (size1 == (unsigned long)-1
   || pos2 < (pos1 + (long) size1)))
    return true;

  return false;
}
# 26 "../../gcc/gimple.h" 2
# 1 "../../gcc/gimple-expr.h" 1
# 23 "../../gcc/gimple-expr.h"
extern bool useless_type_conversion_p (tree, tree);


extern void gimple_set_body (tree, gimple_seq);
extern gimple_seq gimple_body (tree);
extern bool gimple_has_body_p (tree);
extern const char *gimple_decl_printable_name (tree, int);
extern tree copy_var_decl (tree, tree, tree);
extern tree create_tmp_var_name (const char *);
extern tree create_tmp_var_raw (tree, const char * = 
# 32 "../../gcc/gimple-expr.h" 3 4
                                                    __null
# 32 "../../gcc/gimple-expr.h"
                                                        );
extern tree create_tmp_var (tree, const char * = 
# 33 "../../gcc/gimple-expr.h" 3 4
                                                __null
# 33 "../../gcc/gimple-expr.h"
                                                    );
extern tree create_tmp_reg (tree, const char * = 
# 34 "../../gcc/gimple-expr.h" 3 4
                                                __null
# 34 "../../gcc/gimple-expr.h"
                                                    );
extern tree create_tmp_reg_fn (struct function *, tree, const char *);


extern void extract_ops_from_tree (tree, enum tree_code *, tree *, tree *,
       tree *);
extern void gimple_cond_get_ops_from_tree (tree, enum tree_code *, tree *,
        tree *);
extern bool is_gimple_lvalue (tree);
extern bool is_gimple_condexpr (tree);
extern bool is_gimple_address (const_tree);
extern bool is_gimple_invariant_address (const_tree);
extern bool is_gimple_ip_invariant_address (const_tree);
extern bool is_gimple_min_invariant (const_tree);
extern bool is_gimple_ip_invariant (const_tree);
extern bool is_gimple_reg (tree);
extern bool is_gimple_val (tree);
extern bool is_gimple_asm_val (tree);
extern bool is_gimple_min_lval (tree);
extern bool is_gimple_call_addr (tree);
extern bool is_gimple_mem_ref_addr (tree);
extern void flush_mark_addressable_queue (void);
extern void mark_addressable (tree);
extern bool is_gimple_reg_rhs (tree);




static inline bool
types_compatible_p (tree type1, tree type2)
{
  return (type1 == type2
   || (useless_type_conversion_p (type1, type2)
       && useless_type_conversion_p (type2, type1)));
}



static inline bool
is_gimple_reg_type (tree type)
{
  return !(((enum tree_code) (type)->base.code) == ARRAY_TYPE || (((enum tree_code) (type)->base.code) == RECORD_TYPE || ((enum tree_code) (type)->base.code) == UNION_TYPE || ((enum tree_code) (type)->base.code) == QUAL_UNION_TYPE));
}



static inline bool
is_gimple_variable (tree t)
{
  return (((enum tree_code) (t)->base.code) == VAR_DECL
   || ((enum tree_code) (t)->base.code) == PARM_DECL
   || ((enum tree_code) (t)->base.code) == RESULT_DECL
   || ((enum tree_code) (t)->base.code) == SSA_NAME);
}



static inline bool
is_gimple_id (tree t)
{
  return (is_gimple_variable (t)
   || ((enum tree_code) (t)->base.code) == FUNCTION_DECL
   || ((enum tree_code) (t)->base.code) == LABEL_DECL
   || ((enum tree_code) (t)->base.code) == CONST_DECL

   || ((enum tree_code) (t)->base.code) == STRING_CST);
}



static inline bool
virtual_operand_p (tree op)
{
  if (((enum tree_code) (op)->base.code) == SSA_NAME)
    return (tree_check ((op), "../../gcc/gimple-expr.h", 108, __FUNCTION__, (SSA_NAME)))->base.public_flag;

  if (((enum tree_code) (op)->base.code) == VAR_DECL)
    return ((tree_check ((op), "../../gcc/gimple-expr.h", 111, __FUNCTION__, (VAR_DECL)))->base.u.bits.saturating_flag);

  return false;
}



static inline bool
is_gimple_addressable (tree t)
{
  return (is_gimple_id (t) || handled_component_p (t)
   || ((enum tree_code) (t)->base.code) == TARGET_MEM_REF
   || ((enum tree_code) (t)->base.code) == MEM_REF);
}



static inline bool
is_gimple_constant (const_tree t)
{
  switch (((enum tree_code) (t)->base.code))
    {
    case INTEGER_CST:
    case POLY_INT_CST:
    case REAL_CST:
    case FIXED_CST:
    case COMPLEX_CST:
    case VECTOR_CST:
    case STRING_CST:
      return true;

    default:
      return false;
    }
}




static inline void
extract_ops_from_tree (tree expr, enum tree_code *code, tree *op0,
         tree *op1)
{
  tree op2;
  extract_ops_from_tree (expr, code, op0, op1, &op2);
  ((void)(!(op2 == (tree) 
# 156 "../../gcc/gimple-expr.h" 3 4
 __null
# 156 "../../gcc/gimple-expr.h"
 ) ? fancy_abort ("../../gcc/gimple-expr.h", 156, __FUNCTION__), 0 : 0));
}




static inline tree
gimple_call_addr_fndecl (const_tree fn)
{
  if (fn && ((enum tree_code) (fn)->base.code) == ADDR_EXPR)
    {
      tree fndecl = (*((const_cast<tree*> (tree_operand_check ((fn), (0), "../../gcc/gimple-expr.h", 167, __FUNCTION__)))));
      if (((enum tree_code) (fndecl)->base.code) == MEM_REF
   && ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((fndecl), (0), "../../gcc/gimple-expr.h", 169, __FUNCTION__))))))->base.code) == ADDR_EXPR
   && integer_zerop ((*((const_cast<tree*> (tree_operand_check ((fndecl), (1), "../../gcc/gimple-expr.h", 170, __FUNCTION__)))))))
 fndecl = (*((const_cast<tree*> (tree_operand_check (((*((const_cast<tree*> (tree_operand_check ((fndecl), (0), "../../gcc/gimple-expr.h", 171, __FUNCTION__)))))), (0), "../../gcc/gimple-expr.h", 171, __FUNCTION__)))));
      if (((enum tree_code) (fndecl)->base.code) == FUNCTION_DECL)
 return fndecl;
    }
  return (tree) 
# 175 "../../gcc/gimple-expr.h" 3 4
        __null
# 175 "../../gcc/gimple-expr.h"
                 ;
}
# 27 "../../gcc/gimple.h" 2

typedef gimple *gimple_seq_node;

enum gimple_code {

# 1 "../../gcc/gimple.def" 1
# 27 "../../gcc/gimple.def"
GIMPLE_ERROR_MARK,
# 46 "../../gcc/gimple.def"
GIMPLE_COND,


GIMPLE_DEBUG,



GIMPLE_GOTO,



GIMPLE_LABEL,
# 74 "../../gcc/gimple.def"
GIMPLE_SWITCH,
# 101 "../../gcc/gimple.def"
GIMPLE_ASSIGN,
# 111 "../../gcc/gimple.def"
GIMPLE_ASM,
# 125 "../../gcc/gimple.def"
GIMPLE_CALL,







GIMPLE_TRANSACTION,





GIMPLE_RETURN,





GIMPLE_BIND,




GIMPLE_CATCH,




GIMPLE_EH_FILTER,




GIMPLE_EH_MUST_NOT_THROW,





GIMPLE_EH_ELSE,


GIMPLE_RESX,



GIMPLE_EH_DISPATCH,
# 185 "../../gcc/gimple.def"
GIMPLE_PHI,
# 200 "../../gcc/gimple.def"
GIMPLE_TRY,


GIMPLE_NOP,
# 221 "../../gcc/gimple.def"
GIMPLE_OMP_ATOMIC_LOAD,

GIMPLE_OMP_ATOMIC_STORE,




GIMPLE_OMP_CONTINUE,







GIMPLE_OMP_CRITICAL,
# 276 "../../gcc/gimple.def"
GIMPLE_OMP_FOR,



GIMPLE_OMP_MASTER,



GIMPLE_OMP_TASKGROUP,
# 302 "../../gcc/gimple.def"
GIMPLE_OMP_PARALLEL,
# 328 "../../gcc/gimple.def"
GIMPLE_OMP_TASK,


GIMPLE_OMP_RETURN,



GIMPLE_OMP_SECTION,







GIMPLE_OMP_SECTIONS,




GIMPLE_OMP_SECTIONS_SWITCH,




GIMPLE_OMP_SINGLE,
# 367 "../../gcc/gimple.def"
GIMPLE_OMP_TARGET,




GIMPLE_OMP_TEAMS,




GIMPLE_OMP_ORDERED,



GIMPLE_OMP_GRID_BODY,






GIMPLE_PREDICT,






GIMPLE_WITH_CLEANUP_EXPR,
# 33 "../../gcc/gimple.h" 2

    LAST_AND_UNUSED_GIMPLE_CODE
};

extern const char *const gimple_code_name[];
extern const unsigned char gimple_rhs_class_table[];


template<typename T> struct remove_pointer { typedef T type; };
template<typename T> struct remove_pointer<T *> { typedef T type; };




extern void gimple_check_failed (const gimple *, const char *, int,
                                 const char *, enum gimple_code,
     enum tree_code) __attribute__ ((__noreturn__))
       __attribute__ ((__cold__));
# 59 "../../gcc/gimple.h"
template <typename T>
static inline T
GIMPLE_CHECK2(const gimple *gs,

       const char *file = __builtin_FILE (),
       int line = __builtin_LINE (),
       const char *fun = __builtin_FUNCTION ())





{
  T ret = dyn_cast <T> (gs);
  if (!ret)
    gimple_check_failed (gs, file, line, fun,
    remove_pointer<T>::type::code_, ERROR_MARK);
  return ret;
}
template <typename T>
static inline T
GIMPLE_CHECK2(gimple *gs,

       const char *file = __builtin_FILE (),
       int line = __builtin_LINE (),
       const char *fun = __builtin_FUNCTION ())





{
  T ret = dyn_cast <T> (gs);
  if (!ret)
    gimple_check_failed (gs, file, line, fun,
    remove_pointer<T>::type::code_, ERROR_MARK);
  return ret;
}
# 116 "../../gcc/gimple.h"
enum gimple_rhs_class
{
  GIMPLE_INVALID_RHS,
  GIMPLE_TERNARY_RHS,
  GIMPLE_BINARY_RHS,
  GIMPLE_UNARY_RHS,
  GIMPLE_SINGLE_RHS

};
# 137 "../../gcc/gimple.h"
enum gf_mask {
    GF_ASM_INPUT = 1 << 0,
    GF_ASM_VOLATILE = 1 << 1,
    GF_CALL_FROM_THUNK = 1 << 0,
    GF_CALL_RETURN_SLOT_OPT = 1 << 1,
    GF_CALL_TAILCALL = 1 << 2,
    GF_CALL_VA_ARG_PACK = 1 << 3,
    GF_CALL_NOTHROW = 1 << 4,
    GF_CALL_ALLOCA_FOR_VAR = 1 << 5,
    GF_CALL_INTERNAL = 1 << 6,
    GF_CALL_CTRL_ALTERING = 1 << 7,
    GF_CALL_WITH_BOUNDS = 1 << 8,
    GF_CALL_MUST_TAIL_CALL = 1 << 9,
    GF_CALL_BY_DESCRIPTOR = 1 << 10,
    GF_CALL_NOCF_CHECK = 1 << 11,
    GF_OMP_PARALLEL_COMBINED = 1 << 0,
    GF_OMP_PARALLEL_GRID_PHONY = 1 << 1,
    GF_OMP_TASK_TASKLOOP = 1 << 0,
    GF_OMP_FOR_KIND_MASK = (1 << 4) - 1,
    GF_OMP_FOR_KIND_FOR = 0,
    GF_OMP_FOR_KIND_DISTRIBUTE = 1,
    GF_OMP_FOR_KIND_TASKLOOP = 2,
    GF_OMP_FOR_KIND_OACC_LOOP = 4,
    GF_OMP_FOR_KIND_GRID_LOOP = 5,

    GF_OMP_FOR_SIMD = 1 << 3,
    GF_OMP_FOR_KIND_SIMD = GF_OMP_FOR_SIMD | 0,
    GF_OMP_FOR_COMBINED = 1 << 4,
    GF_OMP_FOR_COMBINED_INTO = 1 << 5,


    GF_OMP_FOR_GRID_PHONY = 1 << 6,


    GF_OMP_FOR_GRID_INTRA_GROUP = 1 << 6,
    GF_OMP_FOR_GRID_GROUP_ITER = 1 << 7,
    GF_OMP_TARGET_KIND_MASK = (1 << 4) - 1,
    GF_OMP_TARGET_KIND_REGION = 0,
    GF_OMP_TARGET_KIND_DATA = 1,
    GF_OMP_TARGET_KIND_UPDATE = 2,
    GF_OMP_TARGET_KIND_ENTER_DATA = 3,
    GF_OMP_TARGET_KIND_EXIT_DATA = 4,
    GF_OMP_TARGET_KIND_OACC_PARALLEL = 5,
    GF_OMP_TARGET_KIND_OACC_KERNELS = 6,
    GF_OMP_TARGET_KIND_OACC_DATA = 7,
    GF_OMP_TARGET_KIND_OACC_UPDATE = 8,
    GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA = 9,
    GF_OMP_TARGET_KIND_OACC_DECLARE = 10,
    GF_OMP_TARGET_KIND_OACC_HOST_DATA = 11,
    GF_OMP_TEAMS_GRID_PHONY = 1 << 0,





    GF_OMP_RETURN_NOWAIT = 1 << 0,

    GF_OMP_SECTION_LAST = 1 << 0,
    GF_OMP_ATOMIC_NEED_VALUE = 1 << 0,
    GF_OMP_ATOMIC_SEQ_CST = 1 << 1,
    GF_PREDICT_TAKEN = 1 << 15
};



enum gimple_debug_subcode {
  GIMPLE_DEBUG_BIND = 0,
  GIMPLE_DEBUG_SOURCE_BIND = 1,
  GIMPLE_DEBUG_BEGIN_STMT = 2,
  GIMPLE_DEBUG_INLINE_ENTRY = 3
};



enum plf_mask {
    GF_PLF_1 = 1 << 0,
    GF_PLF_2 = 1 << 1
};




struct

  gimple
{


  enum gimple_code code : 8;


  unsigned int no_warning : 1;



  unsigned int visited : 1;


  unsigned int nontemporal_move : 1;






  unsigned int plf : 2;



  unsigned modified : 1;


  unsigned has_volatile_ops : 1;


  unsigned pad : 1;





  unsigned int subcode : 16;




  unsigned uid;



  location_t location;


  unsigned num_ops;



  basic_block bb;







  gimple *next;
  gimple * prev;
};





struct
  gimple_statement_with_ops_base : public gimple
{







  struct use_optype_d *use_ops;
};




struct
  gimple_statement_with_ops : public gimple_statement_with_ops_base
{






  tree op[1];
};




struct
  gimple_statement_with_memory_ops_base : public gimple_statement_with_ops_base
{





  tree vdef;
  tree vuse;
};




struct
  gimple_statement_with_memory_ops :
    public gimple_statement_with_memory_ops_base
{






  tree op[1];
};




struct
  gcall : public gimple_statement_with_memory_ops_base
{



  struct pt_solution call_used;
  struct pt_solution call_clobbered;


  union {
    tree fntype;
    enum internal_fn internal_fn;
  } u;





  tree op[1];

  static const enum gimple_code code_ = GIMPLE_CALL;
};




struct
  gimple_statement_omp : public gimple
{



  gimple_seq body;
};




struct
  gbind : public gimple
{




  tree vars;







  tree block;


  gimple_seq body;
};




struct
  gcatch : public gimple
{



  tree types;


  gimple_seq handler;
};




struct
  geh_filter : public gimple
{




  tree types;



  gimple_seq failure;
};



struct
  geh_else : public gimple
{



  gimple_seq n_body, e_body;
};



struct
  geh_mnt : public gimple
{



  tree fndecl;
};



struct
  gphi : public gimple
{



  unsigned capacity;
  unsigned nargs;


  tree result;


  struct phi_arg_d args[1];
};




struct
  gimple_statement_eh_ctrl : public gimple
{




  int region;
};

struct
  gresx : public gimple_statement_eh_ctrl
{


};

struct
  geh_dispatch : public gimple_statement_eh_ctrl
{


};




struct
  gtry : public gimple
{




  gimple_seq eval;



  gimple_seq cleanup;
};


enum gimple_try_flags
{

  GIMPLE_TRY_CATCH = 1 << 0,


  GIMPLE_TRY_FINALLY = 1 << 1,
  GIMPLE_TRY_KIND = GIMPLE_TRY_CATCH | GIMPLE_TRY_FINALLY,


  GIMPLE_TRY_CATCH_IS_CLEANUP = 1 << 2
};



struct
  gimple_statement_wce : public gimple
{
# 556 "../../gcc/gimple.h"
  gimple_seq cleanup;
};




struct
  gasm : public gimple_statement_with_memory_ops_base
{




  const char *string;



  unsigned char ni;
  unsigned char no;
  unsigned char nc;
  unsigned char nl;





  tree op[1];
};



struct
  gomp_critical : public gimple_statement_omp
{



  tree clauses;



  tree name;
};


struct gimple_omp_for_iter {

  enum tree_code cond;


  tree index;


  tree initial;


  tree final;


  tree incr;
};



struct
  gomp_for : public gimple_statement_omp
{



  tree clauses;



  size_t collapse;


  struct gimple_omp_for_iter * iter;



  gimple_seq pre_body;
};




struct
  gimple_statement_omp_parallel_layout : public gimple_statement_omp
{




  tree clauses;



  tree child_fn;



  tree data_arg;
};


struct
  gimple_statement_omp_taskreg : public gimple_statement_omp_parallel_layout
{



};


struct
  gomp_parallel : public gimple_statement_omp_taskreg
{


};


struct
  gomp_target : public gimple_statement_omp_parallel_layout
{


};



struct
  gomp_task : public gimple_statement_omp_taskreg
{




  tree copy_fn;



  tree arg_size;
  tree arg_align;
};
# 710 "../../gcc/gimple.h"
struct
  gomp_sections : public gimple_statement_omp
{



  tree clauses;




  tree control;
};






struct
  gomp_continue : public gimple
{



  tree control_def;


  tree control_use;
};



struct
  gimple_statement_omp_single_layout : public gimple_statement_omp
{



  tree clauses;
};

struct
  gomp_single : public gimple_statement_omp_single_layout
{


};

struct
  gomp_teams : public gimple_statement_omp_single_layout
{


};

struct
  gomp_ordered : public gimple_statement_omp_single_layout
{


};






struct
  gomp_atomic_load : public gimple
{



  tree rhs, lhs;
};




struct
  gimple_statement_omp_atomic_store_layout : public gimple
{



  tree val;
};

struct
  gomp_atomic_store :
    public gimple_statement_omp_atomic_store_layout
{


};

struct
  gimple_statement_omp_return :
    public gimple_statement_omp_atomic_store_layout
{


};
# 843 "../../gcc/gimple.h"
struct
  gtransaction : public gimple_statement_with_memory_ops_base
{



  gimple_seq body;


  tree label_norm;
  tree label_uninst;
  tree label_over;
};


enum gimple_statement_structure_enum {
# 1 "../../gcc/gsstruct.def" 1
# 28 "../../gcc/gsstruct.def"
GSS_BASE,
GSS_WITH_OPS,
GSS_WITH_MEM_OPS_BASE,
GSS_WITH_MEM_OPS,
GSS_CALL,
GSS_ASM,
GSS_BIND,
GSS_PHI,
GSS_TRY,
GSS_CATCH,
GSS_EH_FILTER,
GSS_EH_MNT,
GSS_EH_CTRL,
GSS_EH_ELSE,
GSS_WCE,
GSS_OMP,
GSS_OMP_CRITICAL,
GSS_OMP_FOR,
GSS_OMP_PARALLEL_LAYOUT,
GSS_OMP_TASK,
GSS_OMP_SECTIONS,
GSS_OMP_SINGLE_LAYOUT,
GSS_OMP_CONTINUE,
GSS_OMP_ATOMIC_LOAD,
GSS_OMP_ATOMIC_STORE_LAYOUT,
GSS_TRANSACTION,
# 860 "../../gcc/gimple.h" 2
    LAST_GSS_ENUM
};






struct
  gcond : public gimple_statement_with_ops
{

  static const enum gimple_code code_ = GIMPLE_COND;
};





struct
  gdebug : public gimple_statement_with_ops
{

};





struct
  ggoto : public gimple_statement_with_ops
{

};





struct
  glabel : public gimple_statement_with_ops
{

};





struct
  gswitch : public gimple_statement_with_ops
{

};





struct
  gassign : public gimple_statement_with_memory_ops
{
  static const enum gimple_code code_ = GIMPLE_ASSIGN;

};





struct
  greturn : public gimple_statement_with_memory_ops
{

};

template <>
template <>
inline bool
is_a_helper <gasm *>::test (gimple *gs)
{
  return gs->code == GIMPLE_ASM;
}

template <>
template <>
inline bool
is_a_helper <gassign *>::test (gimple *gs)
{
  return gs->code == GIMPLE_ASSIGN;
}

template <>
template <>
inline bool
is_a_helper <const gassign *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_ASSIGN;
}

template <>
template <>
inline bool
is_a_helper <gbind *>::test (gimple *gs)
{
  return gs->code == GIMPLE_BIND;
}

template <>
template <>
inline bool
is_a_helper <gcall *>::test (gimple *gs)
{
  return gs->code == GIMPLE_CALL;
}

template <>
template <>
inline bool
is_a_helper <gcatch *>::test (gimple *gs)
{
  return gs->code == GIMPLE_CATCH;
}

template <>
template <>
inline bool
is_a_helper <gcond *>::test (gimple *gs)
{
  return gs->code == GIMPLE_COND;
}

template <>
template <>
inline bool
is_a_helper <const gcond *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_COND;
}

template <>
template <>
inline bool
is_a_helper <gdebug *>::test (gimple *gs)
{
  return gs->code == GIMPLE_DEBUG;
}

template <>
template <>
inline bool
is_a_helper <ggoto *>::test (gimple *gs)
{
  return gs->code == GIMPLE_GOTO;
}

template <>
template <>
inline bool
is_a_helper <glabel *>::test (gimple *gs)
{
  return gs->code == GIMPLE_LABEL;
}

template <>
template <>
inline bool
is_a_helper <gresx *>::test (gimple *gs)
{
  return gs->code == GIMPLE_RESX;
}

template <>
template <>
inline bool
is_a_helper <geh_dispatch *>::test (gimple *gs)
{
  return gs->code == GIMPLE_EH_DISPATCH;
}

template <>
template <>
inline bool
is_a_helper <geh_else *>::test (gimple *gs)
{
  return gs->code == GIMPLE_EH_ELSE;
}

template <>
template <>
inline bool
is_a_helper <geh_filter *>::test (gimple *gs)
{
  return gs->code == GIMPLE_EH_FILTER;
}

template <>
template <>
inline bool
is_a_helper <geh_mnt *>::test (gimple *gs)
{
  return gs->code == GIMPLE_EH_MUST_NOT_THROW;
}

template <>
template <>
inline bool
is_a_helper <gomp_atomic_load *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_ATOMIC_LOAD;
}

template <>
template <>
inline bool
is_a_helper <gomp_atomic_store *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_ATOMIC_STORE;
}

template <>
template <>
inline bool
is_a_helper <gimple_statement_omp_return *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_RETURN;
}

template <>
template <>
inline bool
is_a_helper <gomp_continue *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_CONTINUE;
}

template <>
template <>
inline bool
is_a_helper <gomp_critical *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_CRITICAL;
}

template <>
template <>
inline bool
is_a_helper <gomp_ordered *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_ORDERED;
}

template <>
template <>
inline bool
is_a_helper <gomp_for *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_FOR;
}

template <>
template <>
inline bool
is_a_helper <gimple_statement_omp_taskreg *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_PARALLEL || gs->code == GIMPLE_OMP_TASK;
}

template <>
template <>
inline bool
is_a_helper <gomp_parallel *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_PARALLEL;
}

template <>
template <>
inline bool
is_a_helper <gomp_target *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_TARGET;
}

template <>
template <>
inline bool
is_a_helper <gomp_sections *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_SECTIONS;
}

template <>
template <>
inline bool
is_a_helper <gomp_single *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_SINGLE;
}

template <>
template <>
inline bool
is_a_helper <gomp_teams *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_TEAMS;
}

template <>
template <>
inline bool
is_a_helper <gomp_task *>::test (gimple *gs)
{
  return gs->code == GIMPLE_OMP_TASK;
}

template <>
template <>
inline bool
is_a_helper <gphi *>::test (gimple *gs)
{
  return gs->code == GIMPLE_PHI;
}

template <>
template <>
inline bool
is_a_helper <greturn *>::test (gimple *gs)
{
  return gs->code == GIMPLE_RETURN;
}

template <>
template <>
inline bool
is_a_helper <gswitch *>::test (gimple *gs)
{
  return gs->code == GIMPLE_SWITCH;
}

template <>
template <>
inline bool
is_a_helper <gtransaction *>::test (gimple *gs)
{
  return gs->code == GIMPLE_TRANSACTION;
}

template <>
template <>
inline bool
is_a_helper <gtry *>::test (gimple *gs)
{
  return gs->code == GIMPLE_TRY;
}

template <>
template <>
inline bool
is_a_helper <gimple_statement_wce *>::test (gimple *gs)
{
  return gs->code == GIMPLE_WITH_CLEANUP_EXPR;
}

template <>
template <>
inline bool
is_a_helper <const gasm *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_ASM;
}

template <>
template <>
inline bool
is_a_helper <const gbind *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_BIND;
}

template <>
template <>
inline bool
is_a_helper <const gcall *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_CALL;
}

template <>
template <>
inline bool
is_a_helper <const gcatch *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_CATCH;
}

template <>
template <>
inline bool
is_a_helper <const gresx *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_RESX;
}

template <>
template <>
inline bool
is_a_helper <const geh_dispatch *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_EH_DISPATCH;
}

template <>
template <>
inline bool
is_a_helper <const geh_filter *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_EH_FILTER;
}

template <>
template <>
inline bool
is_a_helper <const gomp_atomic_load *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_ATOMIC_LOAD;
}

template <>
template <>
inline bool
is_a_helper <const gomp_atomic_store *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_ATOMIC_STORE;
}

template <>
template <>
inline bool
is_a_helper <const gimple_statement_omp_return *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_RETURN;
}

template <>
template <>
inline bool
is_a_helper <const gomp_continue *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_CONTINUE;
}

template <>
template <>
inline bool
is_a_helper <const gomp_critical *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_CRITICAL;
}

template <>
template <>
inline bool
is_a_helper <const gomp_ordered *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_ORDERED;
}

template <>
template <>
inline bool
is_a_helper <const gomp_for *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_FOR;
}

template <>
template <>
inline bool
is_a_helper <const gimple_statement_omp_taskreg *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_PARALLEL || gs->code == GIMPLE_OMP_TASK;
}

template <>
template <>
inline bool
is_a_helper <const gomp_parallel *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_PARALLEL;
}

template <>
template <>
inline bool
is_a_helper <const gomp_target *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_TARGET;
}

template <>
template <>
inline bool
is_a_helper <const gomp_sections *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_SECTIONS;
}

template <>
template <>
inline bool
is_a_helper <const gomp_single *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_SINGLE;
}

template <>
template <>
inline bool
is_a_helper <const gomp_teams *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_TEAMS;
}

template <>
template <>
inline bool
is_a_helper <const gomp_task *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_OMP_TASK;
}

template <>
template <>
inline bool
is_a_helper <const gphi *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_PHI;
}

template <>
template <>
inline bool
is_a_helper <const gtransaction *>::test (const gimple *gs)
{
  return gs->code == GIMPLE_TRANSACTION;
}



extern size_t const gimple_ops_offset_[];


extern enum gimple_statement_structure_enum const gss_for_code_[];



extern gimple *currently_expanding_gimple_stmt;

gimple *gimple_alloc (enum gimple_code, unsigned );
greturn *gimple_build_return (tree);
void gimple_call_reset_alias_info (gcall *);
gcall *gimple_build_call_vec (tree, vec<tree> );
gcall *gimple_build_call (tree, unsigned, ...);
gcall *gimple_build_call_valist (tree, unsigned, va_list);
gcall *gimple_build_call_internal (enum internal_fn, unsigned, ...);
gcall *gimple_build_call_internal_vec (enum internal_fn, vec<tree> );
gcall *gimple_build_call_from_tree (tree, tree);
gassign *gimple_build_assign (tree, tree );
gassign *gimple_build_assign (tree, enum tree_code,
         tree, tree, tree );
gassign *gimple_build_assign (tree, enum tree_code,
         tree, tree );
gassign *gimple_build_assign (tree, enum tree_code, tree );
gcond *gimple_build_cond (enum tree_code, tree, tree, tree, tree);
gcond *gimple_build_cond_from_tree (tree, tree, tree);
void gimple_cond_set_condition_from_tree (gcond *, tree);
glabel *gimple_build_label (tree label);
ggoto *gimple_build_goto (tree dest);
gimple *gimple_build_nop (void);
gbind *gimple_build_bind (tree, gimple_seq, tree);
gasm *gimple_build_asm_vec (const char *, vec<tree, va_gc> *,
     vec<tree, va_gc> *, vec<tree, va_gc> *,
     vec<tree, va_gc> *);
gcatch *gimple_build_catch (tree, gimple_seq);
geh_filter *gimple_build_eh_filter (tree, gimple_seq);
geh_mnt *gimple_build_eh_must_not_throw (tree);
geh_else *gimple_build_eh_else (gimple_seq, gimple_seq);
gtry *gimple_build_try (gimple_seq, gimple_seq,
     enum gimple_try_flags);
gimple *gimple_build_wce (gimple_seq);
gresx *gimple_build_resx (int);
gswitch *gimple_build_switch_nlabels (unsigned, tree, tree);
gswitch *gimple_build_switch (tree, tree, vec<tree> );
geh_dispatch *gimple_build_eh_dispatch (int);
gdebug *gimple_build_debug_bind (tree, tree, gimple * );
gdebug *gimple_build_debug_source_bind (tree, tree, gimple * );
gdebug *gimple_build_debug_begin_stmt (tree, location_t );
gdebug *gimple_build_debug_inline_entry (tree, location_t );
gomp_critical *gimple_build_omp_critical (gimple_seq, tree, tree);
gomp_for *gimple_build_omp_for (gimple_seq, int, tree, size_t, gimple_seq);
gomp_parallel *gimple_build_omp_parallel (gimple_seq, tree, tree, tree);
gomp_task *gimple_build_omp_task (gimple_seq, tree, tree, tree, tree,
           tree, tree);
gimple *gimple_build_omp_section (gimple_seq);
gimple *gimple_build_omp_master (gimple_seq);
gimple *gimple_build_omp_grid_body (gimple_seq);
gimple *gimple_build_omp_taskgroup (gimple_seq);
gomp_continue *gimple_build_omp_continue (tree, tree);
gomp_ordered *gimple_build_omp_ordered (gimple_seq, tree);
gimple *gimple_build_omp_return (bool);
gomp_sections *gimple_build_omp_sections (gimple_seq, tree);
gimple *gimple_build_omp_sections_switch (void);
gomp_single *gimple_build_omp_single (gimple_seq, tree);
gomp_target *gimple_build_omp_target (gimple_seq, int, tree);
gomp_teams *gimple_build_omp_teams (gimple_seq, tree);
gomp_atomic_load *gimple_build_omp_atomic_load (tree, tree);
gomp_atomic_store *gimple_build_omp_atomic_store (tree);
gtransaction *gimple_build_transaction (gimple_seq);
extern void gimple_seq_add_stmt (gimple_seq *, gimple *);
extern void gimple_seq_add_stmt_without_update (gimple_seq *, gimple *);
void gimple_seq_add_seq (gimple_seq *, gimple_seq);
void gimple_seq_add_seq_without_update (gimple_seq *, gimple_seq);
extern void annotate_all_with_location_after (gimple_seq, gimple_stmt_iterator,
           location_t);
extern void annotate_all_with_location (gimple_seq, location_t);
bool empty_body_p (gimple_seq);
gimple_seq gimple_seq_copy (gimple_seq);
bool gimple_call_same_target_p (const gimple *, const gimple *);
int gimple_call_flags (const gimple *);
int gimple_call_arg_flags (const gcall *, unsigned);
int gimple_call_return_flags (const gcall *);
bool gimple_assign_copy_p (gimple *);
bool gimple_assign_ssa_name_copy_p (gimple *);
bool gimple_assign_unary_nop_p (gimple *);
void gimple_set_bb (gimple *, basic_block);
void gimple_assign_set_rhs_from_tree (gimple_stmt_iterator *, tree);
void gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *, enum tree_code,
         tree, tree, tree);
tree gimple_get_lhs (const gimple *);
void gimple_set_lhs (gimple *, tree);
gimple *gimple_copy (gimple *);
bool gimple_has_side_effects (const gimple *);
bool gimple_could_trap_p_1 (gimple *, bool, bool);
bool gimple_could_trap_p (gimple *);
bool gimple_assign_rhs_could_trap_p (gimple *);
extern void dump_gimple_statistics (void);
unsigned get_gimple_rhs_num_ops (enum tree_code);
extern tree canonicalize_cond_expr_cond (tree);
gcall *gimple_call_copy_skip_args (gcall *, bitmap);
extern bool gimple_compare_field_offset (tree, tree);
extern tree gimple_unsigned_type (tree);
extern tree gimple_signed_type (tree);
extern alias_set_type gimple_get_alias_set (tree);
extern bool gimple_ior_addresses_taken (bitmap, gimple *);
extern bool gimple_builtin_call_types_compatible_p (const gimple *, tree);
extern combined_fn gimple_call_combined_fn (const gimple *);
extern bool gimple_call_builtin_p (const gimple *);
extern bool gimple_call_builtin_p (const gimple *, enum built_in_class);
extern bool gimple_call_builtin_p (const gimple *, enum built_in_function);
extern bool gimple_asm_clobbers_memory_p (const gasm *);
extern void dump_decl_set (FILE *, bitmap);
extern bool nonfreeing_call_p (gimple *);
extern bool nonbarrier_call_p (gimple *);
extern bool infer_nonnull_range (gimple *, tree);
extern bool infer_nonnull_range_by_dereference (gimple *, tree);
extern bool infer_nonnull_range_by_attribute (gimple *, tree);
extern void sort_case_labels (vec<tree>);
extern void preprocess_case_label_vec_for_gimple (vec<tree>, tree, tree *);
extern void gimple_seq_set_location (gimple_seq, location_t);
extern void gimple_seq_discard (gimple_seq);
extern void maybe_remove_unused_call_args (struct function *, gimple *);
extern bool gimple_inexpensive_call_p (gcall *);
extern bool stmt_can_terminate_bb_p (gimple *);




typedef struct gimple_temp_hash_elt
{
  tree val;
  tree temp;
} elt_t;


static inline unsigned int
gimple_stmt_max_uid (struct function *fn)
{
  return fn->last_stmt_uid;
}


static inline void
set_gimple_stmt_max_uid (struct function *fn, unsigned int maxid)
{
  fn->last_stmt_uid = maxid;
}


static inline unsigned int
inc_gimple_stmt_max_uid (struct function *fn)
{
  return fn->last_stmt_uid++;
}



static inline gimple_seq_node
gimple_seq_first (gimple_seq s)
{
  return s;
}




static inline gimple *
gimple_seq_first_stmt (gimple_seq s)
{
  gimple_seq_node n = gimple_seq_first (s);
  return n;
}




static inline gbind *
gimple_seq_first_stmt_as_a_bind (gimple_seq s)
{
  gimple_seq_node n = gimple_seq_first (s);
  return as_a <gbind *> (n);
}




static inline gimple_seq_node
gimple_seq_last (gimple_seq s)
{
  return s ? s->prev : 
# 1599 "../../gcc/gimple.h" 3 4
                      __null
# 1599 "../../gcc/gimple.h"
                          ;
}




static inline gimple *
gimple_seq_last_stmt (gimple_seq s)
{
  gimple_seq_node n = gimple_seq_last (s);
  return n;
}




static inline void
gimple_seq_set_last (gimple_seq *ps, gimple_seq_node last)
{
  (*ps)->prev = last;
}




static inline void
gimple_seq_set_first (gimple_seq *ps, gimple_seq_node first)
{
  *ps = first;
}




static inline bool
gimple_seq_empty_p (gimple_seq s)
{
  return s == 
# 1636 "../../gcc/gimple.h" 3 4
             __null
# 1636 "../../gcc/gimple.h"
                 ;
}



static inline gimple_seq
gimple_seq_alloc_with_stmt (gimple *stmt)
{
  gimple_seq seq = 
# 1644 "../../gcc/gimple.h" 3 4
                  __null
# 1644 "../../gcc/gimple.h"
                      ;
  gimple_seq_add_stmt (&seq, stmt);
  return seq;
}




static inline gimple_seq
bb_seq (const_basic_block bb)
{
  return (!(bb->flags & BB_RTL)) ? bb->il.gimple.seq : 
# 1655 "../../gcc/gimple.h" 3 4
                                                      __null
# 1655 "../../gcc/gimple.h"
                                                          ;
}

static inline gimple_seq *
bb_seq_addr (basic_block bb)
{
  return (!(bb->flags & BB_RTL)) ? &bb->il.gimple.seq : 
# 1661 "../../gcc/gimple.h" 3 4
                                                       __null
# 1661 "../../gcc/gimple.h"
                                                           ;
}



static inline void
set_bb_seq (basic_block bb, gimple_seq seq)
{
  ((void)(!(!(bb->flags & BB_RTL)) ? fancy_abort ("../../gcc/gimple.h", 1669, __FUNCTION__), 0 : 0));
  bb->il.gimple.seq = seq;
}




static inline enum gimple_code
gimple_code (const gimple *g)
{
  return g->code;
}




static inline enum gimple_statement_structure_enum
gss_for_code (enum gimple_code code)
{
  ((void)(!((unsigned int)code < LAST_AND_UNUSED_GIMPLE_CODE) ? fancy_abort ("../../gcc/gimple.h", 1688, __FUNCTION__), 0 : 0));
  return gss_for_code_[code];
}




static inline enum gimple_statement_structure_enum
gimple_statement_structure (gimple *gs)
{
  return gss_for_code (gimple_code (gs));
}





static inline bool
gimple_has_substatements (gimple *g)
{
  switch (gimple_code (g))
    {
    case GIMPLE_BIND:
    case GIMPLE_CATCH:
    case GIMPLE_EH_FILTER:
    case GIMPLE_EH_ELSE:
    case GIMPLE_TRY:
    case GIMPLE_OMP_FOR:
    case GIMPLE_OMP_MASTER:
    case GIMPLE_OMP_TASKGROUP:
    case GIMPLE_OMP_ORDERED:
    case GIMPLE_OMP_SECTION:
    case GIMPLE_OMP_PARALLEL:
    case GIMPLE_OMP_TASK:
    case GIMPLE_OMP_SECTIONS:
    case GIMPLE_OMP_SINGLE:
    case GIMPLE_OMP_TARGET:
    case GIMPLE_OMP_TEAMS:
    case GIMPLE_OMP_CRITICAL:
    case GIMPLE_WITH_CLEANUP_EXPR:
    case GIMPLE_TRANSACTION:
    case GIMPLE_OMP_GRID_BODY:
      return true;

    default:
      return false;
    }
}




static inline basic_block
gimple_bb (const gimple *g)
{
  return g->bb;
}




static inline tree
gimple_block (const gimple *g)
{
  return ((tree) ((IS_ADHOC_LOC (g->location)) ? get_data_from_adhoc_loc (line_table, (g->location)) : 
# 1752 "../../gcc/gimple.h" 3 4
        __null
# 1752 "../../gcc/gimple.h"
        ));
}




static inline void
gimple_set_block (gimple *g, tree block)
{
  g->location = set_block (g->location, block);
}




static inline location_t
gimple_location (const gimple *g)
{
  return g->location;
}




static inline location_t
gimple_location_safe (const gimple *g)
{
  return g ? gimple_location (g) : ((source_location) 0);
}



static inline void
gimple_set_location (gimple *g, location_t location)
{
  g->location = location;
}




static inline bool
gimple_has_location (const gimple *g)
{
  return ((IS_ADHOC_LOC (gimple_location (g))) ? get_location_from_adhoc_loc (line_table, gimple_location (g)) : (gimple_location (g))) != ((source_location) 0);
}




static inline const char *
gimple_filename (const gimple *stmt)
{
  return ((expand_location (gimple_location (stmt))).file);
}




static inline int
gimple_lineno (const gimple *stmt)
{
  return ((expand_location (gimple_location (stmt))).line);
}




static inline bool
gimple_seq_singleton_p (gimple_seq seq)
{
  return ((gimple_seq_first (seq) != 
# 1823 "../../gcc/gimple.h" 3 4
                                    __null
# 1823 "../../gcc/gimple.h"
                                        )
   && (gimple_seq_first (seq) == gimple_seq_last (seq)));
}



static inline bool
gimple_no_warning_p (const gimple *stmt)
{
  return stmt->no_warning;
}



static inline void
gimple_set_no_warning (gimple *stmt, bool no_warning)
{
  stmt->no_warning = (unsigned) no_warning;
}
# 1855 "../../gcc/gimple.h"
static inline void
gimple_set_visited (gimple *stmt, bool visited_p)
{
  stmt->visited = (unsigned) visited_p;
}
# 1873 "../../gcc/gimple.h"
static inline bool
gimple_visited_p (gimple *stmt)
{
  return stmt->visited;
}
# 1890 "../../gcc/gimple.h"
static inline void
gimple_set_plf (gimple *stmt, enum plf_mask plf, bool val_p)
{
  if (val_p)
    stmt->plf |= (unsigned int) plf;
  else
    stmt->plf &= ~((unsigned int) plf);
}
# 1910 "../../gcc/gimple.h"
static inline unsigned int
gimple_plf (gimple *stmt, enum plf_mask plf)
{
  return stmt->plf & ((unsigned int) plf);
}
# 1924 "../../gcc/gimple.h"
static inline void
gimple_set_uid (gimple *g, unsigned uid)
{
  g->uid = uid;
}
# 1938 "../../gcc/gimple.h"
static inline unsigned
gimple_uid (const gimple *g)
{
  return g->uid;
}




static inline void
gimple_init_singleton (gimple *g)
{
  g->next = 
# 1950 "../../gcc/gimple.h" 3 4
           __null
# 1950 "../../gcc/gimple.h"
               ;
  g->prev = g;
}




static inline bool
gimple_has_ops (const gimple *g)
{
  return gimple_code (g) >= GIMPLE_COND && gimple_code (g) <= GIMPLE_RETURN;
}

template <>
template <>
inline bool
is_a_helper <const gimple_statement_with_ops *>::test (const gimple *gs)
{
  return gimple_has_ops (gs);
}

template <>
template <>
inline bool
is_a_helper <gimple_statement_with_ops *>::test (gimple *gs)
{
  return gimple_has_ops (gs);
}



static inline bool
gimple_has_mem_ops (const gimple *g)
{
  return gimple_code (g) >= GIMPLE_ASSIGN && gimple_code (g) <= GIMPLE_RETURN;
}

template <>
template <>
inline bool
is_a_helper <const gimple_statement_with_memory_ops *>::test (const gimple *gs)
{
  return gimple_has_mem_ops (gs);
}

template <>
template <>
inline bool
is_a_helper <gimple_statement_with_memory_ops *>::test (gimple *gs)
{
  return gimple_has_mem_ops (gs);
}



static inline struct use_optype_d *
gimple_use_ops (const gimple *g)
{
  const gimple_statement_with_ops *ops_stmt =
    dyn_cast <const gimple_statement_with_ops *> (g);
  if (!ops_stmt)
    return 
# 2011 "../../gcc/gimple.h" 3 4
          __null
# 2011 "../../gcc/gimple.h"
              ;
  return ops_stmt->use_ops;
}




static inline void
gimple_set_use_ops (gimple *g, struct use_optype_d *use)
{
  gimple_statement_with_ops *ops_stmt =
    as_a <gimple_statement_with_ops *> (g);
  ops_stmt->use_ops = use;
}




static inline tree
gimple_vuse (const gimple *g)
{
  const gimple_statement_with_memory_ops *mem_ops_stmt =
     dyn_cast <const gimple_statement_with_memory_ops *> (g);
  if (!mem_ops_stmt)
    return (tree) 
# 2035 "../../gcc/gimple.h" 3 4
          __null
# 2035 "../../gcc/gimple.h"
                   ;
  return mem_ops_stmt->vuse;
}



static inline tree
gimple_vdef (const gimple *g)
{
  const gimple_statement_with_memory_ops *mem_ops_stmt =
     dyn_cast <const gimple_statement_with_memory_ops *> (g);
  if (!mem_ops_stmt)
    return (tree) 
# 2047 "../../gcc/gimple.h" 3 4
          __null
# 2047 "../../gcc/gimple.h"
                   ;
  return mem_ops_stmt->vdef;
}



static inline tree *
gimple_vuse_ptr (gimple *g)
{
  gimple_statement_with_memory_ops *mem_ops_stmt =
     dyn_cast <gimple_statement_with_memory_ops *> (g);
  if (!mem_ops_stmt)
    return 
# 2059 "../../gcc/gimple.h" 3 4
          __null
# 2059 "../../gcc/gimple.h"
              ;
  return &mem_ops_stmt->vuse;
}



static inline tree *
gimple_vdef_ptr (gimple *g)
{
  gimple_statement_with_memory_ops *mem_ops_stmt =
     dyn_cast <gimple_statement_with_memory_ops *> (g);
  if (!mem_ops_stmt)
    return 
# 2071 "../../gcc/gimple.h" 3 4
          __null
# 2071 "../../gcc/gimple.h"
              ;
  return &mem_ops_stmt->vdef;
}



static inline void
gimple_set_vuse (gimple *g, tree vuse)
{
  gimple_statement_with_memory_ops *mem_ops_stmt =
    as_a <gimple_statement_with_memory_ops *> (g);
  mem_ops_stmt->vuse = vuse;
}



static inline void
gimple_set_vdef (gimple *g, tree vdef)
{
  gimple_statement_with_memory_ops *mem_ops_stmt =
    as_a <gimple_statement_with_memory_ops *> (g);
  mem_ops_stmt->vdef = vdef;
}





static inline bool
gimple_modified_p (const gimple *g)
{
  return (gimple_has_ops (g)) ? (bool) g->modified : false;
}





static inline void
gimple_set_modified (gimple *s, bool modifiedp)
{
  if (gimple_has_ops (s))
    s->modified = (unsigned) modifiedp;
}
# 2123 "../../gcc/gimple.h"
static inline enum tree_code
gimple_expr_code (const gimple *stmt)
{
  enum gimple_code code = gimple_code (stmt);
  if (code == GIMPLE_ASSIGN || code == GIMPLE_COND)
    return (enum tree_code) stmt->subcode;
  else
    {
      ((void)(!(code == GIMPLE_CALL) ? fancy_abort ("../../gcc/gimple.h", 2131, __FUNCTION__), 0 : 0));
      return CALL_EXPR;
    }
}




static inline bool
gimple_has_volatile_ops (const gimple *stmt)
{
  if (gimple_has_mem_ops (stmt))
    return stmt->has_volatile_ops;
  else
    return false;
}




static inline void
gimple_set_has_volatile_ops (gimple *stmt, bool volatilep)
{
  if (gimple_has_mem_ops (stmt))
    stmt->has_volatile_ops = (unsigned) volatilep;
}



static inline bool
gimple_in_transaction (const gimple *stmt)
{
  return bb_in_transaction (gimple_bb (stmt));
}



static inline bool
gimple_references_memory_p (gimple *stmt)
{
  return gimple_has_mem_ops (stmt) && gimple_vuse (stmt);
}




static inline unsigned
gimple_omp_subcode (const gimple *s)
{
  ((void)(!(gimple_code (s) >= GIMPLE_OMP_ATOMIC_LOAD && gimple_code (s) <= GIMPLE_OMP_TEAMS) ? fancy_abort (
                                             "../../gcc/gimple.h"
# 2180 "../../gcc/gimple.h"
  ,
                                             2181
# 2180 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                              ;
  return s->subcode;
}



static inline void
gimple_omp_set_subcode (gimple *s, unsigned int subcode)
{


  ((void)(!(subcode < (1 << 16)) ? fancy_abort ("../../gcc/gimple.h", 2192, __FUNCTION__), 0 : 0));
  s->subcode = subcode;
}



static inline void
gimple_omp_return_set_nowait (gimple *s)
{
  do { const gimple *__gs = (s); if (gimple_code (__gs) != (GIMPLE_OMP_RETURN)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2201, __FUNCTION__, (GIMPLE_OMP_RETURN), ERROR_MARK); } while (0);
  s->subcode |= GF_OMP_RETURN_NOWAIT;
}





static inline bool
gimple_omp_return_nowait_p (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_RETURN)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2212, __FUNCTION__, (GIMPLE_OMP_RETURN), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_RETURN_NOWAIT) != 0;
}




static inline void
gimple_omp_return_set_lhs (gimple *g, tree lhs)
{
  gimple_statement_omp_return *omp_return_stmt =
    as_a <gimple_statement_omp_return *> (g);
  omp_return_stmt->val = lhs;
}




static inline tree
gimple_omp_return_lhs (const gimple *g)
{
  const gimple_statement_omp_return *omp_return_stmt =
    as_a <const gimple_statement_omp_return *> (g);
  return omp_return_stmt->val;
}




static inline tree *
gimple_omp_return_lhs_ptr (gimple *g)
{
  gimple_statement_omp_return *omp_return_stmt =
    as_a <gimple_statement_omp_return *> (g);
  return &omp_return_stmt->val;
}





static inline bool
gimple_omp_section_last_p (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_SECTION)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2256, __FUNCTION__, (GIMPLE_OMP_SECTION), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_SECTION_LAST) != 0;
}




static inline void
gimple_omp_section_set_last (gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_SECTION)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2266, __FUNCTION__, (GIMPLE_OMP_SECTION), ERROR_MARK); } while (0);
  g->subcode |= GF_OMP_SECTION_LAST;
}





static inline bool
gimple_omp_parallel_combined_p (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_PARALLEL)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2277, __FUNCTION__, (GIMPLE_OMP_PARALLEL), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_PARALLEL_COMBINED) != 0;
}





static inline void
gimple_omp_parallel_set_combined_p (gimple *g, bool combined_p)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_PARALLEL)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2288, __FUNCTION__, (GIMPLE_OMP_PARALLEL), ERROR_MARK); } while (0);
  if (combined_p)
    g->subcode |= GF_OMP_PARALLEL_COMBINED;
  else
    g->subcode &= ~GF_OMP_PARALLEL_COMBINED;
}





static inline bool
gimple_omp_atomic_need_value_p (const gimple *g)
{
  if (gimple_code (g) != GIMPLE_OMP_ATOMIC_LOAD)
    do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_ATOMIC_STORE)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2303, __FUNCTION__, (GIMPLE_OMP_ATOMIC_STORE), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_ATOMIC_NEED_VALUE) != 0;
}




static inline void
gimple_omp_atomic_set_need_value (gimple *g)
{
  if (gimple_code (g) != GIMPLE_OMP_ATOMIC_LOAD)
    do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_ATOMIC_STORE)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2314, __FUNCTION__, (GIMPLE_OMP_ATOMIC_STORE), ERROR_MARK); } while (0);
  g->subcode |= GF_OMP_ATOMIC_NEED_VALUE;
}





static inline bool
gimple_omp_atomic_seq_cst_p (const gimple *g)
{
  if (gimple_code (g) != GIMPLE_OMP_ATOMIC_LOAD)
    do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_ATOMIC_STORE)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2326, __FUNCTION__, (GIMPLE_OMP_ATOMIC_STORE), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_ATOMIC_SEQ_CST) != 0;
}




static inline void
gimple_omp_atomic_set_seq_cst (gimple *g)
{
  if (gimple_code (g) != GIMPLE_OMP_ATOMIC_LOAD)
    do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_ATOMIC_STORE)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2337, __FUNCTION__, (GIMPLE_OMP_ATOMIC_STORE), ERROR_MARK); } while (0);
  g->subcode |= GF_OMP_ATOMIC_SEQ_CST;
}




static inline unsigned
gimple_num_ops (const gimple *gs)
{
  return gs->num_ops;
}




static inline void
gimple_set_num_ops (gimple *gs, unsigned num_ops)
{
  gs->num_ops = num_ops;
}




static inline tree *
gimple_ops (gimple *gs)
{
  size_t off;




  off = gimple_ops_offset_[gimple_statement_structure (gs)];
  ((void)(!(off != 0) ? fancy_abort ("../../gcc/gimple.h", 2371, __FUNCTION__), 0 : 0));

  return (tree *) ((char *) gs + off);
}




static inline tree
gimple_op (const gimple *gs, unsigned i)
{
  if (gimple_has_ops (gs))
    {
      ((void)(!(i < gimple_num_ops (gs)) ? fancy_abort ("../../gcc/gimple.h", 2384, __FUNCTION__), 0 : 0));
      return gimple_ops ((const_cast<gimple *> (((gs)))))[i];
    }
  else
    return (tree) 
# 2388 "../../gcc/gimple.h" 3 4
          __null
# 2388 "../../gcc/gimple.h"
                   ;
}



static inline tree *
gimple_op_ptr (gimple *gs, unsigned i)
{
  if (gimple_has_ops (gs))
    {
      ((void)(!(i < gimple_num_ops (gs)) ? fancy_abort ("../../gcc/gimple.h", 2398, __FUNCTION__), 0 : 0));
      return gimple_ops (gs) + i;
    }
  else
    return 
# 2402 "../../gcc/gimple.h" 3 4
          __null
# 2402 "../../gcc/gimple.h"
              ;
}



static inline void
gimple_set_op (gimple *gs, unsigned i, tree op)
{
  ((void)(!(gimple_has_ops (gs) && i < gimple_num_ops (gs)) ? fancy_abort ("../../gcc/gimple.h", 2410, __FUNCTION__), 0 : 0));





  gimple_ops (gs)[i] = op;
}



static inline bool
is_gimple_assign (const gimple *gs)
{
  return gimple_code (gs) == GIMPLE_ASSIGN;
}




static inline enum gimple_rhs_class
get_gimple_rhs_class (enum tree_code code)
{
  return (enum gimple_rhs_class) gimple_rhs_class_table[(int) code];
}



static inline tree
gimple_assign_lhs (const gassign *gs)
{
  return gs->op[0];
}

static inline tree
gimple_assign_lhs (const gimple *gs)
{
  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);
  return gimple_assign_lhs (ass);
}




static inline tree *
gimple_assign_lhs_ptr (gassign *gs)
{
  return &gs->op[0];
}

static inline tree *
gimple_assign_lhs_ptr (gimple *gs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  return gimple_assign_lhs_ptr (ass);
}




static inline void
gimple_assign_set_lhs (gassign *gs, tree lhs)
{
  gs->op[0] = lhs;

  if (lhs && ((enum tree_code) (lhs)->base.code) == SSA_NAME)
    (tree_check ((lhs), "../../gcc/gimple.h", 2476, __FUNCTION__, (SSA_NAME)))->ssa_name.def_stmt = gs;
}

static inline void
gimple_assign_set_lhs (gimple *gs, tree lhs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  gimple_assign_set_lhs (ass, lhs);
}




static inline tree
gimple_assign_rhs1 (const gassign *gs)
{
  return gs->op[1];
}

static inline tree
gimple_assign_rhs1 (const gimple *gs)
{
  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);
  return gimple_assign_rhs1 (ass);
}





static inline tree *
gimple_assign_rhs1_ptr (gassign *gs)
{
  return &gs->op[1];
}

static inline tree *
gimple_assign_rhs1_ptr (gimple *gs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  return gimple_assign_rhs1_ptr (ass);
}



static inline void
gimple_assign_set_rhs1 (gassign *gs, tree rhs)
{
  gs->op[1] = rhs;
}

static inline void
gimple_assign_set_rhs1 (gimple *gs, tree rhs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  gimple_assign_set_rhs1 (ass, rhs);
}





static inline tree
gimple_assign_rhs2 (const gassign *gs)
{
  if (gimple_num_ops (gs) >= 3)
    return gs->op[2];
  else
    return (tree) 
# 2544 "../../gcc/gimple.h" 3 4
          __null
# 2544 "../../gcc/gimple.h"
                   ;
}

static inline tree
gimple_assign_rhs2 (const gimple *gs)
{
  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);
  return gimple_assign_rhs2 (ass);
}





static inline tree *
gimple_assign_rhs2_ptr (gassign *gs)
{
  ((void)(!(gimple_num_ops (gs) >= 3) ? fancy_abort ("../../gcc/gimple.h", 2561, __FUNCTION__), 0 : 0));
  return &gs->op[2];
}

static inline tree *
gimple_assign_rhs2_ptr (gimple *gs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  return gimple_assign_rhs2_ptr (ass);
}




static inline void
gimple_assign_set_rhs2 (gassign *gs, tree rhs)
{
  ((void)(!(gimple_num_ops (gs) >= 3) ? fancy_abort ("../../gcc/gimple.h", 2578, __FUNCTION__), 0 : 0));
  gs->op[2] = rhs;
}

static inline void
gimple_assign_set_rhs2 (gimple *gs, tree rhs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  return gimple_assign_set_rhs2 (ass, rhs);
}




static inline tree
gimple_assign_rhs3 (const gassign *gs)
{
  if (gimple_num_ops (gs) >= 4)
    return gs->op[3];
  else
    return (tree) 
# 2598 "../../gcc/gimple.h" 3 4
          __null
# 2598 "../../gcc/gimple.h"
                   ;
}

static inline tree
gimple_assign_rhs3 (const gimple *gs)
{
  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);
  return gimple_assign_rhs3 (ass);
}




static inline tree *
gimple_assign_rhs3_ptr (gimple *gs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  ((void)(!(gimple_num_ops (gs) >= 4) ? fancy_abort ("../../gcc/gimple.h", 2615, __FUNCTION__), 0 : 0));
  return &ass->op[3];
}




static inline void
gimple_assign_set_rhs3 (gassign *gs, tree rhs)
{
  ((void)(!(gimple_num_ops (gs) >= 4) ? fancy_abort ("../../gcc/gimple.h", 2625, __FUNCTION__), 0 : 0));
  gs->op[3] = rhs;
}

static inline void
gimple_assign_set_rhs3 (gimple *gs, tree rhs)
{
  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);
  gimple_assign_set_rhs3 (ass, rhs);
}





static inline void
gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *gsi, enum tree_code code,
    tree op1, tree op2)
{
  gimple_assign_set_rhs_with_ops (gsi, code, op1, op2, 
# 2644 "../../gcc/gimple.h" 3 4
                                                      __null
# 2644 "../../gcc/gimple.h"
                                                          );
}




static inline void
gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *gsi, enum tree_code code,
    tree op1)
{
  gimple_assign_set_rhs_with_ops (gsi, code, op1, 
# 2654 "../../gcc/gimple.h" 3 4
                                                 __null
# 2654 "../../gcc/gimple.h"
                                                     , 
# 2654 "../../gcc/gimple.h" 3 4
                                                       __null
# 2654 "../../gcc/gimple.h"
                                                           );
}



static inline bool
gimple_assign_nontemporal_move_p (const gassign *gs)
{
  return gs->nontemporal_move;
}



static inline void
gimple_assign_set_nontemporal_move (gimple *gs, bool nontemporal)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_ASSIGN)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2670, __FUNCTION__, (GIMPLE_ASSIGN), ERROR_MARK); } while (0);
  gs->nontemporal_move = nontemporal;
}






static inline enum tree_code
gimple_assign_rhs_code (const gassign *gs)
{
  enum tree_code code = (enum tree_code) gs->subcode;



  if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)
    code = ((enum tree_code) (gs->op[1])->base.code);

  return code;
}

static inline enum tree_code
gimple_assign_rhs_code (const gimple *gs)
{
  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);
  return gimple_assign_rhs_code (ass);
}





static inline void
gimple_assign_set_rhs_code (gimple *s, enum tree_code code)
{
  do { const gimple *__gs = (s); if (gimple_code (__gs) != (GIMPLE_ASSIGN)) gimple_check_failed (__gs, "../../gcc/gimple.h", 2706, __FUNCTION__, (GIMPLE_ASSIGN), ERROR_MARK); } while (0);
  s->subcode = code;
}






static inline enum gimple_rhs_class
gimple_assign_rhs_class (const gimple *gs)
{
  return get_gimple_rhs_class (gimple_assign_rhs_code (gs));
}







static inline bool
gimple_assign_single_p (const gimple *gs)
{
  return (is_gimple_assign (gs)
          && gimple_assign_rhs_class (gs) == GIMPLE_SINGLE_RHS);
}



static inline bool
gimple_store_p (const gimple *gs)
{
  tree lhs = gimple_get_lhs (gs);
  return lhs && !is_gimple_reg (lhs);
}



static inline bool
gimple_assign_load_p (const gimple *gs)
{
  tree rhs;
  if (!gimple_assign_single_p (gs))
    return false;
  rhs = gimple_assign_rhs1 (gs);
  if (((enum tree_code) (rhs)->base.code) == WITH_SIZE_EXPR)
    return true;
  rhs = get_base_address (rhs);
  return ((tree_code_type[(int) (((enum tree_code) (rhs)->base.code))] == tcc_declaration)
   || ((enum tree_code) (rhs)->base.code) == MEM_REF || ((enum tree_code) (rhs)->base.code) == TARGET_MEM_REF);
}




static inline bool
gimple_assign_cast_p (const gimple *s)
{
  if (is_gimple_assign (s))
    {
      enum tree_code sc = gimple_assign_rhs_code (s);
      return ((sc) == NOP_EXPR || (sc) == CONVERT_EXPR)
      || sc == VIEW_CONVERT_EXPR
      || sc == FIX_TRUNC_EXPR;
    }

  return false;
}



static inline bool
gimple_clobber_p (const gimple *s)
{
  return gimple_assign_single_p (s)
         && (((enum tree_code) (gimple_assign_rhs1 (s))->base.code) == CONSTRUCTOR && ((gimple_assign_rhs1 (s))->base.volatile_flag));
}



static inline bool
is_gimple_call (const gimple *gs)
{
  return gimple_code (gs) == GIMPLE_CALL;
}



static inline tree
gimple_call_lhs (const gcall *gs)
{
  return gs->op[0];
}

static inline tree
gimple_call_lhs (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_lhs (gc);
}




static inline tree *
gimple_call_lhs_ptr (gcall *gs)
{
  return &gs->op[0];
}

static inline tree *
gimple_call_lhs_ptr (gimple *gs)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  return gimple_call_lhs_ptr (gc);
}




static inline void
gimple_call_set_lhs (gcall *gs, tree lhs)
{
  gs->op[0] = lhs;
  if (lhs && ((enum tree_code) (lhs)->base.code) == SSA_NAME)
    (tree_check ((lhs), "../../gcc/gimple.h", 2832, __FUNCTION__, (SSA_NAME)))->ssa_name.def_stmt = gs;
}

static inline void
gimple_call_set_lhs (gimple *gs, tree lhs)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  gimple_call_set_lhs (gc, lhs);
}





static inline bool
gimple_call_internal_p (const gcall *gs)
{
  return (gs->subcode & GF_CALL_INTERNAL) != 0;
}

static inline bool
gimple_call_internal_p (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_internal_p (gc);
}





static inline bool
gimple_call_with_bounds_p (const gcall *gs)
{
  return (gs->subcode & GF_CALL_WITH_BOUNDS) != 0;
}

static inline bool
gimple_call_with_bounds_p (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_with_bounds_p (gc);
}





static inline void
gimple_call_set_with_bounds (gcall *gs, bool with_bounds)
{
  if (with_bounds)
    gs->subcode |= GF_CALL_WITH_BOUNDS;
  else
    gs->subcode &= ~GF_CALL_WITH_BOUNDS;
}

static inline void
gimple_call_set_with_bounds (gimple *gs, bool with_bounds)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  gimple_call_set_with_bounds (gc, with_bounds);
}




static inline bool
gimple_call_nocf_check_p (const gcall *gs)
{
  return (gs->subcode & GF_CALL_NOCF_CHECK) != 0;
}



static inline void
gimple_call_set_nocf_check (gcall *gs, bool nocf_check)
{
  if (nocf_check)
    gs->subcode |= GF_CALL_NOCF_CHECK;
  else
    gs->subcode &= ~GF_CALL_NOCF_CHECK;
}



static inline enum internal_fn
gimple_call_internal_fn (const gcall *gs)
{
  ((void)(!(gimple_call_internal_p (gs)) ? fancy_abort ("../../gcc/gimple.h", 2921, __FUNCTION__), 0 : 0));
  return gs->u.internal_fn;
}

static inline enum internal_fn
gimple_call_internal_fn (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_internal_fn (gc);
}



static inline bool
gimple_call_internal_unique_p (const gcall *gs)
{
  return gimple_call_internal_fn (gs) == IFN_UNIQUE;
}

static inline bool
gimple_call_internal_unique_p (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_internal_unique_p (gc);
}



static inline bool
gimple_call_internal_p (const gimple *gs, internal_fn fn)
{
  return (is_gimple_call (gs)
   && gimple_call_internal_p (gs)
   && gimple_call_internal_fn (gs) == fn);
}




static inline void
gimple_call_set_ctrl_altering (gcall *s, bool ctrl_altering_p)
{
  if (ctrl_altering_p)
    s->subcode |= GF_CALL_CTRL_ALTERING;
  else
    s->subcode &= ~GF_CALL_CTRL_ALTERING;
}

static inline void
gimple_call_set_ctrl_altering (gimple *s, bool ctrl_altering_p)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (s);
  gimple_call_set_ctrl_altering (gc, ctrl_altering_p);
}




static inline bool
gimple_call_ctrl_altering_p (const gcall *gs)
{
  return (gs->subcode & GF_CALL_CTRL_ALTERING) != 0;
}

static inline bool
gimple_call_ctrl_altering_p (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_ctrl_altering_p (gc);
}




static inline tree
gimple_call_fntype (const gcall *gs)
{
  if (gimple_call_internal_p (gs))
    return (tree) 
# 2999 "../../gcc/gimple.h" 3 4
          __null
# 2999 "../../gcc/gimple.h"
                   ;
  return gs->u.fntype;
}

static inline tree
gimple_call_fntype (const gimple *gs)
{
  const gcall *call_stmt = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_fntype (call_stmt);
}



static inline void
gimple_call_set_fntype (gcall *call_stmt, tree fntype)
{
  ((void)(!(!gimple_call_internal_p (call_stmt)) ? fancy_abort ("../../gcc/gimple.h", 3015, __FUNCTION__), 0 : 0));
  call_stmt->u.fntype = fntype;
}





static inline tree
gimple_call_fn (const gcall *gs)
{
  return gs->op[1];
}

static inline tree
gimple_call_fn (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_fn (gc);
}




static inline tree *
gimple_call_fn_ptr (gcall *gs)
{
  return &gs->op[1];
}

static inline tree *
gimple_call_fn_ptr (gimple *gs)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  return gimple_call_fn_ptr (gc);
}




static inline void
gimple_call_set_fn (gcall *gs, tree fn)
{
  ((void)(!(!gimple_call_internal_p (gs)) ? fancy_abort ("../../gcc/gimple.h", 3058, __FUNCTION__), 0 : 0));
  gs->op[1] = fn;
}




static inline void
gimple_call_set_fndecl (gcall *gs, tree decl)
{
  ((void)(!(!gimple_call_internal_p (gs)) ? fancy_abort ("../../gcc/gimple.h", 3068, __FUNCTION__), 0 : 0));
  gs->op[1] = build1_loc (gimple_location (gs), ADDR_EXPR,
     build_pointer_type (((contains_struct_check ((decl), (TS_TYPED), "../../gcc/gimple.h", 3070, __FUNCTION__))->typed.type)), decl);
}

static inline void
gimple_call_set_fndecl (gimple *gs, tree decl)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  gimple_call_set_fndecl (gc, decl);
}




static inline void
gimple_call_set_internal_fn (gcall *call_stmt, enum internal_fn fn)
{
  ((void)(!(gimple_call_internal_p (call_stmt)) ? fancy_abort ("../../gcc/gimple.h", 3086, __FUNCTION__), 0 : 0));
  call_stmt->u.internal_fn = fn;
}






static inline tree
gimple_call_fndecl (const gcall *gs)
{
  return gimple_call_addr_fndecl (gimple_call_fn (gs));
}

static inline tree
gimple_call_fndecl (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_fndecl (gc);
}




static inline tree
gimple_call_return_type (const gcall *gs)
{
  tree type = gimple_call_fntype (gs);

  if (type == (tree) 
# 3116 "../../gcc/gimple.h" 3 4
             __null
# 3116 "../../gcc/gimple.h"
                      )
    return ((contains_struct_check ((gimple_call_lhs (gs)), (TS_TYPED), "../../gcc/gimple.h", 3117, __FUNCTION__))->typed.type);



  return ((contains_struct_check ((type), (TS_TYPED), "../../gcc/gimple.h", 3121, __FUNCTION__))->typed.type);
}




static inline tree
gimple_call_chain (const gcall *gs)
{
  return gs->op[2];
}

static inline tree
gimple_call_chain (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_chain (gc);
}




static inline tree *
gimple_call_chain_ptr (gcall *call_stmt)
{
  return &call_stmt->op[2];
}



static inline void
gimple_call_set_chain (gcall *call_stmt, tree chain)
{
  call_stmt->op[2] = chain;
}




static inline unsigned
gimple_call_num_args (const gcall *gs)
{
  return gimple_num_ops (gs) - 3;
}

static inline unsigned
gimple_call_num_args (const gimple *gs)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_num_args (gc);
}




static inline tree
gimple_call_arg (const gcall *gs, unsigned index)
{
  ((void)(!(gimple_num_ops (gs) > index + 3) ? fancy_abort ("../../gcc/gimple.h", 3179, __FUNCTION__), 0 : 0));
  return gs->op[index + 3];
}

static inline tree
gimple_call_arg (const gimple *gs, unsigned index)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);
  return gimple_call_arg (gc, index);
}





static inline tree *
gimple_call_arg_ptr (gcall *gs, unsigned index)
{
  ((void)(!(gimple_num_ops (gs) > index + 3) ? fancy_abort ("../../gcc/gimple.h", 3197, __FUNCTION__), 0 : 0));
  return &gs->op[index + 3];
}

static inline tree *
gimple_call_arg_ptr (gimple *gs, unsigned index)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  return gimple_call_arg_ptr (gc, index);
}




static inline void
gimple_call_set_arg (gcall *gs, unsigned index, tree arg)
{
  ((void)(!(gimple_num_ops (gs) > index + 3) ? fancy_abort ("../../gcc/gimple.h", 3214, __FUNCTION__), 0 : 0));
  gs->op[index + 3] = arg;
}

static inline void
gimple_call_set_arg (gimple *gs, unsigned index, tree arg)
{
  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);
  gimple_call_set_arg (gc, index, arg);
}






static inline void
gimple_call_set_tail (gcall *s, bool tail_p)
{
  if (tail_p)
    s->subcode |= GF_CALL_TAILCALL;
  else
    s->subcode &= ~GF_CALL_TAILCALL;
}




static inline bool
gimple_call_tail_p (gcall *s)
{
  return (s->subcode & GF_CALL_TAILCALL) != 0;
}



static inline void
gimple_call_set_must_tail (gcall *s, bool must_tail_p)
{
  if (must_tail_p)
    s->subcode |= GF_CALL_MUST_TAIL_CALL;
  else
    s->subcode &= ~GF_CALL_MUST_TAIL_CALL;
}




static inline bool
gimple_call_must_tail_p (const gcall *s)
{
  return (s->subcode & GF_CALL_MUST_TAIL_CALL) != 0;
}





static inline void
gimple_call_set_return_slot_opt (gcall *s, bool return_slot_opt_p)
{
  if (return_slot_opt_p)
    s->subcode |= GF_CALL_RETURN_SLOT_OPT;
  else
    s->subcode &= ~GF_CALL_RETURN_SLOT_OPT;
}




static inline bool
gimple_call_return_slot_opt_p (gcall *s)
{
  return (s->subcode & GF_CALL_RETURN_SLOT_OPT) != 0;
}





static inline void
gimple_call_set_from_thunk (gcall *s, bool from_thunk_p)
{
  if (from_thunk_p)
    s->subcode |= GF_CALL_FROM_THUNK;
  else
    s->subcode &= ~GF_CALL_FROM_THUNK;
}




static inline bool
gimple_call_from_thunk_p (gcall *s)
{
  return (s->subcode & GF_CALL_FROM_THUNK) != 0;
}





static inline void
gimple_call_set_va_arg_pack (gcall *s, bool pass_arg_pack_p)
{
  if (pass_arg_pack_p)
    s->subcode |= GF_CALL_VA_ARG_PACK;
  else
    s->subcode &= ~GF_CALL_VA_ARG_PACK;
}





static inline bool
gimple_call_va_arg_pack_p (gcall *s)
{
  return (s->subcode & GF_CALL_VA_ARG_PACK) != 0;
}




static inline bool
gimple_call_noreturn_p (const gcall *s)
{
  return (gimple_call_flags (s) & (1 << 3)) != 0;
}

static inline bool
gimple_call_noreturn_p (const gimple *s)
{
  const gcall *gc = GIMPLE_CHECK2<const gcall *> (s);
  return gimple_call_noreturn_p (gc);
}





static inline void
gimple_call_set_nothrow (gcall *s, bool nothrow_p)
{
  if (nothrow_p)
    s->subcode |= GF_CALL_NOTHROW;
  else
    s->subcode &= ~GF_CALL_NOTHROW;
}



static inline bool
gimple_call_nothrow_p (gcall *s)
{
  return (gimple_call_flags (s) & (1 << 6)) != 0;
}






static inline void
gimple_call_set_alloca_for_var (gcall *s, bool for_var)
{
  if (for_var)
    s->subcode |= GF_CALL_ALLOCA_FOR_VAR;
  else
    s->subcode &= ~GF_CALL_ALLOCA_FOR_VAR;
}



static inline bool
gimple_call_alloca_for_var_p (gcall *s)
{
  return (s->subcode & GF_CALL_ALLOCA_FOR_VAR) != 0;
}




static inline void
gimple_call_set_by_descriptor (gcall *s, bool by_descriptor_p)
{
  if (by_descriptor_p)
    s->subcode |= GF_CALL_BY_DESCRIPTOR;
  else
    s->subcode &= ~GF_CALL_BY_DESCRIPTOR;
}



static inline bool
gimple_call_by_descriptor_p (gcall *s)
{
  return (s->subcode & GF_CALL_BY_DESCRIPTOR) != 0;
}



static inline void
gimple_call_copy_flags (gcall *dest_call, gcall *orig_call)
{
  dest_call->subcode = orig_call->subcode;
}





static inline struct pt_solution *
gimple_call_use_set (gcall *call_stmt)
{
  return &call_stmt->call_used;
}





static inline struct pt_solution *
gimple_call_clobber_set (gcall *call_stmt)
{
  return &call_stmt->call_clobbered;
}





static inline bool
gimple_has_lhs (gimple *stmt)
{
  if (is_gimple_assign (stmt))
    return true;
  if (gcall *call = dyn_cast <gcall *> (stmt))
    return gimple_call_lhs (call) != (tree) 
# 3452 "../../gcc/gimple.h" 3 4
                                    __null
# 3452 "../../gcc/gimple.h"
                                             ;
  return false;
}




static inline enum tree_code
gimple_cond_code (const gcond *gs)
{
  return (enum tree_code) gs->subcode;
}

static inline enum tree_code
gimple_cond_code (const gimple *gs)
{
  const gcond *gc = GIMPLE_CHECK2<const gcond *> (gs);
  return gimple_cond_code (gc);
}




static inline void
gimple_cond_set_code (gcond *gs, enum tree_code code)
{
  gs->subcode = code;
}




static inline tree
gimple_cond_lhs (const gcond *gs)
{
  return gs->op[0];
}

static inline tree
gimple_cond_lhs (const gimple *gs)
{
  const gcond *gc = GIMPLE_CHECK2<const gcond *> (gs);
  return gimple_cond_lhs (gc);
}




static inline tree *
gimple_cond_lhs_ptr (gcond *gs)
{
  return &gs->op[0];
}




static inline void
gimple_cond_set_lhs (gcond *gs, tree lhs)
{
  gs->op[0] = lhs;
}




static inline tree
gimple_cond_rhs (const gcond *gs)
{
  return gs->op[1];
}

static inline tree
gimple_cond_rhs (const gimple *gs)
{
  const gcond *gc = GIMPLE_CHECK2<const gcond *> (gs);
  return gimple_cond_rhs (gc);
}




static inline tree *
gimple_cond_rhs_ptr (gcond *gs)
{
  return &gs->op[1];
}





static inline void
gimple_cond_set_rhs (gcond *gs, tree rhs)
{
  gs->op[1] = rhs;
}





static inline tree
gimple_cond_true_label (const gcond *gs)
{
  return gs->op[2];
}





static inline void
gimple_cond_set_true_label (gcond *gs, tree label)
{
  gs->op[2] = label;
}





static inline void
gimple_cond_set_false_label (gcond *gs, tree label)
{
  gs->op[3] = label;
}





static inline tree
gimple_cond_false_label (const gcond *gs)
{
  return gs->op[3];
}




static inline void
gimple_cond_make_false (gcond *gs)
{
  gimple_cond_set_lhs (gs, global_trees[TI_BOOLEAN_FALSE]);
  gimple_cond_set_rhs (gs, global_trees[TI_BOOLEAN_FALSE]);
  gs->subcode = NE_EXPR;
}




static inline void
gimple_cond_make_true (gcond *gs)
{
  gimple_cond_set_lhs (gs, global_trees[TI_BOOLEAN_TRUE]);
  gimple_cond_set_rhs (gs, global_trees[TI_BOOLEAN_FALSE]);
  gs->subcode = NE_EXPR;
}




static inline bool
gimple_cond_true_p (const gcond *gs)
{
  tree lhs = gimple_cond_lhs (gs);
  tree rhs = gimple_cond_rhs (gs);
  enum tree_code code = gimple_cond_code (gs);

  if (lhs != global_trees[TI_BOOLEAN_TRUE] && lhs != global_trees[TI_BOOLEAN_FALSE])
    return false;

  if (rhs != global_trees[TI_BOOLEAN_TRUE] && rhs != global_trees[TI_BOOLEAN_FALSE])
    return false;

  if (code == NE_EXPR && lhs != rhs)
    return true;

  if (code == EQ_EXPR && lhs == rhs)
      return true;

  return false;
}




static inline bool
gimple_cond_false_p (const gcond *gs)
{
  tree lhs = gimple_cond_lhs (gs);
  tree rhs = gimple_cond_rhs (gs);
  enum tree_code code = gimple_cond_code (gs);

  if (lhs != global_trees[TI_BOOLEAN_TRUE] && lhs != global_trees[TI_BOOLEAN_FALSE])
    return false;

  if (rhs != global_trees[TI_BOOLEAN_TRUE] && rhs != global_trees[TI_BOOLEAN_FALSE])
    return false;

  if (code == NE_EXPR && lhs == rhs)
    return true;

  if (code == EQ_EXPR && lhs != rhs)
      return true;

  return false;
}



static inline void
gimple_cond_set_condition (gcond *stmt, enum tree_code code, tree lhs,
      tree rhs)
{
  gimple_cond_set_code (stmt, code);
  gimple_cond_set_lhs (stmt, lhs);
  gimple_cond_set_rhs (stmt, rhs);
}



static inline tree
gimple_label_label (const glabel *gs)
{
  return gs->op[0];
}





static inline void
gimple_label_set_label (glabel *gs, tree label)
{
  gs->op[0] = label;
}




static inline tree
gimple_goto_dest (const gimple *gs)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_GOTO)) gimple_check_failed (__gs, "../../gcc/gimple.h", 3697, __FUNCTION__, (GIMPLE_GOTO), ERROR_MARK); } while (0);
  return gimple_op (gs, 0);
}




static inline void
gimple_goto_set_dest (ggoto *gs, tree dest)
{
  gs->op[0] = dest;
}




static inline tree
gimple_bind_vars (const gbind *bind_stmt)
{
  return bind_stmt->vars;
}





static inline void
gimple_bind_set_vars (gbind *bind_stmt, tree vars)
{
  bind_stmt->vars = vars;
}





static inline void
gimple_bind_append_vars (gbind *bind_stmt, tree vars)
{
  bind_stmt->vars = chainon (bind_stmt->vars, vars);
}


static inline gimple_seq *
gimple_bind_body_ptr (gbind *bind_stmt)
{
  return &bind_stmt->body;
}



static inline gimple_seq
gimple_bind_body (gbind *gs)
{
  return *gimple_bind_body_ptr (gs);
}





static inline void
gimple_bind_set_body (gbind *bind_stmt, gimple_seq seq)
{
  bind_stmt->body = seq;
}




static inline void
gimple_bind_add_stmt (gbind *bind_stmt, gimple *stmt)
{
  gimple_seq_add_stmt (&bind_stmt->body, stmt);
}




static inline void
gimple_bind_add_seq (gbind *bind_stmt, gimple_seq seq)
{
  gimple_seq_add_seq (&bind_stmt->body, seq);
}





static inline tree
gimple_bind_block (const gbind *bind_stmt)
{
  return bind_stmt->block;
}





static inline void
gimple_bind_set_block (gbind *bind_stmt, tree block)
{
  ((void)(!(block == (tree) 
# 3799 "../../gcc/gimple.h" 3 4
 __null 
# 3799 "../../gcc/gimple.h"
 || ((enum tree_code) (block)->base.code) == BLOCK) ? fancy_abort (
                                      "../../gcc/gimple.h"
# 3799 "../../gcc/gimple.h"
  ,
                                      3800
# 3799 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                       ;
  bind_stmt->block = block;
}




static inline unsigned
gimple_asm_ninputs (const gasm *asm_stmt)
{
  return asm_stmt->ni;
}




static inline unsigned
gimple_asm_noutputs (const gasm *asm_stmt)
{
  return asm_stmt->no;
}




static inline unsigned
gimple_asm_nclobbers (const gasm *asm_stmt)
{
  return asm_stmt->nc;
}



static inline unsigned
gimple_asm_nlabels (const gasm *asm_stmt)
{
  return asm_stmt->nl;
}



static inline tree
gimple_asm_input_op (const gasm *asm_stmt, unsigned index)
{
  ((void)(!(index < asm_stmt->ni) ? fancy_abort ("../../gcc/gimple.h", 3844, __FUNCTION__), 0 : 0));
  return asm_stmt->op[index + asm_stmt->no];
}



static inline void
gimple_asm_set_input_op (gasm *asm_stmt, unsigned index, tree in_op)
{
  ((void)(!(index < asm_stmt->ni && ((enum tree_code) (in_op)->base.code) == TREE_LIST) ? fancy_abort (
                                          "../../gcc/gimple.h"
# 3853 "../../gcc/gimple.h"
  ,
                                          3854
# 3853 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                           ;
  asm_stmt->op[index + asm_stmt->no] = in_op;
}




static inline tree
gimple_asm_output_op (const gasm *asm_stmt, unsigned index)
{
  ((void)(!(index < asm_stmt->no) ? fancy_abort ("../../gcc/gimple.h", 3864, __FUNCTION__), 0 : 0));
  return asm_stmt->op[index];
}



static inline void
gimple_asm_set_output_op (gasm *asm_stmt, unsigned index, tree out_op)
{
  ((void)(!(index < asm_stmt->no && ((enum tree_code) (out_op)->base.code) == TREE_LIST) ? fancy_abort (
                                           "../../gcc/gimple.h"
# 3873 "../../gcc/gimple.h"
  ,
                                           3874
# 3873 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                            ;
  asm_stmt->op[index] = out_op;
}




static inline tree
gimple_asm_clobber_op (const gasm *asm_stmt, unsigned index)
{
  ((void)(!(index < asm_stmt->nc) ? fancy_abort ("../../gcc/gimple.h", 3884, __FUNCTION__), 0 : 0));
  return asm_stmt->op[index + asm_stmt->ni + asm_stmt->no];
}




static inline void
gimple_asm_set_clobber_op (gasm *asm_stmt, unsigned index, tree clobber_op)
{
  ((void)(!(index < asm_stmt->nc && ((enum tree_code) (clobber_op)->base.code) == TREE_LIST) ? fancy_abort (
                                               "../../gcc/gimple.h"
# 3894 "../../gcc/gimple.h"
  ,
                                               3895
# 3894 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                                ;
  asm_stmt->op[index + asm_stmt->ni + asm_stmt->no] = clobber_op;
}



static inline tree
gimple_asm_label_op (const gasm *asm_stmt, unsigned index)
{
  ((void)(!(index < asm_stmt->nl) ? fancy_abort ("../../gcc/gimple.h", 3904, __FUNCTION__), 0 : 0));
  return asm_stmt->op[index + asm_stmt->ni + asm_stmt->nc];
}



static inline void
gimple_asm_set_label_op (gasm *asm_stmt, unsigned index, tree label_op)
{
  ((void)(!(index < asm_stmt->nl && ((enum tree_code) (label_op)->base.code) == TREE_LIST) ? fancy_abort (
                                             "../../gcc/gimple.h"
# 3913 "../../gcc/gimple.h"
  ,
                                             3914
# 3913 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                              ;
  asm_stmt->op[index + asm_stmt->ni + asm_stmt->nc] = label_op;
}




static inline const char *
gimple_asm_string (const gasm *asm_stmt)
{
  return asm_stmt->string;
}




static inline bool
gimple_asm_volatile_p (const gasm *asm_stmt)
{
  return (asm_stmt->subcode & GF_ASM_VOLATILE) != 0;
}




static inline void
gimple_asm_set_volatile (gasm *asm_stmt, bool volatile_p)
{
  if (volatile_p)
    asm_stmt->subcode |= GF_ASM_VOLATILE;
  else
    asm_stmt->subcode &= ~GF_ASM_VOLATILE;
}




static inline void
gimple_asm_set_input (gasm *asm_stmt, bool input_p)
{
  if (input_p)
    asm_stmt->subcode |= GF_ASM_INPUT;
  else
    asm_stmt->subcode &= ~GF_ASM_INPUT;
}




static inline bool
gimple_asm_input_p (const gasm *asm_stmt)
{
  return (asm_stmt->subcode & GF_ASM_INPUT) != 0;
}




static inline tree
gimple_catch_types (const gcatch *catch_stmt)
{
  return catch_stmt->types;
}




static inline tree *
gimple_catch_types_ptr (gcatch *catch_stmt)
{
  return &catch_stmt->types;
}





static inline gimple_seq *
gimple_catch_handler_ptr (gcatch *catch_stmt)
{
  return &catch_stmt->handler;
}





static inline gimple_seq
gimple_catch_handler (gcatch *catch_stmt)
{
  return *gimple_catch_handler_ptr (catch_stmt);
}




static inline void
gimple_catch_set_types (gcatch *catch_stmt, tree t)
{
  catch_stmt->types = t;
}




static inline void
gimple_catch_set_handler (gcatch *catch_stmt, gimple_seq handler)
{
  catch_stmt->handler = handler;
}




static inline tree
gimple_eh_filter_types (const gimple *gs)
{
  const geh_filter *eh_filter_stmt = as_a <const geh_filter *> (gs);
  return eh_filter_stmt->types;
}





static inline tree *
gimple_eh_filter_types_ptr (gimple *gs)
{
  geh_filter *eh_filter_stmt = as_a <geh_filter *> (gs);
  return &eh_filter_stmt->types;
}





static inline gimple_seq *
gimple_eh_filter_failure_ptr (gimple *gs)
{
  geh_filter *eh_filter_stmt = as_a <geh_filter *> (gs);
  return &eh_filter_stmt->failure;
}





static inline gimple_seq
gimple_eh_filter_failure (gimple *gs)
{
  return *gimple_eh_filter_failure_ptr (gs);
}





static inline void
gimple_eh_filter_set_types (geh_filter *eh_filter_stmt, tree types)
{
  eh_filter_stmt->types = types;
}





static inline void
gimple_eh_filter_set_failure (geh_filter *eh_filter_stmt,
         gimple_seq failure)
{
  eh_filter_stmt->failure = failure;
}



static inline tree
gimple_eh_must_not_throw_fndecl (geh_mnt *eh_mnt_stmt)
{
  return eh_mnt_stmt->fndecl;
}



static inline void
gimple_eh_must_not_throw_set_fndecl (geh_mnt *eh_mnt_stmt,
         tree decl)
{
  eh_mnt_stmt->fndecl = decl;
}



static inline gimple_seq *
gimple_eh_else_n_body_ptr (geh_else *eh_else_stmt)
{
  return &eh_else_stmt->n_body;
}

static inline gimple_seq
gimple_eh_else_n_body (geh_else *eh_else_stmt)
{
  return *gimple_eh_else_n_body_ptr (eh_else_stmt);
}

static inline gimple_seq *
gimple_eh_else_e_body_ptr (geh_else *eh_else_stmt)
{
  return &eh_else_stmt->e_body;
}

static inline gimple_seq
gimple_eh_else_e_body (geh_else *eh_else_stmt)
{
  return *gimple_eh_else_e_body_ptr (eh_else_stmt);
}

static inline void
gimple_eh_else_set_n_body (geh_else *eh_else_stmt, gimple_seq seq)
{
  eh_else_stmt->n_body = seq;
}

static inline void
gimple_eh_else_set_e_body (geh_else *eh_else_stmt, gimple_seq seq)
{
  eh_else_stmt->e_body = seq;
}






static inline enum gimple_try_flags
gimple_try_kind (const gimple *gs)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_TRY)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4151, __FUNCTION__, (GIMPLE_TRY), ERROR_MARK); } while (0);
  return (enum gimple_try_flags) (gs->subcode & GIMPLE_TRY_KIND);
}




static inline void
gimple_try_set_kind (gtry *gs, enum gimple_try_flags kind)
{
  ((void)(!(kind == GIMPLE_TRY_CATCH || kind == GIMPLE_TRY_FINALLY) ? fancy_abort (
                                      "../../gcc/gimple.h"
# 4161 "../../gcc/gimple.h"
  ,
                                      4162
# 4161 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                       ;
  if (gimple_try_kind (gs) != kind)
    gs->subcode = (unsigned int) kind;
}




static inline bool
gimple_try_catch_is_cleanup (const gimple *gs)
{
  ((void)(!(gimple_try_kind (gs) == GIMPLE_TRY_CATCH) ? fancy_abort ("../../gcc/gimple.h", 4173, __FUNCTION__), 0 : 0));
  return (gs->subcode & GIMPLE_TRY_CATCH_IS_CLEANUP) != 0;
}





static inline gimple_seq *
gimple_try_eval_ptr (gimple *gs)
{
  gtry *try_stmt = as_a <gtry *> (gs);
  return &try_stmt->eval;
}




static inline gimple_seq
gimple_try_eval (gimple *gs)
{
  return *gimple_try_eval_ptr (gs);
}





static inline gimple_seq *
gimple_try_cleanup_ptr (gimple *gs)
{
  gtry *try_stmt = as_a <gtry *> (gs);
  return &try_stmt->cleanup;
}





static inline gimple_seq
gimple_try_cleanup (gimple *gs)
{
  return *gimple_try_cleanup_ptr (gs);
}




static inline void
gimple_try_set_catch_is_cleanup (gtry *g, bool catch_is_cleanup)
{
  ((void)(!(gimple_try_kind (g) == GIMPLE_TRY_CATCH) ? fancy_abort ("../../gcc/gimple.h", 4224, __FUNCTION__), 0 : 0));
  if (catch_is_cleanup)
    g->subcode |= GIMPLE_TRY_CATCH_IS_CLEANUP;
  else
    g->subcode &= ~GIMPLE_TRY_CATCH_IS_CLEANUP;
}





static inline void
gimple_try_set_eval (gtry *try_stmt, gimple_seq eval)
{
  try_stmt->eval = eval;
}





static inline void
gimple_try_set_cleanup (gtry *try_stmt, gimple_seq cleanup)
{
  try_stmt->cleanup = cleanup;
}




static inline gimple_seq *
gimple_wce_cleanup_ptr (gimple *gs)
{
  gimple_statement_wce *wce_stmt = as_a <gimple_statement_wce *> (gs);
  return &wce_stmt->cleanup;
}




static inline gimple_seq
gimple_wce_cleanup (gimple *gs)
{
  return *gimple_wce_cleanup_ptr (gs);
}




static inline void
gimple_wce_set_cleanup (gimple *gs, gimple_seq cleanup)
{
  gimple_statement_wce *wce_stmt = as_a <gimple_statement_wce *> (gs);
  wce_stmt->cleanup = cleanup;
}




static inline bool
gimple_wce_cleanup_eh_only (const gimple *gs)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_WITH_CLEANUP_EXPR)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4286, __FUNCTION__, (GIMPLE_WITH_CLEANUP_EXPR), ERROR_MARK); } while (0);
  return gs->subcode != 0;
}




static inline void
gimple_wce_set_cleanup_eh_only (gimple *gs, bool eh_only_p)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_WITH_CLEANUP_EXPR)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4296, __FUNCTION__, (GIMPLE_WITH_CLEANUP_EXPR), ERROR_MARK); } while (0);
  gs->subcode = (unsigned int) eh_only_p;
}




static inline unsigned
gimple_phi_capacity (const gimple *gs)
{
  const gphi *phi_stmt = as_a <const gphi *> (gs);
  return phi_stmt->capacity;
}






static inline unsigned
gimple_phi_num_args (const gimple *gs)
{
  const gphi *phi_stmt = as_a <const gphi *> (gs);
  return phi_stmt->nargs;
}




static inline tree
gimple_phi_result (const gphi *gs)
{
  return gs->result;
}

static inline tree
gimple_phi_result (const gimple *gs)
{
  const gphi *phi_stmt = as_a <const gphi *> (gs);
  return gimple_phi_result (phi_stmt);
}



static inline tree *
gimple_phi_result_ptr (gphi *gs)
{
  return &gs->result;
}

static inline tree *
gimple_phi_result_ptr (gimple *gs)
{
  gphi *phi_stmt = as_a <gphi *> (gs);
  return gimple_phi_result_ptr (phi_stmt);
}



static inline void
gimple_phi_set_result (gphi *phi, tree result)
{
  phi->result = result;
  if (result && ((enum tree_code) (result)->base.code) == SSA_NAME)
    (tree_check ((result), "../../gcc/gimple.h", 4360, __FUNCTION__, (SSA_NAME)))->ssa_name.def_stmt = phi;
}





static inline struct phi_arg_d *
gimple_phi_arg (gphi *gs, unsigned index)
{
  ((void)(!(index < gs->nargs) ? fancy_abort ("../../gcc/gimple.h", 4370, __FUNCTION__), 0 : 0));
  return &(gs->args[index]);
}

static inline struct phi_arg_d *
gimple_phi_arg (gimple *gs, unsigned index)
{
  gphi *phi_stmt = as_a <gphi *> (gs);
  return gimple_phi_arg (phi_stmt, index);
}




static inline void
gimple_phi_set_arg (gphi *phi, unsigned index, struct phi_arg_d * phiarg)
{
  ((void)(!(index < phi->nargs) ? fancy_abort ("../../gcc/gimple.h", 4387, __FUNCTION__), 0 : 0));
  phi->args[index] = *phiarg;
}




static inline gimple_seq
phi_nodes (const_basic_block bb)
{
  ((void)(!(!(bb->flags & BB_RTL)) ? fancy_abort ("../../gcc/gimple.h", 4397, __FUNCTION__), 0 : 0));
  return bb->il.gimple.phi_nodes;
}



static inline gimple_seq *
phi_nodes_ptr (basic_block bb)
{
  ((void)(!(!(bb->flags & BB_RTL)) ? fancy_abort ("../../gcc/gimple.h", 4406, __FUNCTION__), 0 : 0));
  return &bb->il.gimple.phi_nodes;
}



static inline tree
gimple_phi_arg_def (gphi *gs, size_t index)
{
  return gimple_phi_arg (gs, index)->def;
}

static inline tree
gimple_phi_arg_def (gimple *gs, size_t index)
{
  return gimple_phi_arg (gs, index)->def;
}




static inline tree *
gimple_phi_arg_def_ptr (gphi *phi, size_t index)
{
  return &gimple_phi_arg (phi, index)->def;
}



static inline edge
gimple_phi_arg_edge (gphi *phi, size_t i)
{
  return (*(gimple_bb (phi))->preds)[(i)];
}



static inline source_location
gimple_phi_arg_location (gphi *phi, size_t i)
{
  return gimple_phi_arg (phi, i)->locus;
}



static inline source_location
gimple_phi_arg_location_from_edge (gphi *phi, edge e)
{
  return gimple_phi_arg (phi, e->dest_idx)->locus;
}



static inline void
gimple_phi_arg_set_location (gphi *phi, size_t i, source_location loc)
{
  gimple_phi_arg (phi, i)->locus = loc;
}



static inline bool
gimple_phi_arg_has_location (gphi *phi, size_t i)
{
  return gimple_phi_arg_location (phi, i) != ((source_location) 0);
}




static inline int
gimple_resx_region (const gresx *resx_stmt)
{
  return resx_stmt->region;
}



static inline void
gimple_resx_set_region (gresx *resx_stmt, int region)
{
  resx_stmt->region = region;
}



static inline int
gimple_eh_dispatch_region (const geh_dispatch *eh_dispatch_stmt)
{
  return eh_dispatch_stmt->region;
}




static inline void
gimple_eh_dispatch_set_region (geh_dispatch *eh_dispatch_stmt, int region)
{
  eh_dispatch_stmt->region = region;
}



static inline unsigned
gimple_switch_num_labels (const gswitch *gs)
{
  unsigned num_ops;
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_SWITCH)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4513, __FUNCTION__, (GIMPLE_SWITCH), ERROR_MARK); } while (0);
  num_ops = gimple_num_ops (gs);
  ((void)(!(num_ops > 1) ? fancy_abort ("../../gcc/gimple.h", 4515, __FUNCTION__), 0 : 0));
  return num_ops - 1;
}




static inline void
gimple_switch_set_num_labels (gswitch *g, unsigned nlabels)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_SWITCH)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4525, __FUNCTION__, (GIMPLE_SWITCH), ERROR_MARK); } while (0);
  gimple_set_num_ops (g, nlabels + 1);
}




static inline tree
gimple_switch_index (const gswitch *gs)
{
  return gs->op[0];
}




static inline tree *
gimple_switch_index_ptr (gswitch *gs)
{
  return &gs->op[0];
}




static inline void
gimple_switch_set_index (gswitch *gs, tree index)
{
  ((void)(!((((enum tree_code) (index)->base.code) == VAR_DECL || ((enum tree_code) (index)->base.code) == PARM_DECL || ((enum tree_code) (index)->base.code) == RESULT_DECL || ((enum tree_code) (index)->base.code) == SSA_NAME) || (tree_code_type[(int) (((enum tree_code) (index)->base.code))] == tcc_constant)) ? fancy_abort ("../../gcc/gimple.h", 4553, __FUNCTION__), 0 : 0));
  gs->op[0] = index;
}





static inline tree
gimple_switch_label (const gswitch *gs, unsigned index)
{
  ((void)(!(gimple_num_ops (gs) > index + 1) ? fancy_abort ("../../gcc/gimple.h", 4564, __FUNCTION__), 0 : 0));
  return gs->op[index + 1];
}



static inline void
gimple_switch_set_label (gswitch *gs, unsigned index, tree label)
{
  ((void)(!(gimple_num_ops (gs) > index + 1 && (label == (tree) 
# 4573 "../../gcc/gimple.h" 3 4
 __null 
# 4573 "../../gcc/gimple.h"
 || ((enum tree_code) (label)->base.code) == CASE_LABEL_EXPR)) ? fancy_abort (

                                                     "../../gcc/gimple.h"
# 4573 "../../gcc/gimple.h"
  ,

                                                     4575
# 4573 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))

                                                      ;
  gs->op[index + 1] = label;
}



static inline tree
gimple_switch_default_label (const gswitch *gs)
{
  tree label = gimple_switch_label (gs, 0);
  ((void)(!(!(*((const_cast<tree*> (tree_operand_check (((tree_check ((label), "../../gcc/gimple.h", 4585, __FUNCTION__, (CASE_LABEL_EXPR)))), (0), "../../gcc/gimple.h", 4585, __FUNCTION__))))) && !(*((const_cast<tree*> (tree_operand_check (((tree_check ((label), "../../gcc/gimple.h", 4585, __FUNCTION__, (CASE_LABEL_EXPR)))), (1), "../../gcc/gimple.h", 4585, __FUNCTION__)))))) ? fancy_abort ("../../gcc/gimple.h", 4585, __FUNCTION__), 0 : 0));
  return label;
}



static inline void
gimple_switch_set_default_label (gswitch *gs, tree label)
{
  ((void)(!(!(*((const_cast<tree*> (tree_operand_check (((tree_check ((label), "../../gcc/gimple.h", 4594, __FUNCTION__, (CASE_LABEL_EXPR)))), (0), "../../gcc/gimple.h", 4594, __FUNCTION__))))) && !(*((const_cast<tree*> (tree_operand_check (((tree_check ((label), "../../gcc/gimple.h", 4594, __FUNCTION__, (CASE_LABEL_EXPR)))), (1), "../../gcc/gimple.h", 4594, __FUNCTION__)))))) ? fancy_abort ("../../gcc/gimple.h", 4594, __FUNCTION__), 0 : 0));
  gimple_switch_set_label (gs, 0, label);
}



static inline bool
is_gimple_debug (const gimple *gs)
{
  return gimple_code (gs) == GIMPLE_DEBUG;
}




static inline gimple *
gimple_seq_last_nondebug_stmt (gimple_seq s)
{
  gimple_seq_node n;
  for (n = gimple_seq_last (s);
       n && is_gimple_debug (n);
       n = n->prev)
    if (n->prev == s)
      return 
# 4617 "../../gcc/gimple.h" 3 4
            __null
# 4617 "../../gcc/gimple.h"
                ;
  return n;
}




static inline bool
gimple_debug_bind_p (const gimple *s)
{
  if (is_gimple_debug (s))
    return s->subcode == GIMPLE_DEBUG_BIND;

  return false;
}



static inline tree
gimple_debug_bind_get_var (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4638, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4639, __FUNCTION__), 0 : 0));
  return gimple_op (dbg, 0);
}




static inline tree
gimple_debug_bind_get_value (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4649, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4650, __FUNCTION__), 0 : 0));
  return gimple_op (dbg, 1);
}




static inline tree *
gimple_debug_bind_get_value_ptr (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4660, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4661, __FUNCTION__), 0 : 0));
  return gimple_op_ptr (dbg, 1);
}



static inline void
gimple_debug_bind_set_var (gimple *dbg, tree var)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4670, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4671, __FUNCTION__), 0 : 0));
  gimple_set_op (dbg, 0, var);
}




static inline void
gimple_debug_bind_set_value (gimple *dbg, tree value)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4681, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4682, __FUNCTION__), 0 : 0));
  gimple_set_op (dbg, 1, value);
}
# 4693 "../../gcc/gimple.h"
static inline void
gimple_debug_bind_reset_value (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4696, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4697, __FUNCTION__), 0 : 0));
  gimple_set_op (dbg, 1, (tree) 
# 4698 "../../gcc/gimple.h" 3 4
                        __null
# 4698 "../../gcc/gimple.h"
                                                 );
}




static inline bool
gimple_debug_bind_has_value_p (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4707, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4708, __FUNCTION__), 0 : 0));
  return gimple_op (dbg, 1) != (tree) 
# 4709 "../../gcc/gimple.h" 3 4
                              __null
# 4709 "../../gcc/gimple.h"
                                                       ;
}





static inline bool
gimple_debug_source_bind_p (const gimple *s)
{
  if (is_gimple_debug (s))
    return s->subcode == GIMPLE_DEBUG_SOURCE_BIND;

  return false;
}



static inline tree
gimple_debug_source_bind_get_var (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4730, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_source_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4731, __FUNCTION__), 0 : 0));
  return gimple_op (dbg, 0);
}




static inline tree
gimple_debug_source_bind_get_value (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4741, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_source_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4742, __FUNCTION__), 0 : 0));
  return gimple_op (dbg, 1);
}




static inline tree *
gimple_debug_source_bind_get_value_ptr (gimple *dbg)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4752, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_source_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4753, __FUNCTION__), 0 : 0));
  return gimple_op_ptr (dbg, 1);
}



static inline void
gimple_debug_source_bind_set_var (gimple *dbg, tree var)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4762, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_source_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4763, __FUNCTION__), 0 : 0));
  gimple_set_op (dbg, 0, var);
}




static inline void
gimple_debug_source_bind_set_value (gimple *dbg, tree value)
{
  do { const gimple *__gs = (dbg); if (gimple_code (__gs) != (GIMPLE_DEBUG)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4773, __FUNCTION__, (GIMPLE_DEBUG), ERROR_MARK); } while (0);
  ((void)(!(gimple_debug_source_bind_p (dbg)) ? fancy_abort ("../../gcc/gimple.h", 4774, __FUNCTION__), 0 : 0));
  gimple_set_op (dbg, 1, value);
}



static inline bool
gimple_debug_begin_stmt_p (const gimple *s)
{
  if (is_gimple_debug (s))
    return s->subcode == GIMPLE_DEBUG_BEGIN_STMT;

  return false;
}



static inline bool
gimple_debug_inline_entry_p (const gimple *s)
{
  if (is_gimple_debug (s))
    return s->subcode == GIMPLE_DEBUG_INLINE_ENTRY;

  return false;
}



static inline bool
gimple_debug_nonbind_marker_p (const gimple *s)
{
  if (is_gimple_debug (s))
    return s->subcode == GIMPLE_DEBUG_BEGIN_STMT
      || s->subcode == GIMPLE_DEBUG_INLINE_ENTRY;

  return false;
}



static inline int
get_lineno (const gimple *stmt)
{
  location_t loc;

  if (!stmt)
    return -1;

  loc = gimple_location (stmt);
  if (loc == ((source_location) 0))
    return -1;

  return ((expand_location (loc)).line);
}



static inline gimple_seq *
gimple_omp_body_ptr (gimple *gs)
{
  return &static_cast <gimple_statement_omp *> (gs)->body;
}



static inline gimple_seq
gimple_omp_body (gimple *gs)
{
  return *gimple_omp_body_ptr (gs);
}



static inline void
gimple_omp_set_body (gimple *gs, gimple_seq body)
{
  static_cast <gimple_statement_omp *> (gs)->body = body;
}




static inline tree
gimple_omp_critical_name (const gomp_critical *crit_stmt)
{
  return crit_stmt->name;
}





static inline tree *
gimple_omp_critical_name_ptr (gomp_critical *crit_stmt)
{
  return &crit_stmt->name;
}





static inline void
gimple_omp_critical_set_name (gomp_critical *crit_stmt, tree name)
{
  crit_stmt->name = name;
}




static inline tree
gimple_omp_critical_clauses (const gomp_critical *crit_stmt)
{
  return crit_stmt->clauses;
}





static inline tree *
gimple_omp_critical_clauses_ptr (gomp_critical *crit_stmt)
{
  return &crit_stmt->clauses;
}





static inline void
gimple_omp_critical_set_clauses (gomp_critical *crit_stmt, tree clauses)
{
  crit_stmt->clauses = clauses;
}




static inline tree
gimple_omp_ordered_clauses (const gomp_ordered *ord_stmt)
{
  return ord_stmt->clauses;
}





static inline tree *
gimple_omp_ordered_clauses_ptr (gomp_ordered *ord_stmt)
{
  return &ord_stmt->clauses;
}





static inline void
gimple_omp_ordered_set_clauses (gomp_ordered *ord_stmt, tree clauses)
{
  ord_stmt->clauses = clauses;
}




static inline int
gimple_omp_for_kind (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_FOR)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4946, __FUNCTION__, (GIMPLE_OMP_FOR), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_FOR_KIND_MASK);
}




static inline void
gimple_omp_for_set_kind (gomp_for *g, int kind)
{
  g->subcode = (g->subcode & ~GF_OMP_FOR_KIND_MASK)
        | (kind & GF_OMP_FOR_KIND_MASK);
}





static inline bool
gimple_omp_for_combined_p (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_FOR)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4967, __FUNCTION__, (GIMPLE_OMP_FOR), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_FOR_COMBINED) != 0;
}





static inline void
gimple_omp_for_set_combined_p (gomp_for *g, bool combined_p)
{
  if (combined_p)
    g->subcode |= GF_OMP_FOR_COMBINED;
  else
    g->subcode &= ~GF_OMP_FOR_COMBINED;
}





static inline bool
gimple_omp_for_combined_into_p (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_FOR)) gimple_check_failed (__gs, "../../gcc/gimple.h", 4991, __FUNCTION__, (GIMPLE_OMP_FOR), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_FOR_COMBINED_INTO) != 0;
}





static inline void
gimple_omp_for_set_combined_into_p (gomp_for *g, bool combined_p)
{
  if (combined_p)
    g->subcode |= GF_OMP_FOR_COMBINED_INTO;
  else
    g->subcode &= ~GF_OMP_FOR_COMBINED_INTO;
}




static inline tree
gimple_omp_for_clauses (const gimple *gs)
{
  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);
  return omp_for_stmt->clauses;
}





static inline tree *
gimple_omp_for_clauses_ptr (gimple *gs)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  return &omp_for_stmt->clauses;
}





static inline void
gimple_omp_for_set_clauses (gimple *gs, tree clauses)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  omp_for_stmt->clauses = clauses;
}




static inline size_t
gimple_omp_for_collapse (gimple *gs)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  return omp_for_stmt->collapse;
}




static inline enum tree_code
gimple_omp_for_cond (const gimple *gs, size_t i)
{
  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5057, __FUNCTION__), 0 : 0));
  return omp_for_stmt->iter[i].cond;
}




static inline void
gimple_omp_for_set_cond (gimple *gs, size_t i, enum tree_code cond)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(tree_code_type[(int) (cond)] == tcc_comparison && i < omp_for_stmt->collapse) ? fancy_abort (
                                      "../../gcc/gimple.h"
# 5068 "../../gcc/gimple.h"
  ,
                                      5069
# 5068 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                       ;
  omp_for_stmt->iter[i].cond = cond;
}




static inline tree
gimple_omp_for_index (const gimple *gs, size_t i)
{
  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5080, __FUNCTION__), 0 : 0));
  return omp_for_stmt->iter[i].index;
}




static inline tree *
gimple_omp_for_index_ptr (gimple *gs, size_t i)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5091, __FUNCTION__), 0 : 0));
  return &omp_for_stmt->iter[i].index;
}




static inline void
gimple_omp_for_set_index (gimple *gs, size_t i, tree index)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5102, __FUNCTION__), 0 : 0));
  omp_for_stmt->iter[i].index = index;
}




static inline tree
gimple_omp_for_initial (const gimple *gs, size_t i)
{
  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5113, __FUNCTION__), 0 : 0));
  return omp_for_stmt->iter[i].initial;
}




static inline tree *
gimple_omp_for_initial_ptr (gimple *gs, size_t i)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5124, __FUNCTION__), 0 : 0));
  return &omp_for_stmt->iter[i].initial;
}




static inline void
gimple_omp_for_set_initial (gimple *gs, size_t i, tree initial)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5135, __FUNCTION__), 0 : 0));
  omp_for_stmt->iter[i].initial = initial;
}




static inline tree
gimple_omp_for_final (const gimple *gs, size_t i)
{
  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5146, __FUNCTION__), 0 : 0));
  return omp_for_stmt->iter[i].final;
}




static inline tree *
gimple_omp_for_final_ptr (gimple *gs, size_t i)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5157, __FUNCTION__), 0 : 0));
  return &omp_for_stmt->iter[i].final;
}




static inline void
gimple_omp_for_set_final (gimple *gs, size_t i, tree final)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5168, __FUNCTION__), 0 : 0));
  omp_for_stmt->iter[i].final = final;
}




static inline tree
gimple_omp_for_incr (const gimple *gs, size_t i)
{
  const gomp_for *omp_for_stmt = as_a <const gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5179, __FUNCTION__), 0 : 0));
  return omp_for_stmt->iter[i].incr;
}




static inline tree *
gimple_omp_for_incr_ptr (gimple *gs, size_t i)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5190, __FUNCTION__), 0 : 0));
  return &omp_for_stmt->iter[i].incr;
}




static inline void
gimple_omp_for_set_incr (gimple *gs, size_t i, tree incr)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  ((void)(!(i < omp_for_stmt->collapse) ? fancy_abort ("../../gcc/gimple.h", 5201, __FUNCTION__), 0 : 0));
  omp_for_stmt->iter[i].incr = incr;
}





static inline gimple_seq *
gimple_omp_for_pre_body_ptr (gimple *gs)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  return &omp_for_stmt->pre_body;
}





static inline gimple_seq
gimple_omp_for_pre_body (gimple *gs)
{
  return *gimple_omp_for_pre_body_ptr (gs);
}





static inline void
gimple_omp_for_set_pre_body (gimple *gs, gimple_seq pre_body)
{
  gomp_for *omp_for_stmt = as_a <gomp_for *> (gs);
  omp_for_stmt->pre_body = pre_body;
}



static inline bool
gimple_omp_for_grid_phony (const gomp_for *omp_for)
{
  ((void)(!(gimple_omp_for_kind (omp_for) != GF_OMP_FOR_KIND_GRID_LOOP) ? fancy_abort (
                                     "../../gcc/gimple.h"
# 5242 "../../gcc/gimple.h"
  ,
                                     5243
# 5242 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                      ;
  return (gimple_omp_subcode (omp_for) & GF_OMP_FOR_GRID_PHONY) != 0;
}



static inline void
gimple_omp_for_set_grid_phony (gomp_for *omp_for, bool value)
{
  ((void)(!(gimple_omp_for_kind (omp_for) != GF_OMP_FOR_KIND_GRID_LOOP) ? fancy_abort (
                                     "../../gcc/gimple.h"
# 5252 "../../gcc/gimple.h"
  ,
                                     5253
# 5252 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                      ;
  if (value)
    omp_for->subcode |= GF_OMP_FOR_GRID_PHONY;
  else
    omp_for->subcode &= ~GF_OMP_FOR_GRID_PHONY;
}



static inline bool
gimple_omp_for_grid_intra_group (const gomp_for *omp_for)
{
  ((void)(!(gimple_omp_for_kind (omp_for) == GF_OMP_FOR_KIND_GRID_LOOP) ? fancy_abort (
                                     "../../gcc/gimple.h"
# 5265 "../../gcc/gimple.h"
  ,
                                     5266
# 5265 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                      ;
  return (gimple_omp_subcode (omp_for) & GF_OMP_FOR_GRID_INTRA_GROUP) != 0;
}



static inline void
gimple_omp_for_set_grid_intra_group (gomp_for *omp_for, bool value)
{
  ((void)(!(gimple_omp_for_kind (omp_for) == GF_OMP_FOR_KIND_GRID_LOOP) ? fancy_abort (
                                     "../../gcc/gimple.h"
# 5275 "../../gcc/gimple.h"
  ,
                                     5276
# 5275 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                      ;
  if (value)
    omp_for->subcode |= GF_OMP_FOR_GRID_INTRA_GROUP;
  else
    omp_for->subcode &= ~GF_OMP_FOR_GRID_INTRA_GROUP;
}




static inline bool
gimple_omp_for_grid_group_iter (const gomp_for *omp_for)
{
  ((void)(!(gimple_omp_for_kind (omp_for) == GF_OMP_FOR_KIND_GRID_LOOP) ? fancy_abort (
                                     "../../gcc/gimple.h"
# 5289 "../../gcc/gimple.h"
  ,
                                     5290
# 5289 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                      ;
  return (gimple_omp_subcode (omp_for) & GF_OMP_FOR_GRID_GROUP_ITER) != 0;
}



static inline void
gimple_omp_for_set_grid_group_iter (gomp_for *omp_for, bool value)
{
  ((void)(!(gimple_omp_for_kind (omp_for) == GF_OMP_FOR_KIND_GRID_LOOP) ? fancy_abort (
                                     "../../gcc/gimple.h"
# 5299 "../../gcc/gimple.h"
  ,
                                     5300
# 5299 "../../gcc/gimple.h"
  , __FUNCTION__), 0 : 0))
                                      ;
  if (value)
    omp_for->subcode |= GF_OMP_FOR_GRID_GROUP_ITER;
  else
    omp_for->subcode &= ~GF_OMP_FOR_GRID_GROUP_ITER;
}



static inline tree
gimple_omp_parallel_clauses (const gimple *gs)
{
  const gomp_parallel *omp_parallel_stmt = as_a <const gomp_parallel *> (gs);
  return omp_parallel_stmt->clauses;
}




static inline tree *
gimple_omp_parallel_clauses_ptr (gomp_parallel *omp_parallel_stmt)
{
  return &omp_parallel_stmt->clauses;
}




static inline void
gimple_omp_parallel_set_clauses (gomp_parallel *omp_parallel_stmt,
     tree clauses)
{
  omp_parallel_stmt->clauses = clauses;
}




static inline tree
gimple_omp_parallel_child_fn (const gomp_parallel *omp_parallel_stmt)
{
  return omp_parallel_stmt->child_fn;
}




static inline tree *
gimple_omp_parallel_child_fn_ptr (gomp_parallel *omp_parallel_stmt)
{
  return &omp_parallel_stmt->child_fn;
}




static inline void
gimple_omp_parallel_set_child_fn (gomp_parallel *omp_parallel_stmt,
      tree child_fn)
{
  omp_parallel_stmt->child_fn = child_fn;
}





static inline tree
gimple_omp_parallel_data_arg (const gomp_parallel *omp_parallel_stmt)
{
  return omp_parallel_stmt->data_arg;
}




static inline tree *
gimple_omp_parallel_data_arg_ptr (gomp_parallel *omp_parallel_stmt)
{
  return &omp_parallel_stmt->data_arg;
}




static inline void
gimple_omp_parallel_set_data_arg (gomp_parallel *omp_parallel_stmt,
      tree data_arg)
{
  omp_parallel_stmt->data_arg = data_arg;
}



static inline bool
gimple_omp_parallel_grid_phony (const gomp_parallel *stmt)
{
  return (gimple_omp_subcode (stmt) & GF_OMP_PARALLEL_GRID_PHONY) != 0;
}



static inline void
gimple_omp_parallel_set_grid_phony (gomp_parallel *stmt, bool value)
{
  if (value)
    stmt->subcode |= GF_OMP_PARALLEL_GRID_PHONY;
  else
    stmt->subcode &= ~GF_OMP_PARALLEL_GRID_PHONY;
}



static inline tree
gimple_omp_task_clauses (const gimple *gs)
{
  const gomp_task *omp_task_stmt = as_a <const gomp_task *> (gs);
  return omp_task_stmt->clauses;
}




static inline tree *
gimple_omp_task_clauses_ptr (gimple *gs)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  return &omp_task_stmt->clauses;
}





static inline void
gimple_omp_task_set_clauses (gimple *gs, tree clauses)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  omp_task_stmt->clauses = clauses;
}





static inline bool
gimple_omp_task_taskloop_p (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_TASK)) gimple_check_failed (__gs, "../../gcc/gimple.h", 5448, __FUNCTION__, (GIMPLE_OMP_TASK), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_TASK_TASKLOOP) != 0;
}





static inline void
gimple_omp_task_set_taskloop_p (gimple *g, bool taskloop_p)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_TASK)) gimple_check_failed (__gs, "../../gcc/gimple.h", 5459, __FUNCTION__, (GIMPLE_OMP_TASK), ERROR_MARK); } while (0);
  if (taskloop_p)
    g->subcode |= GF_OMP_TASK_TASKLOOP;
  else
    g->subcode &= ~GF_OMP_TASK_TASKLOOP;
}




static inline tree
gimple_omp_task_child_fn (const gimple *gs)
{
  const gomp_task *omp_task_stmt = as_a <const gomp_task *> (gs);
  return omp_task_stmt->child_fn;
}




static inline tree *
gimple_omp_task_child_fn_ptr (gimple *gs)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  return &omp_task_stmt->child_fn;
}




static inline void
gimple_omp_task_set_child_fn (gimple *gs, tree child_fn)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  omp_task_stmt->child_fn = child_fn;
}





static inline tree
gimple_omp_task_data_arg (const gimple *gs)
{
  const gomp_task *omp_task_stmt = as_a <const gomp_task *> (gs);
  return omp_task_stmt->data_arg;
}




static inline tree *
gimple_omp_task_data_arg_ptr (gimple *gs)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  return &omp_task_stmt->data_arg;
}




static inline void
gimple_omp_task_set_data_arg (gimple *gs, tree data_arg)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  omp_task_stmt->data_arg = data_arg;
}




static inline tree
gimple_omp_taskreg_clauses (const gimple *gs)
{
  const gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <const gimple_statement_omp_taskreg *> (gs);
  return omp_taskreg_stmt->clauses;
}




static inline tree *
gimple_omp_taskreg_clauses_ptr (gimple *gs)
{
  gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <gimple_statement_omp_taskreg *> (gs);
  return &omp_taskreg_stmt->clauses;
}





static inline void
gimple_omp_taskreg_set_clauses (gimple *gs, tree clauses)
{
  gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <gimple_statement_omp_taskreg *> (gs);
  omp_taskreg_stmt->clauses = clauses;
}




static inline tree
gimple_omp_taskreg_child_fn (const gimple *gs)
{
  const gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <const gimple_statement_omp_taskreg *> (gs);
  return omp_taskreg_stmt->child_fn;
}




static inline tree *
gimple_omp_taskreg_child_fn_ptr (gimple *gs)
{
  gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <gimple_statement_omp_taskreg *> (gs);
  return &omp_taskreg_stmt->child_fn;
}




static inline void
gimple_omp_taskreg_set_child_fn (gimple *gs, tree child_fn)
{
  gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <gimple_statement_omp_taskreg *> (gs);
  omp_taskreg_stmt->child_fn = child_fn;
}





static inline tree
gimple_omp_taskreg_data_arg (const gimple *gs)
{
  const gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <const gimple_statement_omp_taskreg *> (gs);
  return omp_taskreg_stmt->data_arg;
}




static inline tree *
gimple_omp_taskreg_data_arg_ptr (gimple *gs)
{
  gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <gimple_statement_omp_taskreg *> (gs);
  return &omp_taskreg_stmt->data_arg;
}




static inline void
gimple_omp_taskreg_set_data_arg (gimple *gs, tree data_arg)
{
  gimple_statement_omp_taskreg *omp_taskreg_stmt
    = as_a <gimple_statement_omp_taskreg *> (gs);
  omp_taskreg_stmt->data_arg = data_arg;
}




static inline tree
gimple_omp_task_copy_fn (const gimple *gs)
{
  const gomp_task *omp_task_stmt = as_a <const gomp_task *> (gs);
  return omp_task_stmt->copy_fn;
}




static inline tree *
gimple_omp_task_copy_fn_ptr (gimple *gs)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  return &omp_task_stmt->copy_fn;
}




static inline void
gimple_omp_task_set_copy_fn (gimple *gs, tree copy_fn)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  omp_task_stmt->copy_fn = copy_fn;
}




static inline tree
gimple_omp_task_arg_size (const gimple *gs)
{
  const gomp_task *omp_task_stmt = as_a <const gomp_task *> (gs);
  return omp_task_stmt->arg_size;
}




static inline tree *
gimple_omp_task_arg_size_ptr (gimple *gs)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  return &omp_task_stmt->arg_size;
}




static inline void
gimple_omp_task_set_arg_size (gimple *gs, tree arg_size)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  omp_task_stmt->arg_size = arg_size;
}




static inline tree
gimple_omp_task_arg_align (const gimple *gs)
{
  const gomp_task *omp_task_stmt = as_a <const gomp_task *> (gs);
  return omp_task_stmt->arg_align;
}




static inline tree *
gimple_omp_task_arg_align_ptr (gimple *gs)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  return &omp_task_stmt->arg_align;
}




static inline void
gimple_omp_task_set_arg_align (gimple *gs, tree arg_align)
{
  gomp_task *omp_task_stmt = as_a <gomp_task *> (gs);
  omp_task_stmt->arg_align = arg_align;
}




static inline tree
gimple_omp_single_clauses (const gimple *gs)
{
  const gomp_single *omp_single_stmt = as_a <const gomp_single *> (gs);
  return omp_single_stmt->clauses;
}




static inline tree *
gimple_omp_single_clauses_ptr (gimple *gs)
{
  gomp_single *omp_single_stmt = as_a <gomp_single *> (gs);
  return &omp_single_stmt->clauses;
}




static inline void
gimple_omp_single_set_clauses (gomp_single *omp_single_stmt, tree clauses)
{
  omp_single_stmt->clauses = clauses;
}




static inline tree
gimple_omp_target_clauses (const gimple *gs)
{
  const gomp_target *omp_target_stmt = as_a <const gomp_target *> (gs);
  return omp_target_stmt->clauses;
}




static inline tree *
gimple_omp_target_clauses_ptr (gimple *gs)
{
  gomp_target *omp_target_stmt = as_a <gomp_target *> (gs);
  return &omp_target_stmt->clauses;
}




static inline void
gimple_omp_target_set_clauses (gomp_target *omp_target_stmt,
          tree clauses)
{
  omp_target_stmt->clauses = clauses;
}




static inline int
gimple_omp_target_kind (const gimple *g)
{
  do { const gimple *__gs = (g); if (gimple_code (__gs) != (GIMPLE_OMP_TARGET)) gimple_check_failed (__gs, "../../gcc/gimple.h", 5783, __FUNCTION__, (GIMPLE_OMP_TARGET), ERROR_MARK); } while (0);
  return (gimple_omp_subcode (g) & GF_OMP_TARGET_KIND_MASK);
}




static inline void
gimple_omp_target_set_kind (gomp_target *g, int kind)
{
  g->subcode = (g->subcode & ~GF_OMP_TARGET_KIND_MASK)
        | (kind & GF_OMP_TARGET_KIND_MASK);
}




static inline tree
gimple_omp_target_child_fn (const gomp_target *omp_target_stmt)
{
  return omp_target_stmt->child_fn;
}




static inline tree *
gimple_omp_target_child_fn_ptr (gomp_target *omp_target_stmt)
{
  return &omp_target_stmt->child_fn;
}




static inline void
gimple_omp_target_set_child_fn (gomp_target *omp_target_stmt,
    tree child_fn)
{
  omp_target_stmt->child_fn = child_fn;
}





static inline tree
gimple_omp_target_data_arg (const gomp_target *omp_target_stmt)
{
  return omp_target_stmt->data_arg;
}




static inline tree *
gimple_omp_target_data_arg_ptr (gomp_target *omp_target_stmt)
{
  return &omp_target_stmt->data_arg;
}




static inline void
gimple_omp_target_set_data_arg (gomp_target *omp_target_stmt,
    tree data_arg)
{
  omp_target_stmt->data_arg = data_arg;
}




static inline tree
gimple_omp_teams_clauses (const gimple *gs)
{
  const gomp_teams *omp_teams_stmt = as_a <const gomp_teams *> (gs);
  return omp_teams_stmt->clauses;
}




static inline tree *
gimple_omp_teams_clauses_ptr (gimple *gs)
{
  gomp_teams *omp_teams_stmt = as_a <gomp_teams *> (gs);
  return &omp_teams_stmt->clauses;
}




static inline void
gimple_omp_teams_set_clauses (gomp_teams *omp_teams_stmt, tree clauses)
{
  omp_teams_stmt->clauses = clauses;
}



static inline bool
gimple_omp_teams_grid_phony (const gomp_teams *omp_teams_stmt)
{
  return (gimple_omp_subcode (omp_teams_stmt) & GF_OMP_TEAMS_GRID_PHONY) != 0;
}



static inline void
gimple_omp_teams_set_grid_phony (gomp_teams *omp_teams_stmt, bool value)
{
  if (value)
    omp_teams_stmt->subcode |= GF_OMP_TEAMS_GRID_PHONY;
  else
    omp_teams_stmt->subcode &= ~GF_OMP_TEAMS_GRID_PHONY;
}



static inline tree
gimple_omp_sections_clauses (const gimple *gs)
{
  const gomp_sections *omp_sections_stmt = as_a <const gomp_sections *> (gs);
  return omp_sections_stmt->clauses;
}




static inline tree *
gimple_omp_sections_clauses_ptr (gimple *gs)
{
  gomp_sections *omp_sections_stmt = as_a <gomp_sections *> (gs);
  return &omp_sections_stmt->clauses;
}





static inline void
gimple_omp_sections_set_clauses (gimple *gs, tree clauses)
{
  gomp_sections *omp_sections_stmt = as_a <gomp_sections *> (gs);
  omp_sections_stmt->clauses = clauses;
}





static inline tree
gimple_omp_sections_control (const gimple *gs)
{
  const gomp_sections *omp_sections_stmt = as_a <const gomp_sections *> (gs);
  return omp_sections_stmt->control;
}





static inline tree *
gimple_omp_sections_control_ptr (gimple *gs)
{
  gomp_sections *omp_sections_stmt = as_a <gomp_sections *> (gs);
  return &omp_sections_stmt->control;
}





static inline void
gimple_omp_sections_set_control (gimple *gs, tree control)
{
  gomp_sections *omp_sections_stmt = as_a <gomp_sections *> (gs);
  omp_sections_stmt->control = control;
}




static inline void
gimple_omp_atomic_store_set_val (gomp_atomic_store *store_stmt, tree val)
{
  store_stmt->val = val;
}




static inline tree
gimple_omp_atomic_store_val (const gomp_atomic_store *store_stmt)
{
  return store_stmt->val;
}




static inline tree *
gimple_omp_atomic_store_val_ptr (gomp_atomic_store *store_stmt)
{
  return &store_stmt->val;
}




static inline void
gimple_omp_atomic_load_set_lhs (gomp_atomic_load *load_stmt, tree lhs)
{
  load_stmt->lhs = lhs;
}




static inline tree
gimple_omp_atomic_load_lhs (const gomp_atomic_load *load_stmt)
{
  return load_stmt->lhs;
}




static inline tree *
gimple_omp_atomic_load_lhs_ptr (gomp_atomic_load *load_stmt)
{
  return &load_stmt->lhs;
}




static inline void
gimple_omp_atomic_load_set_rhs (gomp_atomic_load *load_stmt, tree rhs)
{
  load_stmt->rhs = rhs;
}




static inline tree
gimple_omp_atomic_load_rhs (const gomp_atomic_load *load_stmt)
{
  return load_stmt->rhs;
}




static inline tree *
gimple_omp_atomic_load_rhs_ptr (gomp_atomic_load *load_stmt)
{
  return &load_stmt->rhs;
}




static inline tree
gimple_omp_continue_control_def (const gomp_continue *cont_stmt)
{
  return cont_stmt->control_def;
}



static inline tree *
gimple_omp_continue_control_def_ptr (gomp_continue *cont_stmt)
{
  return &cont_stmt->control_def;
}



static inline void
gimple_omp_continue_set_control_def (gomp_continue *cont_stmt, tree def)
{
  cont_stmt->control_def = def;
}




static inline tree
gimple_omp_continue_control_use (const gomp_continue *cont_stmt)
{
  return cont_stmt->control_use;
}




static inline tree *
gimple_omp_continue_control_use_ptr (gomp_continue *cont_stmt)
{
  return &cont_stmt->control_use;
}




static inline void
gimple_omp_continue_set_control_use (gomp_continue *cont_stmt, tree use)
{
  cont_stmt->control_use = use;
}




static inline gimple_seq *
gimple_transaction_body_ptr (gtransaction *transaction_stmt)
{
  return &transaction_stmt->body;
}



static inline gimple_seq
gimple_transaction_body (gtransaction *transaction_stmt)
{
  return transaction_stmt->body;
}



static inline tree
gimple_transaction_label_norm (const gtransaction *transaction_stmt)
{
  return transaction_stmt->label_norm;
}

static inline tree *
gimple_transaction_label_norm_ptr (gtransaction *transaction_stmt)
{
  return &transaction_stmt->label_norm;
}

static inline tree
gimple_transaction_label_uninst (const gtransaction *transaction_stmt)
{
  return transaction_stmt->label_uninst;
}

static inline tree *
gimple_transaction_label_uninst_ptr (gtransaction *transaction_stmt)
{
  return &transaction_stmt->label_uninst;
}

static inline tree
gimple_transaction_label_over (const gtransaction *transaction_stmt)
{
  return transaction_stmt->label_over;
}

static inline tree *
gimple_transaction_label_over_ptr (gtransaction *transaction_stmt)
{
  return &transaction_stmt->label_over;
}



static inline unsigned int
gimple_transaction_subcode (const gtransaction *transaction_stmt)
{
  return transaction_stmt->subcode;
}




static inline void
gimple_transaction_set_body (gtransaction *transaction_stmt,
        gimple_seq body)
{
  transaction_stmt->body = body;
}



static inline void
gimple_transaction_set_label_norm (gtransaction *transaction_stmt, tree label)
{
  transaction_stmt->label_norm = label;
}

static inline void
gimple_transaction_set_label_uninst (gtransaction *transaction_stmt, tree label)
{
  transaction_stmt->label_uninst = label;
}

static inline void
gimple_transaction_set_label_over (gtransaction *transaction_stmt, tree label)
{
  transaction_stmt->label_over = label;
}



static inline void
gimple_transaction_set_subcode (gtransaction *transaction_stmt,
    unsigned int subcode)
{
  transaction_stmt->subcode = subcode;
}



static inline tree *
gimple_return_retval_ptr (greturn *gs)
{
  return &gs->op[0];
}



static inline tree
gimple_return_retval (const greturn *gs)
{
  return gs->op[0];
}




static inline void
gimple_return_set_retval (greturn *gs, tree retval)
{
  gs->op[0] = retval;
}




static inline tree
gimple_return_retbnd (const gimple *gs)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_RETURN)) gimple_check_failed (__gs, "../../gcc/gimple.h", 6231, __FUNCTION__, (GIMPLE_RETURN), ERROR_MARK); } while (0);
  return gimple_op (gs, 1);
}




static inline void
gimple_return_set_retbnd (gimple *gs, tree retval)
{
  do { const gimple *__gs = (gs); if (gimple_code (__gs) != (GIMPLE_RETURN)) gimple_check_failed (__gs, "../../gcc/gimple.h", 6241, __FUNCTION__, (GIMPLE_RETURN), ERROR_MARK); } while (0);
  gimple_set_op (gs, 1, retval);
}
# 6268 "../../gcc/gimple.h"
static inline bool
is_gimple_omp (const gimple *stmt)
{
  switch (gimple_code (stmt))
    {
    case GIMPLE_OMP_PARALLEL: case GIMPLE_OMP_TASK: case GIMPLE_OMP_FOR: case GIMPLE_OMP_SECTIONS: case GIMPLE_OMP_SECTIONS_SWITCH: case GIMPLE_OMP_SINGLE: case GIMPLE_OMP_TARGET: case GIMPLE_OMP_TEAMS: case GIMPLE_OMP_SECTION: case GIMPLE_OMP_MASTER: case GIMPLE_OMP_TASKGROUP: case GIMPLE_OMP_ORDERED: case GIMPLE_OMP_CRITICAL: case GIMPLE_OMP_RETURN: case GIMPLE_OMP_ATOMIC_LOAD: case GIMPLE_OMP_ATOMIC_STORE: case GIMPLE_OMP_CONTINUE: case GIMPLE_OMP_GRID_BODY:
      return true;
    default:
      return false;
    }
}




static inline bool
is_gimple_omp_oacc (const gimple *stmt)
{
  ((void)(!(is_gimple_omp (stmt)) ? fancy_abort ("../../gcc/gimple.h", 6286, __FUNCTION__), 0 : 0));
  switch (gimple_code (stmt))
    {
    case GIMPLE_OMP_FOR:
      switch (gimple_omp_for_kind (stmt))
 {
 case GF_OMP_FOR_KIND_OACC_LOOP:
   return true;
 default:
   return false;
 }
    case GIMPLE_OMP_TARGET:
      switch (gimple_omp_target_kind (stmt))
 {
 case GF_OMP_TARGET_KIND_OACC_PARALLEL:
 case GF_OMP_TARGET_KIND_OACC_KERNELS:
 case GF_OMP_TARGET_KIND_OACC_DATA:
 case GF_OMP_TARGET_KIND_OACC_UPDATE:
 case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:
 case GF_OMP_TARGET_KIND_OACC_DECLARE:
 case GF_OMP_TARGET_KIND_OACC_HOST_DATA:
   return true;
 default:
   return false;
 }
    default:
      return false;
    }
}




static inline bool
is_gimple_omp_offloaded (const gimple *stmt)
{
  ((void)(!(is_gimple_omp (stmt)) ? fancy_abort ("../../gcc/gimple.h", 6322, __FUNCTION__), 0 : 0));
  switch (gimple_code (stmt))
    {
    case GIMPLE_OMP_TARGET:
      switch (gimple_omp_target_kind (stmt))
 {
 case GF_OMP_TARGET_KIND_REGION:
 case GF_OMP_TARGET_KIND_OACC_PARALLEL:
 case GF_OMP_TARGET_KIND_OACC_KERNELS:
   return true;
 default:
   return false;
 }
    default:
      return false;
    }
}




static inline bool
gimple_nop_p (const gimple *g)
{
  return gimple_code (g) == GIMPLE_NOP;
}




static inline bool
is_gimple_resx (const gimple *gs)
{
  return gimple_code (gs) == GIMPLE_RESX;
}




static inline tree
gimple_expr_type (const gimple *stmt)
{
  enum gimple_code code = gimple_code (stmt);




  if (code == GIMPLE_CALL)
    {
      const gcall *call_stmt = as_a <const gcall *> (stmt);
      if (gimple_call_internal_p (call_stmt))
 switch (gimple_call_internal_fn (call_stmt))
   {
   case IFN_MASK_STORE:
   case IFN_SCATTER_STORE:
     return ((contains_struct_check ((gimple_call_arg (call_stmt, 3)), (TS_TYPED), "../../gcc/gimple.h", 6377, __FUNCTION__))->typed.type);
   case IFN_MASK_SCATTER_STORE:
     return ((contains_struct_check ((gimple_call_arg (call_stmt, 4)), (TS_TYPED), "../../gcc/gimple.h", 6379, __FUNCTION__))->typed.type);
   default:
     break;
   }
      return gimple_call_return_type (call_stmt);
    }
  else if (code == GIMPLE_ASSIGN)
    {
      if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)
        return ((contains_struct_check ((gimple_assign_rhs1 (stmt)), (TS_TYPED), "../../gcc/gimple.h", 6388, __FUNCTION__))->typed.type);
      else

        return ((contains_struct_check ((gimple_get_lhs (stmt)), (TS_TYPED), "../../gcc/gimple.h", 6391, __FUNCTION__))->typed.type);
    }
  else if (code == GIMPLE_COND)
    return global_trees[TI_BOOLEAN_TYPE];
  else
    return global_trees[TI_VOID_TYPE];
}



enum gimple_alloc_kind
{
  gimple_alloc_kind_assign,
  gimple_alloc_kind_phi,
  gimple_alloc_kind_cond,
  gimple_alloc_kind_rest,
  gimple_alloc_kind_all
};

extern uint64_t gimple_alloc_counts[];
extern uint64_t gimple_alloc_sizes[];


static inline enum gimple_alloc_kind
gimple_alloc_kind (enum gimple_code code)
{
  switch (code)
    {
      case GIMPLE_ASSIGN:
 return gimple_alloc_kind_assign;
      case GIMPLE_PHI:
 return gimple_alloc_kind_phi;
      case GIMPLE_COND:
 return gimple_alloc_kind_cond;
      default:
 return gimple_alloc_kind_rest;
    }
}




static inline bool
gimple_do_not_emit_location_p (gimple *g)
{
  return gimple_plf (g, GF_PLF_1);
}




static inline void
gimple_set_do_not_emit_location (gimple *g)
{


  gimple_set_plf (g, GF_PLF_1, true);
}
# 28 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/ssa.h" 1
# 26 "../../gcc/ssa.h"
# 1 "../../gcc/stringpool.h" 1
# 25 "../../gcc/stringpool.h"
extern tree get_identifier (const char *);




extern tree maybe_get_identifier (const char *);



extern tree get_identifier_with_length (const char *, size_t);
# 27 "../../gcc/ssa.h" 2
# 1 "../../gcc/gimple-ssa.h" 1
# 24 "../../gcc/gimple-ssa.h"
# 1 "../../gcc/tree-ssa-operands.h" 1
# 27 "../../gcc/tree-ssa-operands.h"
typedef tree *def_operand_p;


typedef ssa_use_operand_t *use_operand_p;






struct use_optype_d
{
  struct use_optype_d *next;
  struct ssa_use_operand_t use_ptr;
};
typedef struct use_optype_d *use_optype_p;





struct ssa_operand_memory_d {
  struct ssa_operand_memory_d *next;
  char mem[1];
};


struct ssa_operands {
   struct ssa_operand_memory_d *operand_memory;
   unsigned operand_memory_index;

   unsigned int ssa_operand_mem_size;

   bool ops_active;

   struct use_optype_d * free_uses;
};
# 92 "../../gcc/tree-ssa-operands.h"
extern bool ssa_operands_active (struct function *);
extern void init_ssa_operands (struct function *fn);
extern void fini_ssa_operands (struct function *);
extern bool verify_ssa_operands (struct function *, gimple *stmt);
extern void free_stmt_operands (struct function *, gimple *);
extern void update_stmt_operands (struct function *, gimple *);
extern void swap_ssa_operands (gimple *, tree *, tree *);
extern bool verify_imm_links (FILE *f, tree var);

extern void dump_immediate_uses_for (FILE *file, tree var);
extern void dump_immediate_uses (FILE *file);
extern void debug_immediate_uses (void);
extern void debug_immediate_uses_for (tree var);

extern void unlink_stmt_vdef (gimple *);


static inline tree
get_use_from_ptr (use_operand_p use)
{
  return *(use->use);
}


static inline tree
get_def_from_ptr (def_operand_p def)
{
  return *def;
}
# 25 "../../gcc/gimple-ssa.h" 2




struct tm_restart_node {
  gimple *stmt;
  tree label_or_list;
};



struct tm_restart_hasher : ggc_ptr_hash<tm_restart_node>
{
  static hashval_t hash (tm_restart_node *n) { return htab_hash_pointer (n); }

  static bool
  equal (tm_restart_node *a, tm_restart_node *b)
  {
    return a == b;
  }
};

extern void gt_ggc_mx (gimple *&);
extern void gt_pch_nx (gimple *&);

struct ssa_name_hasher : ggc_ptr_hash<tree_node>
{


  static hashval_t
  hash (tree item)
  {
    return item->ssa_name.var->decl_minimal.uid;
  }



  static bool
  equal (tree a, tree b)
{
  return (a->ssa_name.var->decl_minimal.uid == b->ssa_name.var->decl_minimal.uid);
}
};




struct gimple_df {

  vec<tree, va_gc> *ssa_names;


  tree vop;


  struct pt_solution escaped;



  hash_map<tree, tree> * decls_to_pointers;


  vec<tree, va_gc> *free_ssanames;


  vec<tree, va_gc> *free_ssanames_queue;





  hash_table<ssa_name_hasher> *default_defs;


  unsigned int ssa_renaming_needed : 1;


  unsigned int rename_vops : 1;


  unsigned int in_ssa_p : 1;


  unsigned int ipa_pta : 1;

  struct ssa_operands ssa_operands;



  hash_table<tm_restart_hasher> *tm_restart;
};






static inline bool
gimple_in_ssa_p (const struct function *fun)
{
  return fun && fun->gimple_df && fun->gimple_df->in_ssa_p;
}


static inline tree
gimple_vop (const struct function *fun)
{
  ((void)(!(fun && fun->gimple_df) ? fancy_abort ("../../gcc/gimple-ssa.h", 132, __FUNCTION__), 0 : 0));
  return fun->gimple_df->vop;
}



static inline use_operand_p
gimple_vuse_op (const gimple *g)
{
  struct use_optype_d *ops;
  const gimple_statement_with_memory_ops *mem_ops_stmt =
     dyn_cast <const gimple_statement_with_memory_ops *> (g);
  if (!mem_ops_stmt)
    return ((use_operand_p)
# 145 "../../gcc/gimple-ssa.h" 3 4
          __null
# 145 "../../gcc/gimple-ssa.h"
          );
  ops = mem_ops_stmt->use_ops;
  if (ops
      && (&((ops)->use_ptr))->use == &mem_ops_stmt->vuse)
    return (&((ops)->use_ptr));
  return ((use_operand_p)
# 150 "../../gcc/gimple-ssa.h" 3 4
        __null
# 150 "../../gcc/gimple-ssa.h"
        );
}



static inline def_operand_p
gimple_vdef_op (gimple *g)
{
  gimple_statement_with_memory_ops *mem_ops_stmt =
     dyn_cast <gimple_statement_with_memory_ops *> (g);
  if (!mem_ops_stmt)
    return ((def_operand_p)
# 161 "../../gcc/gimple-ssa.h" 3 4
          __null
# 161 "../../gcc/gimple-ssa.h"
          );
  if (mem_ops_stmt->vdef)
    return &mem_ops_stmt->vdef;
  return ((def_operand_p)
# 164 "../../gcc/gimple-ssa.h" 3 4
        __null
# 164 "../../gcc/gimple-ssa.h"
        );
}



static inline void
update_stmt (gimple *s)
{
  if (gimple_has_ops (s))
    {
      gimple_set_modified (s, true);
      update_stmt_operands ((cfun + 0), s);
    }
}



static inline void
update_stmt_if_modified (gimple *s)
{
  if (gimple_modified_p (s))
    update_stmt_operands ((cfun + 0), s);
}



static inline void
update_stmt_fn (struct function *fn, gimple *s)
{
  if (gimple_has_ops (s))
    {
      gimple_set_modified (s, true);
      update_stmt_operands (fn, s);
    }
}
# 28 "../../gcc/ssa.h" 2
# 1 "../../gcc/tree-vrp.h" 1
# 25 "../../gcc/tree-vrp.h"
enum value_range_type { VR_UNDEFINED, VR_RANGE,
   VR_ANTI_RANGE, VR_VARYING, VR_LAST };



struct value_range
{

  enum value_range_type type;
# 46 "../../gcc/tree-vrp.h"
  tree min;
  tree max;



  bitmap equiv;
};

extern void vrp_intersect_ranges (value_range *vr0, value_range *vr1);
extern void vrp_meet (value_range *vr0, const value_range *vr1);
extern void dump_value_range (FILE *, const value_range *);
extern void extract_range_from_unary_expr (value_range *vr,
        enum tree_code code,
        tree type,
        value_range *vr0_,
        tree op0_type);

extern bool vrp_operand_equal_p (const_tree, const_tree);
extern enum value_range_type intersect_range_with_nonzero_bits
  (enum value_range_type, wide_int *, wide_int *, const wide_int &, signop);

struct assert_info
{

  enum tree_code comp_code;


  tree name;


  tree val;


  tree expr;
};

extern void register_edge_assert_for (tree, edge, enum tree_code,
          tree, tree, vec<assert_info> &);
extern bool stmt_interesting_for_vrp (gimple *);
extern void set_value_range_to_varying (value_range *);
extern int range_includes_zero_p (tree, tree);
extern bool infer_value_range (gimple *, tree, tree_code *, tree *);

extern void set_value_range_to_nonnull (value_range *, tree);
extern void set_value_range (value_range *, enum value_range_type, tree,
        tree, bitmap);
extern void set_and_canonicalize_value_range (value_range *,
           enum value_range_type,
           tree, tree, bitmap);
extern bool vrp_bitmap_equal_p (const_bitmap, const_bitmap);
extern bool range_is_nonnull (value_range *);
extern tree value_range_constant_singleton (value_range *);
extern bool symbolic_range_p (value_range *);
extern int compare_values (tree, tree);
extern int compare_values_warnv (tree, tree, bool *);
extern bool vrp_val_is_min (const_tree);
extern bool vrp_val_is_max (const_tree);
extern void copy_value_range (value_range *, value_range *);
extern void set_value_range_to_value (value_range *, tree, bitmap);
extern void extract_range_from_binary_expr_1 (value_range *, enum tree_code,
           tree, value_range *,
           value_range *);
extern tree vrp_val_min (const_tree);
extern tree vrp_val_max (const_tree);
extern void set_value_range_to_null (value_range *, tree);
extern bool range_int_cst_p (value_range *);
extern int operand_less_p (tree, tree);
extern bool find_case_label_range (gswitch *, tree, tree, size_t *, size_t *);
extern bool find_case_label_index (gswitch *, size_t, tree, size_t *);
extern bool zero_nonzero_bits_from_vr (const tree, value_range *,
           wide_int *, wide_int *);
extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);
extern bool range_int_cst_singleton_p (value_range *);
extern int value_inside_range (tree, tree, tree);
extern tree get_single_symbol (tree, bool *, tree *);
extern void maybe_set_nonzero_bits (edge, tree);


struct switch_update {
  gswitch *stmt;
  tree vec;
};

extern vec<edge> to_remove_edges;
extern vec<switch_update> to_update_switch_stmts;
# 29 "../../gcc/ssa.h" 2
# 1 "../../gcc/tree-ssanames.h" 1
# 25 "../../gcc/tree-ssanames.h"
struct ptr_info_def
{

  struct pt_solution pt;
# 40 "../../gcc/tree-ssanames.h"
  unsigned int align;




  unsigned int misalign;
};



struct range_info_def {

  trailing_wide_int get_min () { return ints[0]; } template <typename T> void set_min (const T &x) { ints[0] = x; }
  trailing_wide_int get_max () { return ints[1]; } template <typename T> void set_max (const T &x) { ints[1] = x; }
  trailing_wide_int get_nonzero_bits () { return ints[2]; } template <typename T> void set_nonzero_bits (const T &x) { ints[2] = x; }
  trailing_wide_ints <3> ints;
};
# 70 "../../gcc/tree-ssanames.h"
extern void set_range_info (tree, enum value_range_type, const wide_int_ref &,
       const wide_int_ref &);
extern void set_range_info_raw (tree, enum value_range_type,
    const wide_int_ref &,
    const wide_int_ref &);

extern enum value_range_type get_range_info (const_tree, wide_int *,
          wide_int *);
extern void set_nonzero_bits (tree, const wide_int_ref &);
extern wide_int get_nonzero_bits (const_tree);
extern bool ssa_name_has_boolean_range (tree);
extern void init_ssanames (struct function *, int);
extern void fini_ssanames (struct function *);
extern void ssanames_print_statistics (void);
extern tree make_ssa_name_fn (struct function *, tree, gimple *,
         unsigned int version = 0);
extern void release_ssa_name_fn (struct function *, tree);
extern bool get_ptr_info_alignment (struct ptr_info_def *, unsigned int *,
        unsigned int *);
extern void mark_ptr_info_alignment_unknown (struct ptr_info_def *);
extern void set_ptr_info_alignment (struct ptr_info_def *, unsigned int,
        unsigned int);
extern void adjust_ptr_info_misalignment (struct ptr_info_def *, poly_uint64);
extern struct ptr_info_def *get_ptr_info (tree);
extern void set_ptr_nonnull (tree);
extern bool get_ptr_nonnull (const_tree);

extern tree copy_ssa_name_fn (struct function *, tree, gimple *);
extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);
extern tree duplicate_ssa_name_fn (struct function *, tree, gimple *);
extern void duplicate_ssa_name_range_info (tree, enum value_range_type,
        struct range_info_def *);
extern void reset_flow_sensitive_info (tree);
extern void reset_flow_sensitive_info_in_bb (basic_block);
extern void release_defs (gimple *);
extern void replace_ssa_name_symbol (tree, tree);
extern void flush_ssaname_freelist (void);





static inline tree
make_ssa_name (tree var, gimple *stmt = 
# 113 "../../gcc/tree-ssanames.h" 3 4
                                       __null
# 113 "../../gcc/tree-ssanames.h"
                                           )
{
  return make_ssa_name_fn ((cfun + 0), var, stmt);
}




static inline tree
copy_ssa_name (tree var, gimple *stmt = 
# 122 "../../gcc/tree-ssanames.h" 3 4
                                       __null
# 122 "../../gcc/tree-ssanames.h"
                                           )
{
  return copy_ssa_name_fn ((cfun + 0), var, stmt);
}




static inline tree
duplicate_ssa_name (tree var, gimple *stmt)
{
  return duplicate_ssa_name_fn ((cfun + 0), var, stmt);
}



static inline void
release_ssa_name (tree name)
{
  release_ssa_name_fn ((cfun + 0), name);
}




static inline tree
make_temp_ssa_name (tree type, gimple *stmt, const char *name)
{
  tree ssa_name;
  ((void)(!((tree_code_type[(int) (((enum tree_code) (type)->base.code))] == tcc_type)) ? fancy_abort ("../../gcc/tree-ssanames.h", 151, __FUNCTION__), 0 : 0));
  ssa_name = make_ssa_name_fn ((cfun + 0), type, stmt);
  do { tree var_ = ((__builtin_constant_p (name) ? get_identifier_with_length ((name), strlen (name)) : get_identifier (name))); (tree_check ((ssa_name), "../../gcc/tree-ssanames.h", 153, __FUNCTION__, (SSA_NAME)))->ssa_name.var = var_; (tree_check ((ssa_name), "../../gcc/tree-ssanames.h", 153, __FUNCTION__, (SSA_NAME)))->base.public_flag = (var_ && ((enum tree_code) (var_)->base.code) == VAR_DECL && ((tree_check ((var_), "../../gcc/tree-ssanames.h", 153, __FUNCTION__, (VAR_DECL)))->base.u.bits.saturating_flag)); } while (0);
  return ssa_name;
}
# 30 "../../gcc/ssa.h" 2
# 1 "../../gcc/tree-phinodes.h" 1
# 23 "../../gcc/tree-phinodes.h"
extern void phinodes_print_statistics (void);
extern void reserve_phi_args_for_new_edge (basic_block);
extern void add_phi_node_to_bb (gphi *phi, basic_block bb);
extern gphi *create_phi_node (tree, basic_block);
extern void add_phi_arg (gphi *, tree, edge, source_location);
extern void remove_phi_args (edge);
extern void remove_phi_node (gimple_stmt_iterator *, bool);
extern void remove_phi_nodes (basic_block);
extern tree degenerate_phi_result (gphi *);
extern void set_phi_nodes (basic_block, gimple_seq);

static inline use_operand_p
gimple_phi_arg_imm_use_ptr (gimple *gs, int i)
{
  return &gimple_phi_arg (gs, i)->imm_use;
}



static inline int
phi_arg_index_from_use (use_operand_p use)
{
  struct phi_arg_d *element, *root;
  size_t index;
  gimple *phi;





  phi = (use)->loc.stmt;

  element = (struct phi_arg_d *)use;
  root = gimple_phi_arg (phi, 0);
  index = element - root;



  ((void)(!((((char *)element - (char *)root) % sizeof (struct phi_arg_d)) == 0 && index < gimple_phi_capacity (phi)) ? fancy_abort (

                                             "../../gcc/tree-phinodes.h"
# 61 "../../gcc/tree-phinodes.h"
  ,

                                             63
# 61 "../../gcc/tree-phinodes.h"
  , __FUNCTION__), 0 : 0))

                                              ;

 return index;
}
# 31 "../../gcc/ssa.h" 2
# 1 "../../gcc/ssa-iterators.h" 1
# 58 "../../gcc/ssa-iterators.h"
struct imm_use_iterator
{

  ssa_use_operand_t *imm_use;

  ssa_use_operand_t *end_p;

  ssa_use_operand_t iter_node;


  ssa_use_operand_t *next_imm_name;
};
# 123 "../../gcc/ssa-iterators.h"
extern bool single_imm_use_1 (const ssa_use_operand_t *head,
         use_operand_p *use_p, gimple **stmt);


enum ssa_op_iter_type {
  ssa_op_iter_none = 0,
  ssa_op_iter_tree,
  ssa_op_iter_use,
  ssa_op_iter_def
};






struct ssa_op_iter
{
  enum ssa_op_iter_type iter_type;
  bool done;
  int flags;
  unsigned i;
  unsigned numops;
  use_optype_p uses;
  gimple *stmt;
};
# 246 "../../gcc/ssa-iterators.h"
static inline void
delink_imm_use (ssa_use_operand_t *linknode)
{

  if (linknode->prev == 
# 250 "../../gcc/ssa-iterators.h" 3 4
                       __null
# 250 "../../gcc/ssa-iterators.h"
                           )
    return;

  linknode->prev->next = linknode->next;
  linknode->next->prev = linknode->prev;
  linknode->prev = 
# 255 "../../gcc/ssa-iterators.h" 3 4
                  __null
# 255 "../../gcc/ssa-iterators.h"
                      ;
  linknode->next = 
# 256 "../../gcc/ssa-iterators.h" 3 4
                  __null
# 256 "../../gcc/ssa-iterators.h"
                      ;
}


static inline void
link_imm_use_to_list (ssa_use_operand_t *linknode, ssa_use_operand_t *list)
{


  linknode->prev = list;
  linknode->next = list->next;
  list->next->prev = linknode;
  list->next = linknode;
}


static inline void
link_imm_use (ssa_use_operand_t *linknode, tree def)
{
  ssa_use_operand_t *root;

  if (!def || ((enum tree_code) (def)->base.code) != SSA_NAME)
    linknode->prev = 
# 278 "../../gcc/ssa-iterators.h" 3 4
                    __null
# 278 "../../gcc/ssa-iterators.h"
                        ;
  else
    {
      root = &((tree_check ((def), "../../gcc/ssa-iterators.h", 281, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);
      if (linknode->use)
        ((void)(!(*(linknode->use) == def) ? fancy_abort ("../../gcc/ssa-iterators.h", 283, __FUNCTION__), 0 : 0));
      link_imm_use_to_list (linknode, root);
    }
}


static inline void
set_ssa_use_from_ptr (use_operand_p use, tree val)
{
  delink_imm_use (use);
  *(use->use) = val;
  link_imm_use (use, val);
}



static inline void
link_imm_use_stmt (ssa_use_operand_t *linknode, tree def, gimple *stmt)
{
  if (stmt)
    link_imm_use (linknode, def);
  else
    link_imm_use (linknode, 
# 305 "../../gcc/ssa-iterators.h" 3 4
                           __null
# 305 "../../gcc/ssa-iterators.h"
                               );
  linknode->loc.stmt = stmt;
}


static inline void
relink_imm_use (ssa_use_operand_t *node, ssa_use_operand_t *old)
{

  ((void)(!(*(old->use) == *(node->use)) ? fancy_abort ("../../gcc/ssa-iterators.h", 314, __FUNCTION__), 0 : 0));
  node->prev = old->prev;
  node->next = old->next;
  if (old->prev)
    {
      old->prev->next = node;
      old->next->prev = node;

      old->prev = 
# 322 "../../gcc/ssa-iterators.h" 3 4
                 __null
# 322 "../../gcc/ssa-iterators.h"
                     ;
    }
}



static inline void
relink_imm_use_stmt (ssa_use_operand_t *linknode, ssa_use_operand_t *old,
       gimple *stmt)
{
  if (stmt)
    relink_imm_use (linknode, old);
  else
    link_imm_use (linknode, 
# 335 "../../gcc/ssa-iterators.h" 3 4
                           __null
# 335 "../../gcc/ssa-iterators.h"
                               );
  linknode->loc.stmt = stmt;
}



static inline bool
end_readonly_imm_use_p (const imm_use_iterator *imm)
{
  return (imm->imm_use == imm->end_p);
}


static inline use_operand_p
first_readonly_imm_use (imm_use_iterator *imm, tree var)
{
  imm->end_p = &((tree_check ((var), "../../gcc/ssa-iterators.h", 351, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);
  imm->imm_use = imm->end_p->next;
  imm->iter_node.next = imm->imm_use->next;
  if (end_readonly_imm_use_p (imm))
    return ((use_operand_p)
# 355 "../../gcc/ssa-iterators.h" 3 4
          __null
# 355 "../../gcc/ssa-iterators.h"
          );
  return imm->imm_use;
}


static inline use_operand_p
next_readonly_imm_use (imm_use_iterator *imm)
{
  use_operand_p old = imm->imm_use;





  if (global_options.x_flag_checking)
    {
      ((void)(!(imm->iter_node.next == old->next) ? fancy_abort ("../../gcc/ssa-iterators.h", 371, __FUNCTION__), 0 : 0));
      imm->iter_node.next = old->next->next;
    }

  imm->imm_use = old->next;
  if (end_readonly_imm_use_p (imm))
    return ((use_operand_p)
# 377 "../../gcc/ssa-iterators.h" 3 4
          __null
# 377 "../../gcc/ssa-iterators.h"
          );
  return imm->imm_use;
}



static inline bool
has_zero_uses (const_tree var)
{
  const ssa_use_operand_t *const head = &((tree_check ((var), "../../gcc/ssa-iterators.h", 386, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);
  const ssa_use_operand_t *ptr;

  for (ptr = head->next; ptr != head; ptr = ptr->next)
    if ((ptr)->loc.stmt && !is_gimple_debug ((ptr)->loc.stmt))
      return false;

  return true;
}


static inline bool
has_single_use (const_tree var)
{
  const ssa_use_operand_t *const head = &((tree_check ((var), "../../gcc/ssa-iterators.h", 400, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);
  const ssa_use_operand_t *ptr;
  bool single = false;

  for (ptr = head->next; ptr != head; ptr = ptr->next)
    if ((ptr)->loc.stmt && !is_gimple_debug ((ptr)->loc.stmt))
      {
 if (single)
   return false;
 else
   single = true;
      }

  return single;
}



static inline bool
single_imm_use (const_tree var, use_operand_p *use_p, gimple **stmt)
{
  const ssa_use_operand_t *const ptr = &((tree_check ((var), "../../gcc/ssa-iterators.h", 421, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);


  if (ptr == ptr->next)
    {
    return_false:
      *use_p = ((use_operand_p)
# 427 "../../gcc/ssa-iterators.h" 3 4
              __null
# 427 "../../gcc/ssa-iterators.h"
              );
      *stmt = 
# 428 "../../gcc/ssa-iterators.h" 3 4
             __null
# 428 "../../gcc/ssa-iterators.h"
                 ;
      return false;
    }


  if (ptr == ptr->next->next)
    {
      if ((ptr->next)->loc.stmt && !is_gimple_debug ((ptr->next)->loc.stmt))
 {
   *use_p = ptr->next;
   *stmt = ptr->next->loc.stmt;
   return true;
 }
      else
 goto return_false;
    }

  return single_imm_use_1 (ptr, use_p, stmt);
}


static inline unsigned int
num_imm_uses (const_tree var)
{
  const ssa_use_operand_t *const start = &((tree_check ((var), "../../gcc/ssa-iterators.h", 452, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);
  const ssa_use_operand_t *ptr;
  unsigned int num = 0;

  if (!global_options.x_flag_var_tracking_assignments)
    {
      for (ptr = start->next; ptr != start; ptr = ptr->next)
 if ((ptr)->loc.stmt)
   num++;
    }
  else
    for (ptr = start->next; ptr != start; ptr = ptr->next)
      if ((ptr)->loc.stmt && !is_gimple_debug ((ptr)->loc.stmt))
 num++;

  return num;
}







static inline bool
op_iter_done (const ssa_op_iter *ptr)
{
  return ptr->done;
}


static inline use_operand_p
op_iter_next_use (ssa_op_iter *ptr)
{
  use_operand_p use_p;
  ((void)(!(ptr->iter_type == ssa_op_iter_use) ? fancy_abort ("../../gcc/ssa-iterators.h", 487, __FUNCTION__), 0 : 0));
  if (ptr->uses)
    {
      use_p = (&((ptr->uses)->use_ptr));
      ptr->uses = ptr->uses->next;
      return use_p;
    }
  if (ptr->i < ptr->numops)
    {
      return gimple_phi_arg_imm_use_ptr ((ptr->stmt), ((ptr->i)++));
    }
  ptr->done = true;
  return ((use_operand_p)
# 499 "../../gcc/ssa-iterators.h" 3 4
        __null
# 499 "../../gcc/ssa-iterators.h"
        );
}


static inline def_operand_p
op_iter_next_def (ssa_op_iter *ptr)
{
  ((void)(!(ptr->iter_type == ssa_op_iter_def) ? fancy_abort ("../../gcc/ssa-iterators.h", 506, __FUNCTION__), 0 : 0));
  if (ptr->flags & 0x08)
    {
      tree *p;
      ptr->flags &= ~0x08;
      p = gimple_vdef_ptr (ptr->stmt);
      if (p && *p)
 return p;
    }
  if (ptr->flags & 0x02)
    {
      while (ptr->i < ptr->numops)
 {
   tree *val = gimple_op_ptr (ptr->stmt, ptr->i);
   ptr->i++;
   if (*val)
     {
       if (((enum tree_code) (*val)->base.code) == TREE_LIST)
  val = &((tree_check ((*val), "../../gcc/ssa-iterators.h", 524, __FUNCTION__, (TREE_LIST)))->list.value);
       if (((enum tree_code) (*val)->base.code) == SSA_NAME
    || is_gimple_reg (*val))
  return val;
     }
 }
      ptr->flags &= ~0x02;
    }

  ptr->done = true;
  return ((def_operand_p)
# 534 "../../gcc/ssa-iterators.h" 3 4
        __null
# 534 "../../gcc/ssa-iterators.h"
        );
}


static inline tree
op_iter_next_tree (ssa_op_iter *ptr)
{
  tree val;
  ((void)(!(ptr->iter_type == ssa_op_iter_tree) ? fancy_abort ("../../gcc/ssa-iterators.h", 542, __FUNCTION__), 0 : 0));
  if (ptr->uses)
    {
      val = (get_use_from_ptr ((&((ptr->uses)->use_ptr))));
      ptr->uses = ptr->uses->next;
      return val;
    }
  if (ptr->flags & 0x08)
    {
      ptr->flags &= ~0x08;
      if ((val = gimple_vdef (ptr->stmt)))
 return val;
    }
  if (ptr->flags & 0x02)
    {
      while (ptr->i < ptr->numops)
 {
   val = gimple_op (ptr->stmt, ptr->i);
   ptr->i++;
   if (val)
     {
       if (((enum tree_code) (val)->base.code) == TREE_LIST)
  val = ((tree_check ((val), "../../gcc/ssa-iterators.h", 564, __FUNCTION__, (TREE_LIST)))->list.value);
       if (((enum tree_code) (val)->base.code) == SSA_NAME
    || is_gimple_reg (val))
  return val;
     }
 }
      ptr->flags &= ~0x02;
    }

  ptr->done = true;
  return (tree) 
# 574 "../../gcc/ssa-iterators.h" 3 4
        __null
# 574 "../../gcc/ssa-iterators.h"
                 ;
}






static inline void
clear_and_done_ssa_iter (ssa_op_iter *ptr)
{
  ptr->i = 0;
  ptr->numops = 0;
  ptr->uses = 
# 587 "../../gcc/ssa-iterators.h" 3 4
             __null
# 587 "../../gcc/ssa-iterators.h"
                 ;
  ptr->iter_type = ssa_op_iter_none;
  ptr->stmt = 
# 589 "../../gcc/ssa-iterators.h" 3 4
             __null
# 589 "../../gcc/ssa-iterators.h"
                 ;
  ptr->done = true;
  ptr->flags = 0;
}


static inline void
op_iter_init (ssa_op_iter *ptr, gimple *stmt, int flags)
{



  ((void)(!(gimple_code (stmt) != GIMPLE_PHI && (!(flags & 0x08) || (flags & 0x02)) && (!(flags & 0x04) || (flags & 0x01))) ? fancy_abort (

                                                            "../../gcc/ssa-iterators.h"
# 601 "../../gcc/ssa-iterators.h"
  ,

                                                            603
# 601 "../../gcc/ssa-iterators.h"
  , __FUNCTION__), 0 : 0))

                                                             ;
  ptr->numops = 0;
  if (flags & (0x02 | 0x08))
    {
      switch (gimple_code (stmt))
 {
   case GIMPLE_ASSIGN:
   case GIMPLE_CALL:
     ptr->numops = 1;
     break;
   case GIMPLE_ASM:
     ptr->numops = gimple_asm_noutputs (as_a <gasm *> (stmt));
     break;
   case GIMPLE_TRANSACTION:
     ptr->numops = 0;
     flags &= ~0x02;
     break;
   default:
     ptr->numops = 0;
     flags &= ~(0x02 | 0x08);
     break;
 }
    }
  ptr->uses = (flags & (0x01|0x04)) ? gimple_use_ops (stmt) : 
# 626 "../../gcc/ssa-iterators.h" 3 4
                                                                          __null
# 626 "../../gcc/ssa-iterators.h"
                                                                              ;
  if (!(flags & 0x04)
      && ptr->uses
      && gimple_vuse (stmt) != (tree) 
# 629 "../../gcc/ssa-iterators.h" 3 4
                              __null
# 629 "../../gcc/ssa-iterators.h"
                                       )
    ptr->uses = ptr->uses->next;
  ptr->done = false;
  ptr->i = 0;

  ptr->stmt = stmt;
  ptr->flags = flags;
}



static inline use_operand_p
op_iter_init_use (ssa_op_iter *ptr, gimple *stmt, int flags)
{
  ((void)(!((flags & ((0x08) | 0x02)) == 0 && (flags & 0x01)) ? fancy_abort (
                                "../../gcc/ssa-iterators.h"
# 643 "../../gcc/ssa-iterators.h"
  ,
                                644
# 643 "../../gcc/ssa-iterators.h"
  , __FUNCTION__), 0 : 0))
                                 ;
  op_iter_init (ptr, stmt, flags);
  ptr->iter_type = ssa_op_iter_use;
  return op_iter_next_use (ptr);
}



static inline def_operand_p
op_iter_init_def (ssa_op_iter *ptr, gimple *stmt, int flags)
{
  ((void)(!((flags & ((0x04) | 0x01)) == 0 && (flags & 0x02)) ? fancy_abort (
                                "../../gcc/ssa-iterators.h"
# 655 "../../gcc/ssa-iterators.h"
  ,
                                656
# 655 "../../gcc/ssa-iterators.h"
  , __FUNCTION__), 0 : 0))
                                 ;
  op_iter_init (ptr, stmt, flags);
  ptr->iter_type = ssa_op_iter_def;
  return op_iter_next_def (ptr);
}



static inline tree
op_iter_init_tree (ssa_op_iter *ptr, gimple *stmt, int flags)
{
  op_iter_init (ptr, stmt, flags);
  ptr->iter_type = ssa_op_iter_tree;
  return op_iter_next_tree (ptr);
}




static inline tree
single_ssa_tree_operand (gimple *stmt, int flags)
{
  tree var;
  ssa_op_iter iter;

  var = op_iter_init_tree (&iter, stmt, flags);
  if (op_iter_done (&iter))
    return (tree) 
# 683 "../../gcc/ssa-iterators.h" 3 4
          __null
# 683 "../../gcc/ssa-iterators.h"
                   ;
  op_iter_next_tree (&iter);
  if (op_iter_done (&iter))
    return var;
  return (tree) 
# 687 "../../gcc/ssa-iterators.h" 3 4
        __null
# 687 "../../gcc/ssa-iterators.h"
                 ;
}




static inline use_operand_p
single_ssa_use_operand (gimple *stmt, int flags)
{
  use_operand_p var;
  ssa_op_iter iter;

  var = op_iter_init_use (&iter, stmt, flags);
  if (op_iter_done (&iter))
    return ((use_operand_p)
# 701 "../../gcc/ssa-iterators.h" 3 4
          __null
# 701 "../../gcc/ssa-iterators.h"
          );
  op_iter_next_use (&iter);
  if (op_iter_done (&iter))
    return var;
  return ((use_operand_p)
# 705 "../../gcc/ssa-iterators.h" 3 4
        __null
# 705 "../../gcc/ssa-iterators.h"
        );
}



static inline use_operand_p
ssa_vuse_operand (gimple *stmt)
{
  if (! gimple_vuse (stmt))
    return ((use_operand_p)
# 714 "../../gcc/ssa-iterators.h" 3 4
          __null
# 714 "../../gcc/ssa-iterators.h"
          );
  return (&((gimple_use_ops (stmt))->use_ptr));
}




static inline def_operand_p
single_ssa_def_operand (gimple *stmt, int flags)
{
  def_operand_p var;
  ssa_op_iter iter;

  var = op_iter_init_def (&iter, stmt, flags);
  if (op_iter_done (&iter))
    return ((def_operand_p)
# 729 "../../gcc/ssa-iterators.h" 3 4
          __null
# 729 "../../gcc/ssa-iterators.h"
          );
  op_iter_next_def (&iter);
  if (op_iter_done (&iter))
    return var;
  return ((def_operand_p)
# 733 "../../gcc/ssa-iterators.h" 3 4
        __null
# 733 "../../gcc/ssa-iterators.h"
        );
}




static inline bool
zero_ssa_operands (gimple *stmt, int flags)
{
  ssa_op_iter iter;

  op_iter_init_tree (&iter, stmt, flags);
  return op_iter_done (&iter);
}



static inline int
num_ssa_operands (gimple *stmt, int flags)
{
  ssa_op_iter iter;
  tree t;
  int num = 0;

  ((void)(!(gimple_code (stmt) != GIMPLE_PHI) ? fancy_abort ("../../gcc/ssa-iterators.h", 757, __FUNCTION__), 0 : 0));
  for (t = op_iter_init_tree (&(iter), stmt, flags); !op_iter_done (&(iter)); (void) (t = op_iter_next_tree (&(iter))))
    num++;
  return num;
}



static inline tree
single_phi_def (gphi *stmt, int flags)
{
  tree def = get_def_from_ptr (gimple_phi_result_ptr (stmt));
  if ((flags & 0x02) && is_gimple_reg (def))
    return def;
  if ((flags & (0x08)) && !is_gimple_reg (def))
    return def;
  return (tree) 
# 773 "../../gcc/ssa-iterators.h" 3 4
        __null
# 773 "../../gcc/ssa-iterators.h"
                 ;
}



static inline use_operand_p
op_iter_init_phiuse (ssa_op_iter *ptr, gphi *phi, int flags)
{
  tree phi_def = gimple_phi_result (phi);
  int comp;

  clear_and_done_ssa_iter (ptr);
  ptr->done = false;

  ((void)(!((flags & (0x01 | (0x04))) != 0) ? fancy_abort ("../../gcc/ssa-iterators.h", 787, __FUNCTION__), 0 : 0));

  comp = (is_gimple_reg (phi_def) ? 0x01 : (0x04));


  if ((flags & comp) == 0)
    {
      ptr->done = true;
      return ((use_operand_p)
# 795 "../../gcc/ssa-iterators.h" 3 4
            __null
# 795 "../../gcc/ssa-iterators.h"
            );
    }

  ptr->stmt = phi;
  ptr->numops = gimple_phi_num_args (phi);
  ptr->iter_type = ssa_op_iter_use;
  ptr->flags = flags;
  return op_iter_next_use (ptr);
}




static inline def_operand_p
op_iter_init_phidef (ssa_op_iter *ptr, gphi *phi, int flags)
{
  tree phi_def = get_def_from_ptr (gimple_phi_result_ptr (phi));
  int comp;

  clear_and_done_ssa_iter (ptr);
  ptr->done = false;

  ((void)(!((flags & (0x02 | (0x08))) != 0) ? fancy_abort ("../../gcc/ssa-iterators.h", 817, __FUNCTION__), 0 : 0));

  comp = (is_gimple_reg (phi_def) ? 0x02 : (0x08));



  if ((flags & comp) == 0)
    {
      ptr->done = true;
      return ((def_operand_p)
# 826 "../../gcc/ssa-iterators.h" 3 4
            __null
# 826 "../../gcc/ssa-iterators.h"
            );
    }

  ptr->iter_type = ssa_op_iter_def;



  return gimple_phi_result_ptr (phi);
}



static inline bool
end_imm_use_stmt_p (const imm_use_iterator *imm)
{
  return (imm->imm_use == imm->end_p);
}




static inline void
end_imm_use_stmt_traverse (imm_use_iterator *imm)
{
  delink_imm_use (&(imm->iter_node));
}







static inline use_operand_p
move_use_after_head (use_operand_p use_p, use_operand_p head,
        use_operand_p last_p)
{
  ((void)(!(get_use_from_ptr (use_p) == get_use_from_ptr (head)) ? fancy_abort ("../../gcc/ssa-iterators.h", 863, __FUNCTION__), 0 : 0));

  if (use_p != head)
    {

      if (last_p->next == use_p)
 last_p = use_p;
      else
 {

   delink_imm_use (use_p);
   link_imm_use_to_list (use_p, last_p);
   last_p = use_p;
 }
    }
  return last_p;
}





static inline void
link_use_stmts_after (use_operand_p head, imm_use_iterator *imm)
{
  use_operand_p use_p;
  use_operand_p last_p = head;
  gimple *head_stmt = (head)->loc.stmt;
  tree use = get_use_from_ptr (head);
  ssa_op_iter op_iter;
  int flag;


  flag = (is_gimple_reg (use) ? 0x01 : (0x04));

  if (gphi *phi = dyn_cast <gphi *> (head_stmt))
    {
      for ((use_p) = op_iter_init_phiuse (&(op_iter), phi, flag); !op_iter_done (&(op_iter)); (use_p) = op_iter_next_use (&(op_iter)))
 if (get_use_from_ptr (use_p) == use)
   last_p = move_use_after_head (use_p, head, last_p);
    }
  else
    {
      if (flag == 0x01)
 {
   for (use_p = op_iter_init_use (&(op_iter), head_stmt, flag); !op_iter_done (&(op_iter)); use_p = op_iter_next_use (&(op_iter)))
     if (get_use_from_ptr (use_p) == use)
       last_p = move_use_after_head (use_p, head, last_p);
 }
      else if ((use_p = gimple_vuse_op (head_stmt)) != ((use_operand_p)
# 912 "../../gcc/ssa-iterators.h" 3 4
                                                      __null
# 912 "../../gcc/ssa-iterators.h"
                                                      ))
 {
   if (get_use_from_ptr (use_p) == use)
     last_p = move_use_after_head (use_p, head, last_p);
 }
    }

  if (imm->iter_node.prev != 
# 919 "../../gcc/ssa-iterators.h" 3 4
                            __null
# 919 "../../gcc/ssa-iterators.h"
                                )
    delink_imm_use (&imm->iter_node);
  link_imm_use_to_list (&(imm->iter_node), last_p);
}


static inline gimple *
first_imm_use_stmt (imm_use_iterator *imm, tree var)
{
  imm->end_p = &((tree_check ((var), "../../gcc/ssa-iterators.h", 928, __FUNCTION__, (SSA_NAME)))->ssa_name.imm_uses);
  imm->imm_use = imm->end_p->next;
  imm->next_imm_name = ((use_operand_p)
# 930 "../../gcc/ssa-iterators.h" 3 4
                      __null
# 930 "../../gcc/ssa-iterators.h"
                      );




  imm->iter_node.prev = ((use_operand_p)
# 935 "../../gcc/ssa-iterators.h" 3 4
                       __null
# 935 "../../gcc/ssa-iterators.h"
                       );
  imm->iter_node.next = ((use_operand_p)
# 936 "../../gcc/ssa-iterators.h" 3 4
                       __null
# 936 "../../gcc/ssa-iterators.h"
                       );
  imm->iter_node.loc.stmt = 
# 937 "../../gcc/ssa-iterators.h" 3 4
                           __null
# 937 "../../gcc/ssa-iterators.h"
                               ;
  imm->iter_node.use = 
# 938 "../../gcc/ssa-iterators.h" 3 4
                      __null
# 938 "../../gcc/ssa-iterators.h"
                          ;

  if (end_imm_use_stmt_p (imm))
    return 
# 941 "../../gcc/ssa-iterators.h" 3 4
          __null
# 941 "../../gcc/ssa-iterators.h"
              ;

  link_use_stmts_after (imm->imm_use, imm);

  return (imm->imm_use)->loc.stmt;
}



static inline gimple *
next_imm_use_stmt (imm_use_iterator *imm)
{
  imm->imm_use = imm->iter_node.next;
  if (end_imm_use_stmt_p (imm))
    {
      if (imm->iter_node.prev != 
# 956 "../../gcc/ssa-iterators.h" 3 4
                                __null
# 956 "../../gcc/ssa-iterators.h"
                                    )
 delink_imm_use (&imm->iter_node);
      return 
# 958 "../../gcc/ssa-iterators.h" 3 4
            __null
# 958 "../../gcc/ssa-iterators.h"
                ;
    }

  link_use_stmts_after (imm->imm_use, imm);
  return (imm->imm_use)->loc.stmt;
}




static inline use_operand_p
first_imm_use_on_stmt (imm_use_iterator *imm)
{
  imm->next_imm_name = imm->imm_use->next;
  return imm->imm_use;
}



static inline bool
end_imm_use_on_stmt_p (const imm_use_iterator *imm)
{
  return (imm->imm_use == &(imm->iter_node));
}



static inline use_operand_p
next_imm_use_on_stmt (imm_use_iterator *imm)
{
  imm->imm_use = imm->next_imm_name;
  if (end_imm_use_on_stmt_p (imm))
    return ((use_operand_p)
# 990 "../../gcc/ssa-iterators.h" 3 4
          __null
# 990 "../../gcc/ssa-iterators.h"
          );
  else
    {
      imm->next_imm_name = imm->imm_use->next;
      return imm->imm_use;
    }
}


static inline void
delink_stmt_imm_use (gimple *stmt)
{
   ssa_op_iter iter;
   use_operand_p use_p;

   if (ssa_operands_active ((cfun + 0)))
     for ((use_p) = (gimple_code (stmt) == GIMPLE_PHI ? op_iter_init_phiuse (&(iter), as_a <gphi *> (stmt), ((0x04) | 0x01)) : op_iter_init_use (&(iter), stmt, ((0x04) | 0x01))); !op_iter_done (&(iter)); (use_p) = op_iter_next_use (&(iter)))
       delink_imm_use (use_p);
}
# 32 "../../gcc/ssa.h" 2
# 29 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/cgraph.h" 1
# 24 "../../gcc/cgraph.h"
# 1 "../../gcc/profile-count.h" 1
# 25 "../../gcc/cgraph.h" 2
# 1 "../../gcc/ipa-ref.h" 1
# 24 "../../gcc/ipa-ref.h"
struct cgraph_node;
class varpool_node;
class symtab_node;



enum ipa_ref_use
{
  IPA_REF_LOAD,
  IPA_REF_STORE,
  IPA_REF_ADDR,
  IPA_REF_ALIAS,
  IPA_REF_CHKP
};


struct ipa_ref
{
public:

  void remove_reference ();



  bool cannot_lead_to_return ();


  bool address_matters_p ();


  struct ipa_ref_list * referring_ref_list (void);


  struct ipa_ref_list * referred_ref_list (void);

  symtab_node *referring;
  symtab_node *referred;
  gimple *stmt;
  unsigned int lto_stmt_uid;
  unsigned int referred_index;
  enum ipa_ref_use use:3;
  unsigned int speculative:1;
};

typedef struct ipa_ref ipa_ref_t;
typedef struct ipa_ref *ipa_ref_ptr;



struct ipa_ref_list
{
public:

  struct ipa_ref *first_reference (void)
  {
    if (!vec_safe_length (references))
      return 
# 80 "../../gcc/ipa-ref.h" 3 4
            __null
# 80 "../../gcc/ipa-ref.h"
                ;
    return &(*references)[0];
  }


  struct ipa_ref *first_referring (void)
  {
    if (!referring.length ())
      return 
# 88 "../../gcc/ipa-ref.h" 3 4
            __null
# 88 "../../gcc/ipa-ref.h"
                ;
    return referring[0];
  }


  struct ipa_ref *first_alias (void)
  {
    struct ipa_ref *r = first_referring ();

    return r && r->use == IPA_REF_ALIAS ? r : 
# 97 "../../gcc/ipa-ref.h" 3 4
                                             __null
# 97 "../../gcc/ipa-ref.h"
                                                 ;
  }


  struct ipa_ref *last_alias (void)
  {
    unsigned int i = 0;

    for(i = 0; i < referring.length (); i++)
      if (referring[i]->use != IPA_REF_ALIAS)
 break;

    return i == 0 ? 
# 109 "../../gcc/ipa-ref.h" 3 4
                   __null 
# 109 "../../gcc/ipa-ref.h"
                        : referring[i - 1];
  }


  bool inline has_aliases_p (void)
  {
    return first_alias ();
  }


  void clear (void)
  {
    referring.create (0);
    references = 
# 122 "../../gcc/ipa-ref.h" 3 4
                __null
# 122 "../../gcc/ipa-ref.h"
                    ;
  }


  unsigned int nreferences (void)
  {
    return vec_safe_length (references);
  }


  vec<ipa_ref_t, va_gc> *references;


  vec<ipa_ref_ptr> referring;
};
# 26 "../../gcc/cgraph.h" 2
# 1 "../../gcc/../include/plugin-api.h" 1
# 41 "../../gcc/../include/plugin-api.h"
extern "C"
{




enum ld_plugin_status
{
  LDPS_OK = 0,
  LDPS_NO_SYMS,
  LDPS_BAD_HANDLE,
  LDPS_ERR

};



enum ld_plugin_api_version
{
  LD_PLUGIN_API_VERSION = 1
};



enum ld_plugin_output_file_type
{
  LDPO_REL,
  LDPO_EXEC,
  LDPO_DYN,
  LDPO_PIE
};



struct ld_plugin_input_file
{
  const char *name;
  int fd;
  off_t offset;
  off_t filesize;
  void *handle;
};



struct ld_plugin_symbol
{
  char *name;
  char *version;
  int def;
  int visibility;
  uint64_t size;
  char *comdat_key;
  int resolution;
};



struct ld_plugin_section
{
  const void* handle;
  unsigned int shndx;
};



enum ld_plugin_symbol_kind
{
  LDPK_DEF,
  LDPK_WEAKDEF,
  LDPK_UNDEF,
  LDPK_WEAKUNDEF,
  LDPK_COMMON
};



enum ld_plugin_symbol_visibility
{
  LDPV_DEFAULT,
  LDPV_PROTECTED,
  LDPV_INTERNAL,
  LDPV_HIDDEN
};



enum ld_plugin_symbol_resolution
{
  LDPR_UNKNOWN = 0,


  LDPR_UNDEF,



  LDPR_PREVAILING_DEF,




  LDPR_PREVAILING_DEF_IRONLY,



  LDPR_PREEMPTED_REG,


  LDPR_PREEMPTED_IR,


  LDPR_RESOLVED_IR,



  LDPR_RESOLVED_EXEC,


  LDPR_RESOLVED_DYN,





  LDPR_PREVAILING_DEF_IRONLY_EXP
};



typedef
enum ld_plugin_status
(*ld_plugin_claim_file_handler) (
  const struct ld_plugin_input_file *file, int *claimed);



typedef
enum ld_plugin_status
(*ld_plugin_all_symbols_read_handler) (void);



typedef
enum ld_plugin_status
(*ld_plugin_cleanup_handler) (void);



typedef
enum ld_plugin_status
(*ld_plugin_register_claim_file) (ld_plugin_claim_file_handler handler);



typedef
enum ld_plugin_status
(*ld_plugin_register_all_symbols_read) (
  ld_plugin_all_symbols_read_handler handler);



typedef
enum ld_plugin_status
(*ld_plugin_register_cleanup) (ld_plugin_cleanup_handler handler);



typedef
enum ld_plugin_status
(*ld_plugin_add_symbols) (void *handle, int nsyms,
                          const struct ld_plugin_symbol *syms);




typedef
enum ld_plugin_status
(*ld_plugin_get_input_file) (const void *handle,
                             struct ld_plugin_input_file *file);

typedef
enum ld_plugin_status
(*ld_plugin_get_view) (const void *handle, const void **viewp);



typedef
enum ld_plugin_status
(*ld_plugin_release_input_file) (const void *handle);



typedef
enum ld_plugin_status
(*ld_plugin_get_symbols) (const void *handle, int nsyms,
                          struct ld_plugin_symbol *syms);



typedef
enum ld_plugin_status
(*ld_plugin_add_input_file) (const char *pathname);



typedef
enum ld_plugin_status
(*ld_plugin_add_input_library) (const char *libname);



typedef
enum ld_plugin_status
(*ld_plugin_set_extra_library_path) (const char *path);



typedef
enum ld_plugin_status
(*ld_plugin_message) (int level, const char *format, ...);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_count) (const void* handle, unsigned int *count);





typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_type) (const struct ld_plugin_section section,
                                     unsigned int *type);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_name) (const struct ld_plugin_section section,
                                     char **section_name_ptr);







typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_contents) (const struct ld_plugin_section section,
                                         const unsigned char **section_contents,
                                         size_t* len);







typedef
enum ld_plugin_status
(*ld_plugin_update_section_order) (const struct ld_plugin_section *section_list,
       unsigned int num_sections);





typedef
enum ld_plugin_status
(*ld_plugin_allow_section_ordering) (void);






typedef
enum ld_plugin_status
(*ld_plugin_allow_unique_segment_for_sections) (void);
# 339 "../../gcc/../include/plugin-api.h"
typedef
enum ld_plugin_status
(*ld_plugin_unique_segment_for_sections) (
    const char* segment_name,
    uint64_t segment_flags,
    uint64_t segment_alignment,
    const struct ld_plugin_section * section_list,
    unsigned int num_sections);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_alignment) (const struct ld_plugin_section section,
                                          unsigned int *addralign);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_size) (const struct ld_plugin_section section,
                                     uint64_t *secsize);

typedef
enum ld_plugin_status
(*ld_plugin_new_input_handler) (const struct ld_plugin_input_file *file);






typedef
enum ld_plugin_status
(*ld_plugin_register_new_input) (ld_plugin_new_input_handler handler);


enum ld_plugin_level
{
  LDPL_INFO,
  LDPL_WARNING,
  LDPL_ERROR,
  LDPL_FATAL
};



enum ld_plugin_tag
{
  LDPT_NULL = 0,
  LDPT_API_VERSION = 1,
  LDPT_GOLD_VERSION = 2,
  LDPT_LINKER_OUTPUT = 3,
  LDPT_OPTION = 4,
  LDPT_REGISTER_CLAIM_FILE_HOOK = 5,
  LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK = 6,
  LDPT_REGISTER_CLEANUP_HOOK = 7,
  LDPT_ADD_SYMBOLS = 8,
  LDPT_GET_SYMBOLS = 9,
  LDPT_ADD_INPUT_FILE = 10,
  LDPT_MESSAGE = 11,
  LDPT_GET_INPUT_FILE = 12,
  LDPT_RELEASE_INPUT_FILE = 13,
  LDPT_ADD_INPUT_LIBRARY = 14,
  LDPT_OUTPUT_NAME = 15,
  LDPT_SET_EXTRA_LIBRARY_PATH = 16,
  LDPT_GNU_LD_VERSION = 17,
  LDPT_GET_VIEW = 18,
  LDPT_GET_INPUT_SECTION_COUNT = 19,
  LDPT_GET_INPUT_SECTION_TYPE = 20,
  LDPT_GET_INPUT_SECTION_NAME = 21,
  LDPT_GET_INPUT_SECTION_CONTENTS = 22,
  LDPT_UPDATE_SECTION_ORDER = 23,
  LDPT_ALLOW_SECTION_ORDERING = 24,
  LDPT_GET_SYMBOLS_V2 = 25,
  LDPT_ALLOW_UNIQUE_SEGMENT_FOR_SECTIONS = 26,
  LDPT_UNIQUE_SEGMENT_FOR_SECTIONS = 27,
  LDPT_GET_SYMBOLS_V3 = 28,
  LDPT_GET_INPUT_SECTION_ALIGNMENT = 29,
  LDPT_GET_INPUT_SECTION_SIZE = 30,
  LDPT_REGISTER_NEW_INPUT_HOOK = 31
};



struct ld_plugin_tv
{
  enum ld_plugin_tag tv_tag;
  union
  {
    int tv_val;
    const char *tv_string;
    ld_plugin_register_claim_file tv_register_claim_file;
    ld_plugin_register_all_symbols_read tv_register_all_symbols_read;
    ld_plugin_register_cleanup tv_register_cleanup;
    ld_plugin_add_symbols tv_add_symbols;
    ld_plugin_get_symbols tv_get_symbols;
    ld_plugin_add_input_file tv_add_input_file;
    ld_plugin_message tv_message;
    ld_plugin_get_input_file tv_get_input_file;
    ld_plugin_get_view tv_get_view;
    ld_plugin_release_input_file tv_release_input_file;
    ld_plugin_add_input_library tv_add_input_library;
    ld_plugin_set_extra_library_path tv_set_extra_library_path;
    ld_plugin_get_input_section_count tv_get_input_section_count;
    ld_plugin_get_input_section_type tv_get_input_section_type;
    ld_plugin_get_input_section_name tv_get_input_section_name;
    ld_plugin_get_input_section_contents tv_get_input_section_contents;
    ld_plugin_update_section_order tv_update_section_order;
    ld_plugin_allow_section_ordering tv_allow_section_ordering;
    ld_plugin_allow_unique_segment_for_sections tv_allow_unique_segment_for_sections;
    ld_plugin_unique_segment_for_sections tv_unique_segment_for_sections;
    ld_plugin_get_input_section_alignment tv_get_input_section_alignment;
    ld_plugin_get_input_section_size tv_get_input_section_size;
    ld_plugin_register_new_input tv_register_new_input;
  } tv_u;
};



typedef
enum ld_plugin_status
(*ld_plugin_onload) (struct ld_plugin_tv *tv);


}
# 27 "../../gcc/cgraph.h" 2

class ipa_opt_pass_d;
typedef ipa_opt_pass_d *ipa_opt_pass;



enum symtab_type
{
  SYMTAB_SYMBOL,
  SYMTAB_FUNCTION,
  SYMTAB_VARIABLE
};




struct section_hash_entry
{
  int ref_count;
  char *name;


};

struct section_name_hasher : ggc_ptr_hash<section_hash_entry>
{
  typedef const char *compare_type;

  static hashval_t hash (section_hash_entry *);
  static bool equal (section_hash_entry *, const char *);
};

enum availability
{

  AVAIL_UNSET,

  AVAIL_NOT_AVAILABLE,





  AVAIL_INTERPOSABLE,


  AVAIL_AVAILABLE,



  AVAIL_LOCAL
};


enum symbol_partitioning_class
{


   SYMBOL_EXTERNAL,

   SYMBOL_PARTITION,


   SYMBOL_DUPLICATE
};



class

  symtab_node
{
public:

  const char *name () const;


  const char *dump_name () const;


  const char *asm_name () const;


  const char *dump_asm_name () const;



  void register_symbol (void);


  void remove (void);


  void dump (FILE *f);


  void __attribute__ ((__used__)) debug (void);


  void __attribute__ ((__used__)) verify (void);




  ipa_ref *create_reference (symtab_node *referred_node,
        enum ipa_ref_use use_type);




  ipa_ref *create_reference (symtab_node *referred_node,
        enum ipa_ref_use use_type, gimple *stmt);




  ipa_ref *maybe_create_reference (tree val, gimple *stmt);


  void clone_references (symtab_node *node);





  void clone_referring (symtab_node *node);


  ipa_ref *clone_reference (ipa_ref *ref, gimple *stmt);



  ipa_ref *find_reference (symtab_node *referred_node, gimple *stmt,
      unsigned int lto_stmt_uid);


  void remove_stmt_references (gimple *stmt);





  void clear_stmts_in_references (void);


  void remove_all_references (void);


  void remove_all_referring (void);


  void dump_references (FILE *file);


  void dump_referring (FILE *);


  inline unsigned num_references (void)
  {
    return ref_list.references ? ref_list.references->length () : 0;
  }


  ipa_ref *iterate_reference (unsigned i, ipa_ref *&ref);


  ipa_ref *iterate_referring (unsigned i, ipa_ref *&ref);


  ipa_ref *iterate_direct_aliases (unsigned i, ipa_ref *&ref);



  bool semantically_equivalent_p (symtab_node *target);


  enum symbol_partitioning_class get_partitioning_class (void);


  tree get_comdat_group ()
    {
      return x_comdat_group;
    }


  tree get_comdat_group_id ()
    {
      if (x_comdat_group && ((enum tree_code) (x_comdat_group)->base.code) != IDENTIFIER_NODE)
 x_comdat_group = decl_assembler_name (x_comdat_group);
      return x_comdat_group;
    }


  void set_comdat_group (tree group)
    {
      ((void)(!(!group || ((enum tree_code) (group)->base.code) == IDENTIFIER_NODE || (tree_code_type[(int) (((enum tree_code) (group)->base.code))] == tcc_declaration)) ? fancy_abort (
                       "../../gcc/cgraph.h"
# 222 "../../gcc/cgraph.h"
      ,
                       223
# 222 "../../gcc/cgraph.h"
      , __FUNCTION__), 0 : 0))
                        ;
      x_comdat_group = group;
    }


  const char * get_section ()
    {
      if (!x_section)
 return 
# 231 "../../gcc/cgraph.h" 3 4
       __null
# 231 "../../gcc/cgraph.h"
           ;
      return x_section->name;
    }


  void remove_from_same_comdat_group (void);


  void add_to_same_comdat_group (symtab_node *old_node);


  void dissolve_same_comdat_group_list (void);



  bool used_from_object_file_p (void);






  symtab_node *ultimate_alias_target (enum availability *avail = 
# 253 "../../gcc/cgraph.h" 3 4
                                                                __null
# 253 "../../gcc/cgraph.h"
                                                                    ,
          struct symtab_node *ref = 
# 254 "../../gcc/cgraph.h" 3 4
                                   __null
# 254 "../../gcc/cgraph.h"
                                       );


  inline symtab_node *next_defined_symbol (void);





  bool resolve_alias (symtab_node *target, bool transparent = false);



  void fixup_same_cpp_alias_visibility (symtab_node *target);




  bool call_for_symbol_and_aliases (bool (*callback) (symtab_node *, void *),
        void *data,
        bool include_overwrite);




  symtab_node *noninterposable_alias (void);


  inline symtab_node *get_alias_target (void);


  void set_section (const char *section);




  void set_section_for_node (const char *section);


  void set_init_priority (priority_type priority);


  priority_type get_init_priority ();


  enum availability get_availability (symtab_node *ref = 
# 299 "../../gcc/cgraph.h" 3 4
                                                        __null
# 299 "../../gcc/cgraph.h"
                                                            );




  bool binds_to_current_def_p (symtab_node *ref = 
# 304 "../../gcc/cgraph.h" 3 4
                                                 __null
# 304 "../../gcc/cgraph.h"
                                                     );


  void make_decl_local (void);


  void copy_visibility_from (symtab_node *n);





  unsigned int definition_alignment ();


  bool can_increase_alignment_p ();


  void increase_alignment (unsigned int align);


  bool has_aliases_p (void);



  bool real_symbol_p (void);


  bool output_to_lto_symbol_table_p (void);




  bool needed_p (void);



  bool native_rtl_p () const;


  bool referred_to_p (bool include_self = true);







  inline bool
  can_be_discarded_p (void)
  {
    return (((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 355, __FUNCTION__))->decl_common.decl_flag_1)
     || ((get_comdat_group ()
   || ((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "../../gcc/cgraph.h", 357, __FUNCTION__))->decl_with_vis.common_flag)
   || (decl_section_name (decl) && ((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "../../gcc/cgraph.h", 358, __FUNCTION__))->decl_with_vis.weak_flag)))
  && ((resolution != LDPR_PREVAILING_DEF
       && resolution != LDPR_PREVAILING_DEF_IRONLY_EXP)
      || global_options.x_flag_incremental_link)
  && resolution != LDPR_PREVAILING_DEF_IRONLY));
  }




  inline bool comdat_local_p (void)
  {
    return (same_comdat_group && !((decl)->base.public_flag));
  }


  inline bool in_same_comdat_group_p (symtab_node *target);


  bool nonzero_address ();
# 387 "../../gcc/cgraph.h"
  int equal_address_to (symtab_node *s2, bool memory_accessed = false);



  bool address_matters_p ();




  bool address_can_be_compared_p (void);



  static inline symtab_node *get (const_tree decl)
  {


    ((void)(!(((enum tree_code) (decl)->base.code) == FUNCTION_DECL || (((enum tree_code) (decl)->base.code) == VAR_DECL && (((decl)->base.static_flag) || ((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 407, __FUNCTION__))->decl_common.decl_flag_1) || global_options.x_in_lto_p))) ? fancy_abort (


                  "../../gcc/cgraph.h"
# 404 "../../gcc/cgraph.h"
    ,


                  407
# 404 "../../gcc/cgraph.h"
    , __FUNCTION__), 0 : 0))


                   ;



    ((void)(!(!decl->decl_with_vis.symtab_node || decl->decl_with_vis.symtab_node->decl == decl) ? fancy_abort (
                                                    "../../gcc/cgraph.h"
# 411 "../../gcc/cgraph.h"
    ,
                                                    412
# 411 "../../gcc/cgraph.h"
    , __FUNCTION__), 0 : 0))
                                                     ;
    return decl->decl_with_vis.symtab_node;
  }



  static inline symtab_node * get_create (tree node);



  static symtab_node *get_for_asmname (const_tree asmname);


  static __attribute__ ((__used__)) void verify_symtab_nodes (void);


  static inline void checking_verify_symtab_nodes (void);


  enum symtab_type type : 8;


  enum ld_plugin_symbol_resolution resolution : 8;





  unsigned definition : 1;


  unsigned alias : 1;
# 465 "../../gcc/cgraph.h"
  unsigned transparent_alias : 1;

  unsigned weakref : 1;






  unsigned cpp_implicit_alias : 1;


  unsigned analyzed : 1;

  unsigned writeonly : 1;


  unsigned refuse_visibility_changes : 1;




  unsigned externally_visible : 1;

  unsigned no_reorder : 1;


  unsigned force_output : 1;



  unsigned forced_by_abi : 1;

  unsigned unique_name : 1;


  unsigned implicit_section : 1;


  unsigned body_removed : 1;






  unsigned used_from_other_partition : 1;



  unsigned in_other_partition : 1;






  unsigned address_taken : 1;

  unsigned in_init_priority_hash : 1;



  unsigned need_lto_streaming : 1;


  unsigned offloadable : 1;



  int order;


  tree decl;


  symtab_node *next;
  symtab_node *previous;
# 553 "../../gcc/cgraph.h"
  symtab_node *next_sharing_asm_name;
  symtab_node *previous_sharing_asm_name;


  symtab_node *same_comdat_group;


  ipa_ref_list ref_list;




  tree alias_target;


  struct lto_file_decl_data * lto_file_data;

  void * aux;


  tree x_comdat_group;


  section_hash_entry *x_section;

protected:

  void dump_base (FILE *);


  bool __attribute__ ((__used__)) verify_base (void);



  void unregister (void);




  struct symbol_priority_map *priority_info (void);


  bool call_for_symbol_and_aliases_1 (bool (*callback) (symtab_node *, void *),
          void *data,
          bool include_overwrite);
private:

  static bool set_section (symtab_node *n, void *s);


  static bool set_implicit_section (symtab_node *n, void *);


  static bool noninterposable_alias (symtab_node *node, void *data);


  symtab_node *ultimate_alias_target_1 (enum availability *avail = 
# 609 "../../gcc/cgraph.h" 3 4
                                                                  __null
# 609 "../../gcc/cgraph.h"
                                                                      ,
     symtab_node *ref = 
# 610 "../../gcc/cgraph.h" 3 4
                       __null
# 610 "../../gcc/cgraph.h"
                           );


  const char *get_dump_name (bool asm_name_p) const;
};

inline void
symtab_node::checking_verify_symtab_nodes (void)
{
  if (global_options.x_flag_checking)
    symtab_node::verify_symtab_nodes ();
}







struct lto_file_decl_data;

extern const char * const cgraph_availability_names[];
extern const char * const ld_plugin_symbol_resolution_names[];
extern const char * const tls_model_names[];
# 648 "../../gcc/cgraph.h"
struct cgraph_thunk_info {

  long fixed_offset;



  long virtual_value;



  tree alias;



  bool this_adjusting;







  bool virtual_offset_p;


  bool add_pointer_bounds_args;



  bool thunk_p;
};




struct cgraph_local_info {


  unsigned local : 1;


  unsigned versionable : 1;



  unsigned can_change_signature : 1;



  unsigned redefined_extern_inline : 1;


  unsigned tm_may_enter_irr : 1;
};




struct cgraph_global_info {


  cgraph_node *inlined_to;
};



struct ipa_replace_map
{

  tree old_tree;

  tree new_tree;

  int parm_num;

  bool replace_p;

  bool ref_p;
};

struct cgraph_clone_info
{
  vec<ipa_replace_map *, va_gc> *tree_map;
  bitmap args_to_skip;
  bitmap combined_args_to_skip;
};

enum cgraph_simd_clone_arg_type
{
  SIMD_CLONE_ARG_TYPE_VECTOR,
  SIMD_CLONE_ARG_TYPE_UNIFORM,

  SIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_VARIABLE_STEP,


  SIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_REF_VARIABLE_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_UVAL_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_UVAL_VARIABLE_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_VAL_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_VAL_VARIABLE_STEP,
  SIMD_CLONE_ARG_TYPE_MASK
};




struct cgraph_simd_clone_arg {


  tree orig_arg;



  tree orig_type;







  tree vector_arg;


  tree vector_type;
# 783 "../../gcc/cgraph.h"
  tree simd_array;



  enum cgraph_simd_clone_arg_type arg_type;





  long linear_step;


  unsigned int alignment;
};



struct cgraph_simd_clone {

  unsigned int simdlen;



  unsigned int nargs;


  unsigned int vecsize_int;


  unsigned int vecsize_float;




  machine_mode mask_mode;




  unsigned char vecsize_mangle;



  unsigned int inbranch : 1;


  cgraph_node *prev_clone, *next_clone;


  cgraph_node *origin;


  cgraph_simd_clone_arg args[1];
};


struct cgraph_function_version_info {

  cgraph_node *this_node;



  cgraph_function_version_info *prev;



  cgraph_function_version_info *next;
# 860 "../../gcc/cgraph.h"
  tree dispatcher_resolver;
};




enum cgraph_inline_failed_t {
# 1 "../../gcc/cif-code.def" 1
# 31 "../../gcc/cif-code.def"
CIF_OK,


CIF_UNSPECIFIED,



CIF_FUNCTION_NOT_CONSIDERED,



CIF_FUNCTION_NOT_OPTIMIZED,



CIF_BODY_NOT_AVAILABLE,



CIF_REDEFINED_EXTERN_INLINE,




CIF_FUNCTION_NOT_INLINABLE,



CIF_OVERWRITABLE,



CIF_FUNCTION_NOT_INLINE_CANDIDATE,



CIF_LARGE_FUNCTION_GROWTH_LIMIT,

CIF_LARGE_STACK_FRAME_GROWTH_LIMIT,

CIF_MAX_INLINE_INSNS_SINGLE_LIMIT,

CIF_MAX_INLINE_INSNS_AUTO_LIMIT,

CIF_INLINE_UNIT_GROWTH_LIMIT,



CIF_RECURSIVE_INLINING,



CIF_UNLIKELY_CALL,



CIF_NOT_DECLARED_INLINED,



CIF_MISMATCHED_ARGUMENTS,



CIF_LTO_MISMATCHED_DECLARATIONS,



CIF_VARIADIC_THUNK,



CIF_ORIGINALLY_INDIRECT_CALL,



CIF_INDIRECT_UNKNOWN_CALL,



CIF_EH_PERSONALITY,




CIF_NON_CALL_EXCEPTIONS,



CIF_TARGET_OPTION_MISMATCH,



CIF_OPTIMIZATION_MISMATCH,



CIF_USES_COMDAT_LOCAL,



CIF_ATTRIBUTE_MISMATCH,



CIF_UNREACHABLE,



CIF_CHKP,
# 868 "../../gcc/cgraph.h" 2
  CIF_N_REASONS
};

enum cgraph_inline_failed_type_t
{
  CIF_FINAL_NORMAL = 0,
  CIF_FINAL_ERROR
};

struct cgraph_edge;

struct cgraph_edge_hasher : ggc_ptr_hash<cgraph_edge>
{
  typedef gimple *compare_type;

  static hashval_t hash (cgraph_edge *);
  static hashval_t hash (gimple *);
  static bool equal (cgraph_edge *, gimple *);
};




struct cgraph_node : public symtab_node {
public:




  bool remove_symbol_and_inline_clones (cgraph_node *forbidden_node = 
# 897 "../../gcc/cgraph.h" 3 4
                                                                     __null
# 897 "../../gcc/cgraph.h"
                                                                         );



  void record_stmt_references (gimple *stmt);






  void set_call_stmt_including_clones (gimple *old_stmt, gcall *new_stmt,
           bool update_speculative = true);






  cgraph_node *function_symbol (enum availability *avail = 
# 916 "../../gcc/cgraph.h" 3 4
                                                          __null
# 916 "../../gcc/cgraph.h"
                                                              ,
    struct symtab_node *ref = 
# 917 "../../gcc/cgraph.h" 3 4
                             __null
# 917 "../../gcc/cgraph.h"
                                 );







  cgraph_node *function_or_virtual_thunk_symbol
    (enum availability *avail = 
# 926 "../../gcc/cgraph.h" 3 4
                               __null
# 926 "../../gcc/cgraph.h"
                                   ,
     struct symtab_node *ref = 
# 927 "../../gcc/cgraph.h" 3 4
                              __null
# 927 "../../gcc/cgraph.h"
                                  );
# 945 "../../gcc/cgraph.h"
  cgraph_node *create_clone (tree decl, profile_count count,
        bool update_original,
        vec<cgraph_edge *> redirect_callers,
        bool call_duplication_hook,
        cgraph_node *new_inlined_to,
        bitmap args_to_skip, const char *suffix = 
# 950 "../../gcc/cgraph.h" 3 4
                                                 __null
# 950 "../../gcc/cgraph.h"
                                                     );



  cgraph_node *create_virtual_clone (vec<cgraph_edge *> redirect_callers,
         vec<ipa_replace_map *, va_gc> *tree_map,
         bitmap args_to_skip, const char * suffix);



  cgraph_node *find_replacement (void);
# 975 "../../gcc/cgraph.h"
  cgraph_node *create_version_clone (tree new_decl,
        vec<cgraph_edge *> redirect_callers,
        bitmap bbs_to_copy,
        const char *suffix = 
# 978 "../../gcc/cgraph.h" 3 4
                            __null
# 978 "../../gcc/cgraph.h"
                                );
# 998 "../../gcc/cgraph.h"
  cgraph_node *create_version_clone_with_body
    (vec<cgraph_edge *> redirect_callers,
     vec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip,
     bool skip_return, bitmap bbs_to_copy, basic_block new_entry_block,
     const char *clone_name);



  cgraph_function_version_info *insert_new_function_version (void);


  cgraph_function_version_info *function_version (void);



  void analyze (void);




  cgraph_node * create_thunk (tree alias, tree, bool this_adjusting,
         long fixed_offset,
         long virtual_value,
         tree virtual_offset,
         tree real_alias);



  inline cgraph_node *get_alias_target (void);







  cgraph_node *ultimate_alias_target (availability *availability = 
# 1034 "../../gcc/cgraph.h" 3 4
                                                                  __null
# 1034 "../../gcc/cgraph.h"
                                                                      ,
          symtab_node *ref = 
# 1035 "../../gcc/cgraph.h" 3 4
                            __null
# 1035 "../../gcc/cgraph.h"
                                );






  bool expand_thunk (bool output_asm_thunks, bool force_gimple_thunk);



  void expand_all_artificial_thunks ();


  void assemble_thunks_and_aliases (void);


  void expand (void);







  void reset (void);



  void create_wrapper (cgraph_node *target);


  void __attribute__ ((__used__)) verify_node (void);


  void remove (void);


  void dump (FILE *f);


  void __attribute__ ((__used__)) debug (void);



  bool get_untransformed_body (void);




  bool get_body (void);





  void release_body (bool keep_arguments = false);


  struct function *get_fun (void);


  void unnest (void);


  void make_local (void);


  void mark_address_taken (void);


  void set_fini_priority (priority_type priority);


  priority_type get_fini_priority (void);


  cgraph_edge *create_edge (cgraph_node *callee,
       gcall *call_stmt, profile_count count);




  cgraph_edge *create_indirect_edge (gcall *call_stmt, int ecf_flags,
         profile_count count,
         bool compute_indirect_info = true);




  void create_edge_including_clones (cgraph_node *callee,
         gimple *old_stmt, gcall *stmt,
         profile_count count,
         cgraph_inline_failed_t reason);



  cgraph_edge *get_edge (gimple *call_stmt);



  vec<cgraph_edge *> collect_callers (void);


  void remove_callers (void);


  void remove_callees (void);



  enum availability get_availability (symtab_node *ref = 
# 1146 "../../gcc/cgraph.h" 3 4
                                                        __null
# 1146 "../../gcc/cgraph.h"
                                                            );



  bool set_nothrow_flag (bool nothrow);



  bool set_malloc_flag (bool malloc_p);
# 1165 "../../gcc/cgraph.h"
  bool set_const_flag (bool set_const, bool looping);







  bool set_pure_flag (bool pure, bool looping);





  bool call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,
            void *),
        void *data, bool include_overwritable);





  bool call_for_symbol_thunks_and_aliases (bool (*callback) (cgraph_node *node,
            void *data),
        void *data,
        bool include_overwritable,
        bool exclude_virtual_thunks = false);



  inline void mark_force_output (void);


  bool local_p (void);





  bool can_be_local_p (void);



  bool cannot_return_p (void);





  bool only_called_directly_p (void);




  inline bool only_called_directly_or_aliased_p (void);
# 1237 "../../gcc/cgraph.h"
  bool will_be_removed_from_program_if_no_direct_calls_p
  (bool will_inline = false);




  bool can_remove_if_no_direct_calls_and_refs_p (void);





  bool can_remove_if_no_direct_calls_p (bool will_inline = false);






  inline bool has_gimple_body_p (void);


  bool optimize_for_size_p (void);


  static void dump_cgraph (FILE *f);


  static inline
  void debug_cgraph (void)
  {
    dump_cgraph (
# 1268 "../../gcc/cgraph.h" 3 4
                stderr
# 1268 "../../gcc/cgraph.h"
                      );
  }



  static void record_function_versions (tree decl1, tree decl2);



  static void delete_function_version_by_decl (tree decl);
# 1290 "../../gcc/cgraph.h"
  static void add_new_function (tree fndecl, bool lowered);


  static inline cgraph_node *get (const_tree decl)
  {
    ((void)(!(((enum tree_code) (decl)->base.code) == FUNCTION_DECL) ? fancy_abort ("../../gcc/cgraph.h", 1295, __FUNCTION__), 0 : 0));
    return dyn_cast <cgraph_node *> (symtab_node::get (decl));
  }





  static void finalize_function (tree, bool);


  static cgraph_node * create (tree decl);



  static cgraph_node * get_create (tree);


  static cgraph_local_info *local_info (tree decl);


  static struct cgraph_rtl_info *rtl_info (tree);



  static cgraph_node *get_for_asmname (tree asmname);






  static cgraph_node * create_same_body_alias (tree alias, tree decl);


  static void __attribute__ ((__used__)) verify_cgraph_nodes (void);


  static inline void checking_verify_cgraph_nodes (void);


  static bool make_local (cgraph_node *node, void *);




  static cgraph_node *create_alias (tree alias, tree target);


  static bool has_thunk_p (cgraph_node *node, void *);

  cgraph_edge *callees;
  cgraph_edge *callers;


  cgraph_edge *indirect_calls;

  cgraph_node *origin;

  cgraph_node *nested;

  cgraph_node *next_nested;

  cgraph_node *next_sibling_clone;
  cgraph_node *prev_sibling_clone;
  cgraph_node *clones;
  cgraph_node *clone_of;



  cgraph_node *instrumented_version;


  tree orig_decl;


  hash_table<cgraph_edge_hasher> * call_site_hash;

  tree former_clone_of;



  cgraph_simd_clone *simdclone;

  cgraph_node *simd_clones;




  vec<ipa_opt_pass> ipa_transforms_to_apply;

  cgraph_local_info local;
  cgraph_global_info global;
  struct cgraph_rtl_info *rtl;
  cgraph_clone_info clone;
  cgraph_thunk_info thunk;


  profile_count count;


  int count_materialization_scale;

  int uid;

  int summary_uid;

  unsigned int profile_id;

  int tp_first_run;



  unsigned used_as_abstract_origin : 1;

  unsigned lowered : 1;


  unsigned process : 1;


  enum node_frequency frequency : 2;

  unsigned only_called_at_startup : 1;

  unsigned only_called_at_exit : 1;




  unsigned tm_clone : 1;

  unsigned dispatcher_function : 1;


  unsigned calls_comdat_local : 1;

  unsigned icf_merged: 1;


  unsigned instrumentation_clone : 1;



  unsigned nonfreeing_fn : 1;

  unsigned merged_comdat : 1;

  unsigned parallelized_function : 1;

  unsigned split_part : 1;

  unsigned indirect_call_target : 1;

private:

  bool call_for_symbol_and_aliases_1 (bool (*callback) (cgraph_node *,
              void *),
          void *data, bool include_overwritable);
};



struct cgraph_node_set_def
{
  hash_map<cgraph_node *, size_t> *map;
  vec<cgraph_node *> nodes;
};

typedef cgraph_node_set_def *cgraph_node_set;
typedef struct varpool_node_set_def *varpool_node_set;

class varpool_node;



struct varpool_node_set_def
{
  hash_map<varpool_node *, size_t> * map;
  vec<varpool_node *> nodes;
};


struct cgraph_node_set_iterator
{
  cgraph_node_set set;
  unsigned index;
};


struct varpool_node_set_iterator
{
  varpool_node_set set;
  unsigned index;
};





class ipa_polymorphic_call_context {
public:



  long offset;
  long speculative_offset;
  tree outer_type;
  tree speculative_outer_type;

  unsigned maybe_in_construction : 1;

  unsigned maybe_derived_type : 1;


  unsigned speculative_maybe_derived_type : 1;


  unsigned invalid : 1;

  unsigned dynamic : 1;


  ipa_polymorphic_call_context ();

  ipa_polymorphic_call_context (cgraph_edge *e);



  ipa_polymorphic_call_context (tree cst, tree otr_type = 
# 1524 "../../gcc/cgraph.h" 3 4
                                                         __null
# 1524 "../../gcc/cgraph.h"
                                                             ,
    long offset = 0);



  ipa_polymorphic_call_context (tree fndecl, tree ref, gimple *stmt,
    tree *instance = 
# 1530 "../../gcc/cgraph.h" 3 4
                    __null
# 1530 "../../gcc/cgraph.h"
                        );



  bool get_dynamic_type (tree, tree, tree, gimple *);


  void clear_speculation ();



  void clear_outer_type (tree otr_type = 
# 1541 "../../gcc/cgraph.h" 3 4
                                        __null
# 1541 "../../gcc/cgraph.h"
                                            );
# 1553 "../../gcc/cgraph.h"
  bool restrict_to_inner_class (tree otr_type,
    bool consider_placement_new = true,
    bool consider_bases = true);


  void offset_by (long);


  void possible_dynamic_type_change (bool, tree otr_type = 
# 1561 "../../gcc/cgraph.h" 3 4
                                                          __null
# 1561 "../../gcc/cgraph.h"
                                                              );




  bool combine_with (ipa_polymorphic_call_context, tree otr_type = 
# 1566 "../../gcc/cgraph.h" 3 4
                                                                  __null
# 1566 "../../gcc/cgraph.h"
                                                                      );
  bool meet_with (ipa_polymorphic_call_context, tree otr_type = 
# 1567 "../../gcc/cgraph.h" 3 4
                                                               __null
# 1567 "../../gcc/cgraph.h"
                                                                   );


  bool useless_p () const;

  bool equal_to (const ipa_polymorphic_call_context &x) const;



  void dump (FILE *f, bool newline = true) const;
  void __attribute__ ((__used__)) debug () const;


  void stream_out (struct output_block *) const;
  void stream_in (struct lto_input_block *, struct data_in *data_in);

private:
  bool combine_speculation_with (tree, long, bool, tree);
  bool meet_speculation_with (tree, long, bool, tree);
  void set_by_decl (tree, long);
  bool set_by_invariant (tree, tree, long);
  bool speculation_consistent_p (tree, long, bool, tree) const;
  void make_speculative (tree otr_type = 
# 1589 "../../gcc/cgraph.h" 3 4
                                        __null
# 1589 "../../gcc/cgraph.h"
                                            );
};



struct cgraph_indirect_call_info
{


  long offset;

  ipa_polymorphic_call_context context;

  long otr_token;

  tree otr_type;

  int param_index;

  int ecf_flags;

  int common_target_id;

  int common_target_probability;



  unsigned polymorphic : 1;


  unsigned agg_contents : 1;

  unsigned member_ptr : 1;


  unsigned by_ref : 1;




  unsigned guaranteed_unmodified : 1;


  unsigned vptr_changed : 1;
};

struct
                cgraph_edge {
  friend class cgraph_node;


  void remove (void);




  void set_call_stmt (gcall *new_stmt, bool update_speculative = true);



  void redirect_callee (cgraph_node *n);





  void redirect_callee_duplicating_thunks (cgraph_node *n);





  cgraph_edge *make_direct (cgraph_node *callee);




  cgraph_edge *make_speculative (cgraph_node *n2, profile_count direct_count);


  void speculative_call_info (cgraph_edge *&direct, cgraph_edge *&indirect,
         ipa_ref *&reference);




  cgraph_edge *resolve_speculation (tree callee_decl = 
# 1675 "../../gcc/cgraph.h" 3 4
                                                      __null
# 1675 "../../gcc/cgraph.h"
                                                          );



  gimple *redirect_call_stmt_to_callee (void);



  cgraph_edge * clone (cgraph_node *n, gcall *call_stmt, unsigned stmt_uid,
         profile_count num, profile_count den,
         bool update_original);


  bool verify_count ();




  bool cannot_lead_to_return_p (void);


  bool recursive_p (void);


  bool maybe_hot_p (void);



  static unsigned int rebuild_edges (void);



  static void rebuild_references (void);


  profile_count count;
  cgraph_node *caller;
  cgraph_node *callee;
  cgraph_edge *prev_caller;
  cgraph_edge *next_caller;
  cgraph_edge *prev_callee;
  cgraph_edge *next_callee;
  gcall *call_stmt;


  cgraph_indirect_call_info *indirect_info;
  void * aux;


  enum cgraph_inline_failed_t inline_failed;


  unsigned int lto_stmt_uid;

  int uid;

  unsigned int indirect_inlining_edge : 1;


  unsigned int indirect_unknown_callee : 1;


  unsigned int call_stmt_cannot_inline_p : 1;

  unsigned int can_throw_external : 1;
# 1757 "../../gcc/cgraph.h"
  unsigned int speculative : 1;


  unsigned in_polymorphic_cdtor : 1;


  bool binds_to_current_def_p ();




  int frequency ();


  sreal sreal_frequency ();
private:

  void remove_caller (void);


  void remove_callee (void);



  void set_callee (cgraph_node *n);


  void dump_edge_flags (FILE *f);



  bool verify_corresponds_to_fndecl (tree decl);
};







class varpool_node : public symtab_node {
public:

  void dump (FILE *f);


  void __attribute__ ((__used__)) debug (void);


  void remove (void);


  void remove_initializer (void);

  void analyze (void);


  availability get_availability (symtab_node *ref = 
# 1814 "../../gcc/cgraph.h" 3 4
                                                   __null
# 1814 "../../gcc/cgraph.h"
                                                       );



  tree get_constructor (void);


  bool ctor_useable_for_folding_p (void);






  inline varpool_node *ultimate_alias_target
    (availability *availability = 
# 1829 "../../gcc/cgraph.h" 3 4
                                 __null
# 1829 "../../gcc/cgraph.h"
                                     , symtab_node *ref = 
# 1829 "../../gcc/cgraph.h" 3 4
                                                          __null
# 1829 "../../gcc/cgraph.h"
                                                              );


  inline varpool_node *get_alias_target (void);


  bool assemble_decl (void);





  void finalize_named_section_flags (void);




  bool call_for_symbol_and_aliases (bool (*callback) (varpool_node *, void *),
        void *data,
        bool include_overwritable);


  bool externally_visible_p (void);






  inline bool all_refs_explicit_p ();



  inline bool can_remove_if_no_refs_p (void);





  static void add (tree decl);


  static inline varpool_node *get (const_tree decl);




  static void finalize_decl (tree decl);



  static varpool_node * create_extra_name_alias (tree alias, tree decl);



  static varpool_node * create_alias (tree, tree);


  static void dump_varpool (FILE *f);


  static void __attribute__ ((__used__)) debug_varpool (void);


  static varpool_node *create_empty (void);


  static varpool_node *get_create (tree decl);


  static varpool_node *get_for_asmname (tree asmname);


  unsigned output : 1;



  unsigned need_bounds_init : 1;



  unsigned dynamically_initialized : 1;

  enum tls_model tls_model : 3;





  unsigned used_by_single_function : 1;

private:

  void assemble_aliases (void);


  bool call_for_symbol_and_aliases_1 (bool (*callback) (varpool_node *, void *),
          void *data,
          bool include_overwritable);
};



struct asm_node {



  asm_node *next;

  tree asm_str;

  int order;
};



template <>
template <>
inline bool
is_a_helper <cgraph_node *>::test (symtab_node *p)
{
  return p && p->type == SYMTAB_FUNCTION;
}



template <>
template <>
inline bool
is_a_helper <varpool_node *>::test (symtab_node *p)
{
  return p && p->type == SYMTAB_VARIABLE;
}







typedef void (*cgraph_edge_hook)(cgraph_edge *, void *);
typedef void (*cgraph_node_hook)(cgraph_node *, void *);
typedef void (*varpool_node_hook)(varpool_node *, void *);
typedef void (*cgraph_2edge_hook)(cgraph_edge *, cgraph_edge *, void *);
typedef void (*cgraph_2node_hook)(cgraph_node *, cgraph_node *, void *);

struct cgraph_edge_hook_list;
struct cgraph_node_hook_list;
struct varpool_node_hook_list;
struct cgraph_2edge_hook_list;
struct cgraph_2node_hook_list;


struct symbol_priority_map {
  priority_type init;
  priority_type fini;
};

enum symtab_state
{

  PARSING,

  CONSTRUCTION,

  LTO_STREAMING,

  IPA,

  IPA_SSA,


  IPA_SSA_AFTER_INLINING,

  EXPANSION,

  FINISHED
};

struct asmname_hasher : ggc_ptr_hash <symtab_node>
{
  typedef const_tree compare_type;

  static hashval_t hash (symtab_node *n);
  static bool equal (symtab_node *n, const_tree t);
};

class symbol_table
{
public:
  friend class symtab_node;
  friend class cgraph_node;
  friend class cgraph_edge;

  symbol_table (): cgraph_max_summary_uid (1)
  {
  }


  void initialize (void);


  inline asm_node *finalize_toplevel_asm (tree asm_str);


  void finalize_compilation_unit (void);






  void process_same_body_aliases (void);


  void compile (void);




  void process_new_functions (void);






  void materialize_all_clones (void);


  inline void register_symbol (symtab_node *node);

  inline void
  clear_asm_symbols (void)
  {
    asmnodes = 
# 2064 "../../gcc/cgraph.h" 3 4
              __null
# 2064 "../../gcc/cgraph.h"
                  ;
    asm_last_node = 
# 2065 "../../gcc/cgraph.h" 3 4
                   __null
# 2065 "../../gcc/cgraph.h"
                       ;
  }


  bool remove_unreachable_nodes (FILE *file);





  void remove_unreferenced_decls (void);


  inline void unregister (symtab_node *node);


  cgraph_node *create_empty (void);



  void release_symbol (cgraph_node *node, int uid);


  bool output_variables (void);



  void output_weakrefs (void);


  inline symtab_node *first_symbol (void);


  inline asm_node *
  first_asm_symbol (void)
  {
    return asmnodes;
  }


  inline symtab_node *first_defined_symbol (void);


  inline varpool_node *first_variable (void);


  inline varpool_node *next_variable (varpool_node *node);


  inline varpool_node *first_static_initializer (void);


  inline varpool_node *next_static_initializer (varpool_node *node);


  inline varpool_node *first_defined_variable (void);


  inline varpool_node *next_defined_variable (varpool_node *node);


  inline cgraph_node *first_defined_function (void);


  inline cgraph_node *next_defined_function (cgraph_node *node);


  inline cgraph_node *first_function (void);


  inline cgraph_node *next_function (cgraph_node *node);


  cgraph_node *first_function_with_gimple_body (void);


  inline cgraph_node *next_function_with_gimple_body (cgraph_node *node);


  cgraph_edge_hook_list *add_edge_removal_hook (cgraph_edge_hook hook,
      void *data);


  void remove_edge_removal_hook (cgraph_edge_hook_list *entry);


  cgraph_node_hook_list *add_cgraph_removal_hook (cgraph_node_hook hook,
        void *data);


  void remove_cgraph_removal_hook (cgraph_node_hook_list *entry);


  varpool_node_hook_list *add_varpool_removal_hook (varpool_node_hook hook,
          void *data);


  void remove_varpool_removal_hook (varpool_node_hook_list *entry);


  cgraph_node_hook_list *add_cgraph_insertion_hook (cgraph_node_hook hook,
          void *data);


  void remove_cgraph_insertion_hook (cgraph_node_hook_list *entry);


  varpool_node_hook_list *add_varpool_insertion_hook (varpool_node_hook hook,
            void *data);


  void remove_varpool_insertion_hook (varpool_node_hook_list *entry);


  cgraph_2edge_hook_list *add_edge_duplication_hook (cgraph_2edge_hook hook,
           void *data);

  void remove_edge_duplication_hook (cgraph_2edge_hook_list *entry);


  cgraph_2node_hook_list *add_cgraph_duplication_hook (cgraph_2node_hook hook,
             void *data);


  void remove_cgraph_duplication_hook (cgraph_2node_hook_list *entry);


  void call_edge_removal_hooks (cgraph_edge *e);


  void call_cgraph_insertion_hooks (cgraph_node *node);


  void call_cgraph_removal_hooks (cgraph_node *node);


  void call_cgraph_duplication_hooks (cgraph_node *node, cgraph_node *node2);


  void call_edge_duplication_hooks (cgraph_edge *cs1, cgraph_edge *cs2);


  void call_varpool_removal_hooks (varpool_node *node);


  void call_varpool_insertion_hooks (varpool_node *node);


  void symtab_prevail_in_asm_name_hash (symtab_node *node);


  void symtab_initialize_asm_name_hash (void);


  void change_decl_assembler_name (tree decl, tree name);


  void dump (FILE *f);


  inline __attribute__ ((__used__)) void debug (void)
  {
    dump (
# 2227 "../../gcc/cgraph.h" 3 4
         stderr
# 2227 "../../gcc/cgraph.h"
               );
  }



  static bool assembler_names_equal_p (const char *name1, const char *name2);

  int cgraph_count;
  int cgraph_max_uid;
  int cgraph_max_summary_uid;

  int edges_count;
  int edges_max_uid;

  symtab_node* nodes;
  asm_node* asmnodes;
  asm_node* asm_last_node;
  cgraph_node* free_nodes;



  cgraph_edge * free_edges;




  int order;


  bool global_info_ready;

  enum symtab_state state;

  bool function_flags_ready;

  bool cpp_implicit_aliases_done;


  hash_table<section_name_hasher> * section_hash;


  hash_table<asmname_hasher> *assembler_name_hash;


  hash_map<symtab_node *, symbol_priority_map> *init_priority_hash;

  FILE* dump_file;


  static char symbol_suffix_separator ();

  FILE* ipa_clones_dump_file;

  hash_set <const cgraph_node *> cloned_nodes;

private:

  inline cgraph_node * allocate_cgraph_symbol (void);




  cgraph_edge *create_edge (cgraph_node *caller, cgraph_node *callee,
       gcall *call_stmt, profile_count count,
       bool indir_unknown_callee);


  void free_edge (cgraph_edge *e);


  void insert_to_assembler_name_hash (symtab_node *node, bool with_clones);


  void unlink_from_assembler_name_hash (symtab_node *node, bool with_clones);


  static hashval_t decl_assembler_name_hash (const_tree asmname);


  static bool decl_assembler_name_equal (tree decl, const_tree asmname);

  friend struct asmname_hasher;


  cgraph_edge_hook_list * m_first_edge_removal_hook;

  cgraph_node_hook_list * m_first_cgraph_removal_hook;

  cgraph_2edge_hook_list * m_first_edge_duplicated_hook;

  cgraph_2node_hook_list * m_first_cgraph_duplicated_hook;

  cgraph_node_hook_list * m_first_cgraph_insertion_hook;

  varpool_node_hook_list * m_first_varpool_insertion_hook;

  varpool_node_hook_list * m_first_varpool_removal_hook;
};

extern symbol_table *symtab;

extern vec<cgraph_node *> cgraph_new_nodes;

inline hashval_t
asmname_hasher::hash (symtab_node *n)
{
  return symbol_table::decl_assembler_name_hash
    (decl_assembler_name (n->decl));
}

inline bool
asmname_hasher::equal (symtab_node *n, const_tree t)
{
  return symbol_table::decl_assembler_name_equal (n->decl, t);
}


void cgraph_c_finalize (void);
void release_function_body (tree);
cgraph_indirect_call_info *cgraph_allocate_init_indirect_info (void);

void cgraph_update_edges_for_call_stmt (gimple *, tree, gimple *);
bool cgraph_function_possibly_inlined_p (tree);

const char* cgraph_inline_failed_string (cgraph_inline_failed_t);
cgraph_inline_failed_type_t cgraph_inline_failed_type (cgraph_inline_failed_t);

extern bool gimple_check_call_matching_types (gimple *, tree, bool);


void cgraphunit_c_finalize (void);



basic_block init_lowered_empty_function (tree, bool, profile_count);

tree thunk_adjust (gimple_stmt_iterator *, tree, bool, long, tree);


tree clone_function_name_1 (const char *, const char *);
tree clone_function_name (tree decl, const char *);

void tree_function_versioning (tree, tree, vec<ipa_replace_map *, va_gc> *,
          bool, bitmap, bool, bitmap, basic_block);

void dump_callgraph_transformation (const cgraph_node *original,
        const cgraph_node *clone,
        const char *suffix);
tree cgraph_build_function_type_skip_args (tree orig_type, bitmap args_to_skip,
        bool skip_return);


int compute_call_stmt_bb_frequency (tree, basic_block bb);
void record_references_in_initializer (tree, bool);


void cgraph_build_static_cdtor (char which, tree body, int priority);
bool ipa_discover_readonly_nonaddressable_vars (void);


tree ctor_for_folding (tree);


extern bool chkp_function_instrumented_p (tree fndecl);


void initialize_inline_failed (struct cgraph_edge *);
bool speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining);



inline bool
symtab_node::real_symbol_p (void)
{
  cgraph_node *cnode;

  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2403, __FUNCTION__))->decl_common.abstract_flag))
    return false;
  if (transparent_alias && definition)
    return false;
  if (!is_a <cgraph_node *> (this))
    return true;
  cnode = dyn_cast <cgraph_node *> (this);
  if (cnode->global.inlined_to)
    return false;
  return true;
}




static inline bool
decl_in_symtab_p (const_tree decl)
{
  return (((enum tree_code) (decl)->base.code) == FUNCTION_DECL
          || (((enum tree_code) (decl)->base.code) == VAR_DECL
       && (((decl)->base.static_flag) || ((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2423, __FUNCTION__))->decl_common.decl_flag_1))));
}

inline bool
symtab_node::in_same_comdat_group_p (symtab_node *target)
{
  symtab_node *source = this;

  if (cgraph_node *cn = dyn_cast <cgraph_node *> (target))
    {
      if (cn->global.inlined_to)
 source = cn->global.inlined_to;
    }
  if (cgraph_node *cn = dyn_cast <cgraph_node *> (target))
    {
      if (cn->global.inlined_to)
 target = cn->global.inlined_to;
    }

  return source->get_comdat_group () == target->get_comdat_group ();
}



inline symtab_node *
symtab_node::get_alias_target (void)
{
  ipa_ref *ref = 
# 2450 "../../gcc/cgraph.h" 3 4
                __null
# 2450 "../../gcc/cgraph.h"
                    ;
  iterate_reference (0, ref);
  if (ref->use == IPA_REF_CHKP)
    iterate_reference (1, ref);
  ((void)(!(ref->use == IPA_REF_ALIAS) ? fancy_abort ("../../gcc/cgraph.h", 2454, __FUNCTION__), 0 : 0));
  return ref->referred;
}



inline symtab_node *
symtab_node::next_defined_symbol (void)
{
  symtab_node *node1 = next;

  for (; node1; node1 = node1->next)
    if (node1->definition)
      return node1;

  return 
# 2469 "../../gcc/cgraph.h" 3 4
        __null
# 2469 "../../gcc/cgraph.h"
            ;
}



inline ipa_ref *
symtab_node::iterate_reference (unsigned i, ipa_ref *&ref)
{
  vec_safe_iterate (ref_list.references, i, &ref);

  return ref;
}



inline ipa_ref *
symtab_node::iterate_referring (unsigned i, ipa_ref *&ref)
{
  ref_list.referring.iterate (i, &ref);

  return ref;
}



inline ipa_ref *
symtab_node::iterate_direct_aliases (unsigned i, ipa_ref *&ref)
{
  ref_list.referring.iterate (i, &ref);

  if (ref && ref->use != IPA_REF_ALIAS)
    return 
# 2500 "../../gcc/cgraph.h" 3 4
          __null
# 2500 "../../gcc/cgraph.h"
              ;

  return ref;
}



inline bool
symtab_node::has_aliases_p (void)
{
  ipa_ref *ref = 
# 2510 "../../gcc/cgraph.h" 3 4
                __null
# 2510 "../../gcc/cgraph.h"
                    ;

  return (iterate_direct_aliases (0, ref) != 
# 2512 "../../gcc/cgraph.h" 3 4
                                            __null
# 2512 "../../gcc/cgraph.h"
                                                );
}




inline bool
resolution_used_from_other_file_p (enum ld_plugin_symbol_resolution resolution)
{
  return (resolution == LDPR_PREVAILING_DEF
   || resolution == LDPR_PREEMPTED_REG
   || resolution == LDPR_RESOLVED_EXEC
   || resolution == LDPR_RESOLVED_DYN);
}




inline bool
symtab_node::used_from_object_file_p (void)
{
  if (!((decl)->base.public_flag) || ((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2533, __FUNCTION__))->decl_common.decl_flag_1))
    return false;
  if (resolution_used_from_other_file_p (resolution))
    return true;
  return false;
}



inline varpool_node *
varpool_node::get (const_tree decl)
{
  ((void)(!(((enum tree_code) (decl)->base.code) == VAR_DECL) ? fancy_abort ("../../gcc/cgraph.h", 2545, __FUNCTION__), 0 : 0));
  return dyn_cast<varpool_node *> (symtab_node::get (decl));
}



inline void
symbol_table::register_symbol (symtab_node *node)
{
  node->next = nodes;
  node->previous = 
# 2555 "../../gcc/cgraph.h" 3 4
                  __null
# 2555 "../../gcc/cgraph.h"
                      ;

  if (nodes)
    nodes->previous = node;
  nodes = node;

  node->order = order++;
}



asm_node *
symbol_table::finalize_toplevel_asm (tree asm_str)
{
  asm_node *node;

  node = ggc_cleared_alloc<asm_node> ();
  node->asm_str = asm_str;
  node->order = order++;
  node->next = 
# 2574 "../../gcc/cgraph.h" 3 4
              __null
# 2574 "../../gcc/cgraph.h"
                  ;

  if (asmnodes == 
# 2576 "../../gcc/cgraph.h" 3 4
                 __null
# 2576 "../../gcc/cgraph.h"
                     )
    asmnodes = node;
  else
    asm_last_node->next = node;

  asm_last_node = node;
  return node;
}


inline void
symbol_table::unregister (symtab_node *node)
{
  if (node->previous)
    node->previous->next = node->next;
  else
    nodes = node->next;

  if (node->next)
    node->next->previous = node->previous;

  node->next = 
# 2597 "../../gcc/cgraph.h" 3 4
              __null
# 2597 "../../gcc/cgraph.h"
                  ;
  node->previous = 
# 2598 "../../gcc/cgraph.h" 3 4
                  __null
# 2598 "../../gcc/cgraph.h"
                      ;
}



inline void
symbol_table::release_symbol (cgraph_node *node, int uid)
{
  cgraph_count--;



  memset (node, 0, sizeof (*node));
  node->type = SYMTAB_FUNCTION;
  node->uid = uid;
  ((node))->next = free_nodes;
  free_nodes = node;
}



inline cgraph_node *
symbol_table::allocate_cgraph_symbol (void)
{
  cgraph_node *node;

  if (free_nodes)
    {
      node = free_nodes;
      free_nodes = dyn_cast<cgraph_node *> ((node)->next);
    }
  else
    {
      node = ggc_cleared_alloc<cgraph_node> ();
      node->uid = cgraph_max_uid++;
    }

  node->summary_uid = cgraph_max_summary_uid++;
  return node;
}



inline symtab_node *
symbol_table::first_symbol (void)
{
  return nodes;
}






inline symtab_node *
symbol_table::first_defined_symbol (void)
{
  symtab_node *node;

  for (node = nodes; node; node = node->next)
    if (node->definition)
      return node;

  return 
# 2661 "../../gcc/cgraph.h" 3 4
        __null
# 2661 "../../gcc/cgraph.h"
            ;
}







inline varpool_node *
symbol_table::first_variable (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    if (varpool_node *vnode = dyn_cast <varpool_node *> (node))
      return vnode;
  return 
# 2677 "../../gcc/cgraph.h" 3 4
        __null
# 2677 "../../gcc/cgraph.h"
            ;
}


inline varpool_node *
symbol_table::next_variable (varpool_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    if (varpool_node *vnode1 = dyn_cast <varpool_node *> (node1))
      return vnode1;
  return 
# 2688 "../../gcc/cgraph.h" 3 4
        __null
# 2688 "../../gcc/cgraph.h"
            ;
}







inline varpool_node *
symbol_table::first_static_initializer (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      varpool_node *vnode = dyn_cast <varpool_node *> (node);
      if (vnode && ((contains_struct_check ((node->decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2704, __FUNCTION__))->decl_common.initial))
 return vnode;
    }
  return 
# 2707 "../../gcc/cgraph.h" 3 4
        __null
# 2707 "../../gcc/cgraph.h"
            ;
}


inline varpool_node *
symbol_table::next_static_initializer (varpool_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      varpool_node *vnode1 = dyn_cast <varpool_node *> (node1);
      if (vnode1 && ((contains_struct_check ((node1->decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2718, __FUNCTION__))->decl_common.initial))
 return vnode1;
    }
  return 
# 2721 "../../gcc/cgraph.h" 3 4
        __null
# 2721 "../../gcc/cgraph.h"
            ;
}







inline varpool_node *
symbol_table::first_defined_variable (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      varpool_node *vnode = dyn_cast <varpool_node *> (node);
      if (vnode && vnode->definition)
 return vnode;
    }
  return 
# 2740 "../../gcc/cgraph.h" 3 4
        __null
# 2740 "../../gcc/cgraph.h"
            ;
}


inline varpool_node *
symbol_table::next_defined_variable (varpool_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      varpool_node *vnode1 = dyn_cast <varpool_node *> (node1);
      if (vnode1 && vnode1->definition)
 return vnode1;
    }
  return 
# 2754 "../../gcc/cgraph.h" 3 4
        __null
# 2754 "../../gcc/cgraph.h"
            ;
}






inline cgraph_node *
symbol_table::first_defined_function (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      cgraph_node *cn = dyn_cast <cgraph_node *> (node);
      if (cn && cn->definition)
 return cn;
    }
  return 
# 2772 "../../gcc/cgraph.h" 3 4
        __null
# 2772 "../../gcc/cgraph.h"
            ;
}


inline cgraph_node *
symbol_table::next_defined_function (cgraph_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      cgraph_node *cn1 = dyn_cast <cgraph_node *> (node1);
      if (cn1 && cn1->definition)
 return cn1;
    }
  return 
# 2786 "../../gcc/cgraph.h" 3 4
        __null
# 2786 "../../gcc/cgraph.h"
            ;
}







inline cgraph_node *
symbol_table::first_function (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    if (cgraph_node *cn = dyn_cast <cgraph_node *> (node))
      return cn;
  return 
# 2802 "../../gcc/cgraph.h" 3 4
        __null
# 2802 "../../gcc/cgraph.h"
            ;
}


inline cgraph_node *
symbol_table::next_function (cgraph_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    if (cgraph_node *cn1 = dyn_cast <cgraph_node *> (node1))
      return cn1;
  return 
# 2813 "../../gcc/cgraph.h" 3 4
        __null
# 2813 "../../gcc/cgraph.h"
            ;
}


inline cgraph_node *
symbol_table::first_function_with_gimple_body (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      cgraph_node *cn = dyn_cast <cgraph_node *> (node);
      if (cn && cn->has_gimple_body_p ())
 return cn;
    }
  return 
# 2827 "../../gcc/cgraph.h" 3 4
        __null
# 2827 "../../gcc/cgraph.h"
            ;
}


inline cgraph_node *
symbol_table::next_function_with_gimple_body (cgraph_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      cgraph_node *cn1 = dyn_cast <cgraph_node *> (node1);
      if (cn1 && cn1->has_gimple_body_p ())
 return cn1;
    }
  return 
# 2841 "../../gcc/cgraph.h" 3 4
        __null
# 2841 "../../gcc/cgraph.h"
            ;
}
# 2855 "../../gcc/cgraph.h"
inline bool
cgraph_node::has_gimple_body_p (void)
{
  return definition && !thunk.thunk_p && !alias;
}
# 2870 "../../gcc/cgraph.h"
struct constant_descriptor_tree {

  rtx rtl;


  tree value;




  hashval_t hash;
};





inline bool
cgraph_node::only_called_directly_or_aliased_p (void)
{
  ((void)(!(!global.inlined_to) ? fancy_abort ("../../gcc/cgraph.h", 2890, __FUNCTION__), 0 : 0));
  return (!force_output && !address_taken
   && !used_from_other_partition
   && !((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2893, __FUNCTION__))->decl_common.virtual_flag)
   && !((tree_check ((decl), "../../gcc/cgraph.h", 2894, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_ctor_flag)
   && !((tree_check ((decl), "../../gcc/cgraph.h", 2895, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_dtor_flag)
   && !used_from_object_file_p ()
   && !externally_visible);
}




inline bool
cgraph_node::can_remove_if_no_direct_calls_and_refs_p (void)
{
  ((void)(!(!global.inlined_to) ? fancy_abort ("../../gcc/cgraph.h", 2906, __FUNCTION__), 0 : 0));



  if (instrumentation_clone
      && !chkp_function_instrumented_p (decl))
    return false;

  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2914, __FUNCTION__))->decl_common.decl_flag_1))
    return true;

  if (force_output || used_from_other_partition)
    return false;
  if (((tree_check ((decl), "../../gcc/cgraph.h", 2919, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_ctor_flag)
      || ((tree_check ((decl), "../../gcc/cgraph.h", 2920, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_dtor_flag))
    return false;

  if (externally_visible
      && (!((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "../../gcc/cgraph.h", 2924, __FUNCTION__))->decl_with_vis.comdat_flag)
   || forced_by_abi
   || used_from_object_file_p ()))
    return false;
  return true;
}



inline void
cgraph_node::checking_verify_cgraph_nodes (void)
{
  if (global_options.x_flag_checking)
    cgraph_node::verify_cgraph_nodes ();
}




inline bool
varpool_node::can_remove_if_no_refs_p (void)
{
  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 2946, __FUNCTION__))->decl_common.decl_flag_1))
    return true;
  return (!force_output && !used_from_other_partition
   && ((((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "../../gcc/cgraph.h", 2949, __FUNCTION__))->decl_with_vis.comdat_flag)
        && !forced_by_abi
        && !used_from_object_file_p ())
       || !externally_visible
       || ((tree_check3 ((decl), "../../gcc/cgraph.h", 2953, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2)));
}






inline bool
varpool_node::all_refs_explicit_p ()
{
  return (definition
   && !externally_visible
   && !used_from_other_partition
   && !force_output);
}

struct tree_descriptor_hasher : ggc_ptr_hash<constant_descriptor_tree>
{
  static hashval_t hash (constant_descriptor_tree *);
  static bool equal (constant_descriptor_tree *, constant_descriptor_tree *);
};


hash_table<tree_descriptor_hasher> *constant_pool_htab (void);



inline cgraph_node *
cgraph_node::get_alias_target (void)
{
  return dyn_cast <cgraph_node *> (symtab_node::get_alias_target ());
}



inline varpool_node *
varpool_node::get_alias_target (void)
{
  return dyn_cast <varpool_node *> (symtab_node::get_alias_target ());
}







inline symtab_node *
symtab_node::ultimate_alias_target (enum availability *availability,
        symtab_node *ref)
{
  if (!alias)
    {
      if (availability)
 *availability = get_availability (ref);
      return this;
    }

  return ultimate_alias_target_1 (availability, ref);
}







inline cgraph_node *
cgraph_node::ultimate_alias_target (enum availability *availability,
        symtab_node *ref)
{
  cgraph_node *n = dyn_cast <cgraph_node *>
    (symtab_node::ultimate_alias_target (availability, ref));
  if (!n && availability)
    *availability = AVAIL_NOT_AVAILABLE;
  return n;
}







inline varpool_node *
varpool_node::ultimate_alias_target (availability *availability,
         symtab_node *ref)
{
  varpool_node *n = dyn_cast <varpool_node *>
    (symtab_node::ultimate_alias_target (availability, ref));

  if (!n && availability)
    *availability = AVAIL_NOT_AVAILABLE;
  return n;
}




inline void
cgraph_edge::set_callee (cgraph_node *n)
{
  prev_caller = 
# 3056 "../../gcc/cgraph.h" 3 4
               __null
# 3056 "../../gcc/cgraph.h"
                   ;
  if (n->callers)
    n->callers->prev_caller = this;
  next_caller = n->callers;
  n->callers = this;
  callee = n;
}




inline void
cgraph_edge::redirect_callee (cgraph_node *n)
{

  remove_callee ();


  set_callee (n);
}



inline bool
cgraph_edge::recursive_p (void)
{
  cgraph_node *c = callee->ultimate_alias_target ();
  if (caller->global.inlined_to)
    return caller->global.inlined_to->decl == c->decl;
  else
    return caller->decl == c->decl;
}



inline void
cgraph_edge::remove_callee (void)
{
  ((void)(!(!indirect_unknown_callee) ? fancy_abort ("../../gcc/cgraph.h", 3094, __FUNCTION__), 0 : 0));
  if (prev_caller)
    prev_caller->next_caller = next_caller;
  if (next_caller)
    next_caller->prev_caller = prev_caller;
  if (!prev_caller)
    callee->callers = next_caller;
}



inline bool
cgraph_edge::binds_to_current_def_p ()
{
  if (callee)
    return callee->binds_to_current_def_p (caller);
  else
    return false;
}





inline int
cgraph_edge::frequency ()
{
  return count.to_cgraph_frequency (caller->global.inlined_to
        ? caller->global.inlined_to->count
        : caller->count);
}



static inline bool
decl_is_tm_clone (const_tree fndecl)
{
  cgraph_node *n = cgraph_node::get (fndecl);
  if (n)
    return n->tm_clone;
  return false;
}




inline void
cgraph_node::mark_force_output (void)
{
  force_output = 1;
  ((void)(!(!global.inlined_to) ? fancy_abort ("../../gcc/cgraph.h", 3144, __FUNCTION__), 0 : 0));
}



inline bool
cgraph_node::optimize_for_size_p (void)
{
  if ((opts_for_fn (decl)->x_optimize_size))
    return true;
  if (frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)
    return true;
  else
    return false;
}




inline symtab_node *
symtab_node::get_create (tree node)
{
  if (((enum tree_code) (node)->base.code) == VAR_DECL)
    return varpool_node::get_create (node);
  else
    return cgraph_node::get_create (node);
}



inline enum availability
symtab_node::get_availability (symtab_node *ref)
{
  if (is_a <cgraph_node *> (this))
    return dyn_cast <cgraph_node *> (this)->get_availability (ref);
  else
    return dyn_cast <varpool_node *> (this)->get_availability (ref);
}




inline bool
symtab_node::call_for_symbol_and_aliases (bool (*callback) (symtab_node *,
           void *),
       void *data,
       bool include_overwritable)
{
  if (include_overwritable
      || get_availability () > AVAIL_INTERPOSABLE)
    {
      if (callback (this, data))
        return true;
    }
  if (has_aliases_p ())
    return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);
  return false;
}





inline bool
cgraph_node::call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,
           void *),
       void *data,
       bool include_overwritable)
{
  if (include_overwritable
      || get_availability () > AVAIL_INTERPOSABLE)
    {
      if (callback (this, data))
        return true;
    }
  if (has_aliases_p ())
    return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);
  return false;
}





inline bool
varpool_node::call_for_symbol_and_aliases (bool (*callback) (varpool_node *,
            void *),
        void *data,
        bool include_overwritable)
{
  if (include_overwritable
      || get_availability () > AVAIL_INTERPOSABLE)
    {
      if (callback (this, data))
        return true;
    }
  if (has_aliases_p ())
    return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);
  return false;
}



inline bool
ipa_ref::address_matters_p ()
{
  if (use != IPA_REF_ADDR)
    return false;

  if (is_a <varpool_node *> (referring)
      && ((contains_struct_check ((referring->decl), (TS_DECL_COMMON), "../../gcc/cgraph.h", 3254, __FUNCTION__))->decl_common.virtual_flag))
    return false;
  return referred->address_can_be_compared_p ();
}



inline
ipa_polymorphic_call_context::ipa_polymorphic_call_context (cgraph_edge *e)
{
  ((void)(!(e->indirect_info->polymorphic) ? fancy_abort ("../../gcc/cgraph.h", 3264, __FUNCTION__), 0 : 0));
  *this = e->indirect_info->context;
}



inline
ipa_polymorphic_call_context::ipa_polymorphic_call_context ()
{
  clear_speculation ();
  clear_outer_type ();
  invalid = false;
}



inline void
ipa_polymorphic_call_context::clear_speculation ()
{
  speculative_outer_type = 
# 3283 "../../gcc/cgraph.h" 3 4
                          __null
# 3283 "../../gcc/cgraph.h"
                              ;
  speculative_offset = 0;
  speculative_maybe_derived_type = false;
}




inline void
ipa_polymorphic_call_context::clear_outer_type (tree otr_type)
{
  outer_type = otr_type ? ((tree_class_check ((otr_type), (tcc_type), "../../gcc/cgraph.h", 3294, __FUNCTION__))->type_common.main_variant) : 
# 3294 "../../gcc/cgraph.h" 3 4
                                                        __null
# 3294 "../../gcc/cgraph.h"
                                                            ;
  offset = 0;
  maybe_derived_type = true;
  maybe_in_construction = true;
  dynamic = true;
}



inline void
ipa_polymorphic_call_context::offset_by (long off)
{
  if (outer_type)
    offset += off;
  if (speculative_outer_type)
    speculative_offset += off;
}



inline bool
ipa_polymorphic_call_context::useless_p () const
{
  return (!outer_type && !speculative_outer_type);
}




static inline bool
cgraph_local_p (cgraph_node *node)
{
  if (!node->instrumentation_clone || !node->instrumented_version)
    return node->local.local;

  return node->local.local && node->instrumented_version->local.local;
}
# 3354 "../../gcc/cgraph.h"
static inline const char *
xstrdup_for_dump (const char *transient_str)
{
  return ggc_alloc_string ((transient_str), -1 );
}
# 30 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/fold-const.h" 1
# 25 "../../gcc/fold-const.h"
extern int folding_initializer;


extern int native_encode_expr (const_tree, unsigned char *, int, int off = -1);
extern tree native_interpret_expr (tree, const unsigned char *, int);







extern tree fold (tree);


extern tree fold_unary_loc (location_t, enum tree_code, tree, tree);


extern tree fold_unary_ignore_overflow_loc (location_t, enum tree_code, tree, tree);


extern tree fold_binary_loc (location_t, enum tree_code, tree, tree, tree);


extern tree fold_ternary_loc (location_t, enum tree_code, tree, tree, tree, tree);


extern tree fold_build1_loc (location_t, enum tree_code, tree,
        tree );


extern tree fold_build2_loc (location_t, enum tree_code, tree, tree,
        tree );


extern tree fold_build3_loc (location_t, enum tree_code, tree, tree, tree,
      tree );
extern tree fold_build1_initializer_loc (location_t, enum tree_code, tree, tree);
extern tree fold_build2_initializer_loc (location_t, enum tree_code, tree, tree, tree);


extern tree fold_build_call_array_loc (location_t, tree, tree, int, tree *);


extern tree fold_build_call_array_initializer_loc (location_t, tree, tree, int, tree *);
extern tree get_array_ctor_element_at_index (tree, offset_int);
extern bool fold_convertible_p (const_tree, const_tree);


extern tree fold_convert_loc (location_t, tree, tree);
extern tree fold_single_bit_test (location_t, enum tree_code, tree, tree, tree);
extern tree fold_ignored_result (tree);
extern tree fold_abs_const (tree, tree);
extern tree fold_indirect_ref_1 (location_t, tree, tree);
extern void fold_defer_overflow_warnings (void);
extern void fold_undefer_overflow_warnings (bool, const gimple *, int);
extern void fold_undefer_and_ignore_overflow_warnings (void);
extern bool fold_deferring_overflow_warnings_p (void);
extern void fold_overflow_warning (const char*, enum warn_strict_overflow_code);
extern enum tree_code fold_div_compare (enum tree_code, tree, tree,
     tree *, tree *, bool *);
extern int operand_equal_p (const_tree, const_tree, unsigned int);
extern int multiple_of_p (tree, const_tree, const_tree);


extern tree omit_one_operand_loc (location_t, tree, tree, tree);


extern tree omit_two_operands_loc (location_t, tree, tree, tree, tree);


extern tree invert_truthvalue_loc (location_t, tree);
extern tree fold_unary_to_constant (enum tree_code, tree, tree);
extern tree fold_binary_to_constant (enum tree_code, tree, tree, tree);
extern tree fold_read_from_constant_string (tree);
extern tree int_const_binop (enum tree_code, const_tree, const_tree);


extern tree build_fold_addr_expr_loc (location_t, tree);


extern tree build_fold_addr_expr_with_type_loc (location_t, tree, tree);
extern tree fold_build_cleanup_point_expr (tree type, tree expr);


extern tree build_fold_indirect_ref_loc (location_t, tree);


extern tree fold_indirect_ref_loc (location_t, tree);
extern tree build_simple_mem_ref_loc (location_t, tree);


extern poly_offset_int mem_ref_offset (const_tree);
extern tree build_invariant_address (tree, tree, poly_int64);
extern tree constant_boolean_node (bool, tree);
extern tree div_if_zero_remainder (const_tree, const_tree);

extern bool tree_swap_operands_p (const_tree, const_tree);
extern enum tree_code swap_tree_comparison (enum tree_code);

extern bool ptr_difference_const (tree, tree, poly_int64_pod *);
extern enum tree_code invert_tree_comparison (enum tree_code, bool);

extern bool tree_unary_nonzero_warnv_p (enum tree_code, tree, tree, bool *);
extern bool tree_binary_nonzero_warnv_p (enum tree_code, tree, tree, tree op1,
                                         bool *);
extern bool tree_single_nonzero_warnv_p (tree, bool *);
extern bool tree_unary_nonnegative_warnv_p (enum tree_code, tree, tree,
         bool *, int);
extern bool tree_binary_nonnegative_warnv_p (enum tree_code, tree, tree, tree,
          bool *, int);
extern bool tree_single_nonnegative_warnv_p (tree, bool *, int);
extern bool tree_call_nonnegative_warnv_p (tree, combined_fn, tree, tree,
        bool *, int);

extern bool integer_valued_real_unary_p (tree_code, tree, int);
extern bool integer_valued_real_binary_p (tree_code, tree, tree, int);
extern bool integer_valued_real_call_p (combined_fn, tree, tree, int);
extern bool integer_valued_real_single_p (tree, int);
extern bool integer_valued_real_p (tree, int = 0);

extern bool fold_real_zero_addition_p (const_tree, const_tree, int);
extern tree combine_comparisons (location_t, enum tree_code, enum tree_code,
     enum tree_code, tree, tree, tree);
extern void debug_fold_checksum (const_tree);
extern bool may_negate_without_overflow_p (const_tree);

extern tree round_up_loc (location_t, tree, unsigned int);

extern tree round_down_loc (location_t, tree, int);
extern tree size_int_kind (poly_int64, enum size_type_kind);


extern tree size_binop_loc (location_t, enum tree_code, tree, tree);


extern tree size_diffop_loc (location_t, tree, tree);



extern tree non_lvalue_loc (location_t, tree);

extern bool tree_expr_nonzero_p (tree);
extern bool tree_expr_nonnegative_p (tree);
extern bool tree_expr_nonnegative_warnv_p (tree, bool *, int = 0);
extern tree make_range (tree, int *, tree *, tree *, bool *);
extern tree make_range_step (location_t, enum tree_code, tree, tree, tree,
        tree *, tree *, int *, bool *);
extern tree range_check_type (tree);
extern tree build_range_check (location_t, tree, tree, int, tree, tree);
extern bool merge_ranges (int *, tree *, tree *, int, tree, tree, int,
     tree, tree);
extern tree sign_bit_p (tree, const_tree);
extern tree exact_inverse (tree, tree);
extern bool expr_not_equal_to (tree t, const wide_int &);
extern tree const_unop (enum tree_code, tree, tree);
extern tree const_binop (enum tree_code, tree, tree, tree);
extern bool negate_mathfn_p (combined_fn);
extern const char *c_getstr (tree, unsigned long *strlen = 
# 183 "../../gcc/fold-const.h" 3 4
                                                                   __null
# 183 "../../gcc/fold-const.h"
                                                                       );



extern tree convert_to_ptrofftype_loc (location_t loc, tree off);




extern tree fold_build_pointer_plus_loc (location_t loc, tree ptr, tree off);





extern tree fold_build_pointer_plus_hwi_loc (location_t loc, tree ptr, long off);
# 31 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/stor-layout.h" 1
# 23 "../../gcc/stor-layout.h"
extern void set_min_and_max_values_for_integral_type (tree, int, signop);
extern void fixup_signed_type (tree);
extern unsigned int update_alignment_for_field (record_layout_info, tree,
                                                unsigned int);
extern record_layout_info start_record_layout (tree);
extern tree bit_from_pos (tree, tree);
extern tree byte_from_pos (tree, tree);
extern void pos_from_bit (tree *, tree *, unsigned int, tree);
extern void normalize_offset (tree *, tree *, unsigned int);
extern tree rli_size_unit_so_far (record_layout_info);
extern tree rli_size_so_far (record_layout_info);
extern void normalize_rli (record_layout_info);
extern void place_field (record_layout_info, tree);
extern void compute_record_mode (tree);
extern void finish_bitfield_layout (tree);
extern void finish_record_layout (record_layout_info, int);
extern unsigned int element_precision (const_tree);
extern void finalize_size_functions (void);
extern void fixup_unsigned_type (tree);
extern void initialize_sizetypes (void);



extern void finish_builtin_struct (tree, const char *, tree, tree);
# 55 "../../gcc/stor-layout.h"
extern void layout_decl (tree, unsigned);




extern void layout_type (tree);


extern unsigned int min_align_of_type (tree);


extern tree make_fract_type (int, int, int);
extern tree make_accum_type (int, int, int);
# 95 "../../gcc/stor-layout.h"
extern tree make_signed_type (int);
extern tree make_unsigned_type (int);





extern opt_machine_mode mode_for_size_tree (const_tree, enum mode_class, int);

extern tree bitwise_type_for_mode (machine_mode);



extern void relayout_decl (tree);






extern tree variable_size (tree);
# 32 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/tree-dfa.h" 1
# 23 "../../gcc/tree-dfa.h"
extern void renumber_gimple_stmt_uids (void);
extern void renumber_gimple_stmt_uids_in_blocks (basic_block *, int);
extern void dump_variable (FILE *, tree);
extern void debug_variable (tree);
extern void dump_dfa_stats (FILE *);
extern void debug_dfa_stats (void);
extern tree ssa_default_def (struct function *, tree);
extern void set_ssa_default_def (struct function *, tree, tree);
extern tree get_or_create_ssa_default_def (struct function *, tree);
extern tree get_ref_base_and_extent (tree, poly_int64_pod *, poly_int64_pod *,
         poly_int64_pod *, bool *);
extern tree get_ref_base_and_extent_hwi (tree, long *,
      long *, bool *);
extern tree get_addr_base_and_unit_offset_1 (tree, poly_int64_pod *,
          tree (*) (tree));
extern tree get_addr_base_and_unit_offset (tree, poly_int64_pod *);
extern bool stmt_references_abnormal_ssa_name (gimple *);
extern void replace_abnormal_ssa_names (gimple *);
extern void dump_enumerated_decls (FILE *, dump_flags_t);
# 33 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/builtins.h" 1
# 23 "../../gcc/builtins.h"
# 1 "/usr/include/mpc.h" 1 3 4
# 24 "/usr/include/mpc.h" 3 4
# 1 "/usr/include/gmp.h" 1 3 4
# 25 "/usr/include/mpc.h" 2 3 4
# 1 "/usr/include/mpfr.h" 1 3 4
# 57 "/usr/include/mpfr.h" 3 4

# 57 "/usr/include/mpfr.h" 3 4
typedef void mpfr_void;
typedef int mpfr_int;
typedef unsigned int mpfr_uint;
typedef long mpfr_long;
typedef unsigned long mpfr_ulong;
typedef size_t mpfr_size_t;







typedef unsigned int mpfr_flags_t;
# 98 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_RNDN=0,
  MPFR_RNDZ,
  MPFR_RNDU,
  MPFR_RNDD,
  MPFR_RNDA,
  MPFR_RNDF,
  MPFR_RNDNA=-1
} mpfr_rnd_t;
# 147 "/usr/include/mpfr.h" 3 4
typedef long mpfr_prec_t;
typedef unsigned long mpfr_uprec_t;
# 163 "/usr/include/mpfr.h" 3 4
typedef int mpfr_sign_t;
# 174 "/usr/include/mpfr.h" 3 4
typedef long mpfr_exp_t;
typedef unsigned long mpfr_uexp_t;
# 203 "/usr/include/mpfr.h" 3 4
typedef struct {
  mpfr_prec_t _mpfr_prec;
  mpfr_sign_t _mpfr_sign;
  mpfr_exp_t _mpfr_exp;
  mp_limb_t *_mpfr_d;
} __mpfr_struct;
# 229 "/usr/include/mpfr.h" 3 4
typedef __mpfr_struct mpfr_t[1];
typedef __mpfr_struct *mpfr_ptr;
typedef const __mpfr_struct *mpfr_srcptr;
# 242 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_NAN_KIND = 0,
  MPFR_INF_KIND = 1,
  MPFR_ZERO_KIND = 2,
  MPFR_REGULAR_KIND = 3
} mpfr_kind_t;


typedef enum {
  MPFR_FREE_LOCAL_CACHE = 1,
  MPFR_FREE_GLOBAL_CACHE = 2
} mpfr_free_cache_t;
# 347 "/usr/include/mpfr.h" 3 4
extern "C" {


 const char * mpfr_get_version (void);
 const char * mpfr_get_patches (void);
 int mpfr_buildopt_tls_p (void);
 int mpfr_buildopt_float128_p (void);
 int mpfr_buildopt_decimal_p (void);
 int mpfr_buildopt_gmpinternals_p (void);
 int mpfr_buildopt_sharedcache_p (void);
 const char * mpfr_buildopt_tune_case (void);

 mpfr_exp_t mpfr_get_emin (void);
 int mpfr_set_emin (mpfr_exp_t);
 mpfr_exp_t mpfr_get_emin_min (void);
 mpfr_exp_t mpfr_get_emin_max (void);
 mpfr_exp_t mpfr_get_emax (void);
 int mpfr_set_emax (mpfr_exp_t);
 mpfr_exp_t mpfr_get_emax_min (void);
 mpfr_exp_t mpfr_get_emax_max (void);

 void mpfr_set_default_rounding_mode (mpfr_rnd_t);
 mpfr_rnd_t mpfr_get_default_rounding_mode (void);
 const char * mpfr_print_rnd_mode (mpfr_rnd_t);

 void mpfr_clear_flags (void);
 void mpfr_clear_underflow (void);
 void mpfr_clear_overflow (void);
 void mpfr_clear_divby0 (void);
 void mpfr_clear_nanflag (void);
 void mpfr_clear_inexflag (void);
 void mpfr_clear_erangeflag (void);

 void mpfr_set_underflow (void);
 void mpfr_set_overflow (void);
 void mpfr_set_divby0 (void);
 void mpfr_set_nanflag (void);
 void mpfr_set_inexflag (void);
 void mpfr_set_erangeflag (void);

 int mpfr_underflow_p (void);
 int mpfr_overflow_p (void);
 int mpfr_divby0_p (void);
 int mpfr_nanflag_p (void);
 int mpfr_inexflag_p (void);
 int mpfr_erangeflag_p (void);

 void mpfr_flags_clear (mpfr_flags_t);
 void mpfr_flags_set (mpfr_flags_t);
 mpfr_flags_t mpfr_flags_test (mpfr_flags_t);
 mpfr_flags_t mpfr_flags_save (void);
 void mpfr_flags_restore (mpfr_flags_t,
                                         mpfr_flags_t);

 int mpfr_check_range (mpfr_ptr, int, mpfr_rnd_t);

 void mpfr_init2 (mpfr_ptr, mpfr_prec_t);
 void mpfr_init (mpfr_ptr);
 void mpfr_clear (mpfr_ptr);

 void
  mpfr_inits2 (mpfr_prec_t, mpfr_ptr, ...) __attribute__ ((sentinel));
 void
  mpfr_inits (mpfr_ptr, ...) __attribute__ ((sentinel));
 void
  mpfr_clears (mpfr_ptr, ...) __attribute__ ((sentinel));

 int mpfr_prec_round (mpfr_ptr, mpfr_prec_t, mpfr_rnd_t);
 int mpfr_can_round (mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t,
                                    mpfr_rnd_t, mpfr_prec_t);
 mpfr_prec_t mpfr_min_prec (mpfr_srcptr);

 mpfr_exp_t mpfr_get_exp (mpfr_srcptr);
 int mpfr_set_exp (mpfr_ptr, mpfr_exp_t);
 mpfr_prec_t mpfr_get_prec (mpfr_srcptr);
 void mpfr_set_prec (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_prec_raw (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_default_prec (mpfr_prec_t);
 mpfr_prec_t mpfr_get_default_prec (void);

 int mpfr_set_d (mpfr_ptr, double, mpfr_rnd_t);
 int mpfr_set_flt (mpfr_ptr, float, mpfr_rnd_t);





 int mpfr_set_ld (mpfr_ptr, long double, mpfr_rnd_t);




 int mpfr_set_z (mpfr_ptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_set_z_2exp (mpfr_ptr, mpz_srcptr, mpfr_exp_t,
                                     mpfr_rnd_t);
 void mpfr_set_nan (mpfr_ptr);
 void mpfr_set_inf (mpfr_ptr, int);
 void mpfr_set_zero (mpfr_ptr, int);



 int mpfr_set_f (mpfr_ptr, mpf_srcptr, mpfr_rnd_t);
 int mpfr_cmp_f (mpfr_srcptr, mpf_srcptr);
 int mpfr_get_f (mpf_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_set_si (mpfr_ptr, long, mpfr_rnd_t);
 int mpfr_set_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_set_si_2exp (mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t);
 int mpfr_set_ui_2exp (mpfr_ptr, unsigned long, mpfr_exp_t,
                                      mpfr_rnd_t);


 int mpfr_set_q (mpfr_ptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_mul_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_div_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_add_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_sub_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_cmp_q (mpfr_srcptr, mpq_srcptr);
 void mpfr_get_q (mpq_ptr q, mpfr_srcptr f);

 int mpfr_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);
 int mpfr_init_set_str (mpfr_ptr, const char *, int,
                                       mpfr_rnd_t);
 int mpfr_set4 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int);
 int mpfr_abs (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_set (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_neg (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_signbit (mpfr_srcptr);
 int mpfr_setsign (mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t);
 int mpfr_copysign (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                   mpfr_rnd_t);

 mpfr_exp_t mpfr_get_z_2exp (mpz_ptr, mpfr_srcptr);
 float mpfr_get_flt (mpfr_srcptr, mpfr_rnd_t);
 double mpfr_get_d (mpfr_srcptr, mpfr_rnd_t);



 long double mpfr_get_ld (mpfr_srcptr, mpfr_rnd_t);
 double mpfr_get_d1 (mpfr_srcptr);
 double mpfr_get_d_2exp (long*, mpfr_srcptr, mpfr_rnd_t);
 long double mpfr_get_ld_2exp (long*, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_frexp (mpfr_exp_t*, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 long mpfr_get_si (mpfr_srcptr, mpfr_rnd_t);
 unsigned long mpfr_get_ui (mpfr_srcptr, mpfr_rnd_t);
 char * mpfr_get_str (char*, mpfr_exp_t*, int, size_t,
                                     mpfr_srcptr, mpfr_rnd_t);
 int mpfr_get_z (mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t);

 void mpfr_free_str (char *);

 int mpfr_urandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);

__attribute__ ((deprecated))

 int mpfr_grandom (mpfr_ptr, mpfr_ptr, gmp_randstate_t,
                                  mpfr_rnd_t);
 int mpfr_nrandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);
 int mpfr_erandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);
 int mpfr_urandomb (mpfr_ptr, gmp_randstate_t);

 void mpfr_nextabove (mpfr_ptr);
 void mpfr_nextbelow (mpfr_ptr);
 void mpfr_nexttoward (mpfr_ptr, mpfr_srcptr);


 int mpfr_printf (const char*, ...);
 int mpfr_asprintf (char**, const char*, ...);
 int mpfr_sprintf (char*, const char*, ...);
 int mpfr_snprintf (char*, size_t, const char*, ...);


 int mpfr_pow (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_pow_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_pow_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_pow_ui (mpfr_ptr, unsigned long, unsigned long,
                                    mpfr_rnd_t);
 int mpfr_ui_pow (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_pow_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sqrt_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_rec_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sub (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_div (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_sub_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_sub (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_mul_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_div_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_div (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);

 int mpfr_add_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_sub_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_si_sub (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_div_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_si_div (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_sub_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_d_sub (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_div_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_d_div (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sqr (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_const_pi (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_log2 (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_euler (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_catalan (mpfr_ptr, mpfr_rnd_t);

 int mpfr_agm (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_log (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log1p (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);

 int mpfr_exp (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_exp2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_exp10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_expm1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_eint (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_li2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_cmp (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmp3 (mpfr_srcptr, mpfr_srcptr, int);
 int mpfr_cmp_d (mpfr_srcptr, double);
 int mpfr_cmp_ld (mpfr_srcptr, long double);
 int mpfr_cmpabs (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmp_ui (mpfr_srcptr, unsigned long);
 int mpfr_cmp_si (mpfr_srcptr, long);
 int mpfr_cmp_ui_2exp (mpfr_srcptr, unsigned long, mpfr_exp_t);
 int mpfr_cmp_si_2exp (mpfr_srcptr, long, mpfr_exp_t);
 void mpfr_reldiff (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                   mpfr_rnd_t);
 int mpfr_eq (mpfr_srcptr, mpfr_srcptr, unsigned long);
 int mpfr_sgn (mpfr_srcptr);

 int mpfr_mul_2exp (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_div_2exp (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_mul_2ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                  mpfr_rnd_t);
 int mpfr_div_2ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                  mpfr_rnd_t);
 int mpfr_mul_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_div_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);

 int mpfr_rint (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_roundeven (mpfr_ptr, mpfr_srcptr);
 int mpfr_round (mpfr_ptr, mpfr_srcptr);
 int mpfr_trunc (mpfr_ptr, mpfr_srcptr);
 int mpfr_ceil (mpfr_ptr, mpfr_srcptr);
 int mpfr_floor (mpfr_ptr, mpfr_srcptr);
 int mpfr_rint_roundeven (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_round (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_trunc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_ceil (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_floor (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_frac (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_modf (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_remquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_remainder (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                    mpfr_rnd_t);
 int mpfr_fmod (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fmodquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr,
                                  mpfr_rnd_t);

 int mpfr_fits_ulong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_slong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_ushort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sshort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uintmax_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_intmax_p (mpfr_srcptr, mpfr_rnd_t);

 void mpfr_extract (mpz_ptr, mpfr_srcptr, unsigned int);
 void mpfr_swap (mpfr_ptr, mpfr_ptr);
 void mpfr_dump (mpfr_srcptr);

 int mpfr_nan_p (mpfr_srcptr);
 int mpfr_inf_p (mpfr_srcptr);
 int mpfr_number_p (mpfr_srcptr);
 int mpfr_integer_p (mpfr_srcptr);
 int mpfr_zero_p (mpfr_srcptr);
 int mpfr_regular_p (mpfr_srcptr);

 int mpfr_greater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_greaterequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_less_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessgreater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_equal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_unordered_p (mpfr_srcptr, mpfr_srcptr);

 int mpfr_atanh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_acosh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_asinh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cosh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tanh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh_cosh (mpfr_ptr, mpfr_ptr, mpfr_srcptr,
                                    mpfr_rnd_t);

 int mpfr_sech (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_csch (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_coth (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_acos (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_asin (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_atan (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sin (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sin_cos (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cos (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tan (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_atan2 (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sec (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_csc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cot (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_hypot (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_erf (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_erfc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cbrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

__attribute__ ((deprecated))

 int mpfr_root (mpfr_ptr, mpfr_srcptr, unsigned long,
                               mpfr_rnd_t);
 int mpfr_rootn_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_gamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_gamma_inc (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                    mpfr_rnd_t);
 int mpfr_beta (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_lngamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_lgamma (mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_digamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_zeta (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_zeta_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_fac_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_j0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_j1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_jn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_yn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_ai (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_min (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_max (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_dim (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_div_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_add_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_sub_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_z_sub (mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cmp_z (mpfr_srcptr, mpz_srcptr);

 int mpfr_fma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                              mpfr_rnd_t);
 int mpfr_fms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                              mpfr_rnd_t);
 int mpfr_fmma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                               mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fmms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                               mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sum (mpfr_ptr, const mpfr_ptr *, unsigned long,
                              mpfr_rnd_t);

 void mpfr_free_cache (void);
 void mpfr_free_cache2 (mpfr_free_cache_t);
 void mpfr_free_pool (void);
 int mpfr_mp_memory_cleanup (void);

 int mpfr_subnormalize (mpfr_ptr, int, mpfr_rnd_t);

 int mpfr_strtofr (mpfr_ptr, const char *, char **, int,
                                  mpfr_rnd_t);

 void mpfr_round_nearest_away_begin (mpfr_t);
 int mpfr_round_nearest_away_end (mpfr_t, int);

 size_t mpfr_custom_get_size (mpfr_prec_t);
 void mpfr_custom_init (void *, mpfr_prec_t);
 void * mpfr_custom_get_significand (mpfr_srcptr);
 mpfr_exp_t mpfr_custom_get_exp (mpfr_srcptr);
 void mpfr_custom_move (mpfr_ptr, void *);
 void mpfr_custom_init_set (mpfr_ptr, int, mpfr_exp_t,
                                           mpfr_prec_t, void *);
 int mpfr_custom_get_kind (mpfr_srcptr);


}
# 1044 "/usr/include/mpfr.h" 3 4
extern "C" {
# 1053 "/usr/include/mpfr.h" 3 4
 int __gmpfr_set_sj (mpfr_t, intmax_t, mpfr_rnd_t);
 int __gmpfr_set_sj_2exp (mpfr_t, intmax_t, intmax_t, mpfr_rnd_t);
 int __gmpfr_set_uj (mpfr_t, uintmax_t, mpfr_rnd_t);
 int __gmpfr_set_uj_2exp (mpfr_t, uintmax_t, intmax_t, mpfr_rnd_t);
 intmax_t __gmpfr_mpfr_get_sj (mpfr_srcptr, mpfr_rnd_t);
 uintmax_t __gmpfr_mpfr_get_uj (mpfr_srcptr, mpfr_rnd_t);


}
# 1074 "/usr/include/mpfr.h" 3 4
extern "C" {




 size_t __gmpfr_inp_str (mpfr_ptr, FILE*, int, mpfr_rnd_t);
 size_t __gmpfr_out_str (FILE*, int, size_t, mpfr_srcptr,
                                     mpfr_rnd_t);


 int __gmpfr_fprintf (FILE*, const char*, ...);



 int __gmpfr_fpif_export (FILE*, mpfr_ptr);
 int __gmpfr_fpif_import (mpfr_ptr, FILE*);


}
# 1105 "/usr/include/mpfr.h" 3 4
extern "C" {






 int __gmpfr_vprintf (const char*, va_list);
 int __gmpfr_vasprintf (char**, const char*, va_list);
 int __gmpfr_vsprintf (char*, const char*, va_list);
 int __gmpfr_vsnprintf (char*, size_t, const char*, va_list);


}
# 1132 "/usr/include/mpfr.h" 3 4
extern "C" {



 int __gmpfr_vfprintf (FILE*, const char*, va_list);


}
# 26 "/usr/include/mpc.h" 2 3 4
# 70 "/usr/include/mpc.h" 3 4
typedef int mpc_rnd_t;
# 99 "/usr/include/mpc.h" 3 4
typedef struct {
  mpfr_t re;
  mpfr_t im;
}
__mpc_struct;

typedef __mpc_struct mpc_t[1];
typedef __mpc_struct *mpc_ptr;
typedef const __mpc_struct *mpc_srcptr;
# 119 "/usr/include/mpc.h" 3 4
extern "C" {


 int mpc_add (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_add_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_add_si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_add_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_sub (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sub_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_fr_sub (mpc_ptr, mpfr_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sub_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_ui_ui_sub (mpc_ptr, unsigned long int, unsigned long int, mpc_srcptr, mpc_rnd_t);
 int mpc_mul (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_mul_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_mul_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_mul_si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_mul_i (mpc_ptr, mpc_srcptr, int, mpc_rnd_t);
 int mpc_sqr (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_div (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_pow (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_pow_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_pow_ld (mpc_ptr, mpc_srcptr, long double, mpc_rnd_t);
 int mpc_pow_d (mpc_ptr, mpc_srcptr, double, mpc_rnd_t);
 int mpc_pow_si (mpc_ptr, mpc_srcptr, long, mpc_rnd_t);
 int mpc_pow_ui (mpc_ptr, mpc_srcptr, unsigned long, mpc_rnd_t);
 int mpc_pow_z (mpc_ptr, mpc_srcptr, mpz_srcptr, mpc_rnd_t);
 int mpc_div_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_fr_div (mpc_ptr, mpfr_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_div_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_ui_div (mpc_ptr, unsigned long int, mpc_srcptr, mpc_rnd_t);
 int mpc_div_2ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_mul_2ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_div_2si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_mul_2si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_conj (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_neg (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_norm (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_abs (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_sqrt (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_set (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_set_d (mpc_ptr, double, mpc_rnd_t);
 int mpc_set_d_d (mpc_ptr, double, double, mpc_rnd_t);
 int mpc_set_ld (mpc_ptr, long double, mpc_rnd_t);
 int mpc_set_ld_ld (mpc_ptr, long double, long double, mpc_rnd_t);
 int mpc_set_f (mpc_ptr, mpf_srcptr, mpc_rnd_t);
 int mpc_set_f_f (mpc_ptr, mpf_srcptr, mpf_srcptr, mpc_rnd_t);
 int mpc_set_fr (mpc_ptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_set_fr_fr (mpc_ptr, mpfr_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_set_q (mpc_ptr, mpq_srcptr, mpc_rnd_t);
 int mpc_set_q_q (mpc_ptr, mpq_srcptr, mpq_srcptr, mpc_rnd_t);
 int mpc_set_si (mpc_ptr, long int, mpc_rnd_t);
 int mpc_set_si_si (mpc_ptr, long int, long int, mpc_rnd_t);
 int mpc_set_ui (mpc_ptr, unsigned long int, mpc_rnd_t);
 int mpc_set_ui_ui (mpc_ptr, unsigned long int, unsigned long int, mpc_rnd_t);
 int mpc_set_z (mpc_ptr, mpz_srcptr, mpc_rnd_t);
 int mpc_set_z_z (mpc_ptr, mpz_srcptr, mpz_srcptr, mpc_rnd_t);
 void mpc_swap (mpc_ptr, mpc_ptr);
 int mpc_fma (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);

 void mpc_set_nan (mpc_ptr);

 int mpc_real (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_imag (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_arg (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_proj (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_cmp (mpc_srcptr, mpc_srcptr);
 int mpc_cmp_si_si (mpc_srcptr, long int, long int);
 int mpc_cmp_abs (mpc_srcptr, mpc_srcptr);
 int mpc_exp (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_log (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_log10 (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sin (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_cos (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sin_cos (mpc_ptr, mpc_ptr, mpc_srcptr, mpc_rnd_t, mpc_rnd_t);
 int mpc_tan (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sinh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_cosh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_tanh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_asin (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_acos (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_atan (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_asinh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_acosh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_atanh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_rootofunity (mpc_ptr, unsigned long int, unsigned long int, mpc_rnd_t);
 void mpc_clear (mpc_ptr);
 int mpc_urandom (mpc_ptr, gmp_randstate_t);
 void mpc_init2 (mpc_ptr, mpfr_prec_t);
 void mpc_init3 (mpc_ptr, mpfr_prec_t, mpfr_prec_t);
 mpfr_prec_t mpc_get_prec (mpc_srcptr x);
 void mpc_get_prec2 (mpfr_prec_t *pr, mpfr_prec_t *pi, mpc_srcptr x);
 void mpc_set_prec (mpc_ptr, mpfr_prec_t);
 const char * mpc_get_version (void);

 int mpc_strtoc (mpc_ptr, const char *, char **, int, mpc_rnd_t);
 int mpc_set_str (mpc_ptr, const char *, int, mpc_rnd_t);
 char * mpc_get_str (int, size_t, mpc_srcptr, mpc_rnd_t);
 void mpc_free_str (char *);



 int mpc_set_sj (mpc_ptr, intmax_t, mpc_rnd_t);
 int mpc_set_uj (mpc_ptr, uintmax_t, mpc_rnd_t);
 int mpc_set_sj_sj (mpc_ptr, intmax_t, intmax_t, mpc_rnd_t);
 int mpc_set_uj_uj (mpc_ptr, uintmax_t, uintmax_t, mpc_rnd_t);
# 234 "/usr/include/mpc.h" 3 4
 int mpc_inp_str (mpc_ptr, FILE *, size_t *, int, mpc_rnd_t);
 size_t mpc_out_str (FILE *, int, size_t, mpc_srcptr, mpc_rnd_t);



}
# 24 "../../gcc/builtins.h" 2



# 26 "../../gcc/builtins.h"
struct target_builtins {





  fixed_size_mode_pod x_apply_args_mode[81];






  fixed_size_mode_pod x_apply_result_mode[81];
};

extern struct target_builtins default_target_builtins;

extern struct target_builtins *this_target_builtins;





extern bool force_folding_builtin_constant_p;

extern bool is_builtin_fn (tree);
extern bool called_as_built_in (tree);
extern bool get_object_alignment_1 (tree, unsigned int *,
        unsigned long *);
extern unsigned int get_object_alignment (tree);
extern bool get_pointer_alignment_1 (tree, unsigned int *,
         unsigned long *);
extern unsigned int get_pointer_alignment (tree);
extern tree c_strlen (tree, int);
extern void expand_builtin_setjmp_setup (rtx, rtx);
extern void expand_builtin_setjmp_receiver (rtx);
extern void expand_builtin_update_setjmp_buf (rtx);
extern tree mathfn_built_in (tree, enum built_in_function fn);
extern tree mathfn_built_in (tree, combined_fn);
extern rtx builtin_strncpy_read_str (void *, long, scalar_int_mode);
extern rtx builtin_memset_read_str (void *, long, scalar_int_mode);
extern rtx expand_builtin_saveregs (void);
extern tree std_build_builtin_va_list (void);
extern tree std_fn_abi_va_list (tree);
extern tree std_canonical_va_list_type (tree);
extern void std_expand_builtin_va_start (tree, rtx);
extern void expand_builtin_trap (void);
extern void expand_ifn_atomic_bit_test_and (gcall *);
extern void expand_ifn_atomic_compare_exchange (gcall *);
extern rtx expand_builtin (tree, rtx, rtx, machine_mode, int);
extern rtx expand_builtin_with_bounds (tree, rtx, rtx, machine_mode, int);
extern enum built_in_function builtin_mathfn_code (const_tree);
extern tree fold_builtin_expect (location_t, tree, tree, tree);
extern bool avoid_folding_inline_builtin (tree);
extern tree fold_call_expr (location_t, tree, bool);
extern tree fold_builtin_call_array (location_t, tree, tree, int, tree *);
extern tree fold_builtin_n (location_t, tree, tree *, int, bool);
extern bool validate_gimple_arglist (const gcall *, ...);
extern rtx default_expand_builtin (tree, rtx, rtx, machine_mode, int);
extern bool fold_builtin_next_arg (tree, bool);
extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));
extern tree fold_call_stmt (gcall *, bool);
extern void set_builtin_user_assembler_name (tree decl, const char *asmspec);
extern bool is_simple_builtin (tree);
extern bool is_inexpensive_builtin (tree);
extern tree compute_objsize (tree, int);

extern bool readonly_data_expr (tree exp);
extern bool init_target_chars (void);
extern unsigned long target_newline;
extern unsigned long target_percent;
extern char target_percent_s[3];
extern char target_percent_c[3];
extern char target_percent_s_newline[4];
extern bool target_char_cst_p (tree t, char *p);

extern internal_fn associated_internal_fn (tree);
extern internal_fn replacement_internal_fn (gcall *);

extern tree max_object_size ();
# 34 "../../gcc/generic-match-head.c" 2
# 1 "./case-cfn-macros.h" 1
# 35 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/gimplify.h" 1
# 26 "../../gcc/gimplify.h"
typedef bool (*gimple_predicate)(tree);


enum fallback {
  fb_none = 0,

  fb_rvalue = 1,


  fb_lvalue = 2,


  fb_mayfail = 4,

  fb_either= fb_rvalue | fb_lvalue
};

typedef int fallback_t;

enum gimplify_status {
  GS_ERROR = -2,
  GS_UNHANDLED = -1,
  GS_OK = 0,
  GS_ALL_DONE = 1
};

extern void free_gimplify_stack (void);
extern void push_gimplify_context (bool in_ssa = false,
       bool rhs_cond_ok = false);
extern void pop_gimplify_context (gimple *);
extern gbind *gimple_current_bind_expr (void);
extern vec<gbind *> gimple_bind_expr_stack (void);
extern void gimplify_and_add (tree, gimple_seq *);
extern tree get_formal_tmp_var (tree, gimple_seq *);
extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq *,
         bool = true);
extern void declare_vars (tree, gimple *, bool);
extern void gimple_add_tmp_var (tree);
extern void gimple_add_tmp_var_fn (struct function *, tree);
extern tree unshare_expr (tree);
extern tree unshare_expr_without_location (tree);
extern tree voidify_wrapper_expr (tree, tree);
extern tree build_and_jump (tree *);
extern enum gimplify_status gimplify_self_mod_expr (tree *, gimple_seq *,
          gimple_seq *, bool, tree);
extern tree gimple_boolify (tree);
extern gimple_predicate rhs_predicate_for (tree);
extern bool gimplify_stmt (tree *, gimple_seq *);
extern void omp_firstprivatize_variable (struct gimplify_omp_ctx *, tree);
extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,
        bool (*) (tree), fallback_t);

extern void gimplify_type_sizes (tree, gimple_seq *);
extern void gimplify_one_sizepos (tree *, gimple_seq *);
extern gbind *gimplify_body (tree, bool);
extern enum gimplify_status gimplify_arg (tree *, gimple_seq *, location_t,
       bool = true);
extern void gimplify_function_tree (tree);
extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,
        gimple_seq *);
gimple *gimplify_assign (tree, tree, gimple_seq *);
# 36 "../../gcc/generic-match-head.c" 2
# 1 "../../gcc/optabs-tree.h" 1
# 23 "../../gcc/optabs-tree.h"
# 1 "../../gcc/optabs-query.h" 1
# 23 "../../gcc/optabs-query.h"
# 1 "./insn-opinit.h" 1





enum optab_tag {
  unknown_optab,
  sext_optab,
  trunc_optab,
  zext_optab,
  sfix_optab,
  ufix_optab,
  sfloat_optab,
  ufloat_optab,
  lrint_optab,
  lround_optab,
  lfloor_optab,
  lceil_optab,
  fract_optab,
  fractuns_optab,
  satfract_optab,
  satfractuns_optab,
  sfixtrunc_optab,
  ufixtrunc_optab,
  smul_widen_optab,
  umul_widen_optab,
  usmul_widen_optab,
  smadd_widen_optab,
  umadd_widen_optab,
  ssmadd_widen_optab,
  usmadd_widen_optab,
  smsub_widen_optab,
  umsub_widen_optab,
  ssmsub_widen_optab,
  usmsub_widen_optab,
  vec_load_lanes_optab,
  vec_store_lanes_optab,
  vec_mask_load_lanes_optab,
  vec_mask_store_lanes_optab,
  vcond_optab,
  vcondu_optab,
  vcondeq_optab,
  vcond_mask_optab,
  vec_cmp_optab,
  vec_cmpu_optab,
  vec_cmpeq_optab,
  maskload_optab,
  maskstore_optab,
  vec_extract_optab,
  vec_init_optab,
  while_ult_optab,
  add_optab,
  addv_optab,
  ssadd_optab,
  usadd_optab,
  sub_optab,
  subv_optab,
  sssub_optab,
  ussub_optab,
  smul_optab,
  smulv_optab,
  ssmul_optab,
  usmul_optab,
  sdiv_optab,
  sdivv_optab,
  ssdiv_optab,
  udiv_optab,
  usdiv_optab,
  sdivmod_optab,
  udivmod_optab,
  smod_optab,
  umod_optab,
  ftrunc_optab,
  and_optab,
  ior_optab,
  xor_optab,
  ashl_optab,
  ssashl_optab,
  usashl_optab,
  ashr_optab,
  lshr_optab,
  rotl_optab,
  rotr_optab,
  vashl_optab,
  vashr_optab,
  vlshr_optab,
  vrotl_optab,
  vrotr_optab,
  smin_optab,
  smax_optab,
  umin_optab,
  umax_optab,
  neg_optab,
  negv_optab,
  ssneg_optab,
  usneg_optab,
  abs_optab,
  absv_optab,
  one_cmpl_optab,
  bswap_optab,
  ffs_optab,
  clz_optab,
  ctz_optab,
  clrsb_optab,
  popcount_optab,
  parity_optab,
  cmp_optab,
  ucmp_optab,
  eq_optab,
  ne_optab,
  gt_optab,
  ge_optab,
  lt_optab,
  le_optab,
  unord_optab,
  powi_optab,
  sqrt_optab,
  sync_old_add_optab,
  sync_old_sub_optab,
  sync_old_ior_optab,
  sync_old_and_optab,
  sync_old_xor_optab,
  sync_old_nand_optab,
  sync_new_add_optab,
  sync_new_sub_optab,
  sync_new_ior_optab,
  sync_new_and_optab,
  sync_new_xor_optab,
  sync_new_nand_optab,
  sync_compare_and_swap_optab,
  sync_lock_test_and_set_optab,
  mov_optab,
  movstrict_optab,
  movmisalign_optab,
  storent_optab,
  insv_optab,
  extv_optab,
  extzv_optab,
  insvmisalign_optab,
  extvmisalign_optab,
  extzvmisalign_optab,
  push_optab,
  reload_in_optab,
  reload_out_optab,
  cbranch_optab,
  addcc_optab,
  negcc_optab,
  notcc_optab,
  movcc_optab,
  cond_add_optab,
  cond_sub_optab,
  cond_and_optab,
  cond_ior_optab,
  cond_xor_optab,
  cond_smin_optab,
  cond_smax_optab,
  cond_umin_optab,
  cond_umax_optab,
  cmov_optab,
  cstore_optab,
  ctrap_optab,
  addv4_optab,
  subv4_optab,
  mulv4_optab,
  uaddv4_optab,
  usubv4_optab,
  umulv4_optab,
  negv3_optab,
  addptr3_optab,
  smul_highpart_optab,
  umul_highpart_optab,
  cmpmem_optab,
  cmpstr_optab,
  cmpstrn_optab,
  movmem_optab,
  setmem_optab,
  strlen_optab,
  fma_optab,
  fms_optab,
  fnma_optab,
  fnms_optab,
  rint_optab,
  round_optab,
  floor_optab,
  ceil_optab,
  btrunc_optab,
  nearbyint_optab,
  acos_optab,
  asin_optab,
  atan2_optab,
  atan_optab,
  copysign_optab,
  xorsign_optab,
  cos_optab,
  exp10_optab,
  exp2_optab,
  exp_optab,
  expm1_optab,
  fmod_optab,
  ilogb_optab,
  isinf_optab,
  ldexp_optab,
  log10_optab,
  log1p_optab,
  log2_optab,
  log_optab,
  logb_optab,
  pow_optab,
  remainder_optab,
  rsqrt_optab,
  scalb_optab,
  signbit_optab,
  significand_optab,
  sin_optab,
  sincos_optab,
  tan_optab,
  fmax_optab,
  fmin_optab,
  reduc_smax_scal_optab,
  reduc_smin_scal_optab,
  reduc_plus_scal_optab,
  reduc_umax_scal_optab,
  reduc_umin_scal_optab,
  reduc_and_scal_optab,
  reduc_ior_scal_optab,
  reduc_xor_scal_optab,
  fold_left_plus_optab,
  extract_last_optab,
  fold_extract_last_optab,
  sdot_prod_optab,
  ssum_widen_optab,
  udot_prod_optab,
  usum_widen_optab,
  usad_optab,
  ssad_optab,
  vec_pack_sfix_trunc_optab,
  vec_pack_ssat_optab,
  vec_pack_trunc_optab,
  vec_pack_ufix_trunc_optab,
  vec_pack_usat_optab,
  vec_perm_optab,
  vec_realign_load_optab,
  vec_set_optab,
  vec_shr_optab,
  vec_unpacks_float_hi_optab,
  vec_unpacks_float_lo_optab,
  vec_unpacks_hi_optab,
  vec_unpacks_lo_optab,
  vec_unpacku_float_hi_optab,
  vec_unpacku_float_lo_optab,
  vec_unpacku_hi_optab,
  vec_unpacku_lo_optab,
  vec_widen_smult_even_optab,
  vec_widen_smult_hi_optab,
  vec_widen_smult_lo_optab,
  vec_widen_smult_odd_optab,
  vec_widen_sshiftl_hi_optab,
  vec_widen_sshiftl_lo_optab,
  vec_widen_umult_even_optab,
  vec_widen_umult_hi_optab,
  vec_widen_umult_lo_optab,
  vec_widen_umult_odd_optab,
  vec_widen_ushiftl_hi_optab,
  vec_widen_ushiftl_lo_optab,
  sync_add_optab,
  sync_and_optab,
  sync_ior_optab,
  sync_lock_release_optab,
  sync_nand_optab,
  sync_sub_optab,
  sync_xor_optab,
  atomic_add_fetch_optab,
  atomic_add_optab,
  atomic_and_fetch_optab,
  atomic_and_optab,
  atomic_bit_test_and_set_optab,
  atomic_bit_test_and_complement_optab,
  atomic_bit_test_and_reset_optab,
  atomic_compare_and_swap_optab,
  atomic_exchange_optab,
  atomic_fetch_add_optab,
  atomic_fetch_and_optab,
  atomic_fetch_nand_optab,
  atomic_fetch_or_optab,
  atomic_fetch_sub_optab,
  atomic_fetch_xor_optab,
  atomic_load_optab,
  atomic_nand_fetch_optab,
  atomic_nand_optab,
  atomic_or_fetch_optab,
  atomic_or_optab,
  atomic_store_optab,
  atomic_sub_fetch_optab,
  atomic_sub_optab,
  atomic_xor_fetch_optab,
  atomic_xor_optab,
  get_thread_pointer_optab,
  set_thread_pointer_optab,
  gather_load_optab,
  mask_gather_load_optab,
  scatter_store_optab,
  mask_scatter_store_optab,
  vec_duplicate_optab,
  vec_series_optab,
  vec_shl_insert_optab,
  FIRST_CONV_OPTAB = sext_optab,
  LAST_CONVLIB_OPTAB = satfractuns_optab,
  LAST_CONV_OPTAB = while_ult_optab,
  FIRST_NORM_OPTAB = add_optab,
  LAST_NORMLIB_OPTAB = sync_lock_test_and_set_optab,
  LAST_NORM_OPTAB = vec_shl_insert_optab
};





typedef enum optab_tag optab;
typedef enum optab_tag convert_optab;
typedef enum optab_tag direct_optab;

struct optab_libcall_d
{
  char libcall_suffix;
  const char *libcall_basename;
  void (*libcall_gen) (optab, const char *name,
         char suffix, machine_mode);
};

struct convert_optab_libcall_d
{
  const char *libcall_basename;
  void (*libcall_gen) (convert_optab, const char *name,
         machine_mode, machine_mode);
};







extern const optab code_to_optab_[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const enum rtx_code optab_to_code_[299];

static inline optab
code_to_optab (enum rtx_code code)
{
  return code_to_optab_[code];
}

static inline enum rtx_code
optab_to_code (optab op)
{
  return optab_to_code_[op];
}


extern const struct convert_optab_libcall_d convlib_def[15];
extern const struct optab_libcall_d normlib_def[80];


extern enum insn_code raw_optab_handler (unsigned);
extern bool swap_optab_enable (optab, machine_mode, bool);


struct target_optabs {

  bool pat_enable[1496];



  bool supports_vec_gather_load;
  bool supports_vec_gather_load_cached;
  bool supports_vec_scatter_store;
  bool supports_vec_scatter_store_cached;
};
extern void init_all_optabs (struct target_optabs *);

extern struct target_optabs default_target_optabs;
extern struct target_optabs *this_fn_optabs;

extern struct target_optabs *this_target_optabs;
# 24 "../../gcc/optabs-query.h" 2




inline bool
convert_optab_p (optab op)
{
  return op > unknown_optab && op <= LAST_CONV_OPTAB;
}




inline enum insn_code
optab_handler (optab op, machine_mode mode)
{
  unsigned scode = (op << 16) | mode;
  ((void)(!(op > LAST_CONV_OPTAB) ? fancy_abort ("../../gcc/optabs-query.h", 41, __FUNCTION__), 0 : 0));
  return raw_optab_handler (scode);
}





inline enum insn_code
convert_optab_handler (convert_optab op, machine_mode to_mode,
         machine_mode from_mode)
{
  unsigned scode = (op << 16) | (from_mode << 8) | to_mode;
  ((void)(!(convert_optab_p (op)) ? fancy_abort ("../../gcc/optabs-query.h", 54, __FUNCTION__), 0 : 0));
  return raw_optab_handler (scode);
}

enum insn_code convert_optab_handler (convert_optab, machine_mode,
          machine_mode, optimization_type);




inline enum insn_code
direct_optab_handler (direct_optab op, machine_mode mode)
{
  return optab_handler (op, mode);
}

enum insn_code direct_optab_handler (convert_optab, machine_mode,
         optimization_type);



inline bool
trapv_unoptab_p (optab unoptab)
{
  return (unoptab == negv_optab
   || unoptab == absv_optab);
}



inline bool
trapv_binoptab_p (optab binoptab)
{
  return (binoptab == addv_optab
   || binoptab == subv_optab
   || binoptab == smulv_optab);
}




static inline enum insn_code
get_vec_cmp_icode (machine_mode vmode, machine_mode mask_mode, bool uns)
{
  optab tab = uns ? vec_cmpu_optab : vec_cmp_optab;
  return convert_optab_handler (tab, vmode, mask_mode);
}




static inline enum insn_code
get_vec_cmp_eq_icode (machine_mode vmode, machine_mode mask_mode)
{
  return convert_optab_handler (vec_cmpeq_optab, vmode, mask_mode);
}




inline enum insn_code
get_vcond_icode (machine_mode vmode, machine_mode cmode, bool uns)
{
  enum insn_code icode = CODE_FOR_nothing;
  if (uns)
    icode = convert_optab_handler (vcondu_optab, vmode, cmode);
  else
    icode = convert_optab_handler (vcond_optab, vmode, cmode);
  return icode;
}




static inline enum insn_code
get_vcond_mask_icode (machine_mode vmode, machine_mode mmode)
{
  return convert_optab_handler (vcond_mask_optab, vmode, mmode);
}




static inline enum insn_code
get_vcond_eq_icode (machine_mode vmode, machine_mode cmode)
{
  return convert_optab_handler (vcondeq_optab, vmode, cmode);
}


enum extraction_pattern { EP_insv, EP_extv, EP_extzv };


struct extraction_insn
{

  enum insn_code icode;




  opt_scalar_int_mode struct_mode;



  scalar_int_mode field_mode;



  scalar_int_mode pos_mode;
};

bool get_best_reg_extraction_insn (extraction_insn *,
       enum extraction_pattern,
       unsigned long, machine_mode);
bool get_best_mem_extraction_insn (extraction_insn *,
       enum extraction_pattern,
       long, long, machine_mode);

enum insn_code can_extend_p (machine_mode, machine_mode, int);
enum insn_code can_float_p (machine_mode, machine_mode, int);
enum insn_code can_fix_p (machine_mode, machine_mode, int, bool *);
bool can_conditionally_move_p (machine_mode mode);
opt_machine_mode qimode_for_vec_perm (machine_mode);
bool selector_fits_mode_p (machine_mode, const vec_perm_indices &);
bool can_vec_perm_var_p (machine_mode);
bool can_vec_perm_const_p (machine_mode, const vec_perm_indices &,
      bool = true);



enum insn_code find_widening_optab_handler_and_mode (optab, machine_mode,
           machine_mode,
           machine_mode *);
int can_mult_highpart_p (machine_mode, bool);
bool can_vec_mask_load_store_p (machine_mode, machine_mode, bool);
bool can_compare_and_swap_p (machine_mode, bool);
bool can_atomic_exchange_p (machine_mode, bool);
bool can_atomic_load_p (machine_mode);
bool lshift_cheap_p (bool);
bool supports_vec_gather_load_p ();
bool supports_vec_scatter_store_p ();




template<typename T>
inline enum insn_code
find_widening_optab_handler_and_mode (optab op, const T &to_mode,
          const T &from_mode, T *found_mode)
{
  machine_mode tmp;
  enum insn_code icode = find_widening_optab_handler_and_mode
    (op, machine_mode (to_mode), machine_mode (from_mode), &tmp);
  if (icode != CODE_FOR_nothing && found_mode)
    *found_mode = as_a <T> (tmp);
  return icode;
}
# 24 "../../gcc/optabs-tree.h" 2




enum optab_subtype
{
  optab_default,
  optab_scalar,
  optab_vector
};




optab optab_for_tree_code (enum tree_code, const_tree, enum optab_subtype);
bool supportable_convert_operation (enum tree_code, tree, tree, tree *,
        enum tree_code *);
bool expand_vec_cmp_expr_p (tree, tree, enum tree_code);
bool expand_vec_cond_expr_p (tree, tree, enum tree_code);
void init_tree_optimization_optabs (tree);
bool target_supports_op_p (tree, enum tree_code,
      enum optab_subtype = optab_default);
# 37 "../../gcc/generic-match-head.c" 2






static inline bool
types_match (tree t1, tree t2)
{
  if (!(tree_code_type[(int) (((enum tree_code) (t1)->base.code))] == tcc_type))
    t1 = ((contains_struct_check ((t1), (TS_TYPED), "../../gcc/generic-match-head.c", 47, __FUNCTION__))->typed.type);
  if (!(tree_code_type[(int) (((enum tree_code) (t2)->base.code))] == tcc_type))
    t2 = ((contains_struct_check ((t2), (TS_TYPED), "../../gcc/generic-match-head.c", 49, __FUNCTION__))->typed.type);

  return ((tree_class_check ((t1), (tcc_type), "../../gcc/generic-match-head.c", 51, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((t2), (tcc_type), "../../gcc/generic-match-head.c", 51, __FUNCTION__))->type_common.main_variant);
}




static inline bool
single_use (tree t __attribute__ ((__unused__)))
{
  return true;
}




static inline bool
canonicalize_math_p ()
{
  return true;
}




static inline bool
canonicalize_math_after_vectorization_p ()
{
  return false;
}
# 5 "generic-match.c" 2

bool
tree_nop_convert (tree t, tree *res_ops)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 9, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 10, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 15, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { op0 };

   if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 20, __FUNCTION__))->typed.type)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:80, %s:%d\n", "generic-match.c", 22);
       res_ops[0] = captures[0];
       return true;
     }
 }
        break;
      }
    case VIEW_CONVERT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 31, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { op0 };

   if ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE) && (!maybe_ne (TYPE_VECTOR_SUBPARTS (type), TYPE_VECTOR_SUBPARTS (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36, __FUNCTION__))->typed.type)))) && tree_nop_conversion_p (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 36, __FUNCTION__))->typed.type), ((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36, __FUNCTION__))->typed.type)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:83, %s:%d\n", "generic-match.c", 38);
       res_ops[0] = captures[0];
       return true;
     }
 }
        break;
      }
    default:;
    }
  {

    tree captures[1] __attribute__ ((__unused__)) = { t };
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:90, %s:%d\n", "generic-match.c", 50);
    res_ops[0] = captures[0];
    return true;
  }
  return false;
}

bool
tree_power_of_two_cand (tree t, tree *res_ops)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 60, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 61, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[1] __attribute__ ((__unused__)) = { t };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:482, %s:%d\n", "generic-match.c", 69);
   res_ops[0] = captures[0];
   return true;
 }
        break;
      }
    case LSHIFT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 77, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 78, __FUNCTION__)))));
 switch (((enum tree_code) (op0)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:484, %s:%d\n", "generic-match.c", 86);
  res_ops[0] = captures[0];
  return true;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_negate_expr_p (tree t)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 104, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 105, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case INTEGER_CST:
      {
 {


   if (((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 113, __FUNCTION__))->base.u.bits.unsigned_flag)) || (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 113, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)) && may_negate_without_overflow_p (t)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1005, %s:%d\n", "generic-match.c", 115);
       return true;
     }
 }
        break;
      }
    case FIXED_CST:
      {
 {

   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1011, %s:%d\n", "generic-match.c", 125);
   return true;
 }
        break;
      }
    case NEGATE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 132, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { op0 };

   if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 137, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1013, %s:%d\n", "generic-match.c", 139);
       return true;
     }
 }
        break;
      }
    case REAL_CST:
      {
 {


   if (real_isneg (&((*((tree_check ((t), "generic-match.c", 150, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1016, %s:%d\n", "generic-match.c", 152);
       return true;
     }
 }
        break;
      }
    case VECTOR_CST:
      {
 {


   if (((((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 163, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 163, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 163, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 163, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 163, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 163, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1021, %s:%d\n", "generic-match.c", 165);
       return true;
     }
 }
        break;
      }
    case MINUS_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 173, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 174, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

   if ((((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 179, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 179, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 179, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 179, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))) || (((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 179, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) && !HONOR_SIGN_DEPENDENT_ROUNDING (type) && !HONOR_SIGNED_ZEROS (type)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1024, %s:%d\n", "generic-match.c", 181);
       return true;
     }
 }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_truth_valued_p (tree t)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 195, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 196, __FUNCTION__))->base.side_effects_flag)) return false;
  {

    tree captures[1] __attribute__ ((__unused__)) = { t };

    if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 201, __FUNCTION__))->type_common.precision) == 1)
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1137, %s:%d\n", "generic-match.c", 203);
 return true;
      }
  }
  switch (((enum tree_code) (t)->base.code))
    {
    case LT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 211, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 212, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 216);
   return true;
 }
        break;
      }
    case LE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 223, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 224, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 228);
   return true;
 }
        break;
      }
    case EQ_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 235, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 236, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 240);
   return true;
 }
        break;
      }
    case NE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 247, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 248, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 252);
   return true;
 }
        break;
      }
    case GE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 259, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 260, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 264);
   return true;
 }
        break;
      }
    case GT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 271, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 272, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 276);
   return true;
 }
        break;
      }
    case UNORDERED_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 283, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 284, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 288);
   return true;
 }
        break;
      }
    case ORDERED_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 295, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 296, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 300);
   return true;
 }
        break;
      }
    case UNLT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 307, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 308, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 312);
   return true;
 }
        break;
      }
    case UNLE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 319, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 320, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 324);
   return true;
 }
        break;
      }
    case UNGT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 331, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 332, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 336);
   return true;
 }
        break;
      }
    case UNGE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 343, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 344, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 348);
   return true;
 }
        break;
      }
    case UNEQ_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 355, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 356, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 360);
   return true;
 }
        break;
      }
    case LTGT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 367, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 368, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 372);
   return true;
 }
        break;
      }
    case TRUTH_AND_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 379, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 380, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 384);
   return true;
 }
        break;
      }
    case TRUTH_ANDIF_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 391, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 392, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 396);
   return true;
 }
        break;
      }
    case TRUTH_OR_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 403, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 404, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 408);
   return true;
 }
        break;
      }
    case TRUTH_ORIF_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 415, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 416, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 420);
   return true;
 }
        break;
      }
    case TRUTH_XOR_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 427, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 428, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1141, %s:%d\n", "generic-match.c", 432);
   return true;
 }
        break;
      }
    case TRUTH_NOT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 439, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { op0 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1143, %s:%d\n", "generic-match.c", 443);
   return true;
 }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_logical_inverted_value (tree t, tree *res_ops)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 456, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 457, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case TRUTH_NOT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 462, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { op0 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1145, %s:%d\n", "generic-match.c", 466);
   res_ops[0] = captures[0];
   return true;
 }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 474, __FUNCTION__)))));
 if (tree_truth_valued_p (op0))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1147, %s:%d\n", "generic-match.c", 480);
       res_ops[0] = captures[0];
       return true;
     }
   }
        break;
      }
    case EQ_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 489, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 490, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1149, %s:%d\n", "generic-match.c", 496);
       res_ops[0] = captures[0];
       return true;
     }
   }
        break;
      }
    case NE_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 505, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 506, __FUNCTION__)))));
 if (tree_truth_valued_p (op0))
   {
     if (integer_truep (op1))
       {
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1151, %s:%d\n", "generic-match.c", 514);
    res_ops[0] = captures[0];
    return true;
  }
       }
   }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 524, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 525, __FUNCTION__)))));
 if (tree_truth_valued_p (op0))
   {
     if (integer_truep (op1))
       {
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1153, %s:%d\n", "generic-match.c", 533);
    res_ops[0] = captures[0];
    return true;
  }
       }
   }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_with_possible_nonzero_bits (tree t)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 549, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 550, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[1] __attribute__ ((__unused__)) = { t };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1474, %s:%d\n", "generic-match.c", 558);
   return true;
 }
        break;
      }
    case SSA_NAME:
      {
 {

   tree captures[1] __attribute__ ((__unused__)) = { t };

   if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 569, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 569, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 569, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 569, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 569, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1476, %s:%d\n", "generic-match.c", 571);
       return true;
     }
 }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_with_possible_nonzero_bits2 (tree t, tree *res_ops)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 585, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 586, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 591, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 592, __FUNCTION__)))));
 if (tree_with_possible_nonzero_bits (op0))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1481, %s:%d\n", "generic-match.c", 598);
       res_ops[0] = captures[0];
       return true;
     }
   }
 if (tree_with_possible_nonzero_bits (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op1, op0 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1481, %s:%d\n", "generic-match.c", 608);
       res_ops[0] = captures[0];
       return true;
     }
   }
        break;
      }
    default:;
    }
if (tree_with_possible_nonzero_bits (t))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { t };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1479, %s:%d\n", "generic-match.c", 622);
      res_ops[0] = captures[0];
      return true;
    }
  }
  return false;
}

bool
tree_with_certain_nonzero_bits2 (tree t, tree *res_ops)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 633, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 634, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[1] __attribute__ ((__unused__)) = { t };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1486, %s:%d\n", "generic-match.c", 642);
   res_ops[0] = captures[0];
   return true;
 }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 650, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 651, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { op1, op0 };
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1488, %s:%d\n", "generic-match.c", 659);
  res_ops[0] = captures[0];
  return true;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_compositional_complex (tree t)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 677, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 678, __FUNCTION__))->base.side_effects_flag)) return false;
  switch (((enum tree_code) (t)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 683, __FUNCTION__)))));
 switch (((enum tree_code) (op0)->base.code))
   {
   case COMPLEX_EXPR:
     {
       tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 688, __FUNCTION__)))));
       tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 689, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2584, %s:%d\n", "generic-match.c", 693);
  return true;
       }
       break;
     }
          default:;
          }
        break;
      }
    case COMPLEX_EXPR:
      {
 tree op0 = (*((const_cast<tree*> (tree_operand_check ((t), (0), "generic-match.c", 704, __FUNCTION__)))));
 tree op1 = (*((const_cast<tree*> (tree_operand_check ((t), (1), "generic-match.c", 705, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2584, %s:%d\n", "generic-match.c", 709);
   return true;
 }
        break;
      }
    default:;
    }
  return false;
}

bool
tree_double_value_p (tree t)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 722, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 723, __FUNCTION__))->base.side_effects_flag)) return false;
  {

    tree captures[1] __attribute__ ((__unused__)) = { t };

    if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 728, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 728, __FUNCTION__))->type_common.main_variant) == global_trees[TI_DOUBLE_TYPE])
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4248, %s:%d\n", "generic-match.c", 730);
 return true;
      }
  }
  return false;
}

bool
tree_float_value_p (tree t)
{
  const tree type = ((contains_struct_check ((t), (TS_TYPED), "generic-match.c", 740, __FUNCTION__))->typed.type);
  if (((non_type_check ((t), "generic-match.c", 741, __FUNCTION__))->base.side_effects_flag)) return false;
  {

    tree captures[1] __attribute__ ((__unused__)) = { t };

    if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 746, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 746, __FUNCTION__))->type_common.main_variant) == global_trees[TI_FLOAT_TYPE])
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4269, %s:%d\n", "generic-match.c", 748);
 return true;
      }
  }
  return false;
}

static tree
generic_simplify_1 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (wi::gt_p (wi::to_wide (captures[1]), 0, ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 761, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 761, __FUNCTION__))->base.u.bits.unsigned_flag))))
    {
      {

 bool ovf;
 wide_int prod = wi::mul (wi::to_wide (captures[2]), wi::to_wide (captures[1]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 766, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 766, __FUNCTION__))->base.u.bits.unsigned_flag)), &ovf);

   if (ovf)
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 770, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 770 "generic-match.c" 3 4
                                                  __null
# 770 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 771, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 771 "generic-match.c" 3 4
                                                  __null
# 771 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3357, %s:%d\n", "generic-match.c", 772);
       tree res;
       res = constant_boolean_node (wi::lt_p (wi::to_wide (captures[2]), 0, ((signop) ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 774, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 774, __FUNCTION__))->base.u.bits.unsigned_flag))) != (cmp == LT_EXPR || cmp == LE_EXPR), type);
       if (((non_type_check ((captures[0]), "generic-match.c", 775, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
       return res;
     }
   else
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 781, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 781 "generic-match.c" 3 4
                                                  __null
# 781 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 782, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 782 "generic-match.c" 3 4
                                                  __null
# 782 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3360, %s:%d\n", "generic-match.c", 783);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = wide_int_to_tree (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 787, __FUNCTION__))->typed.type), prod);
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
      }
    }
  return (tree) 
# 794 "generic-match.c" 3 4
        __null
# 794 "generic-match.c"
                 ;
}

static tree
generic_simplify_2 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)), const enum tree_code ext __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 803, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 803, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 803, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((enum tree_code) (captures[1])->base.code) != INTEGER_CST)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4498, %s:%d\n", "generic-match.c", 805);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
 tree ops1[2], res;
 ops1[0] = captures[2];
 ops1[1] = captures[4];
 res = fold_build2_loc (loc, ext, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 813, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 820 "generic-match.c" 3 4
        __null
# 820 "generic-match.c"
                 ;
}

static tree
generic_simplify_3 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{

  if ((((tree_class_check ((type), (tcc_type), "generic-match.c", 829, __FUNCTION__))->base.u.bits.unsigned_flag) || tree_expr_nonnegative_p (captures[0])) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 829, __FUNCTION__))->typed.type)) && integer_pow2p (captures[3]) && tree_int_cst_sgn (captures[3]) > 0)
    {
      if (((non_type_check ((op1), "generic-match.c", 831, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 831 "generic-match.c" 3 4
                                         __null
# 831 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:493, %s:%d\n", "generic-match.c", 832);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[1], res;
 {
   tree ops2[2], res;
   ops2[0] = captures[2];
   ops2[1] = build_int_cst (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 841, __FUNCTION__))->typed.type), 1);
   res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 842, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
   ops1[0] = res;
 }
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 845, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 855 "generic-match.c" 3 4
        __null
# 855 "generic-match.c"
                 ;
}

static tree
generic_simplify_4 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bit_op __attribute__ ((__unused__)), const enum tree_code shift __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 864, __FUNCTION__))->typed.type)))
    {
      {

 tree mask = int_const_binop (shift, fold_convert_loc (((source_location) 0), type, captures[3]), captures[4]);
   if (((non_type_check ((captures[3]), "generic-match.c", 869, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 869 "generic-match.c" 3 4
                                              __null
# 869 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[4]), "generic-match.c", 870, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 870 "generic-match.c" 3 4
                                              __null
# 870 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2338, %s:%d\n", "generic-match.c", 871);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 878, __FUNCTION__))->typed.type) != type)
  res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
       else
         res = ops2[0];
       ops1[0] = res;
     }
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, shift, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 885, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = mask;
   tree res;
   res = fold_build2_loc (loc, bit_op, type, res_op0, res_op1);
   return res;
      }
    }
  return (tree) 
# 895 "generic-match.c" 3 4
        __null
# 895 "generic-match.c"
                 ;
}

static tree
generic_simplify_5 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code scmp __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 904, __FUNCTION__))->typed.type)), "generic-match.c", 904, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3432, %s:%d\n", "generic-match.c", 906);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, scmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 915 "generic-match.c" 3 4
        __null
# 915 "generic-match.c"
                 ;
}

static tree
generic_simplify_6 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (!((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 924, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 924, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 924, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 924, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 924, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 924, __FUNCTION__))->typed.type)), "generic-match.c", 924, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1407, %s:%d\n", "generic-match.c", 926);
      tree res_op0;
      res_op0 = captures[3];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 933, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 937 "generic-match.c" 3 4
        __null
# 937 "generic-match.c"
                 ;
}

static tree
generic_simplify_7 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)), const enum tree_code rop __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 946, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 946, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:962, %s:%d\n", "generic-match.c", 948);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 953, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      {
 tree ops1[2], res;
 {
   tree ops2[1], res;
   ops2[0] = captures[1];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 965, __FUNCTION__))->typed.type) != type)
     res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
   else
     res = ops2[0];
   ops1[0] = res;
 }
 {
   tree ops2[1], res;
   ops2[0] = captures[2];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 974, __FUNCTION__))->typed.type) != type)
     res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
   else
     res = ops2[0];
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 980, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, rop, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 987 "generic-match.c" 3 4
        __null
# 987 "generic-match.c"
                 ;
}

static tree
generic_simplify_8 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 996, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 996, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 996, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 996, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:516, %s:%d\n", "generic-match.c", 998);
      tree res;
      res = captures[0];
      if (((non_type_check ((captures[1]), "generic-match.c", 1001, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 1005 "generic-match.c" 3 4
        __null
# 1005 "generic-match.c"
                 ;
}

static tree
generic_simplify_9 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (wi::lt_p (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1014, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1014, __FUNCTION__))->base.u.bits.unsigned_flag))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2109, %s:%d\n", "generic-match.c", 1016);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 1019, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 1021, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[2]), "generic-match.c", 1023, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
  else
    {

      if (wi::gt_p (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1030, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1030, __FUNCTION__))->base.u.bits.unsigned_flag))))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2112, %s:%d\n", "generic-match.c", 1032);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 1039, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
    }
  return (tree) 
# 1044 "generic-match.c" 3 4
        __null
# 1044 "generic-match.c"
                 ;
}

static tree
generic_simplify_10 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code ncmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1053, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1053, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1053, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && type_has_mode_precision_p (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1053, __FUNCTION__))->typed.type)) && element_precision (captures[0]) >= element_precision (captures[1]) && wi::only_sign_bit_p (wi::to_wide (captures[2]), element_precision (captures[1])))
    {
      {

 tree stype = signed_type_for (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1057, __FUNCTION__))->typed.type));
   if (((non_type_check ((op1), "generic-match.c", 1058, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1058 "generic-match.c" 3 4
                                      __null
# 1058 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3591, %s:%d\n", "generic-match.c", 1059);
   tree res_op0;
   {
     tree ops1[1], res;
     ops1[0] = captures[1];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1064, __FUNCTION__))->typed.type) != stype)
       res = fold_build1_loc (loc, NOP_EXPR, stype, ops1[0]);
     else
       res = ops1[0];
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = build_zero_cst (stype);
   tree res;
   res = fold_build2_loc (loc, ncmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[2]), "generic-match.c", 1074, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
   return res;
      }
    }
  return (tree) 
# 1079 "generic-match.c" 3 4
        __null
# 1079 "generic-match.c"
                 ;
}

static tree
generic_simplify_11 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code icmp __attribute__ ((__unused__)))
{
  if (((non_type_check ((op0), "generic-match.c", 1087, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1087 "generic-match.c" 3 4
                                     __null
# 1087 "generic-match.c"
                                              ;
  if (((non_type_check ((op1), "generic-match.c", 1088, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1088 "generic-match.c" 3 4
                                     __null
# 1088 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2225, %s:%d\n", "generic-match.c", 1089);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = build_zero_cst (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1093, __FUNCTION__))->typed.type));
  tree res;
  res = fold_build2_loc (loc, icmp, type, res_op0, res_op1);
  return res;
  return (tree) 
# 1097 "generic-match.c" 3 4
        __null
# 1097 "generic-match.c"
                 ;
}

static tree
generic_simplify_12 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn copysigns __attribute__ ((__unused__)))
{

  if (real_isneg (&((*((tree_check ((captures[1]), "generic-match.c", 1106, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:595, %s:%d\n", "generic-match.c", 1108);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, ABS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1113, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      if (((non_type_check ((captures[1]), "generic-match.c", 1118, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  else
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:596, %s:%d\n", "generic-match.c", 1124);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, ABS_EXPR, type, res_op0);
      if (((non_type_check ((captures[1]), "generic-match.c", 1129, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 1133 "generic-match.c" 3 4
        __null
# 1133 "generic-match.c"
                 ;
}

static tree
generic_simplify_13 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 1142, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 1145, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1715, %s:%d\n", "generic-match.c", 1147);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[0]), "generic-match.c", 1154, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  return (tree) 
# 1159 "generic-match.c" 3 4
        __null
# 1159 "generic-match.c"
                 ;
}

static tree
generic_simplify_14 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  {

 poly_int64 off0, off1;
 tree base0 = get_addr_base_and_unit_offset ((*((const_cast<tree*> (tree_operand_check ((captures[1]), (0), "generic-match.c", 1170, __FUNCTION__))))), &off0);
 tree base1 = get_addr_base_and_unit_offset ((*((const_cast<tree*> (tree_operand_check ((captures[2]), (0), "generic-match.c", 1171, __FUNCTION__))))), &off1);
 if (base0 && ((enum tree_code) (base0)->base.code) == MEM_REF) { off0 += mem_ref_offset (base0).force_shwi ();
 base0 = (*((const_cast<tree*> (tree_operand_check ((base0), (0), "generic-match.c", 1173, __FUNCTION__)))));
 } if (base1 && ((enum tree_code) (base1)->base.code) == MEM_REF) { off1 += mem_ref_offset (base1).force_shwi ();
 base1 = (*((const_cast<tree*> (tree_operand_check ((base1), (0), "generic-match.c", 1175, __FUNCTION__)))));
 }
      if (base0 && base1)
 {
   {

 int equal = 2;
 if (1 && (((((enum tree_code) (base0)->base.code) == VAR_DECL) && ((tree_check3 ((base0), "generic-match.c", 1182, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2)) || ((((enum tree_code) (base1)->base.code) == VAR_DECL) && ((tree_check3 ((base1), "generic-match.c", 1182, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2)))) ;
 else if (decl_in_symtab_p (base0) && decl_in_symtab_p (base1)) equal = symtab_node::get_create (base0) ->equal_address_to (symtab_node::get_create (base1));
 else if (((tree_code_type[(int) (((enum tree_code) (base0)->base.code))] == tcc_declaration) || ((enum tree_code) (base0)->base.code) == SSA_NAME || ((enum tree_code) (base0)->base.code) == STRING_CST) && ((tree_code_type[(int) (((enum tree_code) (base1)->base.code))] == tcc_declaration) || ((enum tree_code) (base1)->base.code) == SSA_NAME || ((enum tree_code) (base1)->base.code) == STRING_CST)) equal = (base0 == base1);

       if (equal == 1 && (cmp == EQ_EXPR || cmp == NE_EXPR || (!maybe_ne (off0, off1)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1186, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1186, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1186, __FUNCTION__))->typed.type)), "generic-match.c", 1186, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1186, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1186, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && ((tree_code_type[(int) (((enum tree_code) (base0)->base.code))] == tcc_declaration) || ((enum tree_code) (base0)->base.code) == STRING_CST))))
  {

    if (cmp == EQ_EXPR && ((!maybe_ne (off0, off1)) || (!maybe_eq (off0, off1))))
      {
        if (((non_type_check ((captures[0]), "generic-match.c", 1191, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1191 "generic-match.c" 3 4
                                                   __null
# 1191 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 1192, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1192 "generic-match.c" 3 4
                                                   __null
# 1192 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3667, %s:%d\n", "generic-match.c", 1193);
        tree res;
        res = constant_boolean_node ((!maybe_ne (off0, off1)), type);
        return res;
      }
    else
      {

        if (cmp == NE_EXPR && ((!maybe_ne (off0, off1)) || (!maybe_eq (off0, off1))))
   {
     if (((non_type_check ((captures[0]), "generic-match.c", 1203, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1203 "generic-match.c" 3 4
                                                __null
# 1203 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 1204, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1204 "generic-match.c" 3 4
                                                __null
# 1204 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3669, %s:%d\n", "generic-match.c", 1205);
     tree res;
     res = constant_boolean_node ((!maybe_eq (off0, off1)), type);
     return res;
   }
        else
   {

     if (cmp == LT_EXPR && ((!maybe_le (off1, off0)) || (!maybe_lt (off0, off1))))
       {
         if (((non_type_check ((captures[0]), "generic-match.c", 1215, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1215 "generic-match.c" 3 4
                                                    __null
# 1215 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[2]), "generic-match.c", 1216, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1216 "generic-match.c" 3 4
                                                    __null
# 1216 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3671, %s:%d\n", "generic-match.c", 1217);
         tree res;
         res = constant_boolean_node ((!maybe_le (off1, off0)), type);
         return res;
       }
     else
       {

         if (cmp == LE_EXPR && ((!maybe_lt (off1, off0)) || (!maybe_le (off0, off1))))
    {
      if (((non_type_check ((captures[0]), "generic-match.c", 1227, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1227 "generic-match.c" 3 4
                                                 __null
# 1227 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[2]), "generic-match.c", 1228, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1228 "generic-match.c" 3 4
                                                 __null
# 1228 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3673, %s:%d\n", "generic-match.c", 1229);
      tree res;
      res = constant_boolean_node ((!maybe_lt (off1, off0)), type);
      return res;
    }
         else
    {

      if (cmp == GE_EXPR && ((!maybe_lt (off0, off1)) || (!maybe_le (off1, off0))))
        {
          if (((non_type_check ((captures[0]), "generic-match.c", 1239, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1239 "generic-match.c" 3 4
                                                     __null
# 1239 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[2]), "generic-match.c", 1240, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1240 "generic-match.c" 3 4
                                                     __null
# 1240 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3675, %s:%d\n", "generic-match.c", 1241);
          tree res;
          res = constant_boolean_node ((!maybe_lt (off0, off1)), type);
          return res;
        }
      else
        {

          if (cmp == GT_EXPR && ((!maybe_le (off0, off1)) || (!maybe_lt (off1, off0))))
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 1251, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1251 "generic-match.c" 3 4
                                                  __null
# 1251 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 1252, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1252 "generic-match.c" 3 4
                                                  __null
# 1252 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3677, %s:%d\n", "generic-match.c", 1253);
       tree res;
       res = constant_boolean_node ((!maybe_le (off0, off1)), type);
       return res;
     }
        }
    }
       }
   }
      }
  }
       else
  {

    if (equal == 0 && (tree_code_type[(int) (((enum tree_code) (base0)->base.code))] == tcc_declaration) && (tree_code_type[(int) (((enum tree_code) (base1)->base.code))] == tcc_declaration) && (!(((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1267, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1267, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1267, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (!maybe_ne (off0, off1))))
      {

        if (cmp == EQ_EXPR)
   {
     if (((non_type_check ((captures[0]), "generic-match.c", 1272, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1272 "generic-match.c" 3 4
                                                __null
# 1272 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 1273, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1273 "generic-match.c" 3 4
                                                __null
# 1273 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3685, %s:%d\n", "generic-match.c", 1274);
     tree res;
     res = constant_boolean_node (false, type);
     return res;
   }
        else
   {

     if (cmp == NE_EXPR)
       {
         if (((non_type_check ((captures[0]), "generic-match.c", 1284, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1284 "generic-match.c" 3 4
                                                    __null
# 1284 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[2]), "generic-match.c", 1285, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1285 "generic-match.c" 3 4
                                                    __null
# 1285 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3687, %s:%d\n", "generic-match.c", 1286);
         tree res;
         res = constant_boolean_node (true, type);
         return res;
       }
   }
      }
  }
   }
 }
  }
  return (tree) 
# 1297 "generic-match.c" 3 4
        __null
# 1297 "generic-match.c"
                 ;
}

static tree
generic_simplify_15 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (captures[1])->base.code) == INTEGER_CST && (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1306, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1306, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1306, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && int_fits_type_p (captures[1], ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1306, __FUNCTION__))->typed.type))) || types_match (captures[0], captures[1])) && (bitop != BIT_AND_EXPR ||0) && ( ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1306, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1306, __FUNCTION__))->type_common.precision) < ((tree_class_check ((type), (tcc_type), "generic-match.c", 1306, __FUNCTION__))->type_common.precision) || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 1306, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) != MODE_INT || !type_has_mode_precision_p (type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1091, %s:%d\n", "generic-match.c", 1308);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 {
   tree ops2[1], res;
   ops2[0] = captures[1];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 1316, __FUNCTION__))->typed.type) != ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1316, __FUNCTION__))->typed.type))
     res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1317, __FUNCTION__))->typed.type), ops2[0]);
   else
     res = ops2[0];
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, bitop, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1322, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 1329 "generic-match.c" 3 4
        __null
# 1329 "generic-match.c"
                 ;
}

static tree
generic_simplify_16 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn floors __attribute__ ((__unused__)), const combined_fn truncs __attribute__ ((__unused__)))
{

  if (canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4245, %s:%d\n", "generic-match.c", 1340);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = maybe_build_call_expr_loc (loc, truncs, type, 1, res_op0);
      if (!res)
        return (tree) 
# 1346 "generic-match.c" 3 4
              __null
# 1346 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 1349 "generic-match.c" 3 4
        __null
# 1349 "generic-match.c"
                 ;
}

static tree
generic_simplify_17 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 1357, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1357 "generic-match.c" 3 4
                                     __null
# 1357 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:223, %s:%d\n", "generic-match.c", 1358);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = non_lvalue_loc (loc, res_op0);
  return res;
  return (tree) 
# 1364 "generic-match.c" 3 4
        __null
# 1364 "generic-match.c"
                 ;
}

static tree
generic_simplify_18 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn POW __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {

      if (!((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 1376, __FUNCTION__))->base.public_flag))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4126, %s:%d\n", "generic-match.c", 1378);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[2], res;
     ops1[0] = captures[2];
     ops1[1] = build_one_cst (type);
     res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1386, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op1 = res;
   }
   tree res;
   res = maybe_build_call_expr_loc (loc, POW, type, 2, res_op0, res_op1);
   if (!res)
     return (tree) 
# 1392 "generic-match.c" 3 4
           __null
# 1392 "generic-match.c"
                    ;
   return res;
 }
    }
  return (tree) 
# 1396 "generic-match.c" 3 4
        __null
# 1396 "generic-match.c"
                 ;
}

static tree
generic_simplify_19 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:697, %s:%d\n", "generic-match.c", 1404);
  tree res_op0;
  res_op0 = unshare_expr (captures[2]);
  tree res_op1;
  {
    tree ops1[2], res;
    ops1[0] = captures[1];
    ops1[1] = captures[2];
    res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1412, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 1418 "generic-match.c" 3 4
        __null
# 1418 "generic-match.c"
                 ;
}

static tree
generic_simplify_20 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1427, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1427, __FUNCTION__))->base.u.bits.unsigned_flag) && !(((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1427, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE))
    {
      {

 tree t = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1431, __FUNCTION__))->typed.type), cpx = build_complex_type (t);
   if (((non_type_check ((op1), "generic-match.c", 1432, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1432 "generic-match.c" 3 4
                                      __null
# 1432 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3862, %s:%d\n", "generic-match.c", 1433);
   tree res_op0;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[2];
       ops2[1] = captures[1];
       {
         res = maybe_build_call_expr_loc (loc, CFN_MUL_OVERFLOW, cpx, 2, ops2[0], ops2[1]);
         if (!res)
           return (tree) 
# 1444 "generic-match.c" 3 4
                 __null
# 1444 "generic-match.c"
                          ;
       }
       ops1[0] = res;
     }
     res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1448, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 1448, __FUNCTION__))->typed.type), ops1[0]);
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = build_zero_cst (t);
   tree res;
   res = fold_build2_loc (loc, out, type, res_op0, res_op1);
   return res;
      }
    }
  return (tree) 
# 1458 "generic-match.c" 3 4
        __null
# 1458 "generic-match.c"
                 ;
}

static tree
generic_simplify_21 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (fold_real_zero_addition_p (type, captures[1], 0))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:116, %s:%d\n", "generic-match.c", 1469);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = non_lvalue_loc (loc, res_op0);
      if (((non_type_check ((captures[1]), "generic-match.c", 1474, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 1478 "generic-match.c" 3 4
        __null
# 1478 "generic-match.c"
                 ;
}

static tree
generic_simplify_22 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (~wi::to_wide (captures[1]) == wi::to_wide (captures[2]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:707, %s:%d\n", "generic-match.c", 1489);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 1496, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 1500 "generic-match.c" 3 4
        __null
# 1500 "generic-match.c"
                 ;
}

static tree
generic_simplify_23 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COS __attribute__ ((__unused__)), const combined_fn SIN __attribute__ ((__unused__)), const combined_fn TAN __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4136, %s:%d\n", "generic-match.c", 1511);
      tree res_op0;
      res_op0 = build_one_cst (type);
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 {
   res = maybe_build_call_expr_loc (loc, TAN, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1519, __FUNCTION__))->typed.type), 1, ops1[0]);
   if (!res)
     return (tree) 
# 1521 "generic-match.c" 3 4
           __null
# 1521 "generic-match.c"
                    ;
 }
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 1529 "generic-match.c" 3 4
        __null
# 1529 "generic-match.c"
                 ;
}

static tree
generic_simplify_24 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 1538, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[6]), (TS_TYPED), "generic-match.c", 1538, __FUNCTION__))->typed.type)))
    {

      if (single_use (captures[4]) && single_use (captures[5]))
 {
   if (((non_type_check ((op0), "generic-match.c", 1543, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1543 "generic-match.c" 3 4
                                      __null
# 1543 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:983, %s:%d\n", "generic-match.c", 1544);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[6];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1551, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, op, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (single_use (captures[0]) && single_use (captures[1]))
     {
       if (((non_type_check ((op1), "generic-match.c", 1566, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1566 "generic-match.c" 3 4
                                          __null
# 1566 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:985, %s:%d\n", "generic-match.c", 1567);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[3];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1572, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[4];
       tree res;
       res = fold_build2_loc (loc, op, type, res_op0, res_op1);
       return res;
     }
 }
    }
  return (tree) 
# 1586 "generic-match.c" 3 4
        __null
# 1586 "generic-match.c"
                 ;
}

static tree
generic_simplify_25 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shift __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1595, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1595, __FUNCTION__))->typed.type)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 1595, __FUNCTION__))->type_common.precision) <= 64 && tree_fits_uhwi_p (captures[4]) && tree_to_uhwi (captures[4]) > 0 && tree_to_uhwi (captures[4]) < ((tree_class_check ((type), (tcc_type), "generic-match.c", 1595, __FUNCTION__))->type_common.precision))
    {
      {

 unsigned int shiftc = tree_to_uhwi (captures[4]);
 unsigned long mask = ((unsigned long) (*tree_int_cst_elt_check ((captures[5]), (0), "generic-match.c", 1600, __FUNCTION__)));
 unsigned long newmask, zerobits = 0;
 tree shift_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1602, __FUNCTION__))->typed.type);
 unsigned int prec;
 if (shift == LSHIFT_EXPR) zerobits = ((1UL << shiftc) - 1);
 else if (shift == RSHIFT_EXPR && type_has_mode_precision_p (shift_type)) { prec = ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1605, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1605, __FUNCTION__))->type_common.precision);
 tree arg00 = captures[3];
 if (captures[2] != captures[3] && ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 1607, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1607, __FUNCTION__))->base.u.bits.unsigned_flag)) { tree inner_type = ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 1607, __FUNCTION__))->typed.type);
 if (type_has_mode_precision_p (inner_type) && ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 1608, __FUNCTION__))->type_common.precision) < prec) { prec = ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 1608, __FUNCTION__))->type_common.precision);
 if (shiftc < prec) shift_type = inner_type;
 } } zerobits = -1UL;
 if (shiftc < prec) { zerobits >>= 64 - shiftc;
 zerobits <<= prec - shiftc;
 } if (!((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1613, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1613, __FUNCTION__))->base.u.bits.unsigned_flag) && prec == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1613, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 1613, __FUNCTION__))->type_common.precision)) { if ((mask & zerobits) == 0) shift_type = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1613, __FUNCTION__))->typed.type));
 else zerobits = 0;
 } }
   if ((mask & zerobits) == mask)
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 1618, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1618 "generic-match.c" 3 4
                                                  __null
# 1618 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 1619, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1619 "generic-match.c" 3 4
                                                  __null
# 1619 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[5]), "generic-match.c", 1620, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1620 "generic-match.c" 3 4
                                                  __null
# 1620 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2309, %s:%d\n", "generic-match.c", 1621);
       tree res;
       res = build_int_cst (type, 0);
       return res;
     }
   else
     {
       {

 newmask = mask | zerobits;

    if (newmask != mask && (newmask & (newmask + 1)) == 0)
      {
        {

 for (prec = (8);
 prec < 64;
 prec <<= 1) if (newmask == (1UL << prec) - 1) break;

     if (prec < 64 || newmask == -1UL)
       {
         {

 tree newmaskt = build_int_cst_type (((contains_struct_check ((captures[5]), (TS_TYPED), "generic-match.c", 1644, __FUNCTION__))->typed.type), newmask);

      if (!tree_int_cst_equal (newmaskt, captures[5]))
        {

          if (shift_type != ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1649, __FUNCTION__))->typed.type))
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 1651, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1651 "generic-match.c" 3 4
                                                  __null
# 1651 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 1652, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1652 "generic-match.c" 3 4
                                                  __null
# 1652 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[5]), "generic-match.c", 1653, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1653 "generic-match.c" 3 4
                                                  __null
# 1653 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2327, %s:%d\n", "generic-match.c", 1654);
       tree res_op0;
       {
         tree ops1[1], res;
         {
           tree ops2[2], res;
           {
      tree ops3[1], res;
      ops3[0] = captures[2];
      if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 1663, __FUNCTION__))->typed.type) != shift_type)
        res = fold_build1_loc (loc, NOP_EXPR, shift_type, ops3[0]);
      else
        res = ops3[0];
      ops2[0] = res;
           }
           ops2[1] = captures[4];
           res = fold_build2_loc (loc, shift, shift_type, ops2[0], ops2[1]);
           ops1[0] = res;
         }
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1673, __FUNCTION__))->typed.type) != type)
           res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
          else
     {
       if (((non_type_check ((op0), "generic-match.c", 1687, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1687 "generic-match.c" 3 4
                                          __null
# 1687 "generic-match.c"
                                                   ;
       if (((non_type_check ((captures[5]), "generic-match.c", 1688, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1688 "generic-match.c" 3 4
                                                  __null
# 1688 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2328, %s:%d\n", "generic-match.c", 1689);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
         }
       }
        }
      }
       }
     }
      }
    }
  return (tree) 
# 1707 "generic-match.c" 3 4
        __null
# 1707 "generic-match.c"
                 ;
}

static tree
generic_simplify_26 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (((non_type_check ((op0), "generic-match.c", 1715, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1715 "generic-match.c" 3 4
                                     __null
# 1715 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:738, %s:%d\n", "generic-match.c", 1716);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 1720 "generic-match.c" 3 4
        __null
# 1720 "generic-match.c"
                 ;
}

static tree
generic_simplify_27 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn logs __attribute__ ((__unused__)), const combined_fn pows __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3996, %s:%d\n", "generic-match.c", 1731);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 {
   res = maybe_build_call_expr_loc (loc, logs, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1739, __FUNCTION__))->typed.type), 1, ops1[0]);
   if (!res)
     return (tree) 
# 1741 "generic-match.c" 3 4
           __null
# 1741 "generic-match.c"
                    ;
 }
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 1749 "generic-match.c" 3 4
        __null
# 1749 "generic-match.c"
                 ;
}

static tree
generic_simplify_28 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type)), "generic-match.c", 1758, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((op == EQ_EXPR || op == NE_EXPR) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1758, __FUNCTION__))->typed.type)), "generic-match.c", 1758, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))) && ((tree_code_type[(int) (((enum tree_code) (captures[2])->base.code))] == tcc_constant) || single_use (captures[1])))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1450, %s:%d\n", "generic-match.c", 1760);
      tree res_op0;
      res_op0 = captures[2];
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1764, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[0]), "generic-match.c", 1767, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 1771 "generic-match.c" 3 4
        __null
# 1771 "generic-match.c"
                 ;
}

static tree
generic_simplify_29 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn POW __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4155, %s:%d\n", "generic-match.c", 1782);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
 tree ops1[2], res;
 ops1[0] = captures[2];
 ops1[1] = captures[4];
 res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1790, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, POW, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 1796 "generic-match.c" 3 4
              __null
# 1796 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 1799 "generic-match.c" 3 4
        __null
# 1799 "generic-match.c"
                 ;
}

static tree
generic_simplify_30 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 1808, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) && ! HONOR_NANS (type) && ! HONOR_INFINITIES (type))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:327, %s:%d\n", "generic-match.c", 1810);
      tree res;
      res = build_minus_one_cst (type);
      if (((non_type_check ((captures[0]), "generic-match.c", 1813, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 1817 "generic-match.c" 3 4
        __null
# 1817 "generic-match.c"
                 ;
}

static tree
generic_simplify_31 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 1826, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1829, __FUNCTION__))->typed.type)) && !((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 1829, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
 {
   {

 tree t1 = type;
 if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 1834, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) != ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1834, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1834, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1834, __FUNCTION__))->typed.type)), "generic-match.c", 1834, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))) t1 = ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 1834, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) ? type : ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1834, __FUNCTION__))->typed.type);
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1641, %s:%d\n", "generic-match.c", 1835);
       tree res_op0;
       {
  tree ops1[2], res;
  {
    tree ops2[1], res;
    ops2[0] = captures[0];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 1842, __FUNCTION__))->typed.type) != t1)
      res = fold_build1_loc (loc, NOP_EXPR, t1, ops2[0]);
    else
      res = ops2[0];
    ops1[0] = res;
  }
  {
    tree ops2[1], res;
    ops2[0] = captures[1];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 1851, __FUNCTION__))->typed.type) != t1)
      res = fold_build1_loc (loc, NOP_EXPR, t1, ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1857, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
   }
 }
    }
  return (tree) 
# 1866 "generic-match.c" 3 4
        __null
# 1866 "generic-match.c"
                 ;
}

static tree
generic_simplify_32 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{
  if (((non_type_check ((op0), "generic-match.c", 1874, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 1874 "generic-match.c" 3 4
                                     __null
# 1874 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:436, %s:%d\n", "generic-match.c", 1875);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 1879 "generic-match.c" 3 4
        __null
# 1879 "generic-match.c"
                 ;
}

static tree
generic_simplify_33 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if (!integer_zerop (captures[1]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:246, %s:%d\n", "generic-match.c", 1890);
      tree res;
      res = captures[0];
      if (((non_type_check ((captures[1]), "generic-match.c", 1893, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 1897 "generic-match.c" 3 4
        __null
# 1897 "generic-match.c"
                 ;
}

static tree
generic_simplify_34 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1169, %s:%d\n", "generic-match.c", 1905);
  tree res;
  res = constant_boolean_node (op == NE_EXPR ? true : false, type);
  if (((non_type_check ((captures[0]), "generic-match.c", 1908, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 1911 "generic-match.c" 3 4
        __null
# 1911 "generic-match.c"
                 ;
}

static tree
generic_simplify_35 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code plusminus __attribute__ ((__unused__)))
{

  if (!((tree_not_check4 ((type), "generic-match.c", 1920, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag) && (!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 1920, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math))
    {

      if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 1923, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 1923, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 1923, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 1923, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) || ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && tree_expr_nonzero_p (captures[1]) && expr_not_equal_to (captures[1], wi::minus_one (((tree_class_check ((type), (tcc_type), "generic-match.c", 1923, __FUNCTION__))->type_common.precision)))))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1957, %s:%d\n", "generic-match.c", 1925);
   tree res_op0;
   {
     tree ops1[2], res;
     ops1[0] = captures[2];
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, plusminus, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 1931, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
 }
    }
  return (tree) 
# 1941 "generic-match.c" 3 4
        __null
# 1941 "generic-match.c"
                 ;
}

static tree
generic_simplify_36 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn TAN __attribute__ ((__unused__)), const combined_fn COS __attribute__ ((__unused__)), const combined_fn SIN __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4120, %s:%d\n", "generic-match.c", 1952);
      tree res_op0;
      res_op0 = captures[1];
      tree res;
      res = maybe_build_call_expr_loc (loc, SIN, type, 1, res_op0);
      if (!res)
        return (tree) 
# 1958 "generic-match.c" 3 4
              __null
# 1958 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 1961 "generic-match.c" 3 4
        __null
# 1961 "generic-match.c"
                 ;
}

static tree
generic_simplify_37 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (single_use (captures[0]) && single_use (captures[2]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3034, %s:%d\n", "generic-match.c", 1972);
      tree res_op0;
      res_op0 = captures[3];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 1981 "generic-match.c" 3 4
        __null
# 1981 "generic-match.c"
                 ;
}

static tree
generic_simplify_38 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)) && tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 1990, __FUNCTION__))->typed.type)))
    {
      {

 tree arg1_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 1994, __FUNCTION__))->typed.type);
 unsigned int prec = ((tree_class_check ((arg1_type), (tcc_type), "generic-match.c", 1995, __FUNCTION__))->type_common.precision);
 wide_int max = wi::max_value (arg1_type);
 wide_int signed_max = wi::max_value (prec, SIGNED);
 wide_int min = wi::min_value (arg1_type);

   if (wi::to_wide (captures[2]) == max)
     {

       if (cmp == GT_EXPR)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3732, %s:%d\n", "generic-match.c", 2005);
    tree res;
    res = constant_boolean_node (false, type);
    if (((non_type_check ((captures[0]), "generic-match.c", 2008, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    if (((non_type_check ((captures[2]), "generic-match.c", 2010, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
    return res;
  }
       else
  {

    if (cmp == GE_EXPR)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3734, %s:%d\n", "generic-match.c", 2019);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = captures[2];
        tree res;
        res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
        return res;
      }
    else
      {

        if (cmp == LE_EXPR)
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3736, %s:%d\n", "generic-match.c", 2033);
     tree res;
     res = constant_boolean_node (true, type);
     if (((non_type_check ((captures[0]), "generic-match.c", 2036, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
     if (((non_type_check ((captures[2]), "generic-match.c", 2038, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
     return res;
   }
        else
   {

     if (cmp == LT_EXPR)
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3738, %s:%d\n", "generic-match.c", 2047);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = captures[2];
         tree res;
         res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
         return res;
       }
   }
      }
  }
     }
   else
     {

       if (wi::to_wide (captures[2]) == min)
  {

    if (cmp == LT_EXPR)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3742, %s:%d\n", "generic-match.c", 2068);
        tree res;
        res = constant_boolean_node (false, type);
        if (((non_type_check ((captures[0]), "generic-match.c", 2071, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        if (((non_type_check ((captures[2]), "generic-match.c", 2073, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
        return res;
      }
    else
      {

        if (cmp == LE_EXPR)
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3744, %s:%d\n", "generic-match.c", 2082);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = captures[2];
     tree res;
     res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {

     if (cmp == GE_EXPR)
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3746, %s:%d\n", "generic-match.c", 2096);
         tree res;
         res = constant_boolean_node (true, type);
         if (((non_type_check ((captures[0]), "generic-match.c", 2099, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
         if (((non_type_check ((captures[2]), "generic-match.c", 2101, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
         return res;
       }
     else
       {

         if (cmp == GT_EXPR)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3748, %s:%d\n", "generic-match.c", 2110);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
      return res;
    }
       }
   }
      }
  }
       else
  {

    if (wi::to_wide (captures[2]) == max - 1)
      {

        if (cmp == GT_EXPR)
   {
     if (((non_type_check ((captures[2]), "generic-match.c", 2131, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2131 "generic-match.c" 3 4
                                                __null
# 2131 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3752, %s:%d\n", "generic-match.c", 2132);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2136, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) + 1);
     tree res;
     res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {

     if (cmp == LE_EXPR)
       {
         if (((non_type_check ((captures[2]), "generic-match.c", 2146, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2146 "generic-match.c" 3 4
                                                    __null
# 2146 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3754, %s:%d\n", "generic-match.c", 2147);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2151, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) + 1);
         tree res;
         res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
         return res;
       }
   }
      }
    else
      {

        if (wi::to_wide (captures[2]) == min + 1)
   {

     if (cmp == GE_EXPR)
       {
         if (((non_type_check ((captures[2]), "generic-match.c", 2166, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2166 "generic-match.c" 3 4
                                                    __null
# 2166 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3758, %s:%d\n", "generic-match.c", 2167);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2171, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) - 1);
         tree res;
         res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
         return res;
       }
     else
       {

         if (cmp == LT_EXPR)
    {
      if (((non_type_check ((captures[2]), "generic-match.c", 2181, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2181 "generic-match.c" 3 4
                                                 __null
# 2181 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3760, %s:%d\n", "generic-match.c", 2182);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2186, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) - 1);
      tree res;
      res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
      return res;
    }
       }
   }
        else
   {

     if (wi::to_wide (captures[2]) == signed_max && ((tree_class_check ((arg1_type), (tcc_type), "generic-match.c", 2196, __FUNCTION__))->base.u.bits.unsigned_flag) && prec == GET_MODE_PRECISION ((as_a <scalar_int_mode> ((tree_class_check ((arg1_type), (tcc_type), "generic-match.c", 2196, __FUNCTION__))->type_common.mode))) && (((enum tree_code) (arg1_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (arg1_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (arg1_type)->base.code) == INTEGER_TYPE))
       {

         if (cmp == LE_EXPR || cmp == GT_EXPR)
    {
      {

 tree st = signed_type_for (arg1_type);

          if (cmp == LE_EXPR)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3775, %s:%d\n", "generic-match.c", 2207);
       tree res_op0;
       {
         tree ops1[1], res;
         ops1[0] = captures[1];
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2212, __FUNCTION__))->typed.type) != st)
           res = fold_build1_loc (loc, NOP_EXPR, st, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = build_zero_cst (st);
       tree res;
       res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[2]), "generic-match.c", 2222, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
          else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3776, %s:%d\n", "generic-match.c", 2228);
       tree res_op0;
       {
         tree ops1[1], res;
         ops1[0] = captures[1];
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2233, __FUNCTION__))->typed.type) != st)
           res = fold_build1_loc (loc, NOP_EXPR, st, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = build_zero_cst (st);
       tree res;
       res = fold_build2_loc (loc, LT_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[2]), "generic-match.c", 2243, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
      }
    }
       }
   }
      }
  }
     }
      }
    }
  return (tree) 
# 2256 "generic-match.c" 3 4
        __null
# 2256 "generic-match.c"
                 ;
}

static tree
generic_simplify_39 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4403, %s:%d\n", "generic-match.c", 2264);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 2267, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 2270 "generic-match.c" 3 4
        __null
# 2270 "generic-match.c"
                 ;
}

static tree
generic_simplify_40 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2279, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT)) == ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2279, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2279, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT)) == ((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2279, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2279, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT))))
    {
      {

 tree type1 = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2283, __FUNCTION__))->typed.type);
 if (((enum tree_code) (captures[2])->base.code) == REAL_CST && !((((enum tree_code) (type1)->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type1), (tcc_type), "generic-match.c", 2284, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type1) : (type1)->type_common.mode)]) == MODE_DECIMAL_FLOAT))) { struct real_value orig = (*((tree_check ((captures[2]), "generic-match.c", 2284, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr));
 if (((tree_class_check ((type1), (tcc_type), "generic-match.c", 2285, __FUNCTION__))->type_common.precision) > ((tree_class_check ((global_trees[TI_FLOAT_TYPE]), (tcc_type), "generic-match.c", 2285, __FUNCTION__))->type_common.precision) && exact_real_truncate (((((enum tree_code) ((tree_class_check ((global_trees[TI_FLOAT_TYPE]), (tcc_type), "generic-match.c", 2285, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (global_trees[TI_FLOAT_TYPE]) : (global_trees[TI_FLOAT_TYPE])->type_common.mode), &orig)) type1 = global_trees[TI_FLOAT_TYPE];
 if (((tree_class_check ((type1), (tcc_type), "generic-match.c", 2286, __FUNCTION__))->type_common.precision) > ((tree_class_check ((global_trees[TI_DOUBLE_TYPE]), (tcc_type), "generic-match.c", 2286, __FUNCTION__))->type_common.precision) && exact_real_truncate (((((enum tree_code) ((tree_class_check ((global_trees[TI_DOUBLE_TYPE]), (tcc_type), "generic-match.c", 2286, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (global_trees[TI_DOUBLE_TYPE]) : (global_trees[TI_DOUBLE_TYPE])->type_common.mode), &orig)) type1 = global_trees[TI_DOUBLE_TYPE];
 } tree newtype = (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2287, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2287, __FUNCTION__))->type_common.precision) > ((tree_class_check ((type1), (tcc_type), "generic-match.c", 2287, __FUNCTION__))->type_common.precision) ? ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2287, __FUNCTION__))->typed.type) : type1);

   if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2289, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2289, __FUNCTION__))->type_common.precision) > ((tree_class_check ((newtype), (tcc_type), "generic-match.c", 2289, __FUNCTION__))->type_common.precision))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3072, %s:%d\n", "generic-match.c", 2291);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[1];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2296, __FUNCTION__))->typed.type) != newtype)
    res = fold_build1_loc (loc, NOP_EXPR, newtype, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res_op1;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2306, __FUNCTION__))->typed.type) != newtype)
    res = fold_build1_loc (loc, NOP_EXPR, newtype, ops1[0]);
  else
    res = ops1[0];
  res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
      }
    }
  return (tree) 
# 2318 "generic-match.c" 3 4
        __null
# 2318 "generic-match.c"
                 ;
}

static tree
generic_simplify_41 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shiftrotate __attribute__ ((__unused__)))
{
  {

 tree tem = uniform_vector_p (captures[1]);

      if (tem)
 {
   if (((non_type_check ((captures[1]), "generic-match.c", 2332, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2332 "generic-match.c" 3 4
                                              __null
# 2332 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2172, %s:%d\n", "generic-match.c", 2333);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = tem;
   tree res;
   res = fold_build2_loc (loc, shiftrotate, type, res_op0, res_op1);
   return res;
 }
  }
  return (tree) 
# 2343 "generic-match.c" 3 4
        __null
# 2343 "generic-match.c"
                 ;
}

static tree
generic_simplify_42 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2352, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2352, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2352, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2352, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2352, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2352, __FUNCTION__))->typed.type)), "generic-match.c", 2352, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (((unsigned long) (*tree_int_cst_elt_check ((captures[1]), (0), "generic-match.c", 2352, __FUNCTION__))) & 1) != 0)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1252, %s:%d\n", "generic-match.c", 2354);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 2361, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 2365 "generic-match.c" 3 4
        __null
# 2365 "generic-match.c"
                 ;
}

static tree
generic_simplify_43 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3894, %s:%d\n", "generic-match.c", 2376);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 ops1[1] = captures[2];
 res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2382, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 2391 "generic-match.c" 3 4
        __null
# 2391 "generic-match.c"
                 ;
}

static tree
generic_simplify_44 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2400, __FUNCTION__))->typed.type), type))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2620, %s:%d\n", "generic-match.c", 2402);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 2409 "generic-match.c" 3 4
        __null
# 2409 "generic-match.c"
                 ;
}

static tree
generic_simplify_45 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (real_isnan (&((*((tree_check ((captures[1]), "generic-match.c", 2418, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))) && (cmp != LTGT_EXPR || ! global_options.x_flag_trapping_math))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3784, %s:%d\n", "generic-match.c", 2420);
      tree res;
      res = constant_boolean_node (cmp == ORDERED_EXPR || cmp == LTGT_EXPR ? false : true, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 2423, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 2425, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 2429 "generic-match.c" 3 4
        __null
# 2429 "generic-match.c"
                 ;
}

static tree
generic_simplify_46 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1982, %s:%d\n", "generic-match.c", 2437);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 2441 "generic-match.c" 3 4
        __null
# 2441 "generic-match.c"
                 ;
}

static tree
generic_simplify_47 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn POW __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4160, %s:%d\n", "generic-match.c", 2452);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[1];
 ops1[1] = captures[4];
 res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2458, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = maybe_build_call_expr_loc (loc, POW, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 2466 "generic-match.c" 3 4
              __null
# 2466 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 2469 "generic-match.c" 3 4
        __null
# 2469 "generic-match.c"
                 ;
}

static tree
generic_simplify_48 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && (!maybe_ne (TYPE_VECTOR_SUBPARTS (type), TYPE_VECTOR_SUBPARTS (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)))) && (((((enum tree_code) ((tree_class_check ((((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2478, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)) : (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type))->type_common.mode) == ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2478, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)) : (((contains_struct_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 2478, __FUNCTION__))->typed.type))->type_common.mode)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2911, %s:%d\n", "generic-match.c", 2480);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[1], res;
 {
   tree ops2[3], res;
   ops2[0] = captures[2];
   {
     tree ops3[1], res;
     ops3[0] = captures[3];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 2492, __FUNCTION__))->typed.type), ops3[0]);
     ops2[1] = res;
   }
   ops2[2] = captures[4];
   res = fold_build3_loc (loc, VEC_COND_EXPR, ((contains_struct_check ((ops2[1]), (TS_TYPED), "generic-match.c", 2496, __FUNCTION__))->typed.type), ops2[0], ops2[1], ops2[2]);
   ops1[0] = res;
 }
 res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops1[0]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 2506 "generic-match.c" 3 4
        __null
# 2506 "generic-match.c"
                 ;
}

static tree
generic_simplify_49 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4091, %s:%d\n", "generic-match.c", 2514);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = fold_build1_loc (loc, ABS_EXPR, type, res_op0);
  if (((non_type_check ((captures[1]), "generic-match.c", 2519, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 2522 "generic-match.c" 3 4
        __null
# 2522 "generic-match.c"
                 ;
}

static tree
generic_simplify_50 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 2530, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2530 "generic-match.c" 3 4
                                     __null
# 2530 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:421, %s:%d\n", "generic-match.c", 2531);
  tree res;
  res = build_zero_cst (type);
  if (((non_type_check ((captures[0]), "generic-match.c", 2534, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 2537 "generic-match.c" 3 4
        __null
# 2537 "generic-match.c"
                 ;
}

static tree
generic_simplify_51 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code test1 __attribute__ ((__unused__)), const enum tree_code test2 __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2546, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2546, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2546, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2546, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE) && ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2546, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 2546, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3386, %s:%d\n", "generic-match.c", 2548);
      tree res;
      res = constant_boolean_node (true, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 2551, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 2553, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 2557 "generic-match.c" 3 4
        __null
# 2557 "generic-match.c"
                 ;
}

static tree
generic_simplify_52 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 2565, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2565 "generic-match.c" 3 4
                                     __null
# 2565 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:970, %s:%d\n", "generic-match.c", 2566);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 2570 "generic-match.c" 3 4
        __null
# 2570 "generic-match.c"
                 ;
}

static tree
generic_simplify_53 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn minmax __attribute__ ((__unused__)))
{

  if (real_isnan (((tree_check ((captures[1]), "generic-match.c", 2579, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)) && (!HONOR_SNANS (captures[1]) || !(*((tree_check ((captures[1]), "generic-match.c", 2579, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)).signalling))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2064, %s:%d\n", "generic-match.c", 2581);
      tree res;
      res = captures[0];
      if (((non_type_check ((captures[1]), "generic-match.c", 2584, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 2588 "generic-match.c" 3 4
        __null
# 2588 "generic-match.c"
                 ;
}

static tree
generic_simplify_54 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{

  if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))
    {
      if (((non_type_check ((op1), "generic-match.c", 2599, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2599 "generic-match.c" 3 4
                                         __null
# 2599 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:205, %s:%d\n", "generic-match.c", 2600);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, ABS_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 2607 "generic-match.c" 3 4
        __null
# 2607 "generic-match.c"
                 ;
}

static tree
generic_simplify_55 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 2616, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:264, %s:%d\n", "generic-match.c", 2618);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 ops1[1] = build_zero_cst (type);
 res = fold_build2_loc (loc, LT_EXPR, global_trees[TI_BOOLEAN_TYPE], ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = build_minus_one_cst (type);
      tree res_op2;
      res_op2 = build_one_cst (type);
      tree res;
      res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
      return res;
    }
  return (tree) 
# 2635 "generic-match.c" 3 4
        __null
# 2635 "generic-match.c"
                 ;
}

static tree
generic_simplify_56 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (! ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 2644, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2644, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:628, %s:%d\n", "generic-match.c", 2646);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, LSHIFT_EXPR, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 2653, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 2657 "generic-match.c" 3 4
        __null
# 2657 "generic-match.c"
                 ;
}

static tree
generic_simplify_57 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (!HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (type)) && !HONOR_SIGNED_ZEROS (element_mode (type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1042, %s:%d\n", "generic-match.c", 2668);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2673, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[0];
      tree res;
      res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 2682 "generic-match.c" 3 4
        __null
# 2682 "generic-match.c"
                 ;
}

static tree
generic_simplify_58 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4097, %s:%d\n", "generic-match.c", 2690);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 2693, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 2696 "generic-match.c" 3 4
        __null
# 2696 "generic-match.c"
                 ;
}

static tree
generic_simplify_59 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shift __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2705, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2705, __FUNCTION__))->typed.type)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 2705, __FUNCTION__))->type_common.precision) <= 64 && tree_fits_uhwi_p (captures[4]) && tree_to_uhwi (captures[4]) > 0 && tree_to_uhwi (captures[4]) < ((tree_class_check ((type), (tcc_type), "generic-match.c", 2705, __FUNCTION__))->type_common.precision))
    {
      {

 unsigned int shiftc = tree_to_uhwi (captures[4]);
 unsigned long mask = ((unsigned long) (*tree_int_cst_elt_check ((captures[5]), (0), "generic-match.c", 2710, __FUNCTION__)));
 unsigned long newmask, zerobits = 0;
 tree shift_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2712, __FUNCTION__))->typed.type);
 unsigned int prec;
 if (shift == LSHIFT_EXPR) zerobits = ((1UL << shiftc) - 1);
 else if (shift == RSHIFT_EXPR && type_has_mode_precision_p (shift_type)) { prec = ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2715, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2715, __FUNCTION__))->type_common.precision);
 tree arg00 = captures[3];
 if (captures[2] != captures[3] && ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 2717, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2717, __FUNCTION__))->base.u.bits.unsigned_flag)) { tree inner_type = ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 2717, __FUNCTION__))->typed.type);
 if (type_has_mode_precision_p (inner_type) && ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 2718, __FUNCTION__))->type_common.precision) < prec) { prec = ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 2718, __FUNCTION__))->type_common.precision);
 if (shiftc < prec) shift_type = inner_type;
 } } zerobits = -1UL;
 if (shiftc < prec) { zerobits >>= 64 - shiftc;
 zerobits <<= prec - shiftc;
 } if (!((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2723, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2723, __FUNCTION__))->base.u.bits.unsigned_flag) && prec == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2723, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2723, __FUNCTION__))->type_common.precision)) { if ((mask & zerobits) == 0) shift_type = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2723, __FUNCTION__))->typed.type));
 else zerobits = 0;
 } }
   if ((mask & zerobits) == mask)
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 2728, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2728 "generic-match.c" 3 4
                                                  __null
# 2728 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 2729, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2729 "generic-match.c" 3 4
                                                  __null
# 2729 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 2730, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2730 "generic-match.c" 3 4
                                                  __null
# 2730 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[5]), "generic-match.c", 2731, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2731 "generic-match.c" 3 4
                                                  __null
# 2731 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2309, %s:%d\n", "generic-match.c", 2732);
       tree res;
       res = build_int_cst (type, 0);
       return res;
     }
   else
     {
       {

 newmask = mask | zerobits;

    if (newmask != mask && (newmask & (newmask + 1)) == 0)
      {
        {

 for (prec = (8);
 prec < 64;
 prec <<= 1) if (newmask == (1UL << prec) - 1) break;

     if (prec < 64 || newmask == -1UL)
       {
         {

 tree newmaskt = build_int_cst_type (((contains_struct_check ((captures[5]), (TS_TYPED), "generic-match.c", 2755, __FUNCTION__))->typed.type), newmask);

      if (!tree_int_cst_equal (newmaskt, captures[5]))
        {

          if (shift_type != ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 2760, __FUNCTION__))->typed.type))
     {
       if (((non_type_check ((op0), "generic-match.c", 2762, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2762 "generic-match.c" 3 4
                                          __null
# 2762 "generic-match.c"
                                                   ;
       if (((non_type_check ((captures[5]), "generic-match.c", 2763, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2763 "generic-match.c" 3 4
                                                  __null
# 2763 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2327, %s:%d\n", "generic-match.c", 2764);
       tree res_op0;
       {
         tree ops1[1], res;
         {
           tree ops2[2], res;
           {
      tree ops3[1], res;
      ops3[0] = captures[2];
      if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 2773, __FUNCTION__))->typed.type) != shift_type)
        res = fold_build1_loc (loc, NOP_EXPR, shift_type, ops3[0]);
      else
        res = ops3[0];
      ops2[0] = res;
           }
           ops2[1] = captures[4];
           res = fold_build2_loc (loc, shift, shift_type, ops2[0], ops2[1]);
           ops1[0] = res;
         }
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2783, __FUNCTION__))->typed.type) != type)
           res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
          else
     {
       if (((non_type_check ((op0), "generic-match.c", 2797, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2797 "generic-match.c" 3 4
                                          __null
# 2797 "generic-match.c"
                                                   ;
       if (((non_type_check ((captures[5]), "generic-match.c", 2798, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2798 "generic-match.c" 3 4
                                                  __null
# 2798 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2328, %s:%d\n", "generic-match.c", 2799);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
         }
       }
        }
      }
       }
     }
      }
    }
  return (tree) 
# 2817 "generic-match.c" 3 4
        __null
# 2817 "generic-match.c"
                 ;
}

static tree
generic_simplify_60 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:813, %s:%d\n", "generic-match.c", 2825);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = non_lvalue_loc (loc, res_op0);
  return res;
  return (tree) 
# 2831 "generic-match.c" 3 4
        __null
# 2831 "generic-match.c"
                 ;
}

static tree
generic_simplify_61 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 2840, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 2843, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 2846, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2846, __FUNCTION__))->typed.type)))
     {
       {

 tree utype = unsigned_type_for (type);
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1851, %s:%d\n", "generic-match.c", 2851);
    tree res_op0;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[1];
        if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 2858, __FUNCTION__))->typed.type) != utype)
   res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
        else
          res = ops2[0];
        ops1[0] = res;
      }
      res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2864, __FUNCTION__))->typed.type), ops1[0]);
      res_op0 = res;
    }
    tree res;
    res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
    if (((non_type_check ((captures[2]), "generic-match.c", 2869, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
    return res;
       }
     }
   else
     {

       if (element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2877, __FUNCTION__))->typed.type)), "generic-match.c", 2877, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1862, %s:%d\n", "generic-match.c", 2879);
    tree res_op0;
    {
      tree ops1[1], res;
      ops1[0] = captures[1];
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 2884, __FUNCTION__))->typed.type) != type)
        res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
      else
        res = ops1[0];
      res_op0 = res;
    }
    tree res;
    res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
    if (((non_type_check ((captures[2]), "generic-match.c", 2892, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
    return res;
  }
     }
 }
    }
  return (tree) 
# 2899 "generic-match.c" 3 4
        __null
# 2899 "generic-match.c"
                 ;
}

static tree
generic_simplify_62 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2908, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2908, __FUNCTION__))->base.u.bits.unsigned_flag) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2908, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2908, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2908, __FUNCTION__))->typed.type)), "generic-match.c", 2908, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && wi::to_wide (captures[2]) != 0 && single_use (captures[0]))
    {
      {

 unsigned int prec = ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2912, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2912, __FUNCTION__))->type_common.precision);
   if (((non_type_check ((captures[2]), "generic-match.c", 2913, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2913 "generic-match.c" 3 4
                                              __null
# 2913 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3820, %s:%d\n", "generic-match.c", 2914);
   tree res_op0;
   res_op0 = captures[1];
   tree res_op1;
   res_op1 = wide_int_to_tree (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2918, __FUNCTION__))->typed.type), wi::max_value (prec, UNSIGNED) - wi::to_wide (captures[2]));
   tree res;
   res = fold_build2_loc (loc, out, type, res_op0, res_op1);
   return res;
      }
    }
  return (tree) 
# 2924 "generic-match.c" 3 4
        __null
# 2924 "generic-match.c"
                 ;
}

static tree
generic_simplify_63 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (!integer_zerop (captures[1]))
    {

      if (wi::to_wide (captures[2]) == 0)
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3335, %s:%d\n", "generic-match.c", 2938);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 2945, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
      else
 {

   if (((enum tree_code) (captures[1])->base.code) == INTEGER_CST)
     {
       {

 bool ovf;
 wide_int prod = wi::mul (wi::to_wide (captures[2]), wi::to_wide (captures[1]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 2957, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 2957, __FUNCTION__))->base.u.bits.unsigned_flag)), &ovf);

    if (ovf)
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 2961, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2961 "generic-match.c" 3 4
                                                   __null
# 2961 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 2962, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2962 "generic-match.c" 3 4
                                                   __null
# 2962 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3344, %s:%d\n", "generic-match.c", 2963);
        tree res;
        res = constant_boolean_node (cmp == NE_EXPR, type);
        if (((non_type_check ((captures[0]), "generic-match.c", 2966, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        return res;
      }
    else
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 2972, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2972 "generic-match.c" 3 4
                                                   __null
# 2972 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 2973, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2973 "generic-match.c" 3 4
                                                   __null
# 2973 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3345, %s:%d\n", "generic-match.c", 2974);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = wide_int_to_tree (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 2978, __FUNCTION__))->typed.type), prod);
        tree res;
        res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
        return res;
      }
       }
     }
 }
    }
  return (tree) 
# 2987 "generic-match.c" 3 4
        __null
# 2987 "generic-match.c"
                 ;
}

static tree
generic_simplify_64 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code acmp __attribute__ ((__unused__)))
{

  if (tree_int_cst_sgn (captures[1]) == -1)
    {
      if (((non_type_check ((captures[1]), "generic-match.c", 2998, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 2998 "generic-match.c" 3 4
                                                 __null
# 2998 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2924, %s:%d\n", "generic-match.c", 2999);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = wide_int_to_tree (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3003, __FUNCTION__))->typed.type), wi::to_wide (captures[1]) + 1);
      tree res;
      res = fold_build2_loc (loc, acmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 3008 "generic-match.c" 3 4
        __null
# 3008 "generic-match.c"
                 ;
}

static tree
generic_simplify_65 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3017, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3017, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3549, %s:%d\n", "generic-match.c", 3019);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
 tree ops1[2], res;
 ops1[0] = captures[2];
 {
   tree ops2[1], res;
   ops2[0] = captures[3];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3029, __FUNCTION__))->typed.type) != ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 3029, __FUNCTION__))->typed.type))
     res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 3030, __FUNCTION__))->typed.type), ops2[0]);
   else
     res = ops2[0];
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3035, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 3042 "generic-match.c" 3 4
        __null
# 3042 "generic-match.c"
                 ;
}

static tree
generic_simplify_66 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4086, %s:%d\n", "generic-match.c", 3050);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 3054 "generic-match.c" 3 4
        __null
# 3054 "generic-match.c"
                 ;
}

static tree
generic_simplify_67 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op0), "generic-match.c", 3062, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3062 "generic-match.c" 3 4
                                     __null
# 3062 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3373, %s:%d\n", "generic-match.c", 3063);
  tree res;
  res = captures[1];
  return res;
  return (tree) 
# 3067 "generic-match.c" 3 4
        __null
# 3067 "generic-match.c"
                 ;
}

static tree
generic_simplify_68 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)), "generic-match.c", 3076, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)), "generic-match.c", 3076, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))) && ((tree_code_type[(int) (((enum tree_code) (captures[2])->base.code))] == tcc_constant) || (single_use (captures[1]) && single_use (captures[0]))) && tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3076, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1432, %s:%d\n", "generic-match.c", 3078);
      tree res_op0;
      res_op0 = captures[2];
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3082, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[3]), "generic-match.c", 3085, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
    }
  return (tree) 
# 3089 "generic-match.c" 3 4
        __null
# 3089 "generic-match.c"
                 ;
}

static tree
generic_simplify_69 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3098, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1204, %s:%d\n", "generic-match.c", 3100);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 {
   tree ops2[1], res;
   ops2[0] = captures[1];
   res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3108, __FUNCTION__))->typed.type), ops2[0]);
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3111, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 3118 "generic-match.c" 3 4
        __null
# 3118 "generic-match.c"
                 ;
}

static tree
generic_simplify_70 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3127, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[6]), (TS_TYPED), "generic-match.c", 3127, __FUNCTION__))->typed.type)))
    {

      if (single_use (captures[4]) && single_use (captures[5]))
 {
   if (((non_type_check ((op0), "generic-match.c", 3132, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3132 "generic-match.c" 3 4
                                      __null
# 3132 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:983, %s:%d\n", "generic-match.c", 3133);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[6];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3140, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, op, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (single_use (captures[0]) && single_use (captures[1]))
     {
       if (((non_type_check ((op1), "generic-match.c", 3155, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3155 "generic-match.c" 3 4
                                          __null
# 3155 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:985, %s:%d\n", "generic-match.c", 3156);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[3];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3161, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[4];
       tree res;
       res = fold_build2_loc (loc, op, type, res_op0, res_op1);
       return res;
     }
 }
    }
  return (tree) 
# 3175 "generic-match.c" 3 4
        __null
# 3175 "generic-match.c"
                 ;
}

static tree
generic_simplify_71 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const enum tree_code rbitop __attribute__ ((__unused__)))
{
  if (((non_type_check ((op0), "generic-match.c", 3183, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3183 "generic-match.c" 3 4
                                     __null
# 3183 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:842, %s:%d\n", "generic-match.c", 3184);
  tree res_op0;
  res_op0 = captures[1];
  tree res_op1;
  res_op1 = captures[2];
  tree res;
  res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
  return res;
  return (tree) 
# 3192 "generic-match.c" 3 4
        __null
# 3192 "generic-match.c"
                 ;
}

static tree
generic_simplify_72 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 3200, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3200 "generic-match.c" 3 4
                                     __null
# 3200 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:738, %s:%d\n", "generic-match.c", 3201);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 3205 "generic-match.c" 3 4
        __null
# 3205 "generic-match.c"
                 ;
}

static tree
generic_simplify_73 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if ((((enum tree_code) (type)->base.code) == REAL_TYPE) && ! HONOR_NANS (type) && ! HONOR_INFINITIES (type))
    {

      if (types_match (type, global_trees[TI_FLOAT_TYPE]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:337, %s:%d\n", "generic-match.c", 3219);
   tree res_op0;
   res_op0 = build_one_cst (type);
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[0];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3226, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
   if (!res)
     return (tree) 
# 3235 "generic-match.c" 3 4
           __null
# 3235 "generic-match.c"
                    ;
   return res;
 }
      else
 {

   if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:339, %s:%d\n", "generic-match.c", 3243);
       tree res_op0;
       res_op0 = build_one_cst (type);
       tree res_op1;
       {
  tree ops1[1], res;
  ops1[0] = captures[0];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3250, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op1 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
       if (!res)
         return (tree) 
# 3259 "generic-match.c" 3 4
               __null
# 3259 "generic-match.c"
                        ;
       return res;
     }
   else
     {

       if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:341, %s:%d\n", "generic-match.c", 3267);
    tree res_op0;
    res_op0 = build_one_cst (type);
    tree res_op1;
    {
      tree ops1[1], res;
      ops1[0] = captures[0];
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3274, __FUNCTION__))->typed.type) != type)
        res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
      else
        res = ops1[0];
      res_op1 = res;
    }
    tree res;
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
    if (!res)
      return (tree) 
# 3283 "generic-match.c" 3 4
            __null
# 3283 "generic-match.c"
                     ;
    return res;
  }
     }
 }
    }
  return (tree) 
# 3289 "generic-match.c" 3 4
        __null
# 3289 "generic-match.c"
                 ;
}

static tree
generic_simplify_74 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn fns __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4066, %s:%d\n", "generic-match.c", 3297);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = maybe_build_call_expr_loc (loc, fns, type, 1, res_op0);
  if (!res)
    return (tree) 
# 3303 "generic-match.c" 3 4
          __null
# 3303 "generic-match.c"
                   ;
  return res;
  return (tree) 
# 3305 "generic-match.c" 3 4
        __null
# 3305 "generic-match.c"
                 ;
}

static tree
generic_simplify_75 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn pows __attribute__ ((__unused__)), const combined_fn exps __attribute__ ((__unused__)), const combined_fn logs __attribute__ ((__unused__)), const combined_fn exp2s __attribute__ ((__unused__)), const combined_fn log2s __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations)
    {

      if (real_compare (GT_EXPR, ((tree_check ((captures[0]), "generic-match.c", 3317, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr), &dconst0) && real_isfinite (((tree_check ((captures[0]), "generic-match.c", 3317, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)) && canonicalize_math_after_vectorization_p ())
 {
   {

 const struct real_value *const value = ((tree_check ((captures[0]), "generic-match.c", 3321, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr);
 bool use_exp2 = false;
 if (targetm.libc_has_function (function_c99_misc) && value->cl == rvc_normal) { struct real_value frac_rvt = *value;
 ((&frac_rvt)->uexp = ((unsigned int)(1) & (unsigned int)((1 << (32 - 6)) - 1)));
 if (real_equal (&frac_rvt, &dconst1)) use_exp2 = true;
 }
       if (!use_exp2)
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 3329, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3329 "generic-match.c" 3 4
                                               __null
# 3329 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4030, %s:%d\n", "generic-match.c", 3330);
    tree res_op0;
    {
      tree ops1[2], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[0];
        {
          res = maybe_build_call_expr_loc (loc, logs, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3338, __FUNCTION__))->typed.type), 1, ops2[0]);
          if (!res)
            return (tree) 
# 3340 "generic-match.c" 3 4
                  __null
# 3340 "generic-match.c"
                           ;
        }
        ops1[0] = res;
      }
      ops1[1] = captures[1];
      res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3345, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res;
    res = maybe_build_call_expr_loc (loc, exps, type, 1, res_op0);
    if (!res)
      return (tree) 
# 3351 "generic-match.c" 3 4
            __null
# 3351 "generic-match.c"
                     ;
    return res;
  }
       else
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 3356, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3356 "generic-match.c" 3 4
                                               __null
# 3356 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4031, %s:%d\n", "generic-match.c", 3357);
    tree res_op0;
    {
      tree ops1[2], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[0];
        {
          res = maybe_build_call_expr_loc (loc, log2s, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3365, __FUNCTION__))->typed.type), 1, ops2[0]);
          if (!res)
            return (tree) 
# 3367 "generic-match.c" 3 4
                  __null
# 3367 "generic-match.c"
                           ;
        }
        ops1[0] = res;
      }
      ops1[1] = captures[1];
      res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3372, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res;
    res = maybe_build_call_expr_loc (loc, exp2s, type, 1, res_op0);
    if (!res)
      return (tree) 
# 3378 "generic-match.c" 3 4
            __null
# 3378 "generic-match.c"
                     ;
    return res;
  }
   }
 }
    }
  return (tree) 
# 3384 "generic-match.c" 3 4
        __null
# 3384 "generic-match.c"
                 ;
}

static tree
generic_simplify_76 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && type_has_mode_precision_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type)) && type_has_mode_precision_p (((contains_struct_check ((captures[4]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type)) && type_has_mode_precision_p (type) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3393, __FUNCTION__))->type_common.precision) > ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3393, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3393, __FUNCTION__))->type_common.precision) && types_match (captures[2], type) && (types_match (captures[2], captures[4]) || ((enum tree_code) (captures[4])->base.code) == INTEGER_CST))
    {

      if (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3396, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3396, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3396, __FUNCTION__))->typed.type)), "generic-match.c", 3396, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4451, %s:%d\n", "generic-match.c", 3398);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[4];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3405, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, op, type, res_op0, res_op1);
   return res;
 }
      else
 {
   {

 tree utype = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3419, __FUNCTION__))->typed.type));
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4453, %s:%d\n", "generic-match.c", 3420);
       tree res_op0;
       {
  tree ops1[2], res;
  {
    tree ops2[1], res;
    ops2[0] = captures[2];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3427, __FUNCTION__))->typed.type) != utype)
      res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
    else
      res = ops2[0];
    ops1[0] = res;
  }
  {
    tree ops2[1], res;
    ops2[0] = captures[4];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3436, __FUNCTION__))->typed.type) != utype)
      res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3442, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
   }
 }
    }
  return (tree) 
# 3451 "generic-match.c" 3 4
        __null
# 3451 "generic-match.c"
                 ;
}

static tree
generic_simplify_77 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 3460, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 3463, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if (((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 3466, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && !((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3466, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3466, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3466, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3466, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3466, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3466, __FUNCTION__))->typed.type)), "generic-match.c", 3466, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1720, %s:%d\n", "generic-match.c", 3468);
       tree res_op0;
       res_op0 = captures[2];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, POINTER_DIFF_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[0]), "generic-match.c", 3475, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
       return res;
     }
 }
    }
  return (tree) 
# 3481 "generic-match.c" 3 4
        __null
# 3481 "generic-match.c"
                 ;
}

static tree
generic_simplify_78 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3490, __FUNCTION__))->typed.type)), "generic-match.c", 3490, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1393, %s:%d\n", "generic-match.c", 3492);
      tree res_op0;
      res_op0 = captures[2];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[0]), "generic-match.c", 3499, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 3503 "generic-match.c" 3 4
        __null
# 3503 "generic-match.c"
                 ;
}

static tree
generic_simplify_79 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3446, %s:%d\n", "generic-match.c", 3511);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, op, type, res_op0, res_op1);
  return res;
  return (tree) 
# 3519 "generic-match.c" 3 4
        __null
# 3519 "generic-match.c"
                 ;
}

static tree
generic_simplify_80 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{

  if (real_isneg (&((*((tree_check ((captures[0]), "generic-match.c", 3528, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:217, %s:%d\n", "generic-match.c", 3530);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3535, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = maybe_build_call_expr_loc (loc, COPYSIGN_ALL, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 3543 "generic-match.c" 3 4
              __null
# 3543 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 3546 "generic-match.c" 3 4
        __null
# 3546 "generic-match.c"
                 ;
}

static tree
generic_simplify_81 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn sq __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && ! global_options.x_flag_errno_math)
    {

      if (! HONOR_NANS (captures[0]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3253, %s:%d\n", "generic-match.c", 3560);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
   return res;
 }
    }
  return (tree) 
# 3570 "generic-match.c" 3 4
        __null
# 3570 "generic-match.c"
                 ;
}

static tree
generic_simplify_82 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 3579, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 3582, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1712, %s:%d\n", "generic-match.c", 3584);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[0]), "generic-match.c", 3591, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  return (tree) 
# 3596 "generic-match.c" 3 4
        __null
# 3596 "generic-match.c"
                 ;
}

static tree
generic_simplify_83 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)), const enum tree_code rop __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (!((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 3605, __FUNCTION__))->base.public_flag) && !((tree_class_check ((captures[3]), (tcc_constant), "generic-match.c", 3605, __FUNCTION__))->base.public_flag) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3605, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3605, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3605, __FUNCTION__))->typed.type)), "generic-match.c", 3605, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      {

 tree res = int_const_binop (rop, captures[3], captures[2]);

   if (((tree_class_check ((res), (tcc_constant), "generic-match.c", 3611, __FUNCTION__))->base.public_flag))
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 3613, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3613 "generic-match.c" 3 4
                                                  __null
# 3613 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 3614, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3614 "generic-match.c" 3 4
                                                  __null
# 3614 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4537, %s:%d\n", "generic-match.c", 3615);
       tree res;
 fold_overflow_warning (("assuming signed overflow does not occur " "when simplifying conditional to constant"), WARN_STRICT_OVERFLOW_CONDITIONAL);
 bool less = cmp == LE_EXPR || cmp == LT_EXPR;
 bool ovf_high = wi::lt_p (wi::to_wide (captures[2]), 0, ((signop) ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3619, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3619, __FUNCTION__))->base.u.bits.unsigned_flag))) != (op == MINUS_EXPR);
       res = constant_boolean_node (less == ovf_high, type);
       if (((non_type_check ((captures[1]), "generic-match.c", 3621, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
   else
     {

       if (single_use (captures[0]))
  {
    {

 fold_overflow_warning (("assuming signed overflow does not occur " "when changing X +- C1 cmp C2 to " "X cmp C2 -+ C1"), WARN_STRICT_OVERFLOW_COMPARISON);
        if (((non_type_check ((captures[2]), "generic-match.c", 3633, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3633 "generic-match.c" 3 4
                                                   __null
# 3633 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[3]), "generic-match.c", 3634, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3634 "generic-match.c" 3 4
                                                   __null
# 3634 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4556, %s:%d\n", "generic-match.c", 3635);
        tree res_op0;
        res_op0 = captures[1];
        tree res_op1;
        res_op1 = res;
        tree res;
        res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
        return res;
    }
  }
     }
      }
    }
  return (tree) 
# 3648 "generic-match.c" 3 4
        __null
# 3648 "generic-match.c"
                 ;
}

static tree
generic_simplify_84 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3657, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3657, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3657, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !(targetm.have_canonicalize_funcptr_for_compare () && ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3657, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE && ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3657, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3657, __FUNCTION__))->typed.type))->base.code) == FUNCTION_TYPE) && single_use (captures[0]))
    {

      if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3660, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3660, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3660, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3660, __FUNCTION__))->type_common.precision) && (((enum tree_code) (captures[3])->base.code) == INTEGER_CST || captures[2] != captures[3]) && (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3660, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3660, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3660, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3660, __FUNCTION__))->base.u.bits.unsigned_flag) || cmp == NE_EXPR || cmp == EQ_EXPR) && !(((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3660, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3660, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))
 {

   if (((enum tree_code) (captures[2])->base.code) == INTEGER_CST)
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 3665, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3665 "generic-match.c" 3 4
                                                  __null
# 3665 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3471, %s:%d\n", "generic-match.c", 3666);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = force_fit_type (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3670, __FUNCTION__))->typed.type), wi::to_widest (captures[2]), 0, ((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 3670, __FUNCTION__))->base.public_flag));
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       if (((non_type_check ((captures[3]), "generic-match.c", 3673, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
       return res;
     }
   else
     {
       if (((non_type_check ((op1), "generic-match.c", 3679, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 3679 "generic-match.c" 3 4
                                          __null
# 3679 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3473, %s:%d\n", "generic-match.c", 3680);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3687, __FUNCTION__))->typed.type) != ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 3687, __FUNCTION__))->typed.type))
    res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 3688, __FUNCTION__))->typed.type), ops1[0]);
  else
    res = ops1[0];
  res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
 }
      else
 {

   if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3701, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3701, __FUNCTION__))->type_common.precision) > ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3701, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3701, __FUNCTION__))->type_common.precision))
     {

       if ((cmp == EQ_EXPR || cmp == NE_EXPR || ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->base.u.bits.unsigned_flag) || (!((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->base.u.bits.unsigned_flag) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->base.u.bits.unsigned_flag))) && (types_match (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)) || ((((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->type_common.precision) >= ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->type_common.precision)) && (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3704, __FUNCTION__))->base.u.bits.unsigned_flag))) || (((enum tree_code) (captures[3])->base.code) == INTEGER_CST && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && int_fits_type_p (captures[3], ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3704, __FUNCTION__))->typed.type)))))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3489, %s:%d\n", "generic-match.c", 3706);
    tree res_op0;
    res_op0 = captures[1];
    tree res_op1;
    {
      tree ops1[1], res;
      ops1[0] = captures[3];
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3713, __FUNCTION__))->typed.type) != ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 3713, __FUNCTION__))->typed.type))
        res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 3714, __FUNCTION__))->typed.type), ops1[0]);
      else
        res = ops1[0];
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
    return res;
  }
       else
  {

    if (((enum tree_code) (captures[3])->base.code) == INTEGER_CST && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3726, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3726, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3726, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !int_fits_type_p (captures[3], ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3726, __FUNCTION__))->typed.type)))
      {
        {

 tree min = lower_bound_in_type (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3730, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3730, __FUNCTION__))->typed.type));
 tree max = upper_bound_in_type (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3731, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3731, __FUNCTION__))->typed.type));
 bool above = integer_nonzerop (const_binop (LT_EXPR, type, max, captures[3]));
 bool below = integer_nonzerop (const_binop (LT_EXPR, type, captures[3], min));

     if (above || below)
       {

         if (cmp == EQ_EXPR || cmp == NE_EXPR)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3502, %s:%d\n", "generic-match.c", 3740);
      tree res;
      res = constant_boolean_node (cmp == EQ_EXPR ? false : true, type);
      if (((non_type_check ((captures[1]), "generic-match.c", 3743, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[3]), "generic-match.c", 3745, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
    }
         else
    {

      if (cmp == LT_EXPR || cmp == LE_EXPR)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3504, %s:%d\n", "generic-match.c", 3754);
          tree res;
          res = constant_boolean_node (above ? true : false, type);
          if (((non_type_check ((captures[1]), "generic-match.c", 3757, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
          if (((non_type_check ((captures[3]), "generic-match.c", 3759, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
          return res;
        }
      else
        {

          if (cmp == GT_EXPR || cmp == GE_EXPR)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3506, %s:%d\n", "generic-match.c", 3768);
       tree res;
       res = constant_boolean_node (above ? false : true, type);
       if (((non_type_check ((captures[1]), "generic-match.c", 3771, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       if (((non_type_check ((captures[3]), "generic-match.c", 3773, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
       return res;
     }
        }
    }
       }
        }
      }
  }
     }
 }
    }
  return (tree) 
# 3786 "generic-match.c" 3 4
        __null
# 3786 "generic-match.c"
                 ;
}

static tree
generic_simplify_85 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (!((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3795, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3795, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3795, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3795, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3795, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 3795, __FUNCTION__))->typed.type)), "generic-match.c", 3795, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1380, %s:%d\n", "generic-match.c", 3797);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      res_op1 = captures[3];
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[2]), "generic-match.c", 3804, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
  return (tree) 
# 3808 "generic-match.c" 3 4
        __null
# 3808 "generic-match.c"
                 ;
}

static tree
generic_simplify_86 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (element_precision (type) <= element_precision (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3817, __FUNCTION__))->typed.type)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3817, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:935, %s:%d\n", "generic-match.c", 3819);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3824, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3834, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 3844 "generic-match.c" 3 4
        __null
# 3844 "generic-match.c"
                 ;
}

static tree
generic_simplify_87 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3853, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 3853, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1226, %s:%d\n", "generic-match.c", 3855);
      tree res_op0;
      {
 tree ops1[2], res;
 {
   tree ops2[1], res;
   ops2[0] = captures[3];
   res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3862, __FUNCTION__))->typed.type), ops2[0]);
   ops1[0] = res;
 }
 ops1[1] = captures[0];
 res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3866, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 3873 "generic-match.c" 3 4
        __null
# 3873 "generic-match.c"
                 ;
}

static tree
generic_simplify_88 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (! ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3882, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3882, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3882, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3882, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 3882, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || ! HONOR_NANS (captures[0]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3006, %s:%d\n", "generic-match.c", 3884);
      tree res;
      res = constant_boolean_node (true, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 3887, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  else
    {

      if (cmp != EQ_EXPR)
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3008, %s:%d\n", "generic-match.c", 3896);
   tree res_op0;
   res_op0 = unshare_expr (captures[0]);
   tree res_op1;
   res_op1 = captures[0];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   return res;
 }
    }
  return (tree) 
# 3906 "generic-match.c" 3 4
        __null
# 3906 "generic-match.c"
                 ;
}

static tree
generic_simplify_89 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 3915, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3915, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1035, %s:%d\n", "generic-match.c", 3917);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3922, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      {
 tree ops1[1], res;
 {
   tree ops2[1], res;
   ops2[0] = captures[1];
   res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 3934, __FUNCTION__))->typed.type), ops2[0]);
   ops1[0] = res;
 }
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 3937, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 3947 "generic-match.c" 3 4
        __null
# 3947 "generic-match.c"
                 ;
}

static tree
generic_simplify_90 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (real_isnegzero (&((*((tree_check ((captures[1]), "generic-match.c", 3956, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3080, %s:%d\n", "generic-match.c", 3958);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = build_real (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3962, __FUNCTION__))->typed.type), dconst0);
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 3965, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  else
    {

      if (real_isnan (&((*((tree_check ((captures[1]), "generic-match.c", 3972, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))) && ! HONOR_SNANS (captures[1]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3084, %s:%d\n", "generic-match.c", 3974);
   tree res;
   res = constant_boolean_node (cmp == NE_EXPR, type);
   if (((non_type_check ((captures[0]), "generic-match.c", 3977, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   if (((non_type_check ((captures[1]), "generic-match.c", 3979, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
      else
 {

   if (real_isinf (&((*((tree_check ((captures[1]), "generic-match.c", 3986, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))) && ((((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_FLOAT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_COMPLEX_FLOAT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_VECTOR_FLOAT) && ((real_format_for_mode[(((enum mode_class) mode_class[as_a <scalar_float_mode> ((mode_to_inner (((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode))))]) == MODE_DECIMAL_FLOAT) ? (((as_a <scalar_float_mode> ((mode_to_inner (((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode))))) - MIN_MODE_DECIMAL_FLOAT) + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) : ((enum mode_class) mode_class[as_a <scalar_float_mode> ((mode_to_inner (((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode))))]) == MODE_FLOAT ? ((as_a <scalar_float_mode> ((mode_to_inner (((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 3986, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 3986, __FUNCTION__))->typed.type))->type_common.mode))))) - MIN_MODE_FLOAT) : ((fancy_abort ("generic-match.c", 3986, __FUNCTION__)), 0)]))->has_inf))
     {
       {

 struct real_value max;
 enum tree_code code = cmp;
 bool neg = real_isneg (&((*((tree_check ((captures[1]), "generic-match.c", 3992, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr))));
 if (neg) code = swap_tree_comparison (code);

    if (code == GT_EXPR && !(HONOR_NANS (captures[0]) && global_options.x_flag_trapping_math))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3100, %s:%d\n", "generic-match.c", 3997);
        tree res;
        res = constant_boolean_node (false, type);
        if (((non_type_check ((captures[0]), "generic-match.c", 4000, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        if (((non_type_check ((captures[1]), "generic-match.c", 4002, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
    else
      {

        if (code == LE_EXPR)
   {

     if (! HONOR_NANS (captures[0]))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3104, %s:%d\n", "generic-match.c", 4014);
         tree res;
         res = constant_boolean_node (true, type);
         if (((non_type_check ((captures[0]), "generic-match.c", 4017, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
         if (((non_type_check ((captures[1]), "generic-match.c", 4019, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
         return res;
       }
     else
       {

         if (!global_options.x_flag_trapping_math)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3108, %s:%d\n", "generic-match.c", 4028);
      if (! tree_invariant_p (captures[0])) return (tree) 
# 4029 "generic-match.c" 3 4
                                                  __null
# 4029 "generic-match.c"
                                                           ;
      tree res_op0;
      res_op0 = unshare_expr (captures[0]);
      tree res_op1;
      res_op1 = captures[0];
      tree res;
      res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 4036, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
       }
   }
        else
   {

     if ((code == EQ_EXPR && !(HONOR_NANS (captures[0]) && global_options.x_flag_trapping_math)) || code == GE_EXPR)
       {
         {

 real_maxval (&max, neg, ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4049, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4049, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4049, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4049, __FUNCTION__))->typed.type))->type_common.mode));

      if (neg)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3115, %s:%d\n", "generic-match.c", 4053);
          tree res_op0;
          res_op0 = captures[0];
          tree res_op1;
          res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4057, __FUNCTION__))->typed.type), max);
          tree res;
          res = fold_build2_loc (loc, LT_EXPR, type, res_op0, res_op1);
          if (((non_type_check ((captures[1]), "generic-match.c", 4060, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
          return res;
        }
      else
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3116, %s:%d\n", "generic-match.c", 4066);
          tree res_op0;
          res_op0 = captures[0];
          tree res_op1;
          res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4070, __FUNCTION__))->typed.type), max);
          tree res;
          res = fold_build2_loc (loc, GT_EXPR, type, res_op0, res_op1);
          if (((non_type_check ((captures[1]), "generic-match.c", 4073, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
          return res;
        }
         }
       }
     else
       {

         if (code == LT_EXPR)
    {
      {

 real_maxval (&max, neg, ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4086, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4086, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4086, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4086, __FUNCTION__))->typed.type))->type_common.mode));

          if (neg)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3121, %s:%d\n", "generic-match.c", 4090);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4094, __FUNCTION__))->typed.type), max);
       tree res;
       res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[1]), "generic-match.c", 4097, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
          else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3122, %s:%d\n", "generic-match.c", 4103);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4107, __FUNCTION__))->typed.type), max);
       tree res;
       res = fold_build2_loc (loc, LE_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[1]), "generic-match.c", 4110, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
      }
    }
         else
    {

      if (code == NE_EXPR)
        {
          {

 real_maxval (&max, neg, ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4123, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4123, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4123, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4123, __FUNCTION__))->typed.type))->type_common.mode));

       if (! HONOR_NANS (captures[0]))
         {

           if (neg)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3129, %s:%d\n", "generic-match.c", 4130);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4134, __FUNCTION__))->typed.type), max);
        tree res;
        res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
        if (((non_type_check ((captures[1]), "generic-match.c", 4137, __FUNCTION__))->base.side_effects_flag))
          res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
           else
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3130, %s:%d\n", "generic-match.c", 4143);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4147, __FUNCTION__))->typed.type), max);
        tree res;
        res = fold_build2_loc (loc, LE_EXPR, type, res_op0, res_op1);
        if (((non_type_check ((captures[1]), "generic-match.c", 4150, __FUNCTION__))->base.side_effects_flag))
          res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
         }
       else
         {

           if (neg)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3132, %s:%d\n", "generic-match.c", 4160);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4164, __FUNCTION__))->typed.type), max);
        tree res;
        res = fold_build2_loc (loc, UNGE_EXPR, type, res_op0, res_op1);
        if (((non_type_check ((captures[1]), "generic-match.c", 4167, __FUNCTION__))->base.side_effects_flag))
          res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
           else
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3133, %s:%d\n", "generic-match.c", 4173);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4177, __FUNCTION__))->typed.type), max);
        tree res;
        res = fold_build2_loc (loc, UNLE_EXPR, type, res_op0, res_op1);
        if (((non_type_check ((captures[1]), "generic-match.c", 4180, __FUNCTION__))->base.side_effects_flag))
          res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
         }
          }
        }
    }
       }
   }
      }
       }
     }
 }
    }
  return (tree) 
# 4195 "generic-match.c" 3 4
        __null
# 4195 "generic-match.c"
                 ;
}

static tree
generic_simplify_91 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((tree_check ((captures[1]), "generic-match.c", 4204, __FUNCTION__, (SSA_NAME)))->base.default_def_flag && ((enum tree_code) (((tree_check ((captures[1]), "generic-match.c", 4204, __FUNCTION__, (SSA_NAME)))->ssa_name.var == (tree) 
# 4204 "generic-match.c" 3 4
                                              __null 
# 4204 "generic-match.c"
                                              || ((enum tree_code) ((captures[1])->ssa_name.var)->base.code) == IDENTIFIER_NODE ? (tree) 
# 4204 "generic-match.c" 3 4
                                              __null 
# 4204 "generic-match.c"
                                              : (captures[1])->ssa_name.var))->base.code) == PARM_DECL)
    {
      {

 tree base = get_base_address ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 4208, __FUNCTION__))))));

   if (((enum tree_code) (base)->base.code) == VAR_DECL && auto_var_in_fn_p (base, current_function_decl))
     {

       if (cmp == NE_EXPR)
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 4215, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4215 "generic-match.c" 3 4
                                               __null
# 4215 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3520, %s:%d\n", "generic-match.c", 4216);
    tree res;
    res = constant_boolean_node (true, type);
    if (((non_type_check ((captures[1]), "generic-match.c", 4219, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
       else
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 4225, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4225 "generic-match.c" 3 4
                                               __null
# 4225 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3521, %s:%d\n", "generic-match.c", 4226);
    tree res;
    res = constant_boolean_node (false, type);
    if (((non_type_check ((captures[1]), "generic-match.c", 4229, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
     }
      }
    }
  return (tree) 
# 4236 "generic-match.c" 3 4
        __null
# 4236 "generic-match.c"
                 ;
}

static tree
generic_simplify_92 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4245, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4245, __FUNCTION__))->typed.type)) && wi::bit_and_not (wi::to_wide (captures[2]), wi::to_wide (captures[3])) != 0)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3532, %s:%d\n", "generic-match.c", 4247);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[1]), "generic-match.c", 4250, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[2]), "generic-match.c", 4252, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      if (((non_type_check ((captures[3]), "generic-match.c", 4254, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
    }
  return (tree) 
# 4258 "generic-match.c" 3 4
        __null
# 4258 "generic-match.c"
                 ;
}

static tree
generic_simplify_93 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (((enum tree_code) (type)->base.code) != COMPLEX_TYPE && (! ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4267, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4267, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4267, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 4267, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2004, %s:%d\n", "generic-match.c", 4269);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, ABS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4274, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 4281 "generic-match.c" 3 4
        __null
# 4281 "generic-match.c"
                 ;
}

static tree
generic_simplify_94 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 4290, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4293, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if (!(!(any_integral_type_check ((type), "generic-match.c", 4296, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1786, %s:%d\n", "generic-match.c", 4298);
       tree res;
       res = build_all_ones_cst (type);
       if (((non_type_check ((captures[0]), "generic-match.c", 4301, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
       return res;
     }
 }
    }
  return (tree) 
# 4307 "generic-match.c" 3 4
        __null
# 4307 "generic-match.c"
                 ;
}

static tree
generic_simplify_95 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn froms __attribute__ ((__unused__)), const combined_fn tos __attribute__ ((__unused__)))
{

  if (global_options.x_optimize && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4266, %s:%d\n", "generic-match.c", 4318);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 {
   res = maybe_build_call_expr_loc (loc, tos, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4324, __FUNCTION__))->typed.type), 1, ops1[0]);
   if (!res)
     return (tree) 
# 4326 "generic-match.c" 3 4
           __null
# 4326 "generic-match.c"
                    ;
 }
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 4334 "generic-match.c" 3 4
        __null
# 4334 "generic-match.c"
                 ;
}

static tree
generic_simplify_96 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree op2 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  {

 tree from_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4344, __FUNCTION__))->typed.type);
 tree c1_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4345, __FUNCTION__))->typed.type), c2_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 4345, __FUNCTION__))->typed.type);
 enum tree_code code = ERROR_MARK;
 if ((((enum tree_code) (from_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (from_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (from_type)->base.code) == INTEGER_TYPE) && int_fits_type_p (captures[2], from_type) && (types_match (c1_type, from_type) || (((tree_class_check ((c1_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->type_common.precision) > ((tree_class_check ((from_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->type_common.precision) && (((tree_class_check ((from_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->base.u.bits.unsigned_flag) || ((signop) ((tree_class_check ((c1_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->base.u.bits.unsigned_flag)) == ((signop) ((tree_class_check ((from_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->base.u.bits.unsigned_flag))))) && (types_match (c2_type, from_type) || (((tree_class_check ((c2_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->type_common.precision) > ((tree_class_check ((from_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->type_common.precision) && (((tree_class_check ((from_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->base.u.bits.unsigned_flag) || ((signop) ((tree_class_check ((c2_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->base.u.bits.unsigned_flag)) == ((signop) ((tree_class_check ((from_type), (tcc_type), "generic-match.c", 4347, __FUNCTION__))->base.u.bits.unsigned_flag)))))) { if (cmp != EQ_EXPR) { if (wi::to_widest (captures[1]) == (wi::to_widest (captures[2]) - 1)) { if (cmp == LE_EXPR) code = LT_EXPR;
 if (cmp == GT_EXPR) code = GE_EXPR;
 } if (wi::to_widest (captures[1]) == (wi::to_widest (captures[2]) + 1)) { if (cmp == LT_EXPR) code = LE_EXPR;
 if (cmp == GE_EXPR) code = GT_EXPR;
 } if (code != ERROR_MARK || wi::to_widest (captures[2]) == wi::to_widest (captures[1])) { if (cmp == LT_EXPR || cmp == LE_EXPR) code = MIN_EXPR;
 if (cmp == GT_EXPR || cmp == GE_EXPR) code = MAX_EXPR;
 } } else if (int_fits_type_p (captures[1], from_type)) code = EQ_EXPR;
 }
      if (code == MAX_EXPR)
 {
   if (((non_type_check ((captures[0]), "generic-match.c", 4357, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4357 "generic-match.c" 3 4
                                              __null
# 4357 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[1]), "generic-match.c", 4358, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4358 "generic-match.c" 3 4
                                              __null
# 4358 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[2]), "generic-match.c", 4359, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4359 "generic-match.c" 3 4
                                              __null
# 4359 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2738, %s:%d\n", "generic-match.c", 4360);
   tree res_op0;
   {
     tree ops1[2], res;
     ops1[0] = captures[0];
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4368, __FUNCTION__))->typed.type) != ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4368, __FUNCTION__))->typed.type))
  res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4369, __FUNCTION__))->typed.type), ops2[0]);
       else
         res = ops2[0];
       ops1[1] = res;
     }
     res = fold_build2_loc (loc, MAX_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4374, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
      else
 {

   if (code == MIN_EXPR)
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 4386, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4386 "generic-match.c" 3 4
                                                  __null
# 4386 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 4387, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4387 "generic-match.c" 3 4
                                                  __null
# 4387 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 4388, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4388 "generic-match.c" 3 4
                                                  __null
# 4388 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2740, %s:%d\n", "generic-match.c", 4389);
       tree res_op0;
       {
  tree ops1[2], res;
  ops1[0] = captures[0];
  {
    tree ops2[1], res;
    ops2[0] = captures[2];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4397, __FUNCTION__))->typed.type) != ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4397, __FUNCTION__))->typed.type))
      res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4398, __FUNCTION__))->typed.type), ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, MIN_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4403, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
   else
     {

       if (code == EQ_EXPR)
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 4415, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4415 "generic-match.c" 3 4
                                               __null
# 4415 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[1]), "generic-match.c", 4416, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4416 "generic-match.c" 3 4
                                               __null
# 4416 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[2]), "generic-match.c", 4417, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4417 "generic-match.c" 3 4
                                               __null
# 4417 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2742, %s:%d\n", "generic-match.c", 4418);
    if (! tree_invariant_p (captures[1])) return (tree) 
# 4419 "generic-match.c" 3 4
                                                __null
# 4419 "generic-match.c"
                                                         ;
    tree res_op0;
    {
      tree ops1[3], res;
      {
        tree ops2[2], res;
        ops2[0] = captures[0];
        {
   tree ops3[1], res;
   ops3[0] = unshare_expr (captures[1]);
   if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 4429, __FUNCTION__))->typed.type) != ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4429, __FUNCTION__))->typed.type))
     res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4430, __FUNCTION__))->typed.type), ops3[0]);
   else
     res = ops3[0];
   ops2[1] = res;
        }
        res = fold_build2_loc (loc, EQ_EXPR, global_trees[TI_BOOLEAN_TYPE], ops2[0], ops2[1]);
        ops1[0] = res;
      }
      {
        tree ops2[1], res;
        ops2[0] = captures[1];
        if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4441, __FUNCTION__))->typed.type) != from_type)
   res = fold_build1_loc (loc, NOP_EXPR, from_type, ops2[0]);
        else
          res = ops2[0];
        ops1[1] = res;
      }
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4450, __FUNCTION__))->typed.type) != from_type)
   res = fold_build1_loc (loc, NOP_EXPR, from_type, ops2[0]);
        else
          res = ops2[0];
        ops1[2] = res;
      }
      res = fold_build3_loc (loc, COND_EXPR, ((contains_struct_check ((ops1[1]), (TS_TYPED), "generic-match.c", 4456, __FUNCTION__))->typed.type), ops1[0], ops1[1], ops1[2]);
      res_op0 = res;
    }
    tree res;
    res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
    return res;
  }
     }
 }
  }
  return (tree) 
# 4466 "generic-match.c" 3 4
        __null
# 4466 "generic-match.c"
                 ;
}

static tree
generic_simplify_97 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4475, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4475, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 4475, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 4475, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && wi::multiple_of_p (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((type), (tcc_type), "generic-match.c", 4475, __FUNCTION__))->base.u.bits.unsigned_flag))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:444, %s:%d\n", "generic-match.c", 4477);
      tree res;
      res = build_zero_cst (type);
      if (((non_type_check ((captures[0]), "generic-match.c", 4480, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 4482, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[2]), "generic-match.c", 4484, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
  return (tree) 
# 4488 "generic-match.c" 3 4
        __null
# 4488 "generic-match.c"
                 ;
}

static tree
generic_simplify_98 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4497, __FUNCTION__))->typed.type)), "generic-match.c", 4497, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1350, %s:%d\n", "generic-match.c", 4499);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 4506, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 4510 "generic-match.c" 3 4
        __null
# 4510 "generic-match.c"
                 ;
}

static tree
generic_simplify_99 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2532, %s:%d\n", "generic-match.c", 4518);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  if (((non_type_check ((captures[2]), "generic-match.c", 4523, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
  return res;
  return (tree) 
# 4526 "generic-match.c" 3 4
        __null
# 4526 "generic-match.c"
                 ;
}

static tree
generic_simplify_100 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4535, __FUNCTION__))->typed.type)), "generic-match.c", 4535, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1366, %s:%d\n", "generic-match.c", 4537);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 4544, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 4548 "generic-match.c" 3 4
        __null
# 4548 "generic-match.c"
                 ;
}

static tree
generic_simplify_101 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code scmp __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4557, __FUNCTION__))->typed.type)), "generic-match.c", 4557, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
    {
      {

 tree tem = const_unop (NEGATE_EXPR, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4561, __FUNCTION__))->typed.type), captures[1]);

   if (tem && !((tree_class_check ((tem), (tcc_constant), "generic-match.c", 4563, __FUNCTION__))->base.public_flag))
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 4565, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4565 "generic-match.c" 3 4
                                                  __null
# 4565 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3440, %s:%d\n", "generic-match.c", 4566);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = tem;
       tree res;
       res = fold_build2_loc (loc, scmp, type, res_op0, res_op1);
       return res;
     }
      }
    }
  return (tree) 
# 4577 "generic-match.c" 3 4
        __null
# 4577 "generic-match.c"
                 ;
}

static tree
generic_simplify_102 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code scmp __attribute__ ((__unused__)))
{

  if (integer_zerop (captures[2]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2990, %s:%d\n", "generic-match.c", 4588);
      tree res_op0;
      res_op0 = captures[2];
      tree res_op1;
      res_op1 = captures[3];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 4595, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  else
    {

      if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4602, __FUNCTION__))->typed.type)), "generic-match.c", 4602, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && single_use (captures[0]))
 {

   if (tree_int_cst_sgn (captures[2]) < 0)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2996, %s:%d\n", "generic-match.c", 4607);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = captures[3];
       tree res;
       res = fold_build2_loc (loc, scmp, type, res_op0, res_op1);
       if (((non_type_check ((captures[2]), "generic-match.c", 4614, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
   else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2997, %s:%d\n", "generic-match.c", 4620);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = captures[3];
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       if (((non_type_check ((captures[2]), "generic-match.c", 4627, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
 }
    }
  return (tree) 
# 4633 "generic-match.c" 3 4
        __null
# 4633 "generic-match.c"
                 ;
}

static tree
generic_simplify_103 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op1), "generic-match.c", 4641, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4641 "generic-match.c" 3 4
                                     __null
# 4641 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:743, %s:%d\n", "generic-match.c", 4642);
  tree res;
  res = captures[2];
  return res;
  return (tree) 
# 4646 "generic-match.c" 3 4
        __null
# 4646 "generic-match.c"
                 ;
}

static tree
generic_simplify_104 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn copysigns __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:602, %s:%d\n", "generic-match.c", 4654);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[2];
  tree res;
  res = maybe_build_call_expr_loc (loc, copysigns, type, 2, res_op0, res_op1);
  if (!res)
    return (tree) 
# 4662 "generic-match.c" 3 4
          __null
# 4662 "generic-match.c"
                   ;
  if (((non_type_check ((captures[1]), "generic-match.c", 4663, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 4666 "generic-match.c" 3 4
        __null
# 4666 "generic-match.c"
                 ;
}

static tree
generic_simplify_105 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bit_op __attribute__ ((__unused__)), const enum tree_code shift __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 4675, __FUNCTION__))->typed.type)))
    {
      {

 tree mask = int_const_binop (shift, fold_convert_loc (((source_location) 0), type, captures[3]), captures[4]);
   if (((non_type_check ((captures[3]), "generic-match.c", 4680, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4680 "generic-match.c" 3 4
                                              __null
# 4680 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[4]), "generic-match.c", 4681, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4681 "generic-match.c" 3 4
                                              __null
# 4681 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2338, %s:%d\n", "generic-match.c", 4682);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 4689, __FUNCTION__))->typed.type) != type)
  res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
       else
         res = ops2[0];
       ops1[0] = res;
     }
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, shift, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4696, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = mask;
   tree res;
   res = fold_build2_loc (loc, bit_op, type, res_op0, res_op1);
   return res;
      }
    }
  return (tree) 
# 4706 "generic-match.c" 3 4
        __null
# 4706 "generic-match.c"
                 ;
}

static tree
generic_simplify_106 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn copysigns __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:608, %s:%d\n", "generic-match.c", 4714);
  if (! tree_invariant_p (captures[1])) return (tree) 
# 4715 "generic-match.c" 3 4
                                              __null
# 4715 "generic-match.c"
                                                       ;
  tree res_op0;
  res_op0 = unshare_expr (captures[1]);
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
  if (((non_type_check ((captures[2]), "generic-match.c", 4722, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
  return res;
  return (tree) 
# 4725 "generic-match.c" 3 4
        __null
# 4725 "generic-match.c"
                 ;
}

static tree
generic_simplify_107 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && !(((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == FUNCTION_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == METHOD_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && !(((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == FUNCTION_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 4734, __FUNCTION__))->typed.type))->base.code) == METHOD_TYPE)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3710, %s:%d\n", "generic-match.c", 4736);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 4743, __FUNCTION__))->typed.type) != ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 4743, __FUNCTION__))->typed.type))
   res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 4744, __FUNCTION__))->typed.type), ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 4753 "generic-match.c" 3 4
        __null
# 4753 "generic-match.c"
                 ;
}

static tree
generic_simplify_108 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code icmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4762, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && ! ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4762, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4762, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4762, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4762, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4762, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT)))
    {
      {

 tree itype = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4766, __FUNCTION__))->typed.type);
 signop isign = ((signop) ((tree_class_check ((itype), (tcc_type), "generic-match.c", 4767, __FUNCTION__))->base.u.bits.unsigned_flag));
 format_helper fmt ((real_format_for_mode[(((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4768, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT) ? (((((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4768, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type))->type_common.mode)) - MIN_MODE_DECIMAL_FLOAT) + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) : ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4768, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_FLOAT ? ((((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4768, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 4768, __FUNCTION__))->typed.type))->type_common.mode)) - MIN_MODE_FLOAT) : ((fancy_abort ("generic-match.c", 4768, __FUNCTION__)), 0)]));
 const struct real_value *cst = ((tree_check ((captures[1]), "generic-match.c", 4769, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr);
 bool exception_p = real_isnan (cst) && (cst->signalling || (cmp != EQ_EXPR && cmp != NE_EXPR));
 bool signed_p = isign == SIGNED;
 bool itype_fits_ftype_p = ((tree_class_check ((itype), (tcc_type), "generic-match.c", 4772, __FUNCTION__))->type_common.precision) - signed_p <= significand_size (fmt);

   if (itype_fits_ftype_p && ! exception_p)
     {
       {

 struct real_value imin, imax;
 real_from_integer (&imin, fmt, wi::min_value (itype), isign);
 real_from_integer (&imax, fmt, wi::max_value (itype), isign);
 struct real_value icst;
 if (cmp == GT_EXPR || cmp == GE_EXPR) real_ceil (&icst, fmt, cst);
 else if (cmp == LT_EXPR || cmp == LE_EXPR) real_floor (&icst, fmt, cst);
 else real_trunc (&icst, fmt, cst);
 bool cst_int_p = !real_isnan (cst) && real_identical (&icst, cst);
 bool overflow_p = false;
 wide_int icst_val = real_to_integer (&icst, &overflow_p, ((tree_class_check ((itype), (tcc_type), "generic-match.c", 4787, __FUNCTION__))->type_common.precision));

    if (real_compare (LT_EXPR, cst, &imin))
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 4791, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4791 "generic-match.c" 3 4
                                                   __null
# 4791 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3307, %s:%d\n", "generic-match.c", 4792);
        tree res;
        res = constant_boolean_node (cmp == GT_EXPR || cmp == GE_EXPR || cmp == NE_EXPR, type);
        if (((non_type_check ((captures[0]), "generic-match.c", 4795, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        return res;
      }
    else
      {

        if (real_compare (GT_EXPR, cst, &imax))
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 4804, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4804 "generic-match.c" 3 4
                                                __null
# 4804 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3310, %s:%d\n", "generic-match.c", 4805);
     tree res;
     res = constant_boolean_node (cmp == LT_EXPR || cmp == LE_EXPR || cmp == NE_EXPR, type);
     if (((non_type_check ((captures[0]), "generic-match.c", 4808, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
     return res;
   }
        else
   {

     if (cst_int_p)
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 4817, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4817 "generic-match.c" 3 4
                                                    __null
# 4817 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3314, %s:%d\n", "generic-match.c", 4818);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
 ((void)(!(!overflow_p) ? fancy_abort ("generic-match.c", 4822, __FUNCTION__), 0 : 0));
         res_op1 = wide_int_to_tree (itype, icst_val);
         tree res;
         res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
         return res;
       }
     else
       {

         if (cmp == EQ_EXPR || cmp == NE_EXPR)
    {
      if (((non_type_check ((captures[1]), "generic-match.c", 4833, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4833 "generic-match.c" 3 4
                                                 __null
# 4833 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3321, %s:%d\n", "generic-match.c", 4834);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 4837, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
         else
    {
      {

 ((void)(!(!overflow_p) ? fancy_abort ("generic-match.c", 4845, __FUNCTION__), 0 : 0));
          if (((non_type_check ((captures[1]), "generic-match.c", 4846, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4846 "generic-match.c" 3 4
                                                     __null
# 4846 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3327, %s:%d\n", "generic-match.c", 4847);
          tree res_op0;
          res_op0 = captures[0];
          tree res_op1;
          res_op1 = wide_int_to_tree (itype, icst_val);
          tree res;
          res = fold_build2_loc (loc, icmp, type, res_op0, res_op1);
          return res;
      }
    }
       }
   }
      }
       }
     }
      }
    }
  return (tree) 
# 4864 "generic-match.c" 3 4
        __null
# 4864 "generic-match.c"
                 ;
}

static tree
generic_simplify_109 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code ocmp __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4873, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4873, __FUNCTION__))->base.u.bits.unsigned_flag) && ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) || !(((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4873, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)))
    {
      if (((non_type_check ((op1), "generic-match.c", 4875, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4875 "generic-match.c" 3 4
                                         __null
# 4875 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1462, %s:%d\n", "generic-match.c", 4876);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, ocmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 4885 "generic-match.c" 3 4
        __null
# 4885 "generic-match.c"
                 ;
}

static tree
generic_simplify_110 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn pows __attribute__ ((__unused__)), const combined_fn copysigns __attribute__ ((__unused__)))
{
  {

 long n;

      if (real_isinteger (&(*((tree_check ((captures[2]), "generic-match.c", 4897, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)), &n) && (n & 1) == 0)
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:570, %s:%d\n", "generic-match.c", 4899);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = maybe_build_call_expr_loc (loc, pows, type, 2, res_op0, res_op1);
   if (!res)
     return (tree) 
# 4907 "generic-match.c" 3 4
           __null
# 4907 "generic-match.c"
                    ;
   if (((non_type_check ((captures[1]), "generic-match.c", 4908, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
  }
  return (tree) 
# 4913 "generic-match.c" 3 4
        __null
# 4913 "generic-match.c"
                 ;
}

static tree
generic_simplify_111 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn SIN __attribute__ ((__unused__)), const combined_fn TAN __attribute__ ((__unused__)), const combined_fn COS __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {

      if (! HONOR_NANS (captures[1]) && ! HONOR_INFINITIES (captures[1]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4143, %s:%d\n", "generic-match.c", 4927);
   tree res_op0;
   res_op0 = captures[1];
   tree res;
   res = maybe_build_call_expr_loc (loc, COS, type, 1, res_op0);
   if (!res)
     return (tree) 
# 4933 "generic-match.c" 3 4
           __null
# 4933 "generic-match.c"
                    ;
   return res;
 }
    }
  return (tree) 
# 4937 "generic-match.c" 3 4
        __null
# 4937 "generic-match.c"
                 ;
}

static tree
generic_simplify_112 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op0), "generic-match.c", 4945, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4945 "generic-match.c" 3 4
                                     __null
# 4945 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:743, %s:%d\n", "generic-match.c", 4946);
  tree res;
  res = captures[2];
  return res;
  return (tree) 
# 4950 "generic-match.c" 3 4
        __null
# 4950 "generic-match.c"
                 ;
}

static tree
generic_simplify_113 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (single_use (captures[0]))
    {
      if (((non_type_check ((op1), "generic-match.c", 4961, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 4961 "generic-match.c" 3 4
                                         __null
# 4961 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2978, %s:%d\n", "generic-match.c", 4962);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 4971 "generic-match.c" 3 4
        __null
# 4971 "generic-match.c"
                 ;
}

static tree
generic_simplify_114 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 4980, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 4980, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:764, %s:%d\n", "generic-match.c", 4982);
      tree res;
      res = constant_boolean_node (cmp == LT_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 4985, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 4987, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 4991 "generic-match.c" 3 4
        __null
# 4991 "generic-match.c"
                 ;
}

static tree
generic_simplify_115 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1986, %s:%d\n", "generic-match.c", 4999);
  tree res;
  res = captures[1];
  if (((non_type_check ((captures[0]), "generic-match.c", 5002, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 5005 "generic-match.c" 3 4
        __null
# 5005 "generic-match.c"
                 ;
}

static tree
generic_simplify_116 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn tans __attribute__ ((__unused__)), const combined_fn atans __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4055, %s:%d\n", "generic-match.c", 5016);
      tree res;
      res = captures[0];
      return res;
    }
  return (tree) 
# 5021 "generic-match.c" 3 4
        __null
# 5021 "generic-match.c"
                 ;
}

static tree
generic_simplify_117 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code inner_op __attribute__ ((__unused__)), const enum tree_code neg_inner_op __attribute__ ((__unused__)), const enum tree_code outer_op __attribute__ ((__unused__)))
{

  if (!((tree_not_check4 ((type), "generic-match.c", 5030, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5033, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5036, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5036, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5036, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 5036, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
     {

       if (!(tree_code_type[(int) (((enum tree_code) (captures[0])->base.code))] == tcc_constant))
  {

    if (outer_op == PLUS_EXPR)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1740, %s:%d\n", "generic-match.c", 5044);
        tree res_op0;
        {
   tree ops1[1], res;
   ops1[0] = captures[0];
   res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops1[0]);
   res_op0 = res;
        }
        tree res_op1;
        {
   tree ops1[2], res;
   ops1[0] = captures[2];
   {
     tree ops2[1], res;
     ops2[0] = captures[1];
     res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops2[0]);
     ops1[1] = res;
   }
   res = fold_build2_loc (loc, inner_op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5062, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
   res_op1 = res;
        }
        tree res;
        res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
        return res;
      }
    else
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1741, %s:%d\n", "generic-match.c", 5071);
        tree res_op0;
        {
   tree ops1[1], res;
   ops1[0] = captures[0];
   res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops1[0]);
   res_op0 = res;
        }
        tree res_op1;
        {
   tree ops1[2], res;
   ops1[0] = captures[2];
   {
     tree ops2[1], res;
     ops2[0] = captures[1];
     res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops2[0]);
     ops1[1] = res;
   }
   res = fold_build2_loc (loc, neg_inner_op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5089, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
   res_op1 = res;
        }
        tree res;
        res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
        return res;
      }
  }
     }
   else
     {

       if (!((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5101, __FUNCTION__))->typed.type)), "generic-match.c", 5101, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
  {

    if (outer_op == PLUS_EXPR)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1745, %s:%d\n", "generic-match.c", 5106);
        tree res_op0;
        {
   tree ops1[2], res;
   ops1[0] = captures[0];
   {
     tree ops2[2], res;
     {
       tree ops3[1], res;
       ops3[0] = captures[2];
       res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5116, __FUNCTION__))->typed.type), ops3[0]);
       ops2[0] = res;
     }
     ops2[1] = captures[1];
     res = fold_build2_loc (loc, inner_op, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 5120, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
     ops1[1] = res;
   }
   res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5123, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
   res_op0 = res;
        }
        tree res;
        res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
        return res;
      }
    else
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1746, %s:%d\n", "generic-match.c", 5132);
        tree res_op0;
        {
   tree ops1[2], res;
   ops1[0] = captures[0];
   {
     tree ops2[2], res;
     {
       tree ops3[1], res;
       ops3[0] = captures[2];
       res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5142, __FUNCTION__))->typed.type), ops3[0]);
       ops2[0] = res;
     }
     ops2[1] = captures[1];
     res = fold_build2_loc (loc, neg_inner_op, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 5146, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
     ops1[1] = res;
   }
   res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5149, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
   res_op0 = res;
        }
        tree res;
        res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
        return res;
      }
  }
       else
  {

    if (types_match (type, captures[0]))
      {
        {

 tree cst = const_binop (outer_op == inner_op ? PLUS_EXPR : MINUS_EXPR, type, captures[1], captures[2]);

     if (cst && !((tree_class_check ((cst), (tcc_constant), "generic-match.c", 5166, __FUNCTION__))->base.public_flag))
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 5168, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5168 "generic-match.c" 3 4
                                                    __null
# 5168 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[2]), "generic-match.c", 5169, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5169 "generic-match.c" 3 4
                                                    __null
# 5169 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1755, %s:%d\n", "generic-match.c", 5170);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = cst;
         tree res;
         res = fold_build2_loc (loc, inner_op, type, res_op0, res_op1);
         return res;
       }
     else
       {

         if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && cst && wi::to_wide (cst) == wi::min_value (type))
    {
      if (((non_type_check ((captures[1]), "generic-match.c", 5184, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5184 "generic-match.c" 3 4
                                                 __null
# 5184 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[2]), "generic-match.c", 5185, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5185 "generic-match.c" 3 4
                                                 __null
# 5185 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1759, %s:%d\n", "generic-match.c", 5186);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = wide_int_to_tree (type, wi::to_wide (cst));
      tree res;
      res = fold_build2_loc (loc, neg_inner_op, type, res_op0, res_op1);
      return res;
    }
         else
    {
      {

 tree utype = unsigned_type_for (type);
          if (((non_type_check ((captures[1]), "generic-match.c", 5200, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5200 "generic-match.c" 3 4
                                                     __null
# 5200 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[2]), "generic-match.c", 5201, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5201 "generic-match.c" 3 4
                                                     __null
# 5201 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1762, %s:%d\n", "generic-match.c", 5202);
          tree res_op0;
          {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[0];
       res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, utype, ops2[0]);
       ops1[0] = res;
     }
     {
       tree ops2[1], res;
       ops2[0] = drop_tree_overflow (cst);
       res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, utype, ops2[0]);
       ops1[1] = res;
     }
     res = fold_build2_loc (loc, inner_op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5218, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
          }
          tree res;
          res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
          return res;
      }
    }
       }
        }
      }
  }
     }
 }
    }
  return (tree) 
# 5233 "generic-match.c" 3 4
        __null
# 5233 "generic-match.c"
                 ;
}

static tree
generic_simplify_118 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5242, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5242, __FUNCTION__))->base.u.bits.unsigned_flag) && types_match (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5242, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5242, __FUNCTION__))->typed.type)))
    {
      if (((non_type_check ((op0), "generic-match.c", 5244, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5244 "generic-match.c" 3 4
                                         __null
# 5244 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3852, %s:%d\n", "generic-match.c", 5245);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5250, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 5250, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5254, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, out, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5259 "generic-match.c" 3 4
        __null
# 5259 "generic-match.c"
                 ;
}

static tree
generic_simplify_119 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 5268, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5271, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if (!(!(any_integral_type_check ((type), "generic-match.c", 5274, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5274, __FUNCTION__))->typed.type)))
     {
       if (((non_type_check ((op1), "generic-match.c", 5276, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5276 "generic-match.c" 3 4
                                          __null
# 5276 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1799, %s:%d\n", "generic-match.c", 5277);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[0];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5282, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
       return res;
     }
 }
    }
  return (tree) 
# 5294 "generic-match.c" 3 4
        __null
# 5294 "generic-match.c"
                 ;
}

static tree
generic_simplify_120 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5303, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5303, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5303, __FUNCTION__))->type_common.precision))
    {
      if (((non_type_check ((op1), "generic-match.c", 5305, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5305 "generic-match.c" 3 4
                                         __null
# 5305 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:683, %s:%d\n", "generic-match.c", 5306);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 {
   tree ops2[1], res;
   ops2[0] = captures[2];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 5314, __FUNCTION__))->typed.type) != ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5314, __FUNCTION__))->typed.type))
     res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5315, __FUNCTION__))->typed.type), ops2[0]);
   else
     res = ops2[0];
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5320, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5329 "generic-match.c" 3 4
        __null
# 5329 "generic-match.c"
                 ;
}

static tree
generic_simplify_121 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5338, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5338, __FUNCTION__))->base.u.bits.unsigned_flag) && !(((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5338, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE))
    {
      {

 tree t = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5342, __FUNCTION__))->typed.type), cpx = build_complex_type (t);
   if (((non_type_check ((op0), "generic-match.c", 5343, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5343 "generic-match.c" 3 4
                                      __null
# 5343 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3862, %s:%d\n", "generic-match.c", 5344);
   tree res_op0;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[2];
       ops2[1] = captures[1];
       {
         res = maybe_build_call_expr_loc (loc, CFN_MUL_OVERFLOW, cpx, 2, ops2[0], ops2[1]);
         if (!res)
           return (tree) 
# 5355 "generic-match.c" 3 4
                 __null
# 5355 "generic-match.c"
                          ;
       }
       ops1[0] = res;
     }
     res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5359, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 5359, __FUNCTION__))->typed.type), ops1[0]);
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = build_zero_cst (t);
   tree res;
   res = fold_build2_loc (loc, out, type, res_op0, res_op1);
   return res;
      }
    }
  return (tree) 
# 5369 "generic-match.c" 3 4
        __null
# 5369 "generic-match.c"
                 ;
}

static tree
generic_simplify_122 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5378, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[4]), (TS_TYPED), "generic-match.c", 5378, __FUNCTION__))->typed.type)) && (wi::to_wide (captures[2]) & wi::to_wide (captures[5])) == 0)
    {
      if (((non_type_check ((op0), "generic-match.c", 5380, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5380 "generic-match.c" 3 4
                                         __null
# 5380 "generic-match.c"
                                                  ;
      if (((non_type_check ((op1), "generic-match.c", 5381, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5381 "generic-match.c" 3 4
                                         __null
# 5381 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:922, %s:%d\n", "generic-match.c", 5382);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5387, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[3];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5397, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5407 "generic-match.c" 3 4
        __null
# 5407 "generic-match.c"
                 ;
}

static tree
generic_simplify_123 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{

  if ((((tree_class_check ((type), (tcc_type), "generic-match.c", 5416, __FUNCTION__))->base.u.bits.unsigned_flag) || tree_expr_nonnegative_p (captures[0])) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5416, __FUNCTION__))->typed.type)) && integer_pow2p (captures[3]) && tree_int_cst_sgn (captures[3]) > 0)
    {
      if (((non_type_check ((op1), "generic-match.c", 5418, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5418 "generic-match.c" 3 4
                                         __null
# 5418 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:493, %s:%d\n", "generic-match.c", 5419);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[1], res;
 {
   tree ops2[2], res;
   ops2[0] = captures[2];
   ops2[1] = build_int_cst (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5428, __FUNCTION__))->typed.type), 1);
   res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 5429, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
   ops1[0] = res;
 }
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5432, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5442 "generic-match.c" 3 4
        __null
# 5442 "generic-match.c"
                 ;
}

static tree
generic_simplify_124 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn bswap __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2635, %s:%d\n", "generic-match.c", 5450);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
  return res;
  return (tree) 
# 5456 "generic-match.c" 3 4
        __null
# 5456 "generic-match.c"
                 ;
}

static tree
generic_simplify_125 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const combined_fn bswap __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2639, %s:%d\n", "generic-match.c", 5464);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  {
    tree ops1[1], res;
    ops1[0] = captures[1];
    {
      res = maybe_build_call_expr_loc (loc, bswap, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5472, __FUNCTION__))->typed.type), 1, ops1[0]);
      if (!res)
        return (tree) 
# 5474 "generic-match.c" 3 4
              __null
# 5474 "generic-match.c"
                       ;
    }
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5481 "generic-match.c" 3 4
        __null
# 5481 "generic-match.c"
                 ;
}

static tree
generic_simplify_126 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 5489, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5489 "generic-match.c" 3 4
                                     __null
# 5489 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3537, %s:%d\n", "generic-match.c", 5490);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5498 "generic-match.c" 3 4
        __null
# 5498 "generic-match.c"
                 ;
}

static tree
generic_simplify_127 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3543, %s:%d\n", "generic-match.c", 5506);
  tree res_op0;
  res_op0 = captures[1];
  tree res_op1;
  res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5510, __FUNCTION__))->typed.type));
  tree res;
  res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
  if (((non_type_check ((captures[0]), "generic-match.c", 5513, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 5516 "generic-match.c" 3 4
        __null
# 5516 "generic-match.c"
                 ;
}

static tree
generic_simplify_128 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:688, %s:%d\n", "generic-match.c", 5524);
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[1];
    ops1[1] = unshare_expr (captures[2]);
    res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5530, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res_op1;
  res_op1 = captures[2];
  tree res;
  res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5538 "generic-match.c" 3 4
        __null
# 5538 "generic-match.c"
                 ;
}

static tree
generic_simplify_129 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code icmp __attribute__ ((__unused__)))
{
  if (((non_type_check ((op0), "generic-match.c", 5546, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5546 "generic-match.c" 3 4
                                     __null
# 5546 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3562, %s:%d\n", "generic-match.c", 5547);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5551, __FUNCTION__))->typed.type));
  tree res;
  res = fold_build2_loc (loc, icmp, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5555 "generic-match.c" 3 4
        __null
# 5555 "generic-match.c"
                 ;
}

static tree
generic_simplify_130 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code plusminus __attribute__ ((__unused__)))
{

  if (!((tree_not_check4 ((type), "generic-match.c", 5564, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag) && (!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5564, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math))
    {

      if (!((((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 5567, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_FRACT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 5567, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_VECTOR_FRACT) || (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 5567, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_UFRACT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 5567, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_VECTOR_UFRACT)))
 {

   if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5570, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5570, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5570, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 5570, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) || ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && tree_expr_nonzero_p (captures[0]) && expr_not_equal_to (captures[0], wi::minus_one (((tree_class_check ((type), (tcc_type), "generic-match.c", 5570, __FUNCTION__))->type_common.precision)))))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1967, %s:%d\n", "generic-match.c", 5572);
       tree res_op0;
       {
  tree ops1[2], res;
  ops1[0] = build_one_cst (type);
  ops1[1] = captures[2];
  res = fold_build2_loc (loc, plusminus, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5578, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[0];
       tree res;
       res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
    }
  return (tree) 
# 5589 "generic-match.c" 3 4
        __null
# 5589 "generic-match.c"
                 ;
}

static tree
generic_simplify_131 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn POW __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {

      if (!((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 5601, __FUNCTION__))->base.public_flag))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4171, %s:%d\n", "generic-match.c", 5603);
   tree res_op0;
   res_op0 = captures[1];
   tree res_op1;
   {
     tree ops1[2], res;
     ops1[0] = captures[2];
     ops1[1] = build_one_cst (type);
     res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5611, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op1 = res;
   }
   tree res;
   res = maybe_build_call_expr_loc (loc, POW, type, 2, res_op0, res_op1);
   if (!res)
     return (tree) 
# 5617 "generic-match.c" 3 4
           __null
# 5617 "generic-match.c"
                    ;
   return res;
 }
    }
  return (tree) 
# 5621 "generic-match.c" 3 4
        __null
# 5621 "generic-match.c"
                 ;
}

static tree
generic_simplify_132 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{

  if (!((tree_class_check ((type), (tcc_type), "generic-match.c", 5630, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:426, %s:%d\n", "generic-match.c", 5632);
      tree res;
      res = build_zero_cst (type);
      if (((non_type_check ((captures[0]), "generic-match.c", 5635, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 5637, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 5641 "generic-match.c" 3 4
        __null
# 5641 "generic-match.c"
                 ;
}

static tree
generic_simplify_133 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn FMIN_ALL __attribute__ ((__unused__)))
{

  if (global_options.x_flag_finite_math_only)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2073, %s:%d\n", "generic-match.c", 5652);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, MIN_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5661 "generic-match.c" 3 4
        __null
# 5661 "generic-match.c"
                 ;
}

static tree
generic_simplify_134 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op1), "generic-match.c", 5669, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5669 "generic-match.c" 3 4
                                     __null
# 5669 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3373, %s:%d\n", "generic-match.c", 5670);
  tree res;
  res = captures[1];
  return res;
  return (tree) 
# 5674 "generic-match.c" 3 4
        __null
# 5674 "generic-match.c"
                 ;
}

static tree
generic_simplify_135 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:703, %s:%d\n", "generic-match.c", 5682);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5690 "generic-match.c" 3 4
        __null
# 5690 "generic-match.c"
                 ;
}

static tree
generic_simplify_136 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code acmp __attribute__ ((__unused__)))
{

  if (tree_int_cst_sgn (captures[1]) == 1)
    {
      if (((non_type_check ((captures[1]), "generic-match.c", 5701, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5701 "generic-match.c" 3 4
                                                 __null
# 5701 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2930, %s:%d\n", "generic-match.c", 5702);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = wide_int_to_tree (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5706, __FUNCTION__))->typed.type), wi::to_wide (captures[1]) - 1);
      tree res;
      res = fold_build2_loc (loc, acmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5711 "generic-match.c" 3 4
        __null
# 5711 "generic-match.c"
                 ;
}

static tree
generic_simplify_137 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 5720, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5723, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1723, %s:%d\n", "generic-match.c", 5725);
   tree res_op0;
   res_op0 = captures[1];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[0]), "generic-match.c", 5732, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  return (tree) 
# 5737 "generic-match.c" 3 4
        __null
# 5737 "generic-match.c"
                 ;
}

static tree
generic_simplify_138 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:712, %s:%d\n", "generic-match.c", 5745);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5753 "generic-match.c" 3 4
        __null
# 5753 "generic-match.c"
                 ;
}

static tree
generic_simplify_139 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code minmax __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && types_match (captures[1], type) && int_fits_type_p (captures[2], type) && ((signop) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5762, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5762, __FUNCTION__))->base.u.bits.unsigned_flag)) == ((signop) ((tree_class_check ((type), (tcc_type), "generic-match.c", 5762, __FUNCTION__))->base.u.bits.unsigned_flag)) && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5762, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5762, __FUNCTION__))->type_common.precision) > ((tree_class_check ((type), (tcc_type), "generic-match.c", 5762, __FUNCTION__))->type_common.precision))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2055, %s:%d\n", "generic-match.c", 5764);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[2];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5771, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, minmax, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 5781 "generic-match.c" 3 4
        __null
# 5781 "generic-match.c"
                 ;
}

static tree
generic_simplify_140 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 5790, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 5793, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5796, __FUNCTION__))->typed.type)))
     {
       if (((non_type_check ((op1), "generic-match.c", 5798, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5798 "generic-match.c" 3 4
                                          __null
# 5798 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1792, %s:%d\n", "generic-match.c", 5799);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[0];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5804, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
       return res;
     }
 }
    }
  return (tree) 
# 5816 "generic-match.c" 3 4
        __null
# 5816 "generic-match.c"
                 ;
}

static tree
generic_simplify_141 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1159, %s:%d\n", "generic-match.c", 5824);
  tree res;
  res = build_zero_cst (type);
  if (((non_type_check ((captures[0]), "generic-match.c", 5827, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 5830 "generic-match.c" 3 4
        __null
# 5830 "generic-match.c"
                 ;
}

static tree
generic_simplify_142 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:722, %s:%d\n", "generic-match.c", 5838);
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[1];
    ops1[1] = captures[2];
    res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5844, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
  return res;
  return (tree) 
# 5850 "generic-match.c" 3 4
        __null
# 5850 "generic-match.c"
                 ;
}

static tree
generic_simplify_143 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:727, %s:%d\n", "generic-match.c", 5858);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 5866 "generic-match.c" 3 4
        __null
# 5866 "generic-match.c"
                 ;
}

static tree
generic_simplify_144 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op0), "generic-match.c", 5874, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5874 "generic-match.c" 3 4
                                     __null
# 5874 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:717, %s:%d\n", "generic-match.c", 5875);
  tree res;
  res = captures[2];
  return res;
  return (tree) 
# 5879 "generic-match.c" 3 4
        __null
# 5879 "generic-match.c"
                 ;
}

static tree
generic_simplify_145 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shift __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 5888, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 5888, __FUNCTION__))->typed.type)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 5888, __FUNCTION__))->type_common.precision) <= 64 && tree_fits_uhwi_p (captures[4]) && tree_to_uhwi (captures[4]) > 0 && tree_to_uhwi (captures[4]) < ((tree_class_check ((type), (tcc_type), "generic-match.c", 5888, __FUNCTION__))->type_common.precision))
    {
      {

 unsigned int shiftc = tree_to_uhwi (captures[4]);
 unsigned long mask = ((unsigned long) (*tree_int_cst_elt_check ((captures[5]), (0), "generic-match.c", 5893, __FUNCTION__)));
 unsigned long newmask, zerobits = 0;
 tree shift_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5895, __FUNCTION__))->typed.type);
 unsigned int prec;
 if (shift == LSHIFT_EXPR) zerobits = ((1UL << shiftc) - 1);
 else if (shift == RSHIFT_EXPR && type_has_mode_precision_p (shift_type)) { prec = ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5898, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5898, __FUNCTION__))->type_common.precision);
 tree arg00 = captures[3];
 if (captures[2] != captures[3] && ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 5900, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5900, __FUNCTION__))->base.u.bits.unsigned_flag)) { tree inner_type = ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 5900, __FUNCTION__))->typed.type);
 if (type_has_mode_precision_p (inner_type) && ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 5901, __FUNCTION__))->type_common.precision) < prec) { prec = ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 5901, __FUNCTION__))->type_common.precision);
 if (shiftc < prec) shift_type = inner_type;
 } } zerobits = -1UL;
 if (shiftc < prec) { zerobits >>= 64 - shiftc;
 zerobits <<= prec - shiftc;
 } if (!((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5906, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5906, __FUNCTION__))->base.u.bits.unsigned_flag) && prec == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5906, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 5906, __FUNCTION__))->type_common.precision)) { if ((mask & zerobits) == 0) shift_type = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5906, __FUNCTION__))->typed.type));
 else zerobits = 0;
 } }
   if ((mask & zerobits) == mask)
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 5911, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5911 "generic-match.c" 3 4
                                                  __null
# 5911 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 5912, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5912 "generic-match.c" 3 4
                                                  __null
# 5912 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[5]), "generic-match.c", 5913, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5913 "generic-match.c" 3 4
                                                  __null
# 5913 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2309, %s:%d\n", "generic-match.c", 5914);
       tree res;
       res = build_int_cst (type, 0);
       return res;
     }
   else
     {
       {

 newmask = mask | zerobits;

    if (newmask != mask && (newmask & (newmask + 1)) == 0)
      {
        {

 for (prec = (8);
 prec < 64;
 prec <<= 1) if (newmask == (1UL << prec) - 1) break;

     if (prec < 64 || newmask == -1UL)
       {
         {

 tree newmaskt = build_int_cst_type (((contains_struct_check ((captures[5]), (TS_TYPED), "generic-match.c", 5937, __FUNCTION__))->typed.type), newmask);

      if (!tree_int_cst_equal (newmaskt, captures[5]))
        {

          if (shift_type != ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 5942, __FUNCTION__))->typed.type))
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 5944, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5944 "generic-match.c" 3 4
                                                  __null
# 5944 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 5945, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5945 "generic-match.c" 3 4
                                                  __null
# 5945 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[5]), "generic-match.c", 5946, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5946 "generic-match.c" 3 4
                                                  __null
# 5946 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2327, %s:%d\n", "generic-match.c", 5947);
       tree res_op0;
       {
         tree ops1[1], res;
         {
           tree ops2[2], res;
           {
      tree ops3[1], res;
      ops3[0] = captures[2];
      if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 5956, __FUNCTION__))->typed.type) != shift_type)
        res = fold_build1_loc (loc, NOP_EXPR, shift_type, ops3[0]);
      else
        res = ops3[0];
      ops2[0] = res;
           }
           ops2[1] = captures[4];
           res = fold_build2_loc (loc, shift, shift_type, ops2[0], ops2[1]);
           ops1[0] = res;
         }
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 5966, __FUNCTION__))->typed.type) != type)
           res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
          else
     {
       if (((non_type_check ((op0), "generic-match.c", 5980, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5980 "generic-match.c" 3 4
                                          __null
# 5980 "generic-match.c"
                                                   ;
       if (((non_type_check ((captures[5]), "generic-match.c", 5981, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 5981 "generic-match.c" 3 4
                                                  __null
# 5981 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2328, %s:%d\n", "generic-match.c", 5982);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
         }
       }
        }
      }
       }
     }
      }
    }
  return (tree) 
# 6000 "generic-match.c" 3 4
        __null
# 6000 "generic-match.c"
                 ;
}

static tree
generic_simplify_146 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code icmp __attribute__ ((__unused__)), const enum tree_code ncmp __attribute__ ((__unused__)))
{
  {

 enum tree_code ic = invert_tree_comparison (cmp, HONOR_NANS (captures[0]));

      if (ic == icmp)
 {
   if (((non_type_check ((op1), "generic-match.c", 6014, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6014 "generic-match.c" 3 4
                                      __null
# 6014 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2964, %s:%d\n", "generic-match.c", 6015);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, icmp, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (ic == ncmp)
     {
       if (((non_type_check ((op1), "generic-match.c", 6029, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6029 "generic-match.c" 3 4
                                          __null
# 6029 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2966, %s:%d\n", "generic-match.c", 6030);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, ncmp, type, res_op0, res_op1);
       return res;
     }
 }
  }
  return (tree) 
# 6041 "generic-match.c" 3 4
        __null
# 6041 "generic-match.c"
                 ;
}

static tree
generic_simplify_147 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:732, %s:%d\n", "generic-match.c", 6049);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  {
    tree ops1[1], res;
    ops1[0] = captures[2];
    res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6056, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6062 "generic-match.c" 3 4
        __null
# 6062 "generic-match.c"
                 ;
}

static tree
generic_simplify_148 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6071, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6071, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6071, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !(targetm.have_canonicalize_funcptr_for_compare () && ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6071, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE && ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6071, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6071, __FUNCTION__))->typed.type))->base.code) == FUNCTION_TYPE) && single_use (captures[0]))
    {

      if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6074, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6074, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6074, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6074, __FUNCTION__))->type_common.precision) && (((enum tree_code) (captures[3])->base.code) == INTEGER_CST || captures[2] != captures[3]) && (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6074, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6074, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6074, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6074, __FUNCTION__))->base.u.bits.unsigned_flag) || cmp == NE_EXPR || cmp == EQ_EXPR) && !(((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6074, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6074, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))
 {

   if (((enum tree_code) (captures[2])->base.code) == INTEGER_CST)
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 6079, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6079 "generic-match.c" 3 4
                                                  __null
# 6079 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3471, %s:%d\n", "generic-match.c", 6080);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = force_fit_type (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6084, __FUNCTION__))->typed.type), wi::to_widest (captures[2]), 0, ((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 6084, __FUNCTION__))->base.public_flag));
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
   else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3473, %s:%d\n", "generic-match.c", 6091);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6098, __FUNCTION__))->typed.type) != ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 6098, __FUNCTION__))->typed.type))
    res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 6099, __FUNCTION__))->typed.type), ops1[0]);
  else
    res = ops1[0];
  res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
 }
      else
 {

   if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6112, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6112, __FUNCTION__))->type_common.precision) > ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6112, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6112, __FUNCTION__))->type_common.precision))
     {

       if ((cmp == EQ_EXPR || cmp == NE_EXPR || ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->base.u.bits.unsigned_flag) || (!((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->base.u.bits.unsigned_flag) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->base.u.bits.unsigned_flag))) && (types_match (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)) || ((((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->type_common.precision) >= ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->type_common.precision)) && (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6115, __FUNCTION__))->base.u.bits.unsigned_flag))) || (((enum tree_code) (captures[3])->base.code) == INTEGER_CST && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && int_fits_type_p (captures[3], ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6115, __FUNCTION__))->typed.type)))))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3489, %s:%d\n", "generic-match.c", 6117);
    tree res_op0;
    res_op0 = captures[1];
    tree res_op1;
    {
      tree ops1[1], res;
      ops1[0] = captures[3];
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6124, __FUNCTION__))->typed.type) != ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 6124, __FUNCTION__))->typed.type))
        res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((res_op0), (TS_TYPED), "generic-match.c", 6125, __FUNCTION__))->typed.type), ops1[0]);
      else
        res = ops1[0];
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
    return res;
  }
       else
  {

    if (((enum tree_code) (captures[3])->base.code) == INTEGER_CST && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6137, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6137, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6137, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !int_fits_type_p (captures[3], ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6137, __FUNCTION__))->typed.type)))
      {
        {

 tree min = lower_bound_in_type (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6141, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6141, __FUNCTION__))->typed.type));
 tree max = upper_bound_in_type (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6142, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6142, __FUNCTION__))->typed.type));
 bool above = integer_nonzerop (const_binop (LT_EXPR, type, max, captures[3]));
 bool below = integer_nonzerop (const_binop (LT_EXPR, type, captures[3], min));

     if (above || below)
       {

         if (cmp == EQ_EXPR || cmp == NE_EXPR)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3502, %s:%d\n", "generic-match.c", 6151);
      tree res;
      res = constant_boolean_node (cmp == EQ_EXPR ? false : true, type);
      if (((non_type_check ((captures[1]), "generic-match.c", 6154, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[2]), "generic-match.c", 6156, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
         else
    {

      if (cmp == LT_EXPR || cmp == LE_EXPR)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3504, %s:%d\n", "generic-match.c", 6165);
          tree res;
          res = constant_boolean_node (above ? true : false, type);
          if (((non_type_check ((captures[1]), "generic-match.c", 6168, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
          if (((non_type_check ((captures[2]), "generic-match.c", 6170, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
          return res;
        }
      else
        {

          if (cmp == GT_EXPR || cmp == GE_EXPR)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3506, %s:%d\n", "generic-match.c", 6179);
       tree res;
       res = constant_boolean_node (above ? false : true, type);
       if (((non_type_check ((captures[1]), "generic-match.c", 6182, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       if (((non_type_check ((captures[2]), "generic-match.c", 6184, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
        }
    }
       }
        }
      }
  }
     }
 }
    }
  return (tree) 
# 6197 "generic-match.c" 3 4
        __null
# 6197 "generic-match.c"
                 ;
}

static tree
generic_simplify_149 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (element_precision (type) <= element_precision (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6206, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6206, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6206, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (((non_type_check ((op0), "generic-match.c", 6208, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6208 "generic-match.c" 3 4
                                         __null
# 6208 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1193, %s:%d\n", "generic-match.c", 6209);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6214, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 6221 "generic-match.c" 3 4
        __null
# 6221 "generic-match.c"
                 ;
}

static tree
generic_simplify_150 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code rotate __attribute__ ((__unused__)))
{

  if ((element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6230, __FUNCTION__))->typed.type)) <= element_precision (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6230, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6230, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6230, __FUNCTION__))->base.u.bits.unsigned_flag)) && (element_precision (type) <= element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6230, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6230, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6230, __FUNCTION__))->base.u.bits.unsigned_flag)))
    {
      {

 tree rotate_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6234, __FUNCTION__))->typed.type);
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2363, %s:%d\n", "generic-match.c", 6235);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 6242, __FUNCTION__))->typed.type) != rotate_type)
  res = fold_build1_loc (loc, NOP_EXPR, rotate_type, ops2[0]);
       else
         res = ops2[0];
       ops1[0] = res;
     }
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, rotate, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6249, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
      }
    }
  return (tree) 
# 6257 "generic-match.c" 3 4
        __null
# 6257 "generic-match.c"
                 ;
}

static tree
generic_simplify_151 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6266, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1208, %s:%d\n", "generic-match.c", 6268);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 ops1[1] = captures[1];
 res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6274, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 6281 "generic-match.c" 3 4
        __null
# 6281 "generic-match.c"
                 ;
}

static tree
generic_simplify_152 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (((enum tree_code) (captures[3])->base.code) != INTEGER_CST && !integer_zerop (captures[2]) && !integer_minus_onep (captures[2]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2579, %s:%d\n", "generic-match.c", 6292);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[1];
 ops1[1] = captures[3];
 res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6298, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 6307 "generic-match.c" 3 4
        __null
# 6307 "generic-match.c"
                 ;
}

static tree
generic_simplify_153 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:748, %s:%d\n", "generic-match.c", 6315);
  tree res_op0;
  res_op0 = captures[1];
  tree res_op1;
  {
    tree ops1[1], res;
    ops1[0] = captures[2];
    res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6322, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6328 "generic-match.c" 3 4
        __null
# 6328 "generic-match.c"
                 ;
}

static tree
generic_simplify_154 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6337, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6337, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6337, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6337, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6337, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6337, __FUNCTION__))->typed.type)), "generic-match.c", 6337, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && tree_expr_nonzero_p (captures[1]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1242, %s:%d\n", "generic-match.c", 6339);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 6346, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 6350 "generic-match.c" 3 4
        __null
# 6350 "generic-match.c"
                 ;
}

static tree
generic_simplify_155 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1990, %s:%d\n", "generic-match.c", 6358);
  tree res;
  res = captures[1];
  if (((non_type_check ((captures[0]), "generic-match.c", 6361, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 6364 "generic-match.c" 3 4
        __null
# 6364 "generic-match.c"
                 ;
}

static tree
generic_simplify_156 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (wi::gt_p (wi::to_wide (captures[1]), 0, ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6373, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6373, __FUNCTION__))->base.u.bits.unsigned_flag))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1288, %s:%d\n", "generic-match.c", 6375);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 6382, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 6386 "generic-match.c" 3 4
        __null
# 6386 "generic-match.c"
                 ;
}

static tree
generic_simplify_157 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && (!maybe_ne (TYPE_VECTOR_SUBPARTS (type), TYPE_VECTOR_SUBPARTS (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)))) && (((((enum tree_code) ((tree_class_check ((((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6395, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)) : (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type))->type_common.mode) == ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6395, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)) : (((contains_struct_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6395, __FUNCTION__))->typed.type))->type_common.mode)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2901, %s:%d\n", "generic-match.c", 6397);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[1], res;
 {
   tree ops2[3], res;
   ops2[0] = captures[2];
   {
     tree ops3[1], res;
     ops3[0] = captures[3];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 6409, __FUNCTION__))->typed.type), ops3[0]);
     ops2[1] = res;
   }
   ops2[2] = captures[4];
   res = fold_build3_loc (loc, VEC_COND_EXPR, ((contains_struct_check ((ops2[1]), (TS_TYPED), "generic-match.c", 6413, __FUNCTION__))->typed.type), ops2[0], ops2[1], ops2[2]);
   ops1[0] = res;
 }
 res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops1[0]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 6423 "generic-match.c" 3 4
        __null
# 6423 "generic-match.c"
                 ;
}

static tree
generic_simplify_158 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{

  if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))
    {
      if (((non_type_check ((op0), "generic-match.c", 6434, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6434 "generic-match.c" 3 4
                                         __null
# 6434 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:205, %s:%d\n", "generic-match.c", 6435);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, ABS_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 6442 "generic-match.c" 3 4
        __null
# 6442 "generic-match.c"
                 ;
}

static tree
generic_simplify_159 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:792, %s:%d\n", "generic-match.c", 6450);
  tree res_op0;
  res_op0 = build_all_ones_cst (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6452, __FUNCTION__))->typed.type));
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  if (((non_type_check ((captures[0]), "generic-match.c", 6455, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 6458 "generic-match.c" 3 4
        __null
# 6458 "generic-match.c"
                 ;
}

static tree
generic_simplify_160 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn POW __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4176, %s:%d\n", "generic-match.c", 6469);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[2], res;
 ops1[0] = captures[2];
 {
   tree ops2[1], res;
   ops2[0] = captures[3];
   res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 6479, __FUNCTION__))->typed.type), ops2[0]);
   ops1[1] = res;
 }
 {
   res = maybe_build_call_expr_loc (loc, POW, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6483, __FUNCTION__))->typed.type), 2, ops1[0], ops1[1]);
   if (!res)
     return (tree) 
# 6485 "generic-match.c" 3 4
           __null
# 6485 "generic-match.c"
                    ;
 }
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 6493 "generic-match.c" 3 4
        __null
# 6493 "generic-match.c"
                 ;
}

static tree
generic_simplify_161 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 6502, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6505, __FUNCTION__))->typed.type)) && !((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 6505, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
 {
   {

 tree t1 = type;
 if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 6510, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) != ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6510, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6510, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6510, __FUNCTION__))->typed.type)), "generic-match.c", 6510, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))) t1 = ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 6510, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) ? type : ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6510, __FUNCTION__))->typed.type);
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1654, %s:%d\n", "generic-match.c", 6511);
       tree res_op0;
       {
  tree ops1[2], res;
  {
    tree ops2[1], res;
    ops2[0] = captures[0];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 6518, __FUNCTION__))->typed.type) != t1)
      res = fold_build1_loc (loc, NOP_EXPR, t1, ops2[0]);
    else
      res = ops2[0];
    ops1[0] = res;
  }
  {
    tree ops2[1], res;
    ops2[0] = captures[1];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 6527, __FUNCTION__))->typed.type) != t1)
      res = fold_build1_loc (loc, NOP_EXPR, t1, ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6533, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
   }
 }
    }
  return (tree) 
# 6542 "generic-match.c" 3 4
        __null
# 6542 "generic-match.c"
                 ;
}

static tree
generic_simplify_162 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 6551, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:476, %s:%d\n", "generic-match.c", 6553);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 ops1[1] = captures[1];
 res = fold_build2_loc (loc, TRUNC_MOD_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6559, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 6566 "generic-match.c" 3 4
        __null
# 6566 "generic-match.c"
                 ;
}

static tree
generic_simplify_163 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree op2 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code op __attribute__ ((__unused__)))
{
  {

 tree from_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6576, __FUNCTION__))->typed.type), to_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6576, __FUNCTION__))->typed.type);

      if (types_match (from_type, to_type) || (((tree_class_check ((from_type), (tcc_type), "generic-match.c", 6578, __FUNCTION__))->base.u.bits.unsigned_flag) && !((tree_class_check ((to_type), (tcc_type), "generic-match.c", 6578, __FUNCTION__))->base.u.bits.unsigned_flag) && ((tree_class_check ((from_type), (tcc_type), "generic-match.c", 6578, __FUNCTION__))->type_common.precision) == ((tree_class_check ((to_type), (tcc_type), "generic-match.c", 6578, __FUNCTION__))->type_common.precision) && integer_zerop (captures[1]) && (cmp == LT_EXPR || cmp == GE_EXPR)))
 {
   {

 bool overflow = false;
 enum tree_code code, cmp_code = cmp;
 wide_int real_c1;
 wide_int c1 = wi::to_wide (captures[1]);
 wide_int c2 = wi::to_wide (captures[2]);
 wide_int c3 = wi::to_wide (captures[3]);
 signop sgn = ((signop) ((tree_class_check ((from_type), (tcc_type), "generic-match.c", 6588, __FUNCTION__))->base.u.bits.unsigned_flag));
 if (!types_match (from_type, to_type)) { if (cmp_code == LT_EXPR) cmp_code = GT_EXPR;
 if (cmp_code == GE_EXPR) cmp_code = LE_EXPR;
 c1 = wi::max_value (to_type);
 } if (op == PLUS_EXPR) real_c1 = wi::sub (c3, c2, sgn, &overflow);
 else real_c1 = wi::add (c3, c2, sgn, &overflow);
 code = cmp_code;
 if (!overflow || !((((enum tree_code) (from_type)->base.code) == POINTER_TYPE || ((enum tree_code) (from_type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((from_type), "generic-match.c", 6595, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))) { if (!wi::cmp (wi::sub (real_c1, 1, sgn, &overflow), c1, sgn) && !overflow) { if (cmp_code == LE_EXPR) code = LT_EXPR;
 if (cmp_code == GT_EXPR) code = GE_EXPR;
 } if (!wi::cmp (wi::add (real_c1, 1, sgn, &overflow), c1, sgn) && !overflow) { if (cmp_code == LT_EXPR) code = LE_EXPR;
 if (cmp_code == GE_EXPR) code = GT_EXPR;
 } if (code != cmp_code || !wi::cmp (real_c1, c1, sgn)) { if (cmp_code == LT_EXPR || cmp_code == LE_EXPR) code = MIN_EXPR;
 if (cmp_code == GT_EXPR || cmp_code == GE_EXPR) code = MAX_EXPR;
 } }
       if (code == MAX_EXPR)
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 6604, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6604 "generic-match.c" 3 4
                                               __null
# 6604 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[1]), "generic-match.c", 6605, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6605 "generic-match.c" 3 4
                                               __null
# 6605 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[2]), "generic-match.c", 6606, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6606 "generic-match.c" 3 4
                                               __null
# 6606 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[3]), "generic-match.c", 6607, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6607 "generic-match.c" 3 4
                                               __null
# 6607 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2842, %s:%d\n", "generic-match.c", 6608);
    tree res_op0;
    {
      tree ops1[2], res;
      ops1[0] = captures[0];
      ops1[1] = wide_int_to_tree (from_type, real_c1);
      res = fold_build2_loc (loc, MAX_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6614, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res_op1;
    res_op1 = wide_int_to_tree (from_type, c2);
    tree res;
    res = fold_build2_loc (loc, op, type, res_op0, res_op1);
    return res;
  }
       else
  {

    if (code == MIN_EXPR)
      {
        if (((non_type_check ((captures[0]), "generic-match.c", 6628, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6628 "generic-match.c" 3 4
                                                   __null
# 6628 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[1]), "generic-match.c", 6629, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6629 "generic-match.c" 3 4
                                                   __null
# 6629 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 6630, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6630 "generic-match.c" 3 4
                                                   __null
# 6630 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[3]), "generic-match.c", 6631, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6631 "generic-match.c" 3 4
                                                   __null
# 6631 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2845, %s:%d\n", "generic-match.c", 6632);
        tree res_op0;
        {
   tree ops1[2], res;
   ops1[0] = captures[0];
   ops1[1] = wide_int_to_tree (from_type, real_c1);
   res = fold_build2_loc (loc, MIN_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6638, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
   res_op0 = res;
        }
        tree res_op1;
        res_op1 = wide_int_to_tree (from_type, c2);
        tree res;
        res = fold_build2_loc (loc, op, type, res_op0, res_op1);
        return res;
      }
  }
   }
 }
  }
  return (tree) 
# 6651 "generic-match.c" 3 4
        __null
# 6651 "generic-match.c"
                 ;
}

static tree
generic_simplify_164 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:827, %s:%d\n", "generic-match.c", 6659);
  if (! tree_invariant_p (captures[2])) return (tree) 
# 6660 "generic-match.c" 3 4
                                              __null
# 6660 "generic-match.c"
                                                       ;
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[0];
    ops1[1] = unshare_expr (captures[2]);
    res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6666, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res_op1;
  {
    tree ops1[1], res;
    ops1[0] = captures[2];
    res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6673, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6679 "generic-match.c" 3 4
        __null
# 6679 "generic-match.c"
                 ;
}

static tree
generic_simplify_165 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code minmax __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 6688, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2101, %s:%d\n", "generic-match.c", 6690);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, out, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 6699 "generic-match.c" 3 4
        __null
# 6699 "generic-match.c"
                 ;
}

static tree
generic_simplify_166 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code neeq __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6708, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6708, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && ptrs_compare_unequal (captures[0], captures[1]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3695, %s:%d\n", "generic-match.c", 6710);
      tree res;
      res = neeq == EQ_EXPR ? global_trees[TI_BOOLEAN_FALSE] : global_trees[TI_BOOLEAN_TRUE];
      if (((non_type_check ((captures[0]), "generic-match.c", 6713, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 6715, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 6719 "generic-match.c" 3 4
        __null
# 6719 "generic-match.c"
                 ;
}

static tree
generic_simplify_167 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (wi::gt_p (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6728, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6728, __FUNCTION__))->base.u.bits.unsigned_flag))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2118, %s:%d\n", "generic-match.c", 6730);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 6733, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 6735, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[2]), "generic-match.c", 6737, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
  else
    {

      if (wi::lt_p (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6744, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 6744, __FUNCTION__))->base.u.bits.unsigned_flag))))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2121, %s:%d\n", "generic-match.c", 6746);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 6753, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
    }
  return (tree) 
# 6758 "generic-match.c" 3 4
        __null
# 6758 "generic-match.c"
                 ;
}

static tree
generic_simplify_168 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:834, %s:%d\n", "generic-match.c", 6766);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  {
    tree ops1[1], res;
    ops1[0] = captures[2];
    res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6773, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6779 "generic-match.c" 3 4
        __null
# 6779 "generic-match.c"
                 ;
}

static tree
generic_simplify_169 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6788, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 6788, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1226, %s:%d\n", "generic-match.c", 6790);
      tree res_op0;
      {
 tree ops1[2], res;
 {
   tree ops2[1], res;
   ops2[0] = captures[3];
   res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 6797, __FUNCTION__))->typed.type), ops2[0]);
   ops1[0] = res;
 }
 ops1[1] = captures[0];
 res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 6801, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 6808 "generic-match.c" 3 4
        __null
# 6808 "generic-match.c"
                 ;
}

static tree
generic_simplify_170 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const enum tree_code rbitop __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 6816, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6816 "generic-match.c" 3 4
                                     __null
# 6816 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:842, %s:%d\n", "generic-match.c", 6817);
  tree res_op0;
  res_op0 = captures[1];
  tree res_op1;
  res_op1 = captures[2];
  tree res;
  res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6825 "generic-match.c" 3 4
        __null
# 6825 "generic-match.c"
                 ;
}

static tree
generic_simplify_171 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:847, %s:%d\n", "generic-match.c", 6833);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6841 "generic-match.c" 3 4
        __null
# 6841 "generic-match.c"
                 ;
}

static tree
generic_simplify_172 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:852, %s:%d\n", "generic-match.c", 6849);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6857 "generic-match.c" 3 4
        __null
# 6857 "generic-match.c"
                 ;
}

static tree
generic_simplify_173 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shiftrotate __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2164, %s:%d\n", "generic-match.c", 6865);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 6868, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 6871 "generic-match.c" 3 4
        __null
# 6871 "generic-match.c"
                 ;
}

static tree
generic_simplify_174 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (wi::bit_and_not (wi::to_wide (captures[1]), get_nonzero_bits (captures[0])) != 0)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1496, %s:%d\n", "generic-match.c", 6882);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 6885, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 6887, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 6891 "generic-match.c" 3 4
        __null
# 6891 "generic-match.c"
                 ;
}

static tree
generic_simplify_175 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:860, %s:%d\n", "generic-match.c", 6899);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 6907 "generic-match.c" 3 4
        __null
# 6907 "generic-match.c"
                 ;
}

static tree
generic_simplify_176 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op0), "generic-match.c", 6915, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6915 "generic-match.c" 3 4
                                     __null
# 6915 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3376, %s:%d\n", "generic-match.c", 6916);
  tree res;
  res = captures[1];
  return res;
  return (tree) 
# 6920 "generic-match.c" 3 4
        __null
# 6920 "generic-match.c"
                 ;
}

static tree
generic_simplify_177 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)) && tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 6929, __FUNCTION__))->typed.type)))
    {
      {

 tree arg1_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 6933, __FUNCTION__))->typed.type);
 unsigned int prec = ((tree_class_check ((arg1_type), (tcc_type), "generic-match.c", 6934, __FUNCTION__))->type_common.precision);
 wide_int max = wi::max_value (arg1_type);
 wide_int signed_max = wi::max_value (prec, SIGNED);
 wide_int min = wi::min_value (arg1_type);

   if (wi::to_wide (captures[2]) == max)
     {

       if (cmp == GT_EXPR)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3732, %s:%d\n", "generic-match.c", 6944);
    tree res;
    res = constant_boolean_node (false, type);
    if (((non_type_check ((captures[1]), "generic-match.c", 6947, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    if (((non_type_check ((captures[2]), "generic-match.c", 6949, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
    return res;
  }
       else
  {

    if (cmp == GE_EXPR)
      {
        if (((non_type_check ((op0), "generic-match.c", 6958, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6958 "generic-match.c" 3 4
                                           __null
# 6958 "generic-match.c"
                                                    ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3734, %s:%d\n", "generic-match.c", 6959);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = captures[2];
        tree res;
        res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
        return res;
      }
    else
      {

        if (cmp == LE_EXPR)
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3736, %s:%d\n", "generic-match.c", 6973);
     tree res;
     res = constant_boolean_node (true, type);
     if (((non_type_check ((captures[1]), "generic-match.c", 6976, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     if (((non_type_check ((captures[2]), "generic-match.c", 6978, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
     return res;
   }
        else
   {

     if (cmp == LT_EXPR)
       {
         if (((non_type_check ((op0), "generic-match.c", 6987, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 6987 "generic-match.c" 3 4
                                            __null
# 6987 "generic-match.c"
                                                     ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3738, %s:%d\n", "generic-match.c", 6988);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = captures[2];
         tree res;
         res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
         return res;
       }
   }
      }
  }
     }
   else
     {

       if (wi::to_wide (captures[2]) == min)
  {

    if (cmp == LT_EXPR)
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3742, %s:%d\n", "generic-match.c", 7009);
        tree res;
        res = constant_boolean_node (false, type);
        if (((non_type_check ((captures[1]), "generic-match.c", 7012, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        if (((non_type_check ((captures[2]), "generic-match.c", 7014, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
        return res;
      }
    else
      {

        if (cmp == LE_EXPR)
   {
     if (((non_type_check ((op0), "generic-match.c", 7023, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7023 "generic-match.c" 3 4
                                        __null
# 7023 "generic-match.c"
                                                 ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3744, %s:%d\n", "generic-match.c", 7024);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = captures[2];
     tree res;
     res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {

     if (cmp == GE_EXPR)
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3746, %s:%d\n", "generic-match.c", 7038);
         tree res;
         res = constant_boolean_node (true, type);
         if (((non_type_check ((captures[1]), "generic-match.c", 7041, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
         if (((non_type_check ((captures[2]), "generic-match.c", 7043, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
         return res;
       }
     else
       {

         if (cmp == GT_EXPR)
    {
      if (((non_type_check ((op0), "generic-match.c", 7052, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7052 "generic-match.c" 3 4
                                         __null
# 7052 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3748, %s:%d\n", "generic-match.c", 7053);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
      return res;
    }
       }
   }
      }
  }
       else
  {

    if (wi::to_wide (captures[2]) == max - 1)
      {

        if (cmp == GT_EXPR)
   {
     if (((non_type_check ((op0), "generic-match.c", 7074, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7074 "generic-match.c" 3 4
                                        __null
# 7074 "generic-match.c"
                                                 ;
     if (((non_type_check ((captures[2]), "generic-match.c", 7075, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7075 "generic-match.c" 3 4
                                                __null
# 7075 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3752, %s:%d\n", "generic-match.c", 7076);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7080, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) + 1);
     tree res;
     res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {

     if (cmp == LE_EXPR)
       {
         if (((non_type_check ((op0), "generic-match.c", 7090, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7090 "generic-match.c" 3 4
                                            __null
# 7090 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[2]), "generic-match.c", 7091, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7091 "generic-match.c" 3 4
                                                    __null
# 7091 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3754, %s:%d\n", "generic-match.c", 7092);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7096, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) + 1);
         tree res;
         res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
         return res;
       }
   }
      }
    else
      {

        if (wi::to_wide (captures[2]) == min + 1)
   {

     if (cmp == GE_EXPR)
       {
         if (((non_type_check ((op0), "generic-match.c", 7111, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7111 "generic-match.c" 3 4
                                            __null
# 7111 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[2]), "generic-match.c", 7112, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7112 "generic-match.c" 3 4
                                                    __null
# 7112 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3758, %s:%d\n", "generic-match.c", 7113);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7117, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) - 1);
         tree res;
         res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
         return res;
       }
     else
       {

         if (cmp == LT_EXPR)
    {
      if (((non_type_check ((op0), "generic-match.c", 7127, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7127 "generic-match.c" 3 4
                                         __null
# 7127 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[2]), "generic-match.c", 7128, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7128 "generic-match.c" 3 4
                                                 __null
# 7128 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3760, %s:%d\n", "generic-match.c", 7129);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = wide_int_to_tree (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7133, __FUNCTION__))->typed.type), wi::to_wide (captures[2]) - 1);
      tree res;
      res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
      return res;
    }
       }
   }
        else
   {

     if (wi::to_wide (captures[2]) == signed_max && ((tree_class_check ((arg1_type), (tcc_type), "generic-match.c", 7143, __FUNCTION__))->base.u.bits.unsigned_flag) && prec == GET_MODE_PRECISION ((as_a <scalar_int_mode> ((tree_class_check ((arg1_type), (tcc_type), "generic-match.c", 7143, __FUNCTION__))->type_common.mode))) && (((enum tree_code) (arg1_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (arg1_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (arg1_type)->base.code) == INTEGER_TYPE))
       {

         if (cmp == LE_EXPR || cmp == GT_EXPR)
    {
      {

 tree st = signed_type_for (arg1_type);

          if (cmp == LE_EXPR)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3775, %s:%d\n", "generic-match.c", 7154);
       tree res_op0;
       {
         tree ops1[1], res;
         ops1[0] = captures[1];
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7159, __FUNCTION__))->typed.type) != st)
           res = fold_build1_loc (loc, NOP_EXPR, st, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = build_zero_cst (st);
       tree res;
       res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[2]), "generic-match.c", 7169, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
          else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3776, %s:%d\n", "generic-match.c", 7175);
       tree res_op0;
       {
         tree ops1[1], res;
         ops1[0] = captures[1];
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7180, __FUNCTION__))->typed.type) != st)
           res = fold_build1_loc (loc, NOP_EXPR, st, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = build_zero_cst (st);
       tree res;
       res = fold_build2_loc (loc, LT_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[2]), "generic-match.c", 7190, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
      }
    }
       }
   }
      }
  }
     }
      }
    }
  return (tree) 
# 7203 "generic-match.c" 3 4
        __null
# 7203 "generic-match.c"
                 ;
}

static tree
generic_simplify_178 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:865, %s:%d\n", "generic-match.c", 7211);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 7219 "generic-match.c" 3 4
        __null
# 7219 "generic-match.c"
                 ;
}

static tree
generic_simplify_179 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:894, %s:%d\n", "generic-match.c", 7227);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 7235 "generic-match.c" 3 4
        __null
# 7235 "generic-match.c"
                 ;
}

static tree
generic_simplify_180 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((tree_class_check ((type), (tcc_type), "generic-match.c", 7244, __FUNCTION__))->base.u.bits.unsigned_flag) && !(!(any_integral_type_check ((type), "generic-match.c", 7244, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7244, __FUNCTION__))->typed.type)) && (expr_not_equal_to (captures[0], wi::to_wide (((tree_check5 ((type), "generic-match.c", 7244, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.minval))) || expr_not_equal_to (captures[1], wi::minus_one (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7244, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 7244, __FUNCTION__))->type_common.precision)))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:470, %s:%d\n", "generic-match.c", 7246);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7253, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, TRUNC_MOD_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7263 "generic-match.c" 3 4
        __null
# 7263 "generic-match.c"
                 ;
}

static tree
generic_simplify_181 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:899, %s:%d\n", "generic-match.c", 7271);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 7279 "generic-match.c" 3 4
        __null
# 7279 "generic-match.c"
                 ;
}

static tree
generic_simplify_182 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)), const enum tree_code rop __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (!((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 7288, __FUNCTION__))->base.public_flag) && !((tree_class_check ((captures[3]), (tcc_constant), "generic-match.c", 7288, __FUNCTION__))->base.public_flag) && !((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type)), "generic-match.c", 7288, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)) && !(!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type)), "generic-match.c", 7288, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv) && !((tree_not_check4 ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7288, __FUNCTION__))->typed.type)), "generic-match.c", 7288, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {
      {

 tree res = int_const_binop (rop, captures[3], captures[2]);

   if (((tree_class_check ((res), (tcc_constant), "generic-match.c", 7294, __FUNCTION__))->base.public_flag) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7294, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7294, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7294, __FUNCTION__))->typed.type)), "generic-match.c", 7294, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 7296, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7296 "generic-match.c" 3 4
                                                  __null
# 7296 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 7297, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7297 "generic-match.c" 3 4
                                                  __null
# 7297 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4524, %s:%d\n", "generic-match.c", 7298);
       tree res;
       res = constant_boolean_node (cmp == NE_EXPR, type);
       if (((non_type_check ((captures[1]), "generic-match.c", 7301, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
   else
     {

       if (single_use (captures[0]))
  {
    if (((non_type_check ((captures[2]), "generic-match.c", 7310, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7310 "generic-match.c" 3 4
                                               __null
# 7310 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[3]), "generic-match.c", 7311, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7311 "generic-match.c" 3 4
                                               __null
# 7311 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4526, %s:%d\n", "generic-match.c", 7312);
    tree res_op0;
    res_op0 = captures[1];
    tree res_op1;
    res_op1 = ((tree_class_check ((res), (tcc_constant), "generic-match.c", 7316, __FUNCTION__))->base.public_flag) ? drop_tree_overflow (res) : res;
    tree res;
    res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
    return res;
  }
     }
      }
    }
  return (tree) 
# 7324 "generic-match.c" 3 4
        __null
# 7324 "generic-match.c"
                 ;
}

static tree
generic_simplify_183 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (single_use (captures[0]))
    {
      if (((non_type_check ((op1), "generic-match.c", 7335, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7335 "generic-match.c" 3 4
                                         __null
# 7335 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2978, %s:%d\n", "generic-match.c", 7336);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7345 "generic-match.c" 3 4
        __null
# 7345 "generic-match.c"
                 ;
}

static tree
generic_simplify_184 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 7354, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 7354, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:271, %s:%d\n", "generic-match.c", 7356);
      tree res;
      res = build_minus_one_cst (type);
      if (((non_type_check ((captures[0]), "generic-match.c", 7359, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 7363 "generic-match.c" 3 4
        __null
# 7363 "generic-match.c"
                 ;
}

static tree
generic_simplify_185 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (((non_type_check ((op0), "generic-match.c", 7371, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7371 "generic-match.c" 3 4
                                     __null
# 7371 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:970, %s:%d\n", "generic-match.c", 7372);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 7376 "generic-match.c" 3 4
        __null
# 7376 "generic-match.c"
                 ;
}

static tree
generic_simplify_186 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code outer_op __attribute__ ((__unused__)))
{

  if (!((tree_not_check4 ((type), "generic-match.c", 7385, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 7388, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   {

 tree cst = const_binop (outer_op, type, captures[0], captures[2]);

       if (cst && !((tree_class_check ((cst), (tcc_constant), "generic-match.c", 7394, __FUNCTION__))->base.public_flag))
  {
    if (((non_type_check ((captures[0]), "generic-match.c", 7396, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7396 "generic-match.c" 3 4
                                               __null
# 7396 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[2]), "generic-match.c", 7397, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7397 "generic-match.c" 3 4
                                               __null
# 7397 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1773, %s:%d\n", "generic-match.c", 7398);
    tree res_op0;
    res_op0 = cst;
    tree res_op1;
    res_op1 = captures[1];
    tree res;
    res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
    return res;
  }
   }
 }
    }
  return (tree) 
# 7410 "generic-match.c" 3 4
        __null
# 7410 "generic-match.c"
                 ;
}

static tree
generic_simplify_187 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code rotate __attribute__ ((__unused__)))
{

  if ((element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7419, __FUNCTION__))->typed.type)) <= element_precision (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 7419, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 7419, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 7419, __FUNCTION__))->base.u.bits.unsigned_flag)) && (element_precision (type) <= element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7419, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7419, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 7419, __FUNCTION__))->base.u.bits.unsigned_flag)))
    {
      {

 tree rotate_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7423, __FUNCTION__))->typed.type);
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2363, %s:%d\n", "generic-match.c", 7424);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 7431, __FUNCTION__))->typed.type) != rotate_type)
  res = fold_build1_loc (loc, NOP_EXPR, rotate_type, ops2[0]);
       else
         res = ops2[0];
       ops1[0] = res;
     }
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, rotate, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7438, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
      }
    }
  return (tree) 
# 7446 "generic-match.c" 3 4
        __null
# 7446 "generic-match.c"
                 ;
}

static tree
generic_simplify_188 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code scmp __attribute__ ((__unused__)))
{

  if (single_use (captures[0]) && (((enum tree_code) (captures[2])->base.code) == INTEGER_CST || ((enum tree_code) (captures[2])->base.code) == VECTOR_CST))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3043, %s:%d\n", "generic-match.c", 7457);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[2];
 res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7464, __FUNCTION__))->typed.type), ops1[0]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, scmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7471 "generic-match.c" 3 4
        __null
# 7471 "generic-match.c"
                 ;
}

static tree
generic_simplify_189 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7480, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 7480, __FUNCTION__))->base.u.bits.unsigned_flag) && types_match (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7480, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7480, __FUNCTION__))->typed.type)))
    {
      if (((non_type_check ((op0), "generic-match.c", 7482, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7482 "generic-match.c" 3 4
                                         __null
# 7482 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3844, %s:%d\n", "generic-match.c", 7483);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7488, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 7488, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7492, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, out, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7497 "generic-match.c" 3 4
        __null
# 7497 "generic-match.c"
                 ;
}

static tree
generic_simplify_190 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (single_use (captures[0]) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 7506, __FUNCTION__))->base.u.bits.unsigned_flag) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7506, __FUNCTION__))->typed.type)), "generic-match.c", 7506, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3834, %s:%d\n", "generic-match.c", 7508);
      tree res_op0;
      res_op0 = captures[2];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7517 "generic-match.c" 3 4
        __null
# 7517 "generic-match.c"
                 ;
}

static tree
generic_simplify_191 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 7526, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[6]), (TS_TYPED), "generic-match.c", 7526, __FUNCTION__))->typed.type)))
    {

      if (single_use (captures[4]) && single_use (captures[5]))
 {
   if (((non_type_check ((op0), "generic-match.c", 7531, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7531 "generic-match.c" 3 4
                                      __null
# 7531 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:983, %s:%d\n", "generic-match.c", 7532);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[6];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7539, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, op, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (single_use (captures[0]) && single_use (captures[1]))
     {
       if (((non_type_check ((op1), "generic-match.c", 7554, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7554 "generic-match.c" 3 4
                                          __null
# 7554 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:985, %s:%d\n", "generic-match.c", 7555);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[3];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7560, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[4];
       tree res;
       res = fold_build2_loc (loc, op, type, res_op0, res_op1);
       return res;
     }
 }
    }
  return (tree) 
# 7574 "generic-match.c" 3 4
        __null
# 7574 "generic-match.c"
                 ;
}

static tree
generic_simplify_192 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7583, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 7583, __FUNCTION__))->base.u.bits.unsigned_flag) && types_match (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7583, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7583, __FUNCTION__))->typed.type)))
    {
      if (((non_type_check ((op1), "generic-match.c", 7585, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7585 "generic-match.c" 3 4
                                         __null
# 7585 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3852, %s:%d\n", "generic-match.c", 7586);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7591, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 7591, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7595, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, out, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7600 "generic-match.c" 3 4
        __null
# 7600 "generic-match.c"
                 ;
}

static tree
generic_simplify_193 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op1), "generic-match.c", 7608, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7608 "generic-match.c" 3 4
                                     __null
# 7608 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3376, %s:%d\n", "generic-match.c", 7609);
  tree res;
  res = captures[1];
  return res;
  return (tree) 
# 7613 "generic-match.c" 3 4
        __null
# 7613 "generic-match.c"
                 ;
}

static tree
generic_simplify_194 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code opo __attribute__ ((__unused__)), const enum tree_code opi __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:948, %s:%d\n", "generic-match.c", 7621);
  tree res_op0;
  {
    tree ops1[1], res;
    ops1[0] = captures[0];
    res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7626, __FUNCTION__))->typed.type), ops1[0]);
    res_op0 = res;
  }
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 7634 "generic-match.c" 3 4
        __null
# 7634 "generic-match.c"
                 ;
}

static tree
generic_simplify_195 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code test1 __attribute__ ((__unused__)), const enum tree_code test2 __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 7643, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 7643, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 7643, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 7643, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE) && ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 7643, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 7643, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3394, %s:%d\n", "generic-match.c", 7645);
      tree res;
      res = constant_boolean_node (false, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 7648, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 7650, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 7654 "generic-match.c" 3 4
        __null
# 7654 "generic-match.c"
                 ;
}

static tree
generic_simplify_196 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)), const enum tree_code rop __attribute__ ((__unused__)))
{

  if (element_precision (type) <= element_precision (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 7663, __FUNCTION__))->typed.type)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7663, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:909, %s:%d\n", "generic-match.c", 7665);
      tree res_op0;
      {
 tree ops1[2], res;
 {
   tree ops2[1], res;
   ops2[0] = captures[0];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 7672, __FUNCTION__))->typed.type) != type)
     res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
   else
     res = ops2[0];
   ops1[0] = res;
 }
 {
   tree ops2[1], res;
   ops2[0] = captures[1];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 7681, __FUNCTION__))->typed.type) != type)
     res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
   else
     res = ops2[0];
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, rop, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7687, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 7694 "generic-match.c" 3 4
        __null
# 7694 "generic-match.c"
                 ;
}

static tree
generic_simplify_197 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 7703, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 7706, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 7709, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7709, __FUNCTION__))->typed.type)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7709, __FUNCTION__))->typed.type)))
     {
       {

 tree utype = unsigned_type_for (type);
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1899, %s:%d\n", "generic-match.c", 7714);
    tree res_op0;
    {
      tree ops1[2], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[1];
        if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 7721, __FUNCTION__))->typed.type) != utype)
   res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
        else
          res = ops2[0];
        ops1[0] = res;
      }
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 7730, __FUNCTION__))->typed.type) != utype)
   res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
        else
          res = ops2[0];
        ops1[1] = res;
      }
      res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7736, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res;
    res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
    if (((non_type_check ((captures[3]), "generic-match.c", 7741, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
    return res;
       }
     }
   else
     {

       if (((element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))) == (element_precision (type) <= element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type)))) && (element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type)), "generic-match.c", 7749, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && ((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 7749, __FUNCTION__))->typed.type)), "generic-match.c", 7749, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1914, %s:%d\n", "generic-match.c", 7751);
    tree res_op0;
    {
      tree ops1[1], res;
      ops1[0] = captures[1];
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7756, __FUNCTION__))->typed.type) != type)
        res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
      else
        res = ops1[0];
      res_op0 = res;
    }
    tree res_op1;
    {
      tree ops1[1], res;
      ops1[0] = captures[2];
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7766, __FUNCTION__))->typed.type) != type)
        res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
      else
        res = ops1[0];
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
    if (((non_type_check ((captures[3]), "generic-match.c", 7774, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
    return res;
  }
     }
 }
    }
  return (tree) 
# 7781 "generic-match.c" 3 4
        __null
# 7781 "generic-match.c"
                 ;
}

static tree
generic_simplify_198 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn FMAX_ALL __attribute__ ((__unused__)))
{

  if (global_options.x_flag_finite_math_only)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2076, %s:%d\n", "generic-match.c", 7792);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, MAX_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 7801 "generic-match.c" 3 4
        __null
# 7801 "generic-match.c"
                 ;
}

static tree
generic_simplify_199 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 7810, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 7813, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1703, %s:%d\n", "generic-match.c", 7815);
   tree res_op0;
   res_op0 = captures[1];
   tree res;
   res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
   if (((non_type_check ((captures[0]), "generic-match.c", 7820, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  return (tree) 
# 7825 "generic-match.c" 3 4
        __null
# 7825 "generic-match.c"
                 ;
}

static tree
generic_simplify_200 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{
  {

 bool overflow_p;
 wide_int mul = wi::mul (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((type), (tcc_type), "generic-match.c", 7836, __FUNCTION__))->base.u.bits.unsigned_flag)), &overflow_p);

      if (!overflow_p)
 {
   if (((non_type_check ((captures[1]), "generic-match.c", 7840, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7840 "generic-match.c" 3 4
                                              __null
# 7840 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[2]), "generic-match.c", 7841, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7841 "generic-match.c" 3 4
                                              __null
# 7841 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:292, %s:%d\n", "generic-match.c", 7842);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = wide_int_to_tree (type, mul);
   tree res;
   res = fold_build2_loc (loc, div, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (((tree_class_check ((type), (tcc_type), "generic-match.c", 7854, __FUNCTION__))->base.u.bits.unsigned_flag) || mul != wi::min_value (((tree_class_check ((type), (tcc_type), "generic-match.c", 7854, __FUNCTION__))->type_common.precision), SIGNED))
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 7856, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7856 "generic-match.c" 3 4
                                                  __null
# 7856 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 7857, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7857 "generic-match.c" 3 4
                                                  __null
# 7857 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:295, %s:%d\n", "generic-match.c", 7858);
       tree res;
       res = build_zero_cst (type);
       if (((non_type_check ((captures[0]), "generic-match.c", 7861, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
       return res;
     }
 }
  }
  return (tree) 
# 7867 "generic-match.c" 3 4
        __null
# 7867 "generic-match.c"
                 ;
}

static tree
generic_simplify_201 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:974, %s:%d\n", "generic-match.c", 7875);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  if (((non_type_check ((captures[2]), "generic-match.c", 7880, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
  return res;
  return (tree) 
# 7883 "generic-match.c" 3 4
        __null
# 7883 "generic-match.c"
                 ;
}

static tree
generic_simplify_202 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4101, %s:%d\n", "generic-match.c", 7891);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 7894, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 7897 "generic-match.c" 3 4
        __null
# 7897 "generic-match.c"
                 ;
}

static tree
generic_simplify_203 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code inner_op __attribute__ ((__unused__)), const enum tree_code outer_op __attribute__ ((__unused__)))
{
  {

 bool fail = false;
 wide_int zero_mask_not;
 wide_int C0;
 wide_int cst_emit;
 if (((enum tree_code) (captures[1])->base.code) == SSA_NAME) zero_mask_not = get_nonzero_bits (captures[1]);
 else fail = true;
 if (inner_op == BIT_XOR_EXPR) { C0 = wi::bit_and_not (wi::to_wide (captures[2]), wi::to_wide (captures[3]));
 cst_emit = C0 | wi::to_wide (captures[3]);
 } else { C0 = wi::to_wide (captures[2]);
 cst_emit = C0 ^ wi::to_wide (captures[3]);
 }
      if (!fail && (C0 & zero_mask_not) == 0)
 {
   if (((non_type_check ((captures[1]), "generic-match.c", 7920, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7920 "generic-match.c" 3 4
                                              __null
# 7920 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[2]), "generic-match.c", 7921, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7921 "generic-match.c" 3 4
                                              __null
# 7921 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[3]), "generic-match.c", 7922, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7922 "generic-match.c" 3 4
                                              __null
# 7922 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1537, %s:%d\n", "generic-match.c", 7923);
   tree res_op0;
   res_op0 = captures[1];
   tree res_op1;
   res_op1 = wide_int_to_tree (type, cst_emit);
   tree res;
   res = fold_build2_loc (loc, outer_op, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (!fail && (wi::to_wide (captures[3]) & zero_mask_not) == 0)
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 7937, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7937 "generic-match.c" 3 4
                                                  __null
# 7937 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 7938, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7938 "generic-match.c" 3 4
                                                  __null
# 7938 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 7939, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7939 "generic-match.c" 3 4
                                                  __null
# 7939 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1539, %s:%d\n", "generic-match.c", 7940);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = wide_int_to_tree (type, cst_emit);
       tree res;
       res = fold_build2_loc (loc, inner_op, type, res_op0, res_op1);
       return res;
     }
 }
  }
  return (tree) 
# 7951 "generic-match.c" 3 4
        __null
# 7951 "generic-match.c"
                 ;
}

static tree
generic_simplify_204 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const enum tree_code rbitop __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1099, %s:%d\n", "generic-match.c", 7959);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 7962, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 7965 "generic-match.c" 3 4
        __null
# 7965 "generic-match.c"
                 ;
}

static tree
generic_simplify_205 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)))
{

  if (!(tree_code_type[(int) (((enum tree_code) (captures[0])->base.code))] == tcc_constant))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1118, %s:%d\n", "generic-match.c", 7976);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      {
 tree ops1[2], res;
 ops1[0] = captures[1];
 ops1[1] = captures[2];
 res = fold_build2_loc (loc, bitop, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 7984, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
      return res;
    }
  else
    {
      {

 tree cst1 = const_binop (bitop, type, captures[0], captures[2]);

   if (cst1)
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 7999, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 7999 "generic-match.c" 3 4
                                                  __null
# 7999 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 8000, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8000 "generic-match.c" 3 4
                                                  __null
# 8000 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1129, %s:%d\n", "generic-match.c", 8001);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = cst1;
       tree res;
       res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
       return res;
     }
   else
     {
       {

 tree cst2 = const_binop (bitop, type, captures[1], captures[2]);

    if (cst2)
      {
        if (((non_type_check ((captures[0]), "generic-match.c", 8018, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8018 "generic-match.c" 3 4
                                                   __null
# 8018 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[1]), "generic-match.c", 8019, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8019 "generic-match.c" 3 4
                                                   __null
# 8019 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 8020, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8020 "generic-match.c" 3 4
                                                   __null
# 8020 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1132, %s:%d\n", "generic-match.c", 8021);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = cst2;
        tree res;
        res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
        return res;
      }
       }
     }
      }
    }
  return (tree) 
# 8034 "generic-match.c" 3 4
        __null
# 8034 "generic-match.c"
                 ;
}

static tree
generic_simplify_206 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn froms __attribute__ ((__unused__)), const combined_fn tos __attribute__ ((__unused__)))
{

  if (global_options.x_optimize && canonicalize_math_p () && targetm.libc_has_function (function_c99_misc))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4289, %s:%d\n", "generic-match.c", 8045);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 {
   res = maybe_build_call_expr_loc (loc, tos, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8051, __FUNCTION__))->typed.type), 1, ops1[0]);
   if (!res)
     return (tree) 
# 8053 "generic-match.c" 3 4
           __null
# 8053 "generic-match.c"
                    ;
 }
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 8061 "generic-match.c" 3 4
        __null
# 8061 "generic-match.c"
                 ;
}

static tree
generic_simplify_207 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code icmp __attribute__ ((__unused__)), const enum tree_code ncmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) || ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 8070, __FUNCTION__))->type_common.precision) == 1))
    {
      {

 enum tree_code ic = invert_tree_comparison (cmp, HONOR_NANS (captures[0]));

   if (ic == icmp)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2956, %s:%d\n", "generic-match.c", 8078);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, icmp, type, res_op0, res_op1);
       return res;
     }
   else
     {

       if (ic == ncmp)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2958, %s:%d\n", "generic-match.c", 8092);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    res_op1 = captures[1];
    tree res;
    res = fold_build2_loc (loc, ncmp, type, res_op0, res_op1);
    return res;
  }
     }
      }
    }
  return (tree) 
# 8104 "generic-match.c" 3 4
        __null
# 8104 "generic-match.c"
                 ;
}

static tree
generic_simplify_208 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8113, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:941, %s:%d\n", "generic-match.c", 8115);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8120, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8130, __FUNCTION__))->typed.type), ops1[0]);
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 8137 "generic-match.c" 3 4
        __null
# 8137 "generic-match.c"
                 ;
}

static tree
generic_simplify_209 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (((non_type_check ((op1), "generic-match.c", 8145, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8145 "generic-match.c" 3 4
                                     __null
# 8145 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:717, %s:%d\n", "generic-match.c", 8146);
  tree res;
  res = captures[2];
  return res;
  return (tree) 
# 8150 "generic-match.c" 3 4
        __null
# 8150 "generic-match.c"
                 ;
}

static tree
generic_simplify_210 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 8159, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 8162, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {

   if (element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8165, __FUNCTION__))->typed.type)), "generic-match.c", 8165, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1820, %s:%d\n", "generic-match.c", 8167);
       tree res_op0;
       res_op0 = captures[1];
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       if (((non_type_check ((captures[2]), "generic-match.c", 8172, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
 }
    }
  return (tree) 
# 8178 "generic-match.c" 3 4
        __null
# 8178 "generic-match.c"
                 ;
}

static tree
generic_simplify_211 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (element_precision (type) <= element_precision (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8187, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8187, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8187, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1181, %s:%d\n", "generic-match.c", 8189);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 ops1[1] = build_each_one_cst (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8194, __FUNCTION__))->typed.type));
 res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8195, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 8202 "generic-match.c" 3 4
        __null
# 8202 "generic-match.c"
                 ;
}

static tree
generic_simplify_212 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8211, __FUNCTION__))->typed.type)), "generic-match.c", 8211, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && ((tree_code_type[(int) (((enum tree_code) (captures[1])->base.code))] == tcc_constant) || single_use (captures[0])))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1421, %s:%d\n", "generic-match.c", 8213);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8217, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[2]), "generic-match.c", 8220, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
  return (tree) 
# 8224 "generic-match.c" 3 4
        __null
# 8224 "generic-match.c"
                 ;
}

static tree
generic_simplify_213 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 8233, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 8236, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1700, %s:%d\n", "generic-match.c", 8238);
   tree res;
   res = captures[0];
   if (((non_type_check ((captures[1]), "generic-match.c", 8241, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
    }
  return (tree) 
# 8246 "generic-match.c" 3 4
        __null
# 8246 "generic-match.c"
                 ;
}

static tree
generic_simplify_214 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code rotate __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2135, %s:%d\n", "generic-match.c", 8254);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 8257, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 8260 "generic-match.c" 3 4
        __null
# 8260 "generic-match.c"
                 ;
}

static tree
generic_simplify_215 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code icmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8269, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8269, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8269, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8269, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8269, __FUNCTION__))->base.u.bits.unsigned_flag) && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8269, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8269, __FUNCTION__))->type_common.precision) > 1 && (wi::to_wide (captures[2]) == wi::max_value (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8269, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8269, __FUNCTION__))->type_common.precision), SIGNED) - 1))
    {
      {

 tree stype = signed_type_for (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8273, __FUNCTION__))->typed.type));
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1281, %s:%d\n", "generic-match.c", 8274);
   tree res_op0;
   {
     tree ops1[1], res;
     ops1[0] = captures[0];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8279, __FUNCTION__))->typed.type) != stype)
       res = fold_build1_loc (loc, NOP_EXPR, stype, ops1[0]);
     else
       res = ops1[0];
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = build_int_cst (stype, 0);
   tree res;
   res = fold_build2_loc (loc, icmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 8289, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   if (((non_type_check ((captures[2]), "generic-match.c", 8291, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
   return res;
      }
    }
  return (tree) 
# 8296 "generic-match.c" 3 4
        __null
# 8296 "generic-match.c"
                 ;
}

static tree
generic_simplify_216 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (tree_single_nonzero_warnv_p (captures[0], 
# 8305 "generic-match.c" 3 4
                                               __null
# 8305 "generic-match.c"
                                                   ))
    {
      if (((non_type_check ((op1), "generic-match.c", 8307, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8307 "generic-match.c" 3 4
                                         __null
# 8307 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3554, %s:%d\n", "generic-match.c", 8308);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 8311, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 8315 "generic-match.c" 3 4
        __null
# 8315 "generic-match.c"
                 ;
}

static tree
generic_simplify_217 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if (integer_pow2p (captures[2]) && tree_int_cst_sgn (captures[2]) > 0 && tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8324, __FUNCTION__))->typed.type)) && wi::to_wide (captures[2]) + wi::to_wide (captures[1]) == 0)
    {
      if (((non_type_check ((captures[2]), "generic-match.c", 8326, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8326 "generic-match.c" 3 4
                                                 __null
# 8326 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:387, %s:%d\n", "generic-match.c", 8327);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8332, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = build_int_cst (integer_types[itk_int], wi::exact_log2 (wi::to_wide (captures[2])));
      tree res;
      res = fold_build2_loc (loc, RSHIFT_EXPR, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 8342, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 8346 "generic-match.c" 3 4
        __null
# 8346 "generic-match.c"
                 ;
}

static tree
generic_simplify_218 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn SQRT_ALL __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations)
    {

      if (!HONOR_SNANS (type))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3887, %s:%d\n", "generic-match.c", 8360);
   tree res;
   res = captures[1];
   return res;
 }
    }
  return (tree) 
# 8366 "generic-match.c" 3 4
        __null
# 8366 "generic-match.c"
                 ;
}

static tree
generic_simplify_219 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3019, %s:%d\n", "generic-match.c", 8374);
  tree res;
  res = constant_boolean_node (true, type);
  if (((non_type_check ((captures[0]), "generic-match.c", 8377, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 8380 "generic-match.c" 3 4
        __null
# 8380 "generic-match.c"
                 ;
}

static tree
generic_simplify_220 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations)
    {
      {

 tree tem = const_binop (op == PLUS_EXPR ? MINUS_EXPR : PLUS_EXPR, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8393, __FUNCTION__))->typed.type), captures[2], captures[1]);

   if (tem && !((tree_class_check ((tem), (tcc_constant), "generic-match.c", 8395, __FUNCTION__))->base.public_flag))
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 8397, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8397 "generic-match.c" 3 4
                                                  __null
# 8397 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 8398, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8398 "generic-match.c" 3 4
                                                  __null
# 8398 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3149, %s:%d\n", "generic-match.c", 8399);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = tem;
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
      }
    }
  return (tree) 
# 8410 "generic-match.c" 3 4
        __null
# 8410 "generic-match.c"
                 ;
}

static tree
generic_simplify_221 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{

  if (!integer_zerop (captures[0]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:432, %s:%d\n", "generic-match.c", 8421);
      tree res;
      res = build_zero_cst (type);
      if (((non_type_check ((captures[0]), "generic-match.c", 8424, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 8428 "generic-match.c" 3 4
        __null
# 8428 "generic-match.c"
                 ;
}

static tree
generic_simplify_222 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (global_options.x_flag_associative_math)
    {
      {

 tree tem = const_binop (MINUS_EXPR, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8441, __FUNCTION__))->typed.type), captures[0], captures[2]);

   if (tem && !((tree_class_check ((tem), (tcc_constant), "generic-match.c", 8443, __FUNCTION__))->base.public_flag))
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 8445, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8445 "generic-match.c" 3 4
                                                  __null
# 8445 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 8446, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8446 "generic-match.c" 3 4
                                                  __null
# 8446 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3160, %s:%d\n", "generic-match.c", 8447);
       tree res_op0;
       res_op0 = tem;
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
      }
    }
  return (tree) 
# 8458 "generic-match.c" 3 4
        __null
# 8458 "generic-match.c"
                 ;
}

static tree
generic_simplify_223 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3023, %s:%d\n", "generic-match.c", 8466);
  tree res_op0;
  res_op0 = unshare_expr (captures[0]);
  tree res_op1;
  res_op1 = captures[0];
  tree res;
  res = fold_build2_loc (loc, UNORDERED_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 8474 "generic-match.c" 3 4
        __null
# 8474 "generic-match.c"
                 ;
}

static tree
generic_simplify_224 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1164, %s:%d\n", "generic-match.c", 8482);
  tree res;
  res = constant_boolean_node (true, type);
  if (((non_type_check ((captures[0]), "generic-match.c", 8485, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 8488 "generic-match.c" 3 4
        __null
# 8488 "generic-match.c"
                 ;
}

static tree
generic_simplify_225 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const enum tree_code rbitop __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1104, %s:%d\n", "generic-match.c", 8496);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, bitop, type, res_op0, res_op1);
  return res;
  return (tree) 
# 8504 "generic-match.c" 3 4
        __null
# 8504 "generic-match.c"
                 ;
}

static tree
generic_simplify_226 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (element_precision (type) <= element_precision (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8513, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8513, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8513, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (((non_type_check ((op0), "generic-match.c", 8515, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8515 "generic-match.c" 3 4
                                         __null
# 8515 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1198, %s:%d\n", "generic-match.c", 8516);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8521, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 8528 "generic-match.c" 3 4
        __null
# 8528 "generic-match.c"
                 ;
}

static tree
generic_simplify_227 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (cmp != NE_EXPR || ! ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8537, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8537, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8537, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8537, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 8537, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || ! HONOR_NANS (captures[0]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3015, %s:%d\n", "generic-match.c", 8539);
      tree res;
      res = constant_boolean_node (false, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 8542, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 8546 "generic-match.c" 3 4
        __null
# 8546 "generic-match.c"
                 ;
}

static tree
generic_simplify_228 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8555, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8555, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8555, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8555, __FUNCTION__))->typed.type)) && ((tree_code_type[(int) (((enum tree_code) (captures[3])->base.code))] == tcc_constant) || (single_use (captures[1]) && single_use (captures[0]))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1438, %s:%d\n", "generic-match.c", 8557);
      tree res_op0;
      res_op0 = captures[3];
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 8561, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, op, type, res_op0, res_op1);
      if (((non_type_check ((captures[2]), "generic-match.c", 8564, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
      return res;
    }
  return (tree) 
# 8568 "generic-match.c" 3 4
        __null
# 8568 "generic-match.c"
                 ;
}

static tree
generic_simplify_229 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8577, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8577, __FUNCTION__))->base.u.bits.unsigned_flag) && (element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8577, __FUNCTION__))->typed.type)) <= element_precision (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 8577, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 8577, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8577, __FUNCTION__))->base.u.bits.unsigned_flag)))
    {
      {

 tree shift_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8581, __FUNCTION__))->typed.type);
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2349, %s:%d\n", "generic-match.c", 8582);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 8589, __FUNCTION__))->typed.type) != shift_type)
  res = fold_build1_loc (loc, NOP_EXPR, shift_type, ops2[0]);
       else
         res = ops2[0];
       ops1[0] = res;
     }
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, RSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8596, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
      }
    }
  return (tree) 
# 8604 "generic-match.c" 3 4
        __null
# 8604 "generic-match.c"
                 ;
}

static tree
generic_simplify_230 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8613, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8613, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:991, %s:%d\n", "generic-match.c", 8615);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[1];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8620, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res_op1;
      {
 tree ops1[1], res;
 ops1[0] = captures[2];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8630, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
      if (((non_type_check ((captures[0]), "generic-match.c", 8638, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 8642 "generic-match.c" 3 4
        __null
# 8642 "generic-match.c"
                 ;
}

static tree
generic_simplify_231 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn SIN __attribute__ ((__unused__)), const combined_fn COS __attribute__ ((__unused__)), const combined_fn TAN __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4131, %s:%d\n", "generic-match.c", 8653);
      tree res_op0;
      res_op0 = captures[1];
      tree res;
      res = maybe_build_call_expr_loc (loc, TAN, type, 1, res_op0);
      if (!res)
        return (tree) 
# 8659 "generic-match.c" 3 4
              __null
# 8659 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 8662 "generic-match.c" 3 4
        __null
# 8662 "generic-match.c"
                 ;
}

static tree
generic_simplify_232 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn fns __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4071, %s:%d\n", "generic-match.c", 8670);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 8674 "generic-match.c" 3 4
        __null
# 8674 "generic-match.c"
                 ;
}

static tree
generic_simplify_233 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code minmax __attribute__ ((__unused__)), const enum tree_code maxmin __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2092, %s:%d\n", "generic-match.c", 8682);
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[1];
    ops1[1] = captures[3];
    res = fold_build2_loc (loc, maxmin, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8688, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
  return res;
  return (tree) 
# 8694 "generic-match.c" 3 4
        __null
# 8694 "generic-match.c"
                 ;
}

static tree
generic_simplify_234 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code bitop __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8703, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 8703, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 8703, __FUNCTION__))->type_common.precision))
    {
      if (((non_type_check ((op1), "generic-match.c", 8705, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8705 "generic-match.c" 3 4
                                         __null
# 8705 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:674, %s:%d\n", "generic-match.c", 8706);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[0];
 {
   tree ops2[1], res;
   ops2[0] = captures[2];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 8714, __FUNCTION__))->typed.type) != ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8714, __FUNCTION__))->typed.type))
     res = fold_build1_loc (loc, NOP_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8715, __FUNCTION__))->typed.type), ops2[0]);
   else
     res = ops2[0];
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, BIT_IOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8720, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 8729 "generic-match.c" 3 4
        __null
# 8729 "generic-match.c"
                 ;
}

static tree
generic_simplify_235 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn TAN __attribute__ ((__unused__)), const combined_fn SIN __attribute__ ((__unused__)), const combined_fn COS __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
    {

      if (! HONOR_NANS (captures[1]) && ! HONOR_INFINITIES (captures[1]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4150, %s:%d\n", "generic-match.c", 8743);
   tree res_op0;
   res_op0 = build_one_cst (type);
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[1];
     {
       res = maybe_build_call_expr_loc (loc, COS, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8751, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 8753 "generic-match.c" 3 4
               __null
# 8753 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
   return res;
 }
    }
  return (tree) 
# 8762 "generic-match.c" 3 4
        __null
# 8762 "generic-match.c"
                 ;
}

static tree
generic_simplify_236 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code ncmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8771, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8771, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8771, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && type_has_mode_precision_p (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8771, __FUNCTION__))->typed.type)) && element_precision (captures[0]) >= element_precision (captures[1]) && wi::only_sign_bit_p (wi::to_wide (captures[2]), element_precision (captures[1])))
    {
      {

 tree stype = signed_type_for (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8775, __FUNCTION__))->typed.type));
   if (((non_type_check ((op1), "generic-match.c", 8776, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8776 "generic-match.c" 3 4
                                      __null
# 8776 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3591, %s:%d\n", "generic-match.c", 8777);
   tree res_op0;
   {
     tree ops1[1], res;
     ops1[0] = captures[1];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 8782, __FUNCTION__))->typed.type) != stype)
       res = fold_build1_loc (loc, NOP_EXPR, stype, ops1[0]);
     else
       res = ops1[0];
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = build_zero_cst (stype);
   tree res;
   res = fold_build2_loc (loc, ncmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[2]), "generic-match.c", 8792, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
   return res;
      }
    }
  return (tree) 
# 8797 "generic-match.c" 3 4
        __null
# 8797 "generic-match.c"
                 ;
}

static tree
generic_simplify_237 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code mod __attribute__ ((__unused__)))
{

  if (!integer_zerop (captures[1]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:417, %s:%d\n", "generic-match.c", 8808);
      tree res;
      res = captures[0];
      if (((non_type_check ((captures[1]), "generic-match.c", 8811, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 8815 "generic-match.c" 3 4
        __null
# 8815 "generic-match.c"
                 ;
}

static tree
generic_simplify_238 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  {

 poly_int64 off0, off1;
 tree base0 = get_addr_base_and_unit_offset ((*((const_cast<tree*> (tree_operand_check ((captures[1]), (0), "generic-match.c", 8826, __FUNCTION__))))), &off0);
 tree base1 = get_addr_base_and_unit_offset ((*((const_cast<tree*> (tree_operand_check ((captures[2]), (0), "generic-match.c", 8827, __FUNCTION__))))), &off1);
 if (base0 && ((enum tree_code) (base0)->base.code) == MEM_REF) { off0 += mem_ref_offset (base0).force_shwi ();
 base0 = (*((const_cast<tree*> (tree_operand_check ((base0), (0), "generic-match.c", 8829, __FUNCTION__)))));
 } if (base1 && ((enum tree_code) (base1)->base.code) == MEM_REF) { off1 += mem_ref_offset (base1).force_shwi ();
 base1 = (*((const_cast<tree*> (tree_operand_check ((base1), (0), "generic-match.c", 8831, __FUNCTION__)))));
 }
      if (base0 && base1)
 {
   {

 int equal = 2;
 if (1 && (((((enum tree_code) (base0)->base.code) == VAR_DECL) && ((tree_check3 ((base0), "generic-match.c", 8838, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2)) || ((((enum tree_code) (base1)->base.code) == VAR_DECL) && ((tree_check3 ((base1), "generic-match.c", 8838, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2)))) ;
 else if (decl_in_symtab_p (base0) && decl_in_symtab_p (base1)) equal = symtab_node::get_create (base0) ->equal_address_to (symtab_node::get_create (base1));
 else if (((tree_code_type[(int) (((enum tree_code) (base0)->base.code))] == tcc_declaration) || ((enum tree_code) (base0)->base.code) == SSA_NAME || ((enum tree_code) (base0)->base.code) == STRING_CST) && ((tree_code_type[(int) (((enum tree_code) (base1)->base.code))] == tcc_declaration) || ((enum tree_code) (base1)->base.code) == SSA_NAME || ((enum tree_code) (base1)->base.code) == STRING_CST)) equal = (base0 == base1);

       if (equal == 1 && (cmp == EQ_EXPR || cmp == NE_EXPR || (!maybe_ne (off0, off1)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8842, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8842, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 8842, __FUNCTION__))->typed.type)), "generic-match.c", 8842, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8842, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8842, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && ((tree_code_type[(int) (((enum tree_code) (base0)->base.code))] == tcc_declaration) || ((enum tree_code) (base0)->base.code) == STRING_CST))))
  {

    if (cmp == EQ_EXPR && ((!maybe_ne (off0, off1)) || (!maybe_eq (off0, off1))))
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 8847, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8847 "generic-match.c" 3 4
                                                   __null
# 8847 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 8848, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8848 "generic-match.c" 3 4
                                                   __null
# 8848 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3667, %s:%d\n", "generic-match.c", 8849);
        tree res;
        res = constant_boolean_node ((!maybe_ne (off0, off1)), type);
        return res;
      }
    else
      {

        if (cmp == NE_EXPR && ((!maybe_ne (off0, off1)) || (!maybe_eq (off0, off1))))
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 8859, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8859 "generic-match.c" 3 4
                                                __null
# 8859 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 8860, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8860 "generic-match.c" 3 4
                                                __null
# 8860 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3669, %s:%d\n", "generic-match.c", 8861);
     tree res;
     res = constant_boolean_node ((!maybe_eq (off0, off1)), type);
     return res;
   }
        else
   {

     if (cmp == LT_EXPR && ((!maybe_le (off1, off0)) || (!maybe_lt (off0, off1))))
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 8871, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8871 "generic-match.c" 3 4
                                                    __null
# 8871 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[2]), "generic-match.c", 8872, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8872 "generic-match.c" 3 4
                                                    __null
# 8872 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3671, %s:%d\n", "generic-match.c", 8873);
         tree res;
         res = constant_boolean_node ((!maybe_le (off1, off0)), type);
         return res;
       }
     else
       {

         if (cmp == LE_EXPR && ((!maybe_lt (off1, off0)) || (!maybe_le (off0, off1))))
    {
      if (((non_type_check ((captures[1]), "generic-match.c", 8883, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8883 "generic-match.c" 3 4
                                                 __null
# 8883 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[2]), "generic-match.c", 8884, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8884 "generic-match.c" 3 4
                                                 __null
# 8884 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3673, %s:%d\n", "generic-match.c", 8885);
      tree res;
      res = constant_boolean_node ((!maybe_lt (off1, off0)), type);
      return res;
    }
         else
    {

      if (cmp == GE_EXPR && ((!maybe_lt (off0, off1)) || (!maybe_le (off1, off0))))
        {
          if (((non_type_check ((captures[1]), "generic-match.c", 8895, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8895 "generic-match.c" 3 4
                                                     __null
# 8895 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[2]), "generic-match.c", 8896, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8896 "generic-match.c" 3 4
                                                     __null
# 8896 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3675, %s:%d\n", "generic-match.c", 8897);
          tree res;
          res = constant_boolean_node ((!maybe_lt (off0, off1)), type);
          return res;
        }
      else
        {

          if (cmp == GT_EXPR && ((!maybe_le (off0, off1)) || (!maybe_lt (off1, off0))))
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 8907, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8907 "generic-match.c" 3 4
                                                  __null
# 8907 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 8908, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8908 "generic-match.c" 3 4
                                                  __null
# 8908 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3677, %s:%d\n", "generic-match.c", 8909);
       tree res;
       res = constant_boolean_node ((!maybe_le (off0, off1)), type);
       return res;
     }
        }
    }
       }
   }
      }
  }
       else
  {

    if (equal == 0 && (tree_code_type[(int) (((enum tree_code) (base0)->base.code))] == tcc_declaration) && (tree_code_type[(int) (((enum tree_code) (base1)->base.code))] == tcc_declaration) && (!(((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8923, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8923, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8923, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (!maybe_ne (off0, off1))))
      {

        if (cmp == EQ_EXPR)
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 8928, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8928 "generic-match.c" 3 4
                                                __null
# 8928 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 8929, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8929 "generic-match.c" 3 4
                                                __null
# 8929 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3685, %s:%d\n", "generic-match.c", 8930);
     tree res;
     res = constant_boolean_node (false, type);
     return res;
   }
        else
   {

     if (cmp == NE_EXPR)
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 8940, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8940 "generic-match.c" 3 4
                                                    __null
# 8940 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[2]), "generic-match.c", 8941, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8941 "generic-match.c" 3 4
                                                    __null
# 8941 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3687, %s:%d\n", "generic-match.c", 8942);
         tree res;
         res = constant_boolean_node (true, type);
         return res;
       }
   }
      }
  }
   }
 }
  }
  return (tree) 
# 8953 "generic-match.c" 3 4
        __null
# 8953 "generic-match.c"
                 ;
}

static tree
generic_simplify_239 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8962, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8962, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 8962, __FUNCTION__))->typed.type)))
    {
      {

 unsigned int align;
 unsigned long bitpos;
 get_pointer_alignment_1 (captures[0], &align, &bitpos);

   if (wi::ltu_p (wi::to_wide (captures[1]), align / (8)))
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 8972, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8972 "generic-match.c" 3 4
                                                  __null
# 8972 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 8973, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8973 "generic-match.c" 3 4
                                                  __null
# 8973 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1620, %s:%d\n", "generic-match.c", 8974);
       tree res;
       res = wide_int_to_tree (type, (wi::to_wide (captures[1]) & (bitpos / (8))));
       return res;
     }
      }
    }
  return (tree) 
# 8981 "generic-match.c" 3 4
        __null
# 8981 "generic-match.c"
                 ;
}

static tree
generic_simplify_240 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 8990, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (type, ((contains_struct_check ((captures[6]), (TS_TYPED), "generic-match.c", 8990, __FUNCTION__))->typed.type)))
    {

      if (single_use (captures[4]) && single_use (captures[5]))
 {
   if (((non_type_check ((op0), "generic-match.c", 8995, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 8995 "generic-match.c" 3 4
                                      __null
# 8995 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:983, %s:%d\n", "generic-match.c", 8996);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[6];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9003, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, op, type, res_op0, res_op1);
   return res;
 }
      else
 {

   if (single_use (captures[0]) && single_use (captures[1]))
     {
       if (((non_type_check ((op1), "generic-match.c", 9018, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9018 "generic-match.c" 3 4
                                          __null
# 9018 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:985, %s:%d\n", "generic-match.c", 9019);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[3];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9024, __FUNCTION__))->typed.type) != type)
    res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[4];
       tree res;
       res = fold_build2_loc (loc, op, type, res_op0, res_op1);
       return res;
     }
 }
    }
  return (tree) 
# 9038 "generic-match.c" 3 4
        __null
# 9038 "generic-match.c"
                 ;
}

static tree
generic_simplify_241 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if (!integer_zerop (captures[0]) && !((((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 9047, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_FRACT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 9047, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_VECTOR_FRACT) || (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 9047, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_UFRACT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 9047, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_VECTOR_UFRACT)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:258, %s:%d\n", "generic-match.c", 9049);
      tree res;
      res = build_one_cst (type);
      if (((non_type_check ((captures[0]), "generic-match.c", 9052, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  return (tree) 
# 9056 "generic-match.c" 3 4
        __null
# 9056 "generic-match.c"
                 ;
}

static tree
generic_simplify_242 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9065, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9065, __FUNCTION__))->base.u.bits.unsigned_flag) && (element_precision (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9065, __FUNCTION__))->typed.type)) <= element_precision (((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 9065, __FUNCTION__))->typed.type)) || !((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 9065, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9065, __FUNCTION__))->base.u.bits.unsigned_flag)))
    {
      {

 tree shift_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9069, __FUNCTION__))->typed.type);
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2349, %s:%d\n", "generic-match.c", 9070);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 9077, __FUNCTION__))->typed.type) != shift_type)
  res = fold_build1_loc (loc, NOP_EXPR, shift_type, ops2[0]);
       else
         res = ops2[0];
       ops1[0] = res;
     }
     ops1[1] = captures[4];
     res = fold_build2_loc (loc, RSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9084, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
      }
    }
  return (tree) 
# 9092 "generic-match.c" 3 4
        __null
# 9092 "generic-match.c"
                 ;
}

static tree
generic_simplify_243 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn sq __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (global_options.x_flag_unsafe_math_optimizations && ! global_options.x_flag_errno_math)
    {

      if (real_isneg (&((*((tree_check ((captures[1]), "generic-match.c", 9104, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))))
 {

   if (cmp == EQ_EXPR || cmp == LT_EXPR || cmp == LE_EXPR)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3173, %s:%d\n", "generic-match.c", 9109);
       tree res;
       res = constant_boolean_node (false, type);
       if (((non_type_check ((captures[0]), "generic-match.c", 9112, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
       if (((non_type_check ((captures[1]), "generic-match.c", 9114, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
   else
     {

       if (cmp == NE_EXPR || !HONOR_NANS (captures[0]))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3177, %s:%d\n", "generic-match.c", 9123);
    tree res;
    res = constant_boolean_node (true, type);
    if (((non_type_check ((captures[0]), "generic-match.c", 9126, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    if (((non_type_check ((captures[1]), "generic-match.c", 9128, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
       else
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3179, %s:%d\n", "generic-match.c", 9134);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9138, __FUNCTION__))->typed.type), dconst0);
    tree res;
    res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
    if (((non_type_check ((captures[1]), "generic-match.c", 9141, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
     }
 }
      else
 {

   if (real_equal (((tree_check ((captures[1]), "generic-match.c", 9150, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr), &dconst0))
     {

       if (cmp == LT_EXPR)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3184, %s:%d\n", "generic-match.c", 9155);
    tree res;
    res = constant_boolean_node (false, type);
    if (((non_type_check ((captures[0]), "generic-match.c", 9158, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    if (((non_type_check ((captures[1]), "generic-match.c", 9160, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
       else
  {

    if (cmp == GE_EXPR && !HONOR_NANS (captures[0]))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3187, %s:%d\n", "generic-match.c", 9169);
        tree res;
        res = constant_boolean_node (true, type);
        if (((non_type_check ((captures[0]), "generic-match.c", 9172, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        if (((non_type_check ((captures[1]), "generic-match.c", 9174, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
    else
      {

        if (cmp == LE_EXPR)
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3190, %s:%d\n", "generic-match.c", 9183);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = captures[1];
     tree res;
     res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3198, %s:%d\n", "generic-match.c", 9194);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = captures[1];
     tree res;
     res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
     return res;
   }
      }
  }
     }
   else
     {

       if (cmp == GT_EXPR || cmp == GE_EXPR)
  {
    {

 struct real_value c2;
 real_arithmetic (&c2, MULT_EXPR, &(*((tree_check ((captures[1]), "generic-match.c", 9214, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)), &(*((tree_check ((captures[1]), "generic-match.c", 9214, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)));
 real_convert (&c2, ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9215, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9215, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9215, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9215, __FUNCTION__))->typed.type))->type_common.mode), &c2);

        if (real_isinf (&(c2)))
   {

     if (HONOR_INFINITIES (captures[0]))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3210, %s:%d\n", "generic-match.c", 9222);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9226, __FUNCTION__))->typed.type), c2);
         tree res;
         res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
         if (((non_type_check ((captures[1]), "generic-match.c", 9229, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
         return res;
       }
     else
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3211, %s:%d\n", "generic-match.c", 9235);
         tree res;
         res = constant_boolean_node (false, type);
         if (((non_type_check ((captures[0]), "generic-match.c", 9238, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
         if (((non_type_check ((captures[1]), "generic-match.c", 9240, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
         return res;
       }
   }
        else
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3213, %s:%d\n", "generic-match.c", 9247);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9251, __FUNCTION__))->typed.type), c2);
     tree res;
     res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
     if (((non_type_check ((captures[1]), "generic-match.c", 9254, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     return res;
   }
    }
  }
       else
  {

    if (cmp == LT_EXPR || cmp == LE_EXPR)
      {
        {

 struct real_value c2;
 real_arithmetic (&c2, MULT_EXPR, &(*((tree_check ((captures[1]), "generic-match.c", 9268, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)), &(*((tree_check ((captures[1]), "generic-match.c", 9268, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)));
 real_convert (&c2, ((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9269, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9269, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9269, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9269, __FUNCTION__))->typed.type))->type_common.mode), &c2);

     if (real_isinf (&(c2)))
       {

         if (! HONOR_NANS (captures[0]) && ! HONOR_INFINITIES (captures[0]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3227, %s:%d\n", "generic-match.c", 9276);
      tree res;
      res = constant_boolean_node (true, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 9279, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 9281, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
         else
    {

      if (! HONOR_NANS (captures[0]))
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3231, %s:%d\n", "generic-match.c", 9290);
          tree res_op0;
          res_op0 = captures[0];
          tree res_op1;
          res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9294, __FUNCTION__))->typed.type), c2);
          tree res;
          res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
          if (((non_type_check ((captures[1]), "generic-match.c", 9297, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
          return res;
        }
      else
        {

          if (! HONOR_INFINITIES (captures[0]))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3235, %s:%d\n", "generic-match.c", 9306);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9310, __FUNCTION__))->typed.type), dconst0);
       tree res;
       res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
       if (((non_type_check ((captures[1]), "generic-match.c", 9313, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
          else
     {

       if (1)
         {
           if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3238, %s:%d\n", "generic-match.c", 9322);
           if (! tree_invariant_p (captures[0])) return (tree) 
# 9323 "generic-match.c" 3 4
                                                       __null
# 9323 "generic-match.c"
                                                                ;
           tree res_op0;
           {
      tree ops1[2], res;
      ops1[0] = unshare_expr (captures[0]);
      ops1[1] = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9328, __FUNCTION__))->typed.type), dconst0);
      res = fold_build2_loc (loc, GE_EXPR, type, ops1[0], ops1[1]);
      res_op0 = res;
           }
           tree res_op1;
           {
      tree ops1[2], res;
      ops1[0] = captures[0];
      ops1[1] = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9336, __FUNCTION__))->typed.type), c2);
      res = fold_build2_loc (loc, NE_EXPR, type, ops1[0], ops1[1]);
      res_op1 = res;
           }
           tree res;
           res = fold_build2_loc (loc, TRUTH_ANDIF_EXPR, type, res_op0, res_op1);
           if (((non_type_check ((captures[1]), "generic-match.c", 9342, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
           return res;
         }
     }
        }
    }
       }
     else
       {

         if (! HONOR_NANS (captures[0]))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3243, %s:%d\n", "generic-match.c", 9355);
      tree res_op0;
      res_op0 = captures[0];
      tree res_op1;
      res_op1 = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9359, __FUNCTION__))->typed.type), c2);
      tree res;
      res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
      if (((non_type_check ((captures[1]), "generic-match.c", 9362, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
         else
    {

      if (1)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3246, %s:%d\n", "generic-match.c", 9371);
          if (! tree_invariant_p (captures[0])) return (tree) 
# 9372 "generic-match.c" 3 4
                                                      __null
# 9372 "generic-match.c"
                                                               ;
          tree res_op0;
          {
     tree ops1[2], res;
     ops1[0] = unshare_expr (captures[0]);
     ops1[1] = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9377, __FUNCTION__))->typed.type), dconst0);
     res = fold_build2_loc (loc, GE_EXPR, type, ops1[0], ops1[1]);
     res_op0 = res;
          }
          tree res_op1;
          {
     tree ops1[2], res;
     ops1[0] = captures[0];
     ops1[1] = build_real (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9385, __FUNCTION__))->typed.type), c2);
     res = fold_build2_loc (loc, cmp, type, ops1[0], ops1[1]);
     res_op1 = res;
          }
          tree res;
          res = fold_build2_loc (loc, TRUTH_ANDIF_EXPR, type, res_op0, res_op1);
          if (((non_type_check ((captures[1]), "generic-match.c", 9391, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
          return res;
        }
    }
       }
        }
      }
  }
     }
 }
    }
  return (tree) 
# 9403 "generic-match.c" 3 4
        __null
# 9403 "generic-match.c"
                 ;
}

static tree
generic_simplify_244 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9412, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1214, %s:%d\n", "generic-match.c", 9414);
      tree res_op0;
      {
 tree ops1[2], res;
 {
   tree ops2[1], res;
   ops2[0] = captures[2];
   res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops2[0]);
   ops1[0] = res;
 }
 ops1[1] = captures[3];
 res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9425, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 9432 "generic-match.c" 3 4
        __null
# 9432 "generic-match.c"
                 ;
}

static tree
generic_simplify_245 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (!((tree_not_check4 ((type), "generic-match.c", 9441, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 9444, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1694, %s:%d\n", "generic-match.c", 9446);
   tree res;
   res = captures[1];
   if (((non_type_check ((captures[0]), "generic-match.c", 9449, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  return (tree) 
# 9454 "generic-match.c" 3 4
        __null
# 9454 "generic-match.c"
                 ;
}

static tree
generic_simplify_246 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((unsigned long) (*tree_int_cst_elt_check ((captures[1]), (0), "generic-match.c", 9463, __FUNCTION__))) & 1)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1469, %s:%d\n", "generic-match.c", 9465);
      tree res;
      res = constant_boolean_node (cmp == NE_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 9468, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 9470, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 9474 "generic-match.c" 3 4
        __null
# 9474 "generic-match.c"
                 ;
}

static tree
generic_simplify_247 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code eqcmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9483, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9483, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9483, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))
    {
      {

 tree ty = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9487, __FUNCTION__))->typed.type);
 unsigned prec = ((tree_class_check ((ty), (tcc_type), "generic-match.c", 9488, __FUNCTION__))->type_common.precision);
 wide_int mask = wi::to_wide (captures[2], prec);
 wide_int rhs = wi::to_wide (captures[3], prec);
 signop sgn = ((signop) ((tree_class_check ((ty), (tcc_type), "generic-match.c", 9491, __FUNCTION__))->base.u.bits.unsigned_flag));

   if ((mask & (mask + 1)) == 0 && wi::gt_p (rhs, 0, sgn) && (rhs & (rhs + 1)) == 0 && wi::ge_p (mask, rhs, sgn))
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 9495, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9495 "generic-match.c" 3 4
                                                  __null
# 9495 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 9496, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9496 "generic-match.c" 3 4
                                                  __null
# 9496 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3421, %s:%d\n", "generic-match.c", 9497);
       tree res_op0;
       {
  tree ops1[2], res;
  ops1[0] = captures[1];
  ops1[1] = wide_int_to_tree (ty, mask - rhs);
  res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9503, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = build_zero_cst (ty);
       tree res;
       res = fold_build2_loc (loc, eqcmp, type, res_op0, res_op1);
       return res;
     }
      }
    }
  return (tree) 
# 9514 "generic-match.c" 3 4
        __null
# 9514 "generic-match.c"
                 ;
}

static tree
generic_simplify_248 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code minmax __attribute__ ((__unused__)), const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code comb __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2128, %s:%d\n", "generic-match.c", 9522);
  if (! tree_invariant_p (captures[2])) return (tree) 
# 9523 "generic-match.c" 3 4
                                              __null
# 9523 "generic-match.c"
                                                       ;
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[0];
    ops1[1] = unshare_expr (captures[2]);
    res = fold_build2_loc (loc, cmp, type, ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res_op1;
  {
    tree ops1[2], res;
    ops1[0] = captures[1];
    ops1[1] = captures[2];
    res = fold_build2_loc (loc, cmp, type, ops1[0], ops1[1]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, comb, type, res_op0, res_op1);
  return res;
  return (tree) 
# 9543 "generic-match.c" 3 4
        __null
# 9543 "generic-match.c"
                 ;
}

static tree
generic_simplify_249 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{
  {

 unsigned int prec = element_precision (type);

      if (wi::ge_p (wi::to_wide (captures[1]), 0, ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9555, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9555, __FUNCTION__))->base.u.bits.unsigned_flag))) && wi::lt_p (wi::to_wide (captures[1]), prec, ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9555, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9555, __FUNCTION__))->base.u.bits.unsigned_flag))) && wi::ge_p (wi::to_wide (captures[2]), 0, ((signop) ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9555, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9555, __FUNCTION__))->base.u.bits.unsigned_flag))) && wi::lt_p (wi::to_wide (captures[2]), prec, ((signop) ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9555, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9555, __FUNCTION__))->base.u.bits.unsigned_flag))))
 {
   {

 unsigned int low = (tree_to_uhwi (captures[1]) + tree_to_uhwi (captures[2]));

       if (low >= prec)
  {

    if (op == LROTATE_EXPR || op == RROTATE_EXPR)
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 9566, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9566 "generic-match.c" 3 4
                                                   __null
# 9566 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[2]), "generic-match.c", 9567, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9567 "generic-match.c" 3 4
                                                   __null
# 9567 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2212, %s:%d\n", "generic-match.c", 9568);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = build_int_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9572, __FUNCTION__))->typed.type), low % prec);
        tree res;
        res = fold_build2_loc (loc, op, type, res_op0, res_op1);
        return res;
      }
    else
      {

        if (((tree_class_check ((type), (tcc_type), "generic-match.c", 9580, __FUNCTION__))->base.u.bits.unsigned_flag) || op == LSHIFT_EXPR)
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 9582, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9582 "generic-match.c" 3 4
                                                __null
# 9582 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 9583, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9583 "generic-match.c" 3 4
                                                __null
# 9583 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2214, %s:%d\n", "generic-match.c", 9584);
     tree res;
     res = build_zero_cst (type);
     if (((non_type_check ((captures[0]), "generic-match.c", 9587, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
     return res;
   }
        else
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 9593, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9593 "generic-match.c" 3 4
                                                __null
# 9593 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 9594, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9594 "generic-match.c" 3 4
                                                __null
# 9594 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2215, %s:%d\n", "generic-match.c", 9595);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = build_int_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9599, __FUNCTION__))->typed.type), prec - 1);
     tree res;
     res = fold_build2_loc (loc, op, type, res_op0, res_op1);
     return res;
   }
      }
  }
       else
  {
    if (((non_type_check ((captures[1]), "generic-match.c", 9608, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9608 "generic-match.c" 3 4
                                               __null
# 9608 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[2]), "generic-match.c", 9609, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9609 "generic-match.c" 3 4
                                               __null
# 9609 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2216, %s:%d\n", "generic-match.c", 9610);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    res_op1 = build_int_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9614, __FUNCTION__))->typed.type), low);
    tree res;
    res = fold_build2_loc (loc, op, type, res_op0, res_op1);
    return res;
  }
   }
 }
  }
  return (tree) 
# 9622 "generic-match.c" 3 4
        __null
# 9622 "generic-match.c"
                 ;
}

static tree
generic_simplify_250 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (((enum tree_code) (type)->base.code) != COMPLEX_TYPE && (! ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 9631, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 9631, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 9631, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 9631, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1997, %s:%d\n", "generic-match.c", 9633);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, ABS_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 9640 "generic-match.c" 3 4
        __null
# 9640 "generic-match.c"
                 ;
}

static tree
generic_simplify_251 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  {

 int cand = wi::ctz (wi::to_wide (captures[2])) - wi::ctz (wi::to_wide (captures[0]));

      if (cand < 0 || (!integer_zerop (captures[2]) && wi::lshift (wi::to_wide (captures[0]), cand) != wi::to_wide (captures[2])))
 {
   if (((non_type_check ((captures[0]), "generic-match.c", 9654, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9654 "generic-match.c" 3 4
                                              __null
# 9654 "generic-match.c"
                                                       ;
   if (((non_type_check ((captures[2]), "generic-match.c", 9655, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9655 "generic-match.c" 3 4
                                              __null
# 9655 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2237, %s:%d\n", "generic-match.c", 9656);
   tree res;
   res = constant_boolean_node (cmp == NE_EXPR, type);
   if (((non_type_check ((captures[1]), "generic-match.c", 9659, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
      else
 {

   if (!integer_zerop (captures[2]) && wi::lshift (wi::to_wide (captures[0]), cand) == wi::to_wide (captures[2]))
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 9668, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9668 "generic-match.c" 3 4
                                                  __null
# 9668 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 9669, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9669 "generic-match.c" 3 4
                                                  __null
# 9669 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2240, %s:%d\n", "generic-match.c", 9670);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = build_int_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9674, __FUNCTION__))->typed.type), cand);
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       return res;
     }
 }
  }
  return (tree) 
# 9681 "generic-match.c" 3 4
        __null
# 9681 "generic-match.c"
                 ;
}

static tree
generic_simplify_252 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1219, %s:%d\n", "generic-match.c", 9689);
  if (! tree_invariant_p (captures[1])) return (tree) 
# 9690 "generic-match.c" 3 4
                                              __null
# 9690 "generic-match.c"
                                                       ;
  tree res_op0;
  {
    tree ops1[2], res;
    {
      tree ops2[2], res;
      ops2[0] = unshare_expr (captures[1]);
      ops2[1] = captures[4];
      res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 9698, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
      ops1[0] = res;
    }
    ops1[1] = captures[2];
    res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9702, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res_op1;
  res_op1 = captures[1];
  tree res;
  res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
  return res;
  return (tree) 
# 9710 "generic-match.c" 3 4
        __null
# 9710 "generic-match.c"
                 ;
}

static tree
generic_simplify_253 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:656, %s:%d\n", "generic-match.c", 9718);
  tree res;
  res = build_zero_cst (type);
  if (((non_type_check ((captures[0]), "generic-match.c", 9721, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
  return res;
  return (tree) 
# 9724 "generic-match.c" 3 4
        __null
# 9724 "generic-match.c"
                 ;
}

static tree
generic_simplify_254 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{

  if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))
    {
      if (((non_type_check ((op0), "generic-match.c", 9735, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9735 "generic-match.c" 3 4
                                         __null
# 9735 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:211, %s:%d\n", "generic-match.c", 9736);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, ABS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9741, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 9748 "generic-match.c" 3 4
        __null
# 9748 "generic-match.c"
                 ;
}

static tree
generic_simplify_255 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shift __attribute__ ((__unused__)))
{

  if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9757, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9757, __FUNCTION__))->typed.type)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 9757, __FUNCTION__))->type_common.precision) <= 64 && tree_fits_uhwi_p (captures[4]) && tree_to_uhwi (captures[4]) > 0 && tree_to_uhwi (captures[4]) < ((tree_class_check ((type), (tcc_type), "generic-match.c", 9757, __FUNCTION__))->type_common.precision))
    {
      {

 unsigned int shiftc = tree_to_uhwi (captures[4]);
 unsigned long mask = ((unsigned long) (*tree_int_cst_elt_check ((captures[5]), (0), "generic-match.c", 9762, __FUNCTION__)));
 unsigned long newmask, zerobits = 0;
 tree shift_type = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9764, __FUNCTION__))->typed.type);
 unsigned int prec;
 if (shift == LSHIFT_EXPR) zerobits = ((1UL << shiftc) - 1);
 else if (shift == RSHIFT_EXPR && type_has_mode_precision_p (shift_type)) { prec = ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9767, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9767, __FUNCTION__))->type_common.precision);
 tree arg00 = captures[3];
 if (captures[2] != captures[3] && ((tree_class_check ((((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 9769, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9769, __FUNCTION__))->base.u.bits.unsigned_flag)) { tree inner_type = ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 9769, __FUNCTION__))->typed.type);
 if (type_has_mode_precision_p (inner_type) && ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 9770, __FUNCTION__))->type_common.precision) < prec) { prec = ((tree_class_check ((inner_type), (tcc_type), "generic-match.c", 9770, __FUNCTION__))->type_common.precision);
 if (shiftc < prec) shift_type = inner_type;
 } } zerobits = -1UL;
 if (shiftc < prec) { zerobits >>= 64 - shiftc;
 zerobits <<= prec - shiftc;
 } if (!((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9775, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9775, __FUNCTION__))->base.u.bits.unsigned_flag) && prec == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9775, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9775, __FUNCTION__))->type_common.precision)) { if ((mask & zerobits) == 0) shift_type = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9775, __FUNCTION__))->typed.type));
 else zerobits = 0;
 } }
   if ((mask & zerobits) == mask)
     {
       if (((non_type_check ((captures[2]), "generic-match.c", 9780, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9780 "generic-match.c" 3 4
                                                  __null
# 9780 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 9781, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9781 "generic-match.c" 3 4
                                                  __null
# 9781 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 9782, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9782 "generic-match.c" 3 4
                                                  __null
# 9782 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[5]), "generic-match.c", 9783, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9783 "generic-match.c" 3 4
                                                  __null
# 9783 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2309, %s:%d\n", "generic-match.c", 9784);
       tree res;
       res = build_int_cst (type, 0);
       return res;
     }
   else
     {
       {

 newmask = mask | zerobits;

    if (newmask != mask && (newmask & (newmask + 1)) == 0)
      {
        {

 for (prec = (8);
 prec < 64;
 prec <<= 1) if (newmask == (1UL << prec) - 1) break;

     if (prec < 64 || newmask == -1UL)
       {
         {

 tree newmaskt = build_int_cst_type (((contains_struct_check ((captures[5]), (TS_TYPED), "generic-match.c", 9807, __FUNCTION__))->typed.type), newmask);

      if (!tree_int_cst_equal (newmaskt, captures[5]))
        {

          if (shift_type != ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9812, __FUNCTION__))->typed.type))
     {
       if (((non_type_check ((op0), "generic-match.c", 9814, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9814 "generic-match.c" 3 4
                                          __null
# 9814 "generic-match.c"
                                                   ;
       if (((non_type_check ((captures[5]), "generic-match.c", 9815, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9815 "generic-match.c" 3 4
                                                  __null
# 9815 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2327, %s:%d\n", "generic-match.c", 9816);
       tree res_op0;
       {
         tree ops1[1], res;
         {
           tree ops2[2], res;
           {
      tree ops3[1], res;
      ops3[0] = captures[2];
      if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 9825, __FUNCTION__))->typed.type) != shift_type)
        res = fold_build1_loc (loc, NOP_EXPR, shift_type, ops3[0]);
      else
        res = ops3[0];
      ops2[0] = res;
           }
           ops2[1] = captures[4];
           res = fold_build2_loc (loc, shift, shift_type, ops2[0], ops2[1]);
           ops1[0] = res;
         }
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9835, __FUNCTION__))->typed.type) != type)
           res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
          else
     {
       if (((non_type_check ((op0), "generic-match.c", 9849, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9849 "generic-match.c" 3 4
                                          __null
# 9849 "generic-match.c"
                                                   ;
       if (((non_type_check ((captures[5]), "generic-match.c", 9850, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9850 "generic-match.c" 3 4
                                                  __null
# 9850 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2328, %s:%d\n", "generic-match.c", 9851);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = newmaskt;
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
         }
       }
        }
      }
       }
     }
      }
    }
  return (tree) 
# 9869 "generic-match.c" 3 4
        __null
# 9869 "generic-match.c"
                 ;
}

static tree
generic_simplify_256 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)), const enum tree_code out __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9878, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 9878, __FUNCTION__))->base.u.bits.unsigned_flag) && types_match (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9878, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 9878, __FUNCTION__))->typed.type)))
    {
      if (((non_type_check ((op1), "generic-match.c", 9880, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9880 "generic-match.c" 3 4
                                         __null
# 9880 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3844, %s:%d\n", "generic-match.c", 9881);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9886, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 9886, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res_op1;
      res_op1 = build_zero_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 9890, __FUNCTION__))->typed.type));
      tree res;
      res = fold_build2_loc (loc, out, type, res_op0, res_op1);
      return res;
    }
  return (tree) 
# 9895 "generic-match.c" 3 4
        __null
# 9895 "generic-match.c"
                 ;
}

static tree
generic_simplify_257 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn POW __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4081, %s:%d\n", "generic-match.c", 9903);
  tree res;
  res = captures[0];
  if (((non_type_check ((captures[1]), "generic-match.c", 9906, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  return res;
  return (tree) 
# 9909 "generic-match.c" 3 4
        __null
# 9909 "generic-match.c"
                 ;
}

static tree
generic_simplify_258 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn froms __attribute__ ((__unused__)), const combined_fn tos __attribute__ ((__unused__)))
{

  if (global_options.x_optimize && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4307, %s:%d\n", "generic-match.c", 9920);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = maybe_build_call_expr_loc (loc, tos, type, 1, res_op0);
      if (!res)
        return (tree) 
# 9926 "generic-match.c" 3 4
              __null
# 9926 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 9929 "generic-match.c" 3 4
        __null
# 9929 "generic-match.c"
                 ;
}

static tree
generic_simplify_259 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
)
{

  if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 9938, __FUNCTION__))->typed.type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:928, %s:%d\n", "generic-match.c", 9940);
      tree res_op0;
      {
 tree ops1[2], res;
 ops1[0] = captures[1];
 {
   tree ops2[1], res;
   ops2[0] = captures[0];
   res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 9948, __FUNCTION__))->typed.type), ops2[0]);
   ops1[1] = res;
 }
 res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9951, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 9958 "generic-match.c" 3 4
        __null
# 9958 "generic-match.c"
                 ;
}

static tree
generic_simplify_260 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1232, %s:%d\n", "generic-match.c", 9966);
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[0];
    ops1[1] = captures[1];
    res = fold_build2_loc (loc, cmp, global_trees[TI_BOOLEAN_TYPE], ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res_op1;
  res_op1 = captures[2];
  tree res_op2;
  res_op2 = build_zero_cst (type);
  tree res;
  res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
  return res;
  return (tree) 
# 9982 "generic-match.c" 3 4
        __null
# 9982 "generic-match.c"
                 ;
}

static tree
generic_simplify_261 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const combined_fn COPYSIGN_ALL __attribute__ ((__unused__)))
{

  if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))
    {
      if (((non_type_check ((op1), "generic-match.c", 9993, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 9993 "generic-match.c" 3 4
                                         __null
# 9993 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:211, %s:%d\n", "generic-match.c", 9994);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 res = fold_build1_loc (loc, ABS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 9999, __FUNCTION__))->typed.type), ops1[0]);
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
  return (tree) 
# 10006 "generic-match.c" 3 4
        __null
# 10006 "generic-match.c"
                 ;
}

static tree
generic_simplify_262 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn froms __attribute__ ((__unused__)), const combined_fn tos __attribute__ ((__unused__)))
{

  if (global_options.x_optimize && canonicalize_math_p ())
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4297, %s:%d\n", "generic-match.c", 10017);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = maybe_build_call_expr_loc (loc, tos, type, 1, res_op0);
      if (!res)
        return (tree) 
# 10023 "generic-match.c" 3 4
              __null
# 10023 "generic-match.c"
                       ;
      return res;
    }
  return (tree) 
# 10026 "generic-match.c" 3 4
        __null
# 10026 "generic-match.c"
                 ;
}

static tree
generic_simplify_263 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10035, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10035, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:769, %s:%d\n", "generic-match.c", 10037);
      tree res;
      res = constant_boolean_node (cmp == GT_EXPR, type);
      if (((non_type_check ((captures[0]), "generic-match.c", 10040, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 10042, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 10046 "generic-match.c" 3 4
        __null
# 10046 "generic-match.c"
                 ;
}

static tree
generic_simplify_264 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10055, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10055, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10055, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 10055, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 10055, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 10055, __FUNCTION__))->typed.type)), "generic-match.c", 10055, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
    {

      if (tree_expr_nonnegative_p (captures[1]) && tree_expr_nonzero_p (captures[1]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1265, %s:%d\n", "generic-match.c", 10060);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 10067, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
      else
 {

   if (((enum tree_code) (captures[1])->base.code) == INTEGER_CST && wi::neg_p (wi::to_wide (captures[1]), ((signop) ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10074, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10074, __FUNCTION__))->base.u.bits.unsigned_flag))))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1268, %s:%d\n", "generic-match.c", 10076);
       tree res_op0;
       res_op0 = captures[2];
       tree res_op1;
       res_op1 = captures[0];
       tree res;
       res = fold_build2_loc (loc, cmp, type, res_op0, res_op1);
       if (((non_type_check ((captures[1]), "generic-match.c", 10083, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       return res;
     }
 }
    }
  return (tree) 
# 10089 "generic-match.c" 3 4
        __null
# 10089 "generic-match.c"
                 ;
}

static tree
generic_simplify_265 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && type_has_mode_precision_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type)) && type_has_mode_precision_p (((contains_struct_check ((captures[4]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type)) && type_has_mode_precision_p (type) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10098, __FUNCTION__))->type_common.precision) > ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10098, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10098, __FUNCTION__))->type_common.precision) && types_match (captures[2], type) && (types_match (captures[2], captures[4]) || ((enum tree_code) (captures[4])->base.code) == INTEGER_CST))
    {

      if (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10101, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10101, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10101, __FUNCTION__))->typed.type)), "generic-match.c", 10101, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4451, %s:%d\n", "generic-match.c", 10103);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   {
     tree ops1[1], res;
     ops1[0] = captures[4];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10110, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, op, type, res_op0, res_op1);
   return res;
 }
      else
 {
   {

 tree utype = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10124, __FUNCTION__))->typed.type));
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4453, %s:%d\n", "generic-match.c", 10125);
       tree res_op0;
       {
  tree ops1[2], res;
  {
    tree ops2[1], res;
    ops2[0] = captures[2];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10132, __FUNCTION__))->typed.type) != utype)
      res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
    else
      res = ops2[0];
    ops1[0] = res;
  }
  {
    tree ops2[1], res;
    ops2[0] = captures[4];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10141, __FUNCTION__))->typed.type) != utype)
      res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10147, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
   }
 }
    }
  return (tree) 
# 10156 "generic-match.c" 3 4
        __null
# 10156 "generic-match.c"
                 ;
}

static tree
generic_simplify_266 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shiftrotate __attribute__ ((__unused__)))
{
  {

 tree tem = uniform_vector_p (captures[1]);

      if (tem)
 {
   if (((non_type_check ((captures[1]), "generic-match.c", 10170, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10170 "generic-match.c" 3 4
                                              __null
# 10170 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2172, %s:%d\n", "generic-match.c", 10171);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = tem;
   tree res;
   res = fold_build2_loc (loc, shiftrotate, type, res_op0, res_op1);
   return res;
 }
  }
  return (tree) 
# 10181 "generic-match.c" 3 4
        __null
# 10181 "generic-match.c"
                 ;
}

static tree
generic_simplify_267 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code plusminus __attribute__ ((__unused__)))
{

  if (!((tree_not_check4 ((type), "generic-match.c", 10190, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag) && (!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 10190, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math))
    {

      if (!((((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 10193, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_FRACT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 10193, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_VECTOR_FRACT) || (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 10193, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_UFRACT || ((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 10193, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_VECTOR_UFRACT)))
 {

   if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 10196, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 10196, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 10196, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 10196, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) || ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && tree_expr_nonzero_p (captures[1]) && expr_not_equal_to (captures[1], wi::minus_one (((tree_class_check ((type), (tcc_type), "generic-match.c", 10196, __FUNCTION__))->type_common.precision)))))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1975, %s:%d\n", "generic-match.c", 10198);
       tree res_op0;
       {
  tree ops1[2], res;
  ops1[0] = captures[2];
  ops1[1] = build_one_cst (type);
  res = fold_build2_loc (loc, plusminus, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10204, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
    }
  return (tree) 
# 10215 "generic-match.c" 3 4
        __null
# 10215 "generic-match.c"
                 ;
}

static tree
generic_simplify_268 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree *captures
, const combined_fn bswap __attribute__ ((__unused__)))
{
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2632, %s:%d\n", "generic-match.c", 10223);
  tree res;
  res = captures[0];
  return res;
  return (tree) 
# 10227 "generic-match.c" 3 4
        __null
# 10227 "generic-match.c"
                 ;
}

static tree
generic_simplify_269 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code div __attribute__ ((__unused__)))
{

  if (!((tree_class_check ((type), (tcc_type), "generic-match.c", 10236, __FUNCTION__))->base.u.bits.unsigned_flag))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:251, %s:%d\n", "generic-match.c", 10238);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      if (((non_type_check ((captures[1]), "generic-match.c", 10243, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
  return (tree) 
# 10247 "generic-match.c" 3 4
        __null
# 10247 "generic-match.c"
                 ;
}

static tree
generic_simplify_270 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code shiftrotate __attribute__ ((__unused__)))
{
  if (((non_type_check ((op1), "generic-match.c", 10255, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10255 "generic-match.c" 3 4
                                     __null
# 10255 "generic-match.c"
                                              ;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2161, %s:%d\n", "generic-match.c", 10256);
  tree res_op0;
  res_op0 = captures[0];
  tree res;
  res = non_lvalue_loc (loc, res_op0);
  return res;
  return (tree) 
# 10262 "generic-match.c" 3 4
        __null
# 10262 "generic-match.c"
                 ;
}

static tree
generic_simplify_271 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code op __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && type_has_mode_precision_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)) && type_has_mode_precision_p (((contains_struct_check ((captures[4]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)) && type_has_mode_precision_p (type) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10271, __FUNCTION__))->type_common.precision) > ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10271, __FUNCTION__))->type_common.precision) && types_match (captures[2], captures[4]) && (tree_int_cst_min_precision (captures[5], ((signop) ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10271, __FUNCTION__))->base.u.bits.unsigned_flag))) <= ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10271, __FUNCTION__))->type_common.precision)) && (wi::to_wide (captures[5]) & wi::mask (((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10271, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 10271, __FUNCTION__))->type_common.precision), true, ((tree_class_check ((type), (tcc_type), "generic-match.c", 10271, __FUNCTION__))->type_common.precision))) == 0)
    {

      if (((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10274, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10274, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10274, __FUNCTION__))->typed.type)), "generic-match.c", 10274, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
 {
   {

 tree ntype = ((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10278, __FUNCTION__))->typed.type);
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4485, %s:%d\n", "generic-match.c", 10279);
       tree res_op0;
       {
  tree ops1[2], res;
  {
    tree ops2[2], res;
    ops2[0] = captures[2];
    ops2[1] = captures[4];
    res = fold_build2_loc (loc, op, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10287, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
    ops1[0] = res;
  }
  {
    tree ops2[1], res;
    ops2[0] = captures[5];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10293, __FUNCTION__))->typed.type) != ntype)
      res = fold_build1_loc (loc, NOP_EXPR, ntype, ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10299, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
   }
 }
      else
 {
   {

 tree utype = unsigned_type_for (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 10311, __FUNCTION__))->typed.type));
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4487, %s:%d\n", "generic-match.c", 10312);
       tree res_op0;
       {
  tree ops1[2], res;
  {
    tree ops2[2], res;
    {
      tree ops3[1], res;
      ops3[0] = captures[2];
      if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 10321, __FUNCTION__))->typed.type) != utype)
        res = fold_build1_loc (loc, NOP_EXPR, utype, ops3[0]);
      else
        res = ops3[0];
      ops2[0] = res;
    }
    {
      tree ops3[1], res;
      ops3[0] = captures[4];
      if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 10330, __FUNCTION__))->typed.type) != utype)
        res = fold_build1_loc (loc, NOP_EXPR, utype, ops3[0]);
      else
        res = ops3[0];
      ops2[1] = res;
    }
    res = fold_build2_loc (loc, op, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10336, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
    ops1[0] = res;
  }
  {
    tree ops2[1], res;
    ops2[0] = captures[5];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10342, __FUNCTION__))->typed.type) != utype)
      res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
    else
      res = ops2[0];
    ops1[1] = res;
  }
  res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10348, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
   }
 }
    }
  return (tree) 
# 10357 "generic-match.c" 3 4
        __null
# 10357 "generic-match.c"
                 ;
}

static tree
generic_simplify_272 (location_t loc __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)),
 tree op0 __attribute__ ((__unused__)), tree op1 __attribute__ ((__unused__)), tree *captures
, const enum tree_code cmp __attribute__ ((__unused__)))
{

  if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10366, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10366, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10366, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && integer_nonzerop (captures[2]) && !((tree_class_check ((captures[2]), (tcc_constant), "generic-match.c", 10366, __FUNCTION__))->base.public_flag) && !((tree_class_check ((captures[3]), (tcc_constant), "generic-match.c", 10366, __FUNCTION__))->base.public_flag))
    {
      {

 tree lo, hi;
 bool neg_overflow;
 enum tree_code code = fold_div_compare (cmp, captures[2], captures[3], &lo, &hi, &neg_overflow);

   if (code == LT_EXPR || code == GE_EXPR)
     {

       if (((tree_class_check ((lo), (tcc_constant), "generic-match.c", 10377, __FUNCTION__))->base.public_flag))
  {
    if (((non_type_check ((captures[2]), "generic-match.c", 10379, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10379 "generic-match.c" 3 4
                                               __null
# 10379 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[3]), "generic-match.c", 10380, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10380 "generic-match.c" 3 4
                                               __null
# 10380 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1304, %s:%d\n", "generic-match.c", 10381);
    tree res;
    res = build_int_cst (type, (code == LT_EXPR) ^ neg_overflow);
    if (((non_type_check ((captures[1]), "generic-match.c", 10384, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
       else
  {

    if (code == LT_EXPR)
      {
        if (((non_type_check ((captures[2]), "generic-match.c", 10393, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10393 "generic-match.c" 3 4
                                                   __null
# 10393 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[3]), "generic-match.c", 10394, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10394 "generic-match.c" 3 4
                                                   __null
# 10394 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1306, %s:%d\n", "generic-match.c", 10395);
        tree res_op0;
        res_op0 = captures[1];
        tree res_op1;
        res_op1 = lo;
        tree res;
        res = fold_build2_loc (loc, LT_EXPR, type, res_op0, res_op1);
        return res;
      }
    else
      {
        if (((non_type_check ((captures[2]), "generic-match.c", 10406, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10406 "generic-match.c" 3 4
                                                   __null
# 10406 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[3]), "generic-match.c", 10407, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10407 "generic-match.c" 3 4
                                                   __null
# 10407 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1307, %s:%d\n", "generic-match.c", 10408);
        tree res_op0;
        res_op0 = captures[1];
        tree res_op1;
        res_op1 = lo;
        tree res;
        res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
        return res;
      }
  }
     }
   else
     {

       if (code == LE_EXPR || code == GT_EXPR)
  {

    if (((tree_class_check ((hi), (tcc_constant), "generic-match.c", 10425, __FUNCTION__))->base.public_flag))
      {
        if (((non_type_check ((captures[2]), "generic-match.c", 10427, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10427 "generic-match.c" 3 4
                                                   __null
# 10427 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[3]), "generic-match.c", 10428, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10428 "generic-match.c" 3 4
                                                   __null
# 10428 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1310, %s:%d\n", "generic-match.c", 10429);
        tree res;
        res = build_int_cst (type, (code == LE_EXPR) ^ neg_overflow);
        if (((non_type_check ((captures[1]), "generic-match.c", 10432, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
    else
      {

        if (code == LE_EXPR)
   {
     if (((non_type_check ((captures[2]), "generic-match.c", 10441, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10441 "generic-match.c" 3 4
                                                __null
# 10441 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[3]), "generic-match.c", 10442, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10442 "generic-match.c" 3 4
                                                __null
# 10442 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1312, %s:%d\n", "generic-match.c", 10443);
     tree res_op0;
     res_op0 = captures[1];
     tree res_op1;
     res_op1 = hi;
     tree res;
     res = fold_build2_loc (loc, LE_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {
     if (((non_type_check ((captures[2]), "generic-match.c", 10454, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10454 "generic-match.c" 3 4
                                                __null
# 10454 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[3]), "generic-match.c", 10455, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10455 "generic-match.c" 3 4
                                                __null
# 10455 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1313, %s:%d\n", "generic-match.c", 10456);
     tree res_op0;
     res_op0 = captures[1];
     tree res_op1;
     res_op1 = hi;
     tree res;
     res = fold_build2_loc (loc, GT_EXPR, type, res_op0, res_op1);
     return res;
   }
      }
  }
       else
  {

    if (!lo && !hi)
      {
        if (((non_type_check ((captures[2]), "generic-match.c", 10472, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10472 "generic-match.c" 3 4
                                                   __null
# 10472 "generic-match.c"
                                                            ;
        if (((non_type_check ((captures[3]), "generic-match.c", 10473, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10473 "generic-match.c" 3 4
                                                   __null
# 10473 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1315, %s:%d\n", "generic-match.c", 10474);
        tree res;
        res = build_int_cst (type, code == NE_EXPR);
        if (((non_type_check ((captures[1]), "generic-match.c", 10477, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        return res;
      }
    else
      {

        if (code == EQ_EXPR && !hi)
   {
     if (((non_type_check ((captures[2]), "generic-match.c", 10486, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10486 "generic-match.c" 3 4
                                                __null
# 10486 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[3]), "generic-match.c", 10487, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10487 "generic-match.c" 3 4
                                                __null
# 10487 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1317, %s:%d\n", "generic-match.c", 10488);
     tree res_op0;
     res_op0 = captures[1];
     tree res_op1;
     res_op1 = lo;
     tree res;
     res = fold_build2_loc (loc, GE_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {

     if (code == EQ_EXPR && !lo)
       {
         if (((non_type_check ((captures[2]), "generic-match.c", 10502, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10502 "generic-match.c" 3 4
                                                    __null
# 10502 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[3]), "generic-match.c", 10503, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10503 "generic-match.c" 3 4
                                                    __null
# 10503 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1319, %s:%d\n", "generic-match.c", 10504);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         res_op1 = hi;
         tree res;
         res = fold_build2_loc (loc, LE_EXPR, type, res_op0, res_op1);
         return res;
       }
     else
       {

         if (code == NE_EXPR && !hi)
    {
      if (((non_type_check ((captures[2]), "generic-match.c", 10518, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10518 "generic-match.c" 3 4
                                                 __null
# 10518 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[3]), "generic-match.c", 10519, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10519 "generic-match.c" 3 4
                                                 __null
# 10519 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1321, %s:%d\n", "generic-match.c", 10520);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      res_op1 = lo;
      tree res;
      res = fold_build2_loc (loc, LT_EXPR, type, res_op0, res_op1);
      return res;
    }
         else
    {

      if (code == NE_EXPR && !lo)
        {
          if (((non_type_check ((captures[2]), "generic-match.c", 10534, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10534 "generic-match.c" 3 4
                                                     __null
# 10534 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[3]), "generic-match.c", 10535, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10535 "generic-match.c" 3 4
                                                     __null
# 10535 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1323, %s:%d\n", "generic-match.c", 10536);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          res_op1 = hi;
          tree res;
          res = fold_build2_loc (loc, GT_EXPR, type, res_op0, res_op1);
          return res;
        }
      else
        {

          if (1)
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 10550, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10550 "generic-match.c" 3 4
                                                  __null
# 10550 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 10551, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10551 "generic-match.c" 3 4
                                                  __null
# 10551 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 10552, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10552 "generic-match.c" 3 4
                                                  __null
# 10552 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1325, %s:%d\n", "generic-match.c", 10553);
       tree res;
       res = build_range_check (((source_location) 0), type, captures[1], code == EQ_EXPR, lo, hi);
       return res;
     }
          else
     {
       {

 tree etype = range_check_type (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 10562, __FUNCTION__))->typed.type));
 if (etype) { if (! ((tree_class_check ((etype), (tcc_type), "generic-match.c", 10563, __FUNCTION__))->base.u.bits.unsigned_flag)) etype = unsigned_type_for (etype);
 hi = fold_convert_loc (((source_location) 0), etype, hi);
 lo = fold_convert_loc (((source_location) 0), etype, lo);
 hi = const_binop (MINUS_EXPR, etype, hi, lo);
 }
           if (etype && hi && !((tree_class_check ((hi), (tcc_constant), "generic-match.c", 10568, __FUNCTION__))->base.public_flag))
      {

        if (code == EQ_EXPR)
          {
            if (((non_type_check ((captures[2]), "generic-match.c", 10573, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10573 "generic-match.c" 3 4
                                                       __null
# 10573 "generic-match.c"
                                                                ;
            if (((non_type_check ((captures[3]), "generic-match.c", 10574, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10574 "generic-match.c" 3 4
                                                       __null
# 10574 "generic-match.c"
                                                                ;
            if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1341, %s:%d\n", "generic-match.c", 10575);
            tree res_op0;
            {
       tree ops1[2], res;
       {
         tree ops2[1], res;
         ops2[0] = captures[1];
         if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10582, __FUNCTION__))->typed.type) != etype)
           res = fold_build1_loc (loc, NOP_EXPR, etype, ops2[0]);
         else
           res = ops2[0];
         ops1[0] = res;
       }
       ops1[1] = lo;
       res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10589, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
       res_op0 = res;
            }
            tree res_op1;
            res_op1 = hi;
            tree res;
            res = fold_build2_loc (loc, LE_EXPR, type, res_op0, res_op1);
            return res;
          }
        else
          {
            if (((non_type_check ((captures[2]), "generic-match.c", 10600, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10600 "generic-match.c" 3 4
                                                       __null
# 10600 "generic-match.c"
                                                                ;
            if (((non_type_check ((captures[3]), "generic-match.c", 10601, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 10601 "generic-match.c" 3 4
                                                       __null
# 10601 "generic-match.c"
                                                                ;
            if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1342, %s:%d\n", "generic-match.c", 10602);
            tree res_op0;
            {
       tree ops1[2], res;
       {
         tree ops2[1], res;
         ops2[0] = captures[1];
         if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 10609, __FUNCTION__))->typed.type) != etype)
           res = fold_build1_loc (loc, NOP_EXPR, etype, ops2[0]);
         else
           res = ops2[0];
         ops1[0] = res;
       }
       ops1[1] = lo;
       res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 10616, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
       res_op0 = res;
            }
            tree res_op1;
            res_op1 = hi;
            tree res;
            res = fold_build2_loc (loc, GT_EXPR, type, res_op0, res_op1);
            return res;
          }
      }
       }
     }
        }
    }
       }
   }
      }
  }
     }
      }
    }
  return (tree) 
# 10637 "generic-match.c" 3 4
        __null
# 10637 "generic-match.c"
                 ;
}

static tree
generic_simplify_BIT_NOT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10647, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 10648, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10653, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o21 };
  tree res = generic_simplify_153 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 10668, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o40, o20 };
  tree res = generic_simplify_153 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10683, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { o20 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1174, %s:%d\n", "generic-match.c", 10687);
   tree res;
   res = captures[0];
   return res;
 }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10696, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10701, __FUNCTION__)))));
       {

  tree captures[1] __attribute__ ((__unused__)) = { o30 };
  tree res = generic_simplify_211 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
   case MINUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10712, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 10713, __FUNCTION__)))));
       if (integer_each_onep (o31))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { o30 };
      tree res = generic_simplify_149 (loc, type, op0, captures);
      if (res) return res;
    }
         }
       break;
     }
   case PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10727, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 10728, __FUNCTION__)))));
       if (integer_all_onesp (o31))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { o30 };
      tree res = generic_simplify_226 (loc, type, op0, captures);
      if (res) return res;
    }
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10742, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 10743, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o30, o31 };
        tree res = generic_simplify_69 (loc, type, op0, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o30)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10762, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o40, o31 };
        tree res = generic_simplify_151 (loc, type, op0, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o31)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 10777, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o50, o30 };
        tree res = generic_simplify_151 (loc, type, op0, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case RSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10792, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 10793, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10798, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 10803, __FUNCTION__)))));
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o50, o31 };
       tree res = generic_simplify_229 (loc, type, op0, captures);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10818, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o40, o31 };
        tree res = generic_simplify_229 (loc, type, op0, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case LROTATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10833, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 10834, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10839, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 10844, __FUNCTION__)))));
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o50, o31 };
       tree res = generic_simplify_187 (loc, type, op0, captures, LROTATE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10859, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o40, o31 };
        tree res = generic_simplify_187 (loc, type, op0, captures, LROTATE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case RROTATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10874, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 10875, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10880, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 10885, __FUNCTION__)))));
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o50, o31 };
       tree res = generic_simplify_187 (loc, type, op0, captures, RROTATE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 10900, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o40, o31 };
        tree res = generic_simplify_187 (loc, type, op0, captures, RROTATE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10919, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { o20 };
   tree res = generic_simplify_211 (loc, type, op0, captures);
   if (res) return res;
 }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10930, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 10931, __FUNCTION__)))));
 if (integer_each_onep (o21))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_149 (loc, type, op0, captures);
       if (res) return res;
     }
   }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10945, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 10946, __FUNCTION__)))));
 if (integer_all_onesp (o21))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_226 (loc, type, op0, captures);
       if (res) return res;
     }
   }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 10960, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 10961, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
  tree res = generic_simplify_69 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 10980, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o30, o21 };
  tree res = generic_simplify_151 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 10995, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
  tree res = generic_simplify_151 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case RSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11010, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11011, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11016, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 11021, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o40, o21 };
        tree res = generic_simplify_242 (loc, type, op0, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11036, __FUNCTION__)))));
       {

  tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o30, o21 };
  tree res = generic_simplify_242 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case LROTATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11051, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11052, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11057, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 11062, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o40, o21 };
        tree res = generic_simplify_150 (loc, type, op0, captures, LROTATE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11077, __FUNCTION__)))));
       {

  tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o30, o21 };
  tree res = generic_simplify_150 (loc, type, op0, captures, LROTATE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case RROTATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11092, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11093, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11098, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 11103, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o40, o21 };
        tree res = generic_simplify_150 (loc, type, op0, captures, RROTATE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11118, __FUNCTION__)))));
       {

  tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o30, o21 };
  tree res = generic_simplify_150 (loc, type, op0, captures, RROTATE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case LT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11133, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11134, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, LT_EXPR, GE_EXPR, UNGE_EXPR);
   if (res) return res;
 }
        break;
      }
    case LE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11145, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11146, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, LE_EXPR, GT_EXPR, UNGT_EXPR);
   if (res) return res;
 }
        break;
      }
    case EQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11157, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11158, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, EQ_EXPR, NE_EXPR, NE_EXPR);
   if (res) return res;
 }
        break;
      }
    case NE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11169, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11170, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, NE_EXPR, EQ_EXPR, EQ_EXPR);
   if (res) return res;
 }
        break;
      }
    case GE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11181, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11182, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, GE_EXPR, LT_EXPR, UNLT_EXPR);
   if (res) return res;
 }
        break;
      }
    case GT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11193, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11194, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, GT_EXPR, LE_EXPR, UNLE_EXPR);
   if (res) return res;
 }
        break;
      }
    case UNORDERED_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11205, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11206, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, UNORDERED_EXPR, ORDERED_EXPR, ORDERED_EXPR);
   if (res) return res;
 }
        break;
      }
    case ORDERED_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11217, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11218, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, ORDERED_EXPR, UNORDERED_EXPR, UNORDERED_EXPR);
   if (res) return res;
 }
        break;
      }
    case UNLT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11229, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11230, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, UNLT_EXPR, GE_EXPR, GE_EXPR);
   if (res) return res;
 }
        break;
      }
    case UNLE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11241, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11242, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, UNLE_EXPR, GT_EXPR, GT_EXPR);
   if (res) return res;
 }
        break;
      }
    case UNGT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11253, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11254, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, UNGT_EXPR, LE_EXPR, LE_EXPR);
   if (res) return res;
 }
        break;
      }
    case UNGE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11265, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11266, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, UNGE_EXPR, LT_EXPR, LT_EXPR);
   if (res) return res;
 }
        break;
      }
    case UNEQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11277, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11278, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, UNEQ_EXPR, LTGT_EXPR, LTGT_EXPR);
   if (res) return res;
 }
        break;
      }
    case LTGT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11289, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11290, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_207 (loc, type, op0, captures, LTGT_EXPR, UNEQ_EXPR, UNEQ_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 11301 "generic-match.c" 3 4
        __null
# 11301 "generic-match.c"
                 ;
}

static tree
generic_simplify_ABS_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11311, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   if (((non_type_check ((op0), "generic-match.c", 11315, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 11315 "generic-match.c" 3 4
                                      __null
# 11315 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:995, %s:%d\n", "generic-match.c", 11316);
   tree res;
   res = captures[0];
   return res;
 }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11325, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { o20 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:998, %s:%d\n", "generic-match.c", 11329);
   tree res_op0;
   res_op0 = captures[0];
   tree res;
   res = fold_build1_loc (loc, ABS_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    default:;
    }
if (tree_expr_nonnegative_p (op0))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op0 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1001, %s:%d\n", "generic-match.c", 11345);
      tree res;
      res = captures[0];
      return res;
    }
  }
  return (tree) 
# 11351 "generic-match.c" 3 4
        __null
# 11351 "generic-match.c"
                 ;
}

static tree
generic_simplify_NEGATE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11361, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11362, __FUNCTION__)))));
 if (tree_negate_expr_p (o21))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_57 (loc, type, op0, captures);
       if (res) return res;
     }
   }
 if (tree_negate_expr_p (o20))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_57 (loc, type, op0, captures);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11385, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11386, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

   if ((((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 11391, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 11391, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 11391, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && !((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 11391, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW))) || (((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 11391, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) && !HONOR_SIGN_DEPENDENT_ROUNDING (type) && !HONOR_SIGNED_ZEROS (type)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1051, %s:%d\n", "generic-match.c", 11393);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = captures[0];
       tree res;
       res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11407, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11408, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

   if (((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 11413, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1055, %s:%d\n", "generic-match.c", 11415);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       res_op1 = captures[0];
       tree res;
       res = fold_build2_loc (loc, POINTER_DIFF_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11429, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11434, __FUNCTION__)))));
       {

  tree captures[1] __attribute__ ((__unused__)) = { o30 };

  if (!((tree_not_check4 ((type), "generic-match.c", 11439, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && (((tree_class_check ((type), (tcc_type), "generic-match.c", 11442, __FUNCTION__))->type_common.precision) <= ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 11442, __FUNCTION__))->type_common.precision) || (!((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 11442, __FUNCTION__))->base.u.bits.unsigned_flag) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type)), "generic-match.c", 11442, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))) && !((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 11442, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)) && !((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11442, __FUNCTION__))->typed.type)), "generic-match.c", 11442, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1666, %s:%d\n", "generic-match.c", 11444);
   tree res_op0;
   res_op0 = captures[0];
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
        }
    }
       }
       break;
     }
          default:;
          }
      if (tree_negate_expr_p (o20))
 {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };

     if (!((tree_not_check4 ((type), "generic-match.c", 11463, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
       {

  if ((((enum tree_code) (type)->base.code) == REAL_TYPE) && ((((((enum tree_code) (type)->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((type), (tcc_type), "generic-match.c", 11466, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (type) : (type)->type_common.mode)]) == MODE_DECIMAL_FLOAT)) == ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11466, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) && (((enum mode_class) mode_class[((((enum tree_code) ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11466, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 11466, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11466, __FUNCTION__))->typed.type)) : (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11466, __FUNCTION__))->typed.type))->type_common.mode)]) == MODE_DECIMAL_FLOAT)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 11466, __FUNCTION__))->type_common.precision) >= ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11466, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 11466, __FUNCTION__))->type_common.precision)) || !HONOR_SIGN_DEPENDENT_ROUNDING (type)))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1674, %s:%d\n", "generic-match.c", 11468);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 11473, __FUNCTION__))->typed.type), ops1[0]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
       }
   }
        }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_nop_convert (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      switch (((enum tree_code) (o20)->base.code))
        {
 case BIT_NOT_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11496, __FUNCTION__)))));
     {

       tree captures[1] __attribute__ ((__unused__)) = { o30 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1186, %s:%d\n", "generic-match.c", 11500);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[0];
  res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, ops1[0]);
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = build_each_one_cst (type);
       tree res;
       res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
       return res;
     }
     break;
   }
 case NEGATE_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11518, __FUNCTION__)))));
     {

       tree captures[1] __attribute__ ((__unused__)) = { o30 };

       if (!((tree_not_check4 ((type), "generic-match.c", 11523, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
  {

    if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 11526, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)) && !((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11526, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11526, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11526, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11526, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11526, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11526, __FUNCTION__))->typed.type)), "generic-match.c", 11526, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1679, %s:%d\n", "generic-match.c", 11528);
        tree res_op0;
        res_op0 = captures[0];
        tree res;
        res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
        return res;
      }
  }
     }
     break;
   }
        default:;
        }
}
}
  return (tree) 
# 11543 "generic-match.c" 3 4
        __null
# 11543 "generic-match.c"
                 ;
}

static tree
generic_simplify_CONVERT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11553, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11554, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11559, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o21 };
        tree res = generic_simplify_139 (loc, type, op0, captures, MIN_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11582, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11583, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11588, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o21 };
        tree res = generic_simplify_139 (loc, type, op0, captures, MAX_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };

    if ((0 && useless_type_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11615, __FUNCTION__))->typed.type))) || (1 && type == ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11615, __FUNCTION__))->typed.type)))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2373, %s:%d\n", "generic-match.c", 11617);
 tree res;
 res = captures[0];
 return res;
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11627, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   {

 tree inside_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 11633, __FUNCTION__))->typed.type);
 tree inter_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11634, __FUNCTION__))->typed.type);
 int inside_int = (((enum tree_code) (inside_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inside_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inside_type)->base.code) == INTEGER_TYPE);
 int inside_ptr = (((enum tree_code) (inside_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inside_type)->base.code) == REFERENCE_TYPE);
 int inside_float = ((((enum tree_code) (inside_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inside_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inside_type), (TS_TYPED), "generic-match.c", 11637, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inside_vec = (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE);
 unsigned int inside_prec = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11639, __FUNCTION__))->type_common.precision);
 int inside_unsignedp = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11640, __FUNCTION__))->base.u.bits.unsigned_flag);
 int inter_int = (((enum tree_code) (inter_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inter_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inter_type)->base.code) == INTEGER_TYPE);
 int inter_ptr = (((enum tree_code) (inter_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inter_type)->base.code) == REFERENCE_TYPE);
 int inter_float = ((((enum tree_code) (inter_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inter_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inter_type), (TS_TYPED), "generic-match.c", 11643, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inter_vec = (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE);
 unsigned int inter_prec = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 11645, __FUNCTION__))->type_common.precision);
 int inter_unsignedp = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 11646, __FUNCTION__))->base.u.bits.unsigned_flag);
 int final_int = (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE);
 int final_ptr = (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE);
 int final_float = ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 11649, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int final_vec = (((enum tree_code) (type)->base.code) == VECTOR_TYPE);
 unsigned int final_prec = ((tree_class_check ((type), (tcc_type), "generic-match.c", 11651, __FUNCTION__))->type_common.precision);
 int final_unsignedp = ((tree_class_check ((type), (tcc_type), "generic-match.c", 11652, __FUNCTION__))->base.u.bits.unsigned_flag);

       if (((0 && useless_type_conversion_p (type, inside_type)) || (1 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 11654, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11654, __FUNCTION__))->type_common.main_variant))) && (((inter_int || inter_ptr) && final_int) || (inter_float && final_float)) && inter_prec >= final_prec)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2449, %s:%d\n", "generic-match.c", 11656);
    tree res_op0;
    res_op0 = captures[1];
    tree res;
    res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
    return res;
  }
       else
  {

    if (((inter_int && inside_int) || (inter_float && inside_float)) && (final_int || final_float) && inter_prec >= inside_prec && (inter_float || inter_unsignedp == inside_unsignedp))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2460, %s:%d\n", "generic-match.c", 11668);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
        return res;
      }
    else
      {

        if (inside_int && inter_int && final_int && ((inside_prec < inter_prec && inter_prec < final_prec && inside_unsignedp && !inter_unsignedp) || final_prec == inter_prec))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2470, %s:%d\n", "generic-match.c", 11680);
     tree res_op0;
     res_op0 = captures[1];
     tree res;
     res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
     return res;
   }
        else
   {

     if (! inside_float && ! inter_float && ! final_float && ! inside_vec && ! inter_vec && ! final_vec && (inter_prec >= inside_prec || inter_prec >= final_prec) && ! (inside_int && inter_int && inter_unsignedp != inside_unsignedp && inter_prec < final_prec) && ((inter_unsignedp && inter_prec > inside_prec) == (final_unsignedp && final_prec > inter_prec)) && ! (inside_ptr && inter_prec != final_prec) && ! (final_ptr && inside_prec != inter_prec))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2493, %s:%d\n", "generic-match.c", 11692);
         tree res_op0;
         res_op0 = captures[1];
         tree res;
         res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
         return res;
       }
     else
       {

         if (0 && final_int && inter_int && inside_int && final_prec == inside_prec && final_prec > inter_prec && inter_unsignedp)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2502, %s:%d\n", "generic-match.c", 11704);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = wide_int_to_tree (inside_type, wi::mask (inter_prec, false, ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11709, __FUNCTION__))->type_common.precision)));
        res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 11710, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
         else
    {

      if (0 && inside_int && inter_float && final_int && (unsigned) significand_size (((((enum tree_code) ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 11720, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (inter_type) : (inter_type)->type_common.mode)) >= inside_prec - !inside_unsignedp)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2514, %s:%d\n", "generic-match.c", 11722);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          return res;
        }
    }
       }
   }
      }
  }
   }
 }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11740, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   {

 tree inside_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 11746, __FUNCTION__))->typed.type);
 tree inter_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11747, __FUNCTION__))->typed.type);
 int inside_int = (((enum tree_code) (inside_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inside_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inside_type)->base.code) == INTEGER_TYPE);
 int inside_ptr = (((enum tree_code) (inside_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inside_type)->base.code) == REFERENCE_TYPE);
 int inside_float = ((((enum tree_code) (inside_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inside_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inside_type), (TS_TYPED), "generic-match.c", 11750, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inside_vec = (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE);
 unsigned int inside_prec = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11752, __FUNCTION__))->type_common.precision);
 int inside_unsignedp = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11753, __FUNCTION__))->base.u.bits.unsigned_flag);
 int inter_int = (((enum tree_code) (inter_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inter_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inter_type)->base.code) == INTEGER_TYPE);
 int inter_ptr = (((enum tree_code) (inter_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inter_type)->base.code) == REFERENCE_TYPE);
 int inter_float = ((((enum tree_code) (inter_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inter_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inter_type), (TS_TYPED), "generic-match.c", 11756, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inter_vec = (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE);
 unsigned int inter_prec = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 11758, __FUNCTION__))->type_common.precision);
 int inter_unsignedp = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 11759, __FUNCTION__))->base.u.bits.unsigned_flag);
 int final_int = (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE);
 int final_ptr = (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE);
 int final_float = ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 11762, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int final_vec = (((enum tree_code) (type)->base.code) == VECTOR_TYPE);
 unsigned int final_prec = ((tree_class_check ((type), (tcc_type), "generic-match.c", 11764, __FUNCTION__))->type_common.precision);
 int final_unsignedp = ((tree_class_check ((type), (tcc_type), "generic-match.c", 11765, __FUNCTION__))->base.u.bits.unsigned_flag);

       if (((0 && useless_type_conversion_p (type, inside_type)) || (1 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 11767, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11767, __FUNCTION__))->type_common.main_variant))) && (((inter_int || inter_ptr) && final_int) || (inter_float && final_float)) && inter_prec >= final_prec)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2449, %s:%d\n", "generic-match.c", 11769);
    tree res_op0;
    res_op0 = captures[1];
    tree res;
    res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
    return res;
  }
       else
  {

    if (((inter_int && inside_int) || (inter_float && inside_float)) && (final_int || final_float) && inter_prec >= inside_prec && (inter_float || inter_unsignedp == inside_unsignedp))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2460, %s:%d\n", "generic-match.c", 11781);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
        return res;
      }
    else
      {

        if (inside_int && inter_int && final_int && ((inside_prec < inter_prec && inter_prec < final_prec && inside_unsignedp && !inter_unsignedp) || final_prec == inter_prec))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2470, %s:%d\n", "generic-match.c", 11793);
     tree res_op0;
     res_op0 = captures[1];
     tree res;
     res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
     return res;
   }
        else
   {

     if (! inside_float && ! inter_float && ! final_float && ! inside_vec && ! inter_vec && ! final_vec && (inter_prec >= inside_prec || inter_prec >= final_prec) && ! (inside_int && inter_int && inter_unsignedp != inside_unsignedp && inter_prec < final_prec) && ((inter_unsignedp && inter_prec > inside_prec) == (final_unsignedp && final_prec > inter_prec)) && ! (inside_ptr && inter_prec != final_prec) && ! (final_ptr && inside_prec != inter_prec))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2493, %s:%d\n", "generic-match.c", 11805);
         tree res_op0;
         res_op0 = captures[1];
         tree res;
         res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
         return res;
       }
     else
       {

         if (0 && final_int && inter_int && inside_int && final_prec == inside_prec && final_prec > inter_prec && inter_unsignedp)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2502, %s:%d\n", "generic-match.c", 11817);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = wide_int_to_tree (inside_type, wi::mask (inter_prec, false, ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 11822, __FUNCTION__))->type_common.precision)));
        res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 11823, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
         else
    {

      if (0 && inside_int && inter_float && final_int && (unsigned) significand_size (((((enum tree_code) ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 11833, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (inter_type) : (inter_type)->type_common.mode)) >= inside_prec - !inside_unsignedp)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2514, %s:%d\n", "generic-match.c", 11835);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          return res;
        }
    }
       }
   }
      }
  }
   }
 }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11853, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11854, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

  if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11863, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11863, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11863, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 11863, __FUNCTION__))->type_common.precision) <= ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11863, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 11863, __FUNCTION__))->type_common.precision) && operand_equal_p (captures[1], build_low_bits_mask (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 11863, __FUNCTION__))->typed.type), ((tree_class_check ((type), (tcc_type), "generic-match.c", 11863, __FUNCTION__))->type_common.precision)), 0))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2526, %s:%d\n", "generic-match.c", 11865);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      if (((non_type_check ((captures[1]), "generic-match.c", 11870, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
       }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11883, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11884, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11889, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 11894, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o21, o50 };
        tree res = generic_simplify_76 (loc, type, op0, captures, PLUS_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       {

  tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o21, o21 };
  tree res = generic_simplify_265 (loc, type, op0, captures, PLUS_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11919, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 11920, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 11925, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 11930, __FUNCTION__)))));
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o21, o50 };
        tree res = generic_simplify_76 (loc, type, op0, captures, MINUS_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       {

  tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o21, o21 };
  tree res = generic_simplify_265 (loc, type, op0, captures, MINUS_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 11955 "generic-match.c" 3 4
        __null
# 11955 "generic-match.c"
                 ;
}

static tree
generic_simplify_VIEW_CONVERT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };

    if ((0 && useless_type_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11965, __FUNCTION__))->typed.type))) || (1 && type == ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11965, __FUNCTION__))->typed.type)))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2373, %s:%d\n", "generic-match.c", 11967);
 tree res;
 res = captures[0];
 return res;
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case VIEW_CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 11977, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { o20 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2378, %s:%d\n", "generic-match.c", 11981);
   tree res_op0;
   res_op0 = captures[0];
   tree res;
   res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    default:;
    }
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };

    if (((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE)) && ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11996, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11996, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11996, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11996, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11996, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 11996, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 11996, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 11996, __FUNCTION__))->type_common.precision))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2387, %s:%d\n", "generic-match.c", 11998);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
 return res;
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12010, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };

   if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)) && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->type_common.size) == ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->type_common.size) && (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->type_common.precision) || (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->type_common.precision) > ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->type_common.precision) && ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12015, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 12015, __FUNCTION__))->base.u.bits.unsigned_flag))))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2399, %s:%d\n", "generic-match.c", 12017);
       tree res_op0;
       res_op0 = captures[1];
       tree res;
       res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
       return res;
     }
 }
        break;
      }
    default:;
    }
  return (tree) 
# 12029 "generic-match.c" 3 4
        __null
# 12029 "generic-match.c"
                 ;
}

static tree
generic_simplify_FLOAT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };

    if ((0 && useless_type_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12039, __FUNCTION__))->typed.type))) || (1 && type == ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12039, __FUNCTION__))->typed.type)))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2373, %s:%d\n", "generic-match.c", 12041);
 tree res;
 res = captures[0];
 return res;
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12051, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   {

 tree inside_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12057, __FUNCTION__))->typed.type);
 tree inter_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12058, __FUNCTION__))->typed.type);
 int inside_int = (((enum tree_code) (inside_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inside_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inside_type)->base.code) == INTEGER_TYPE);
 int inside_ptr = (((enum tree_code) (inside_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inside_type)->base.code) == REFERENCE_TYPE);
 int inside_float = ((((enum tree_code) (inside_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inside_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inside_type), (TS_TYPED), "generic-match.c", 12061, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inside_vec = (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE);
 unsigned int inside_prec = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12063, __FUNCTION__))->type_common.precision);
 int inside_unsignedp = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12064, __FUNCTION__))->base.u.bits.unsigned_flag);
 int inter_int = (((enum tree_code) (inter_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inter_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inter_type)->base.code) == INTEGER_TYPE);
 int inter_ptr = (((enum tree_code) (inter_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inter_type)->base.code) == REFERENCE_TYPE);
 int inter_float = ((((enum tree_code) (inter_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inter_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inter_type), (TS_TYPED), "generic-match.c", 12067, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inter_vec = (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE);
 unsigned int inter_prec = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12069, __FUNCTION__))->type_common.precision);
 int inter_unsignedp = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12070, __FUNCTION__))->base.u.bits.unsigned_flag);
 int final_int = (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE);
 int final_ptr = (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE);
 int final_float = ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 12073, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int final_vec = (((enum tree_code) (type)->base.code) == VECTOR_TYPE);
 unsigned int final_prec = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12075, __FUNCTION__))->type_common.precision);
 int final_unsignedp = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12076, __FUNCTION__))->base.u.bits.unsigned_flag);

       if (((0 && useless_type_conversion_p (type, inside_type)) || (1 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 12078, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12078, __FUNCTION__))->type_common.main_variant))) && (((inter_int || inter_ptr) && final_int) || (inter_float && final_float)) && inter_prec >= final_prec)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2449, %s:%d\n", "generic-match.c", 12080);
    tree res_op0;
    res_op0 = captures[1];
    tree res;
    res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
    return res;
  }
       else
  {

    if (((inter_int && inside_int) || (inter_float && inside_float)) && (final_int || final_float) && inter_prec >= inside_prec && (inter_float || inter_unsignedp == inside_unsignedp))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2460, %s:%d\n", "generic-match.c", 12092);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
        return res;
      }
    else
      {

        if (inside_int && inter_int && final_int && ((inside_prec < inter_prec && inter_prec < final_prec && inside_unsignedp && !inter_unsignedp) || final_prec == inter_prec))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2470, %s:%d\n", "generic-match.c", 12104);
     tree res_op0;
     res_op0 = captures[1];
     tree res;
     res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
     return res;
   }
        else
   {

     if (! inside_float && ! inter_float && ! final_float && ! inside_vec && ! inter_vec && ! final_vec && (inter_prec >= inside_prec || inter_prec >= final_prec) && ! (inside_int && inter_int && inter_unsignedp != inside_unsignedp && inter_prec < final_prec) && ((inter_unsignedp && inter_prec > inside_prec) == (final_unsignedp && final_prec > inter_prec)) && ! (inside_ptr && inter_prec != final_prec) && ! (final_ptr && inside_prec != inter_prec))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2493, %s:%d\n", "generic-match.c", 12116);
         tree res_op0;
         res_op0 = captures[1];
         tree res;
         res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
         return res;
       }
     else
       {

         if (0 && final_int && inter_int && inside_int && final_prec == inside_prec && final_prec > inter_prec && inter_unsignedp)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2502, %s:%d\n", "generic-match.c", 12128);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = wide_int_to_tree (inside_type, wi::mask (inter_prec, false, ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12133, __FUNCTION__))->type_common.precision)));
        res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12134, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
         else
    {

      if (0 && inside_int && inter_float && final_int && (unsigned) significand_size (((((enum tree_code) ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12144, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (inter_type) : (inter_type)->type_common.mode)) >= inside_prec - !inside_unsignedp)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2514, %s:%d\n", "generic-match.c", 12146);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          return res;
        }
    }
       }
   }
      }
  }
   }
 }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12164, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   {

 tree inside_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12170, __FUNCTION__))->typed.type);
 tree inter_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12171, __FUNCTION__))->typed.type);
 int inside_int = (((enum tree_code) (inside_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inside_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inside_type)->base.code) == INTEGER_TYPE);
 int inside_ptr = (((enum tree_code) (inside_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inside_type)->base.code) == REFERENCE_TYPE);
 int inside_float = ((((enum tree_code) (inside_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inside_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inside_type), (TS_TYPED), "generic-match.c", 12174, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inside_vec = (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE);
 unsigned int inside_prec = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12176, __FUNCTION__))->type_common.precision);
 int inside_unsignedp = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12177, __FUNCTION__))->base.u.bits.unsigned_flag);
 int inter_int = (((enum tree_code) (inter_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inter_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inter_type)->base.code) == INTEGER_TYPE);
 int inter_ptr = (((enum tree_code) (inter_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inter_type)->base.code) == REFERENCE_TYPE);
 int inter_float = ((((enum tree_code) (inter_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inter_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inter_type), (TS_TYPED), "generic-match.c", 12180, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inter_vec = (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE);
 unsigned int inter_prec = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12182, __FUNCTION__))->type_common.precision);
 int inter_unsignedp = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12183, __FUNCTION__))->base.u.bits.unsigned_flag);
 int final_int = (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE);
 int final_ptr = (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE);
 int final_float = ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 12186, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int final_vec = (((enum tree_code) (type)->base.code) == VECTOR_TYPE);
 unsigned int final_prec = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12188, __FUNCTION__))->type_common.precision);
 int final_unsignedp = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12189, __FUNCTION__))->base.u.bits.unsigned_flag);

       if (((0 && useless_type_conversion_p (type, inside_type)) || (1 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 12191, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12191, __FUNCTION__))->type_common.main_variant))) && (((inter_int || inter_ptr) && final_int) || (inter_float && final_float)) && inter_prec >= final_prec)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2449, %s:%d\n", "generic-match.c", 12193);
    tree res_op0;
    res_op0 = captures[1];
    tree res;
    res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
    return res;
  }
       else
  {

    if (((inter_int && inside_int) || (inter_float && inside_float)) && (final_int || final_float) && inter_prec >= inside_prec && (inter_float || inter_unsignedp == inside_unsignedp))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2460, %s:%d\n", "generic-match.c", 12205);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
        return res;
      }
    else
      {

        if (inside_int && inter_int && final_int && ((inside_prec < inter_prec && inter_prec < final_prec && inside_unsignedp && !inter_unsignedp) || final_prec == inter_prec))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2470, %s:%d\n", "generic-match.c", 12217);
     tree res_op0;
     res_op0 = captures[1];
     tree res;
     res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
     return res;
   }
        else
   {

     if (! inside_float && ! inter_float && ! final_float && ! inside_vec && ! inter_vec && ! final_vec && (inter_prec >= inside_prec || inter_prec >= final_prec) && ! (inside_int && inter_int && inter_unsignedp != inside_unsignedp && inter_prec < final_prec) && ((inter_unsignedp && inter_prec > inside_prec) == (final_unsignedp && final_prec > inter_prec)) && ! (inside_ptr && inter_prec != final_prec) && ! (final_ptr && inside_prec != inter_prec))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2493, %s:%d\n", "generic-match.c", 12229);
         tree res_op0;
         res_op0 = captures[1];
         tree res;
         res = fold_build1_loc (loc, FLOAT_EXPR, type, res_op0);
         return res;
       }
     else
       {

         if (0 && final_int && inter_int && inside_int && final_prec == inside_prec && final_prec > inter_prec && inter_unsignedp)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2502, %s:%d\n", "generic-match.c", 12241);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = wide_int_to_tree (inside_type, wi::mask (inter_prec, false, ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12246, __FUNCTION__))->type_common.precision)));
        res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12247, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
         else
    {

      if (0 && inside_int && inter_float && final_int && (unsigned) significand_size (((((enum tree_code) ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12257, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (inter_type) : (inter_type)->type_common.mode)) >= inside_prec - !inside_unsignedp)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2514, %s:%d\n", "generic-match.c", 12259);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          return res;
        }
    }
       }
   }
      }
  }
   }
 }
        break;
      }
    default:;
    }
  return (tree) 
# 12277 "generic-match.c" 3 4
        __null
# 12277 "generic-match.c"
                 ;
}

static tree
generic_simplify_FIX_TRUNC_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  {

    tree captures[1] __attribute__ ((__unused__)) = { op0 };

    if ((0 && useless_type_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12287, __FUNCTION__))->typed.type))) || (1 && type == ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12287, __FUNCTION__))->typed.type)))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2373, %s:%d\n", "generic-match.c", 12289);
 tree res;
 res = captures[0];
 return res;
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12299, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   {

 tree inside_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12305, __FUNCTION__))->typed.type);
 tree inter_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12306, __FUNCTION__))->typed.type);
 int inside_int = (((enum tree_code) (inside_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inside_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inside_type)->base.code) == INTEGER_TYPE);
 int inside_ptr = (((enum tree_code) (inside_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inside_type)->base.code) == REFERENCE_TYPE);
 int inside_float = ((((enum tree_code) (inside_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inside_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inside_type), (TS_TYPED), "generic-match.c", 12309, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inside_vec = (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE);
 unsigned int inside_prec = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12311, __FUNCTION__))->type_common.precision);
 int inside_unsignedp = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12312, __FUNCTION__))->base.u.bits.unsigned_flag);
 int inter_int = (((enum tree_code) (inter_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inter_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inter_type)->base.code) == INTEGER_TYPE);
 int inter_ptr = (((enum tree_code) (inter_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inter_type)->base.code) == REFERENCE_TYPE);
 int inter_float = ((((enum tree_code) (inter_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inter_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inter_type), (TS_TYPED), "generic-match.c", 12315, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inter_vec = (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE);
 unsigned int inter_prec = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12317, __FUNCTION__))->type_common.precision);
 int inter_unsignedp = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12318, __FUNCTION__))->base.u.bits.unsigned_flag);
 int final_int = (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE);
 int final_ptr = (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE);
 int final_float = ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 12321, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int final_vec = (((enum tree_code) (type)->base.code) == VECTOR_TYPE);
 unsigned int final_prec = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12323, __FUNCTION__))->type_common.precision);
 int final_unsignedp = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12324, __FUNCTION__))->base.u.bits.unsigned_flag);

       if (((0 && useless_type_conversion_p (type, inside_type)) || (1 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 12326, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12326, __FUNCTION__))->type_common.main_variant))) && (((inter_int || inter_ptr) && final_int) || (inter_float && final_float)) && inter_prec >= final_prec)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2449, %s:%d\n", "generic-match.c", 12328);
    tree res_op0;
    res_op0 = captures[1];
    tree res;
    res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
    return res;
  }
       else
  {

    if (((inter_int && inside_int) || (inter_float && inside_float)) && (final_int || final_float) && inter_prec >= inside_prec && (inter_float || inter_unsignedp == inside_unsignedp))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2460, %s:%d\n", "generic-match.c", 12340);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
        return res;
      }
    else
      {

        if (inside_int && inter_int && final_int && ((inside_prec < inter_prec && inter_prec < final_prec && inside_unsignedp && !inter_unsignedp) || final_prec == inter_prec))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2470, %s:%d\n", "generic-match.c", 12352);
     tree res_op0;
     res_op0 = captures[1];
     tree res;
     res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
     return res;
   }
        else
   {

     if (! inside_float && ! inter_float && ! final_float && ! inside_vec && ! inter_vec && ! final_vec && (inter_prec >= inside_prec || inter_prec >= final_prec) && ! (inside_int && inter_int && inter_unsignedp != inside_unsignedp && inter_prec < final_prec) && ((inter_unsignedp && inter_prec > inside_prec) == (final_unsignedp && final_prec > inter_prec)) && ! (inside_ptr && inter_prec != final_prec) && ! (final_ptr && inside_prec != inter_prec))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2493, %s:%d\n", "generic-match.c", 12364);
         tree res_op0;
         res_op0 = captures[1];
         tree res;
         res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
         return res;
       }
     else
       {

         if (0 && final_int && inter_int && inside_int && final_prec == inside_prec && final_prec > inter_prec && inter_unsignedp)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2502, %s:%d\n", "generic-match.c", 12376);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = wide_int_to_tree (inside_type, wi::mask (inter_prec, false, ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12381, __FUNCTION__))->type_common.precision)));
        res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12382, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
         else
    {

      if (0 && inside_int && inter_float && final_int && (unsigned) significand_size (((((enum tree_code) ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12392, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (inter_type) : (inter_type)->type_common.mode)) >= inside_prec - !inside_unsignedp)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2514, %s:%d\n", "generic-match.c", 12394);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          return res;
        }
    }
       }
   }
      }
  }
   }
 }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12412, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   {

 tree inside_type = ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 12418, __FUNCTION__))->typed.type);
 tree inter_type = ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 12419, __FUNCTION__))->typed.type);
 int inside_int = (((enum tree_code) (inside_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inside_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inside_type)->base.code) == INTEGER_TYPE);
 int inside_ptr = (((enum tree_code) (inside_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inside_type)->base.code) == REFERENCE_TYPE);
 int inside_float = ((((enum tree_code) (inside_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inside_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inside_type), (TS_TYPED), "generic-match.c", 12422, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inside_vec = (((enum tree_code) (inside_type)->base.code) == VECTOR_TYPE);
 unsigned int inside_prec = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12424, __FUNCTION__))->type_common.precision);
 int inside_unsignedp = ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12425, __FUNCTION__))->base.u.bits.unsigned_flag);
 int inter_int = (((enum tree_code) (inter_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (inter_type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (inter_type)->base.code) == INTEGER_TYPE);
 int inter_ptr = (((enum tree_code) (inter_type)->base.code) == POINTER_TYPE || ((enum tree_code) (inter_type)->base.code) == REFERENCE_TYPE);
 int inter_float = ((((enum tree_code) (inter_type)->base.code) == REAL_TYPE) || ((((enum tree_code) (inter_type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((inter_type), (TS_TYPED), "generic-match.c", 12428, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int inter_vec = (((enum tree_code) (inter_type)->base.code) == VECTOR_TYPE);
 unsigned int inter_prec = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12430, __FUNCTION__))->type_common.precision);
 int inter_unsignedp = ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12431, __FUNCTION__))->base.u.bits.unsigned_flag);
 int final_int = (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE);
 int final_ptr = (((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE);
 int final_float = ((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 12434, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)));
 int final_vec = (((enum tree_code) (type)->base.code) == VECTOR_TYPE);
 unsigned int final_prec = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12436, __FUNCTION__))->type_common.precision);
 int final_unsignedp = ((tree_class_check ((type), (tcc_type), "generic-match.c", 12437, __FUNCTION__))->base.u.bits.unsigned_flag);

       if (((0 && useless_type_conversion_p (type, inside_type)) || (1 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 12439, __FUNCTION__))->type_common.main_variant) == ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12439, __FUNCTION__))->type_common.main_variant))) && (((inter_int || inter_ptr) && final_int) || (inter_float && final_float)) && inter_prec >= final_prec)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2449, %s:%d\n", "generic-match.c", 12441);
    tree res_op0;
    res_op0 = captures[1];
    tree res;
    res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
    return res;
  }
       else
  {

    if (((inter_int && inside_int) || (inter_float && inside_float)) && (final_int || final_float) && inter_prec >= inside_prec && (inter_float || inter_unsignedp == inside_unsignedp))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2460, %s:%d\n", "generic-match.c", 12453);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
        return res;
      }
    else
      {

        if (inside_int && inter_int && final_int && ((inside_prec < inter_prec && inter_prec < final_prec && inside_unsignedp && !inter_unsignedp) || final_prec == inter_prec))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2470, %s:%d\n", "generic-match.c", 12465);
     tree res_op0;
     res_op0 = captures[1];
     tree res;
     res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
     return res;
   }
        else
   {

     if (! inside_float && ! inter_float && ! final_float && ! inside_vec && ! inter_vec && ! final_vec && (inter_prec >= inside_prec || inter_prec >= final_prec) && ! (inside_int && inter_int && inter_unsignedp != inside_unsignedp && inter_prec < final_prec) && ((inter_unsignedp && inter_prec > inside_prec) == (final_unsignedp && final_prec > inter_prec)) && ! (inside_ptr && inter_prec != final_prec) && ! (final_ptr && inside_prec != inter_prec))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2493, %s:%d\n", "generic-match.c", 12477);
         tree res_op0;
         res_op0 = captures[1];
         tree res;
         res = fold_build1_loc (loc, FIX_TRUNC_EXPR, type, res_op0);
         return res;
       }
     else
       {

         if (0 && final_int && inter_int && inside_int && final_prec == inside_prec && final_prec > inter_prec && inter_unsignedp)
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2502, %s:%d\n", "generic-match.c", 12489);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = wide_int_to_tree (inside_type, wi::mask (inter_prec, false, ((tree_class_check ((inside_type), (tcc_type), "generic-match.c", 12494, __FUNCTION__))->type_common.precision)));
        res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12495, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
         else
    {

      if (0 && inside_int && inter_float && final_int && (unsigned) significand_size (((((enum tree_code) ((tree_class_check ((inter_type), (tcc_type), "generic-match.c", 12505, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (inter_type) : (inter_type)->type_common.mode)) >= inside_prec - !inside_unsignedp)
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2514, %s:%d\n", "generic-match.c", 12507);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          return res;
        }
    }
       }
   }
      }
  }
   }
 }
        break;
      }
    default:;
    }
  return (tree) 
# 12525 "generic-match.c" 3 4
        __null
# 12525 "generic-match.c"
                 ;
}

static tree
generic_simplify_PAREN_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case PAREN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12535, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
   if (((non_type_check ((op0), "generic-match.c", 12539, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 12539 "generic-match.c" 3 4
                                      __null
# 12539 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2408, %s:%d\n", "generic-match.c", 12540);
   tree res;
   res = captures[0];
   return res;
 }
        break;
      }
    default:;
    }
if ((tree_code_type[(int) (((enum tree_code) (op0)->base.code))] == tcc_constant))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op0 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2405, %s:%d\n", "generic-match.c", 12554);
      tree res;
      res = captures[0];
      return res;
    }
  }
  return (tree) 
# 12560 "generic-match.c" 3 4
        __null
# 12560 "generic-match.c"
                 ;
}

static tree
generic_simplify_REALPART_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case COMPLEX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12570, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 12571, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2592, %s:%d\n", "generic-match.c", 12575);
   tree res;
   res = captures[0];
   if (((non_type_check ((captures[1]), "generic-match.c", 12578, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12586, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CONJ_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 12591, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2600, %s:%d\n", "generic-match.c", 12595);
  tree res_op0;
  {
    tree ops1[1], res;
    ops1[0] = captures[2];
    res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12600, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12600, __FUNCTION__))->typed.type), ops1[0]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  return res;
       }
       break;
     }
   case PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 12611, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 12612, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
  const enum tree_code op = PLUS_EXPR;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 12617);
  tree res_op0;
  {
    tree ops1[2], res;
    {
      tree ops2[1], res;
      ops2[0] = captures[2];
      res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12624, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12624, __FUNCTION__))->typed.type), ops2[0]);
      ops1[0] = res;
    }
    {
      tree ops2[1], res;
      ops2[0] = captures[3];
      res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12630, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12630, __FUNCTION__))->typed.type), ops2[0]);
      ops1[1] = res;
    }
    res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12633, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  return res;
       }
       break;
     }
   case MINUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 12644, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 12645, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
  const enum tree_code op = MINUS_EXPR;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 12650);
  tree res_op0;
  {
    tree ops1[2], res;
    {
      tree ops2[1], res;
      ops2[0] = captures[2];
      res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12657, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12657, __FUNCTION__))->typed.type), ops2[0]);
      ops1[0] = res;
    }
    {
      tree ops2[1], res;
      ops2[0] = captures[3];
      res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12663, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12663, __FUNCTION__))->typed.type), ops2[0]);
      ops1[1] = res;
    }
    res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12666, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  return res;
       }
       break;
     }
   case CALL_EXPR:
     switch (get_call_combined_fn (o20))
       {
       case CFN_BUILT_IN_CEXPIF:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 12680, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 12680, __FUNCTION__)))));
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2611, %s:%d\n", "generic-match.c", 12684);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        {
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COSF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12690, __FUNCTION__))->typed.type), 1, ops1[0]);
          if (!res)
            return (tree) 
# 12692 "generic-match.c" 3 4
                  __null
# 12692 "generic-match.c"
                           ;
        }
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
           break;
         }
       case CFN_BUILT_IN_CEXPI:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 12704, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 12704, __FUNCTION__)))));
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2611, %s:%d\n", "generic-match.c", 12708);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        {
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COS, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12714, __FUNCTION__))->typed.type), 1, ops1[0]);
          if (!res)
            return (tree) 
# 12716 "generic-match.c" 3 4
                  __null
# 12716 "generic-match.c"
                           ;
        }
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
           break;
         }
       case CFN_BUILT_IN_CEXPIL:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 12728, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 12728, __FUNCTION__)))));
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2611, %s:%d\n", "generic-match.c", 12732);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        {
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COSL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12738, __FUNCTION__))->typed.type), 1, ops1[0]);
          if (!res)
            return (tree) 
# 12740 "generic-match.c" 3 4
                  __null
# 12740 "generic-match.c"
                           ;
        }
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    case CONJ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12759, __FUNCTION__)))));
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2600, %s:%d\n", "generic-match.c", 12763);
   tree res_op0;
   {
     tree ops1[1], res;
     ops1[0] = captures[2];
     res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12768, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12768, __FUNCTION__))->typed.type), ops1[0]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12779, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 12780, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, o20, o21 };
   const enum tree_code op = PLUS_EXPR;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 12785);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12792, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12792, __FUNCTION__))->typed.type), ops2[0]);
       ops1[0] = res;
     }
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12798, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12798, __FUNCTION__))->typed.type), ops2[0]);
       ops1[1] = res;
     }
     res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12801, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12812, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 12813, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, o20, o21 };
   const enum tree_code op = MINUS_EXPR;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 12818);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12825, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12825, __FUNCTION__))->typed.type), ops2[0]);
       ops1[0] = res;
     }
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12831, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12831, __FUNCTION__))->typed.type), ops2[0]);
       ops1[1] = res;
     }
     res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12834, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_CEXPIF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 12848, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 12848, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2611, %s:%d\n", "generic-match.c", 12852);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  {
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COSF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12858, __FUNCTION__))->typed.type), 1, ops1[0]);
    if (!res)
      return (tree) 
# 12860 "generic-match.c" 3 4
            __null
# 12860 "generic-match.c"
                     ;
  }
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
     break;
   }
 case CFN_BUILT_IN_CEXPI:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 12872, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 12872, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2611, %s:%d\n", "generic-match.c", 12876);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  {
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COS, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12882, __FUNCTION__))->typed.type), 1, ops1[0]);
    if (!res)
      return (tree) 
# 12884 "generic-match.c" 3 4
            __null
# 12884 "generic-match.c"
                     ;
  }
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
     break;
   }
 case CFN_BUILT_IN_CEXPIL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 12896, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 12896, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2611, %s:%d\n", "generic-match.c", 12900);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  {
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COSL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12906, __FUNCTION__))->typed.type), 1, ops1[0]);
    if (!res)
      return (tree) 
# 12908 "generic-match.c" 3 4
            __null
# 12908 "generic-match.c"
                     ;
  }
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  return (tree) 
# 12923 "generic-match.c" 3 4
        __null
# 12923 "generic-match.c"
                 ;
}

static tree
generic_simplify_IMAGPART_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case COMPLEX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12933, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 12934, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2595, %s:%d\n", "generic-match.c", 12938);
   tree res;
   res = captures[1];
   if (((non_type_check ((captures[0]), "generic-match.c", 12941, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 12949, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CONJ_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 12954, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2603, %s:%d\n", "generic-match.c", 12958);
  tree res_op0;
  {
    tree ops1[1], res;
    {
      tree ops2[1], res;
      ops2[0] = captures[2];
      res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12965, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12965, __FUNCTION__))->typed.type), ops2[0]);
      ops1[0] = res;
    }
    res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 12968, __FUNCTION__))->typed.type), ops1[0]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  return res;
       }
       break;
     }
   case PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 12979, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 12980, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
  const enum tree_code op = PLUS_EXPR;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 12985);
  tree res_op0;
  {
    tree ops1[2], res;
    {
      tree ops2[1], res;
      ops2[0] = captures[2];
      res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12992, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12992, __FUNCTION__))->typed.type), ops2[0]);
      ops1[0] = res;
    }
    {
      tree ops2[1], res;
      ops2[0] = captures[3];
      res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 12998, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 12998, __FUNCTION__))->typed.type), ops2[0]);
      ops1[1] = res;
    }
    res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13001, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  return res;
       }
       break;
     }
   case MINUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 13012, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 13013, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
  const enum tree_code op = MINUS_EXPR;
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 13018);
  tree res_op0;
  {
    tree ops1[2], res;
    {
      tree ops2[1], res;
      ops2[0] = captures[2];
      res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13025, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13025, __FUNCTION__))->typed.type), ops2[0]);
      ops1[0] = res;
    }
    {
      tree ops2[1], res;
      ops2[0] = captures[3];
      res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13031, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13031, __FUNCTION__))->typed.type), ops2[0]);
      ops1[1] = res;
    }
    res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13034, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
  return res;
       }
       break;
     }
   case CALL_EXPR:
     switch (get_call_combined_fn (o20))
       {
       case CFN_BUILT_IN_CEXPIF:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 13048, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 13048, __FUNCTION__)))));
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2614, %s:%d\n", "generic-match.c", 13052);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        {
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SINF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13058, __FUNCTION__))->typed.type), 1, ops1[0]);
          if (!res)
            return (tree) 
# 13060 "generic-match.c" 3 4
                  __null
# 13060 "generic-match.c"
                           ;
        }
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
           break;
         }
       case CFN_BUILT_IN_CEXPI:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 13072, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 13072, __FUNCTION__)))));
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2614, %s:%d\n", "generic-match.c", 13076);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        {
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SIN, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13082, __FUNCTION__))->typed.type), 1, ops1[0]);
          if (!res)
            return (tree) 
# 13084 "generic-match.c" 3 4
                  __null
# 13084 "generic-match.c"
                           ;
        }
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
           break;
         }
       case CFN_BUILT_IN_CEXPIL:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 13096, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 13096, __FUNCTION__)))));
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o30 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2614, %s:%d\n", "generic-match.c", 13100);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        {
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SINL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13106, __FUNCTION__))->typed.type), 1, ops1[0]);
          if (!res)
            return (tree) 
# 13108 "generic-match.c" 3 4
                  __null
# 13108 "generic-match.c"
                           ;
        }
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      return res;
    }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    case CONJ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13127, __FUNCTION__)))));
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2603, %s:%d\n", "generic-match.c", 13131);
   tree res_op0;
   {
     tree ops1[1], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13138, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13138, __FUNCTION__))->typed.type), ops2[0]);
       ops1[0] = res;
     }
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13141, __FUNCTION__))->typed.type), ops1[0]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13152, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13153, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, o20, o21 };
   const enum tree_code op = PLUS_EXPR;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 13158);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13165, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13165, __FUNCTION__))->typed.type), ops2[0]);
       ops1[0] = res;
     }
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13171, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13171, __FUNCTION__))->typed.type), ops2[0]);
       ops1[1] = res;
     }
     res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13174, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13185, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13186, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, o20, o21 };
   const enum tree_code op = MINUS_EXPR;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2608, %s:%d\n", "generic-match.c", 13191);
   tree res_op0;
   {
     tree ops1[2], res;
     {
       tree ops2[1], res;
       ops2[0] = captures[2];
       res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13198, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13198, __FUNCTION__))->typed.type), ops2[0]);
       ops1[0] = res;
     }
     {
       tree ops2[1], res;
       ops2[0] = captures[3];
       res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13204, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 13204, __FUNCTION__))->typed.type), ops2[0]);
       ops1[1] = res;
     }
     res = fold_build2_loc (loc, op, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13207, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op0 = res;
   }
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   return res;
 }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_CEXPIF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 13221, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 13221, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2614, %s:%d\n", "generic-match.c", 13225);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  {
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SINF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13231, __FUNCTION__))->typed.type), 1, ops1[0]);
    if (!res)
      return (tree) 
# 13233 "generic-match.c" 3 4
            __null
# 13233 "generic-match.c"
                     ;
  }
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
     break;
   }
 case CFN_BUILT_IN_CEXPI:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 13245, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 13245, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2614, %s:%d\n", "generic-match.c", 13249);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  {
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SIN, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13255, __FUNCTION__))->typed.type), 1, ops1[0]);
    if (!res)
      return (tree) 
# 13257 "generic-match.c" 3 4
            __null
# 13257 "generic-match.c"
                     ;
  }
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
     break;
   }
 case CFN_BUILT_IN_CEXPIL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 13269, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 13269, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2614, %s:%d\n", "generic-match.c", 13273);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  {
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SINL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13279, __FUNCTION__))->typed.type), 1, ops1[0]);
    if (!res)
      return (tree) 
# 13281 "generic-match.c" 3 4
            __null
# 13281 "generic-match.c"
                     ;
  }
  res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       return res;
     }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  return (tree) 
# 13296 "generic-match.c" 3 4
        __null
# 13296 "generic-match.c"
                 ;
}

static tree
generic_simplify_CONJ_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13306, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CONJ_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 13311, __FUNCTION__)))));
       {

  tree captures[1] __attribute__ ((__unused__)) = { o30 };
  tree res = generic_simplify_44 (loc, type, op0, captures);
  if (res) return res;
       }
       break;
     }
   case COMPLEX_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 13322, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 13323, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
  {

 tree itype = ((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 13329, __FUNCTION__))->typed.type);
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2626, %s:%d\n", "generic-match.c", 13330);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13335, __FUNCTION__))->typed.type) != itype)
   res = fold_build1_loc (loc, NOP_EXPR, itype, ops1[0]);
        else
          res = ops1[0];
        res_op0 = res;
      }
      tree res_op1;
      {
        tree ops1[1], res;
        {
   tree ops2[1], res;
   ops2[0] = captures[3];
   if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13347, __FUNCTION__))->typed.type) != itype)
     res = fold_build1_loc (loc, NOP_EXPR, itype, ops2[0]);
   else
     res = ops2[0];
   ops1[0] = res;
        }
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13353, __FUNCTION__))->typed.type), ops1[0]);
        res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, COMPLEX_EXPR, type, res_op0, res_op1);
      return res;
  }
       }
       break;
     }
          default:;
          }
        break;
      }
    case CONJ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13369, __FUNCTION__)))));
 {

   tree captures[1] __attribute__ ((__unused__)) = { o20 };
   tree res = generic_simplify_44 (loc, type, op0, captures);
   if (res) return res;
 }
        break;
      }
    case COMPLEX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13380, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13381, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, o20, o21 };
   {

 tree itype = ((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 13387, __FUNCTION__))->typed.type);
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2626, %s:%d\n", "generic-match.c", 13388);
       tree res_op0;
       {
  tree ops1[1], res;
  ops1[0] = captures[2];
  if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13393, __FUNCTION__))->typed.type) != itype)
    res = fold_build1_loc (loc, NOP_EXPR, itype, ops1[0]);
  else
    res = ops1[0];
  res_op0 = res;
       }
       tree res_op1;
       {
  tree ops1[1], res;
  {
    tree ops2[1], res;
    ops2[0] = captures[3];
    if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 13405, __FUNCTION__))->typed.type) != itype)
      res = fold_build1_loc (loc, NOP_EXPR, itype, ops2[0]);
    else
      res = ops2[0];
    ops1[0] = res;
  }
  res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 13411, __FUNCTION__))->typed.type), ops1[0]);
  res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, COMPLEX_EXPR, type, res_op0, res_op1);
       return res;
   }
 }
        break;
      }
    default:;
    }
  return (tree) 
# 13423 "generic-match.c" 3 4
        __null
# 13423 "generic-match.c"
                 ;
}

tree
generic_simplify (location_t loc, enum tree_code code, const tree type __attribute__ ((__unused__)), tree op0)
{
  switch (code)
    {
    case BIT_NOT_EXPR:
      return generic_simplify_BIT_NOT_EXPR (loc, code, type, op0);
    case ABS_EXPR:
      return generic_simplify_ABS_EXPR (loc, code, type, op0);
    case NEGATE_EXPR:
      return generic_simplify_NEGATE_EXPR (loc, code, type, op0);
    case NOP_EXPR: case CONVERT_EXPR:
      return generic_simplify_CONVERT_EXPR (loc, code, type, op0);
    case VIEW_CONVERT_EXPR:
      return generic_simplify_VIEW_CONVERT_EXPR (loc, code, type, op0);
    case FLOAT_EXPR:
      return generic_simplify_FLOAT_EXPR (loc, code, type, op0);
    case FIX_TRUNC_EXPR:
      return generic_simplify_FIX_TRUNC_EXPR (loc, code, type, op0);
    case PAREN_EXPR:
      return generic_simplify_PAREN_EXPR (loc, code, type, op0);
    case REALPART_EXPR:
      return generic_simplify_REALPART_EXPR (loc, code, type, op0);
    case IMAGPART_EXPR:
      return generic_simplify_IMAGPART_EXPR (loc, code, type, op0);
    case CONJ_EXPR:
      return generic_simplify_CONJ_EXPR (loc, code, type, op0);
    default:;
    }
  return (tree) 
# 13455 "generic-match.c" 3 4
        __null
# 13455 "generic-match.c"
                 ;
}

static tree
generic_simplify_PLUS_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 13466, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 13466 "generic-match.c" 3 4
                                    __null
# 13466 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:99, %s:%d\n", "generic-match.c", 13467);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = non_lvalue_loc (loc, res_op0);
 return res;
      }
    }
  if (real_zerop (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_21 (loc, type, op0, op1, captures);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13488, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13489, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 13494, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13499, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13500, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 13505, __FUNCTION__)))));
     if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
       {
         if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, PLUS_EXPR);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   switch (((enum tree_code) (o61)->base.code))
     {
     case BIT_NOT_EXPR:
       {
         tree o80 = (*((const_cast<tree*> (tree_operand_check ((o61), (0), "generic-match.c", 13528, __FUNCTION__)))));
         if (o80 == o20 || (operand_equal_p (o80, o20, 0) && types_match (o80, o20)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, PLUS_EXPR);
        if (res) return res;
      }
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 13555, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13560, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13561, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 13566, __FUNCTION__)))));
     if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
       {
         if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o21, o30 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, PLUS_EXPR);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   switch (((enum tree_code) (o61)->base.code))
     {
     case BIT_NOT_EXPR:
       {
         tree o80 = (*((const_cast<tree*> (tree_operand_check ((o61), (0), "generic-match.c", 13589, __FUNCTION__)))));
         if (o80 == o21 || (operand_equal_p (o80, o21, 0) && types_match (o80, o21)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o21, o30 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, PLUS_EXPR);
        if (res) return res;
      }
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13616, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13617, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o61, o21 };
          tree res = generic_simplify_22 (loc, type, op0, op1, captures, PLUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13655, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13656, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 13661, __FUNCTION__)))));
     if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
       {
         switch (((enum tree_code) (o51)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
          tree res = generic_simplify_22 (loc, type, op0, op1, captures, PLUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
      if (integer_onep (o21))
 {
   if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
  tree res = generic_simplify_164 (loc, type, op0, op1, captures);
  if (res) return res;
       }
     }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13707, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13712, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 13717, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };
     tree res = generic_simplify_159 (loc, type, op0, op1, captures, PLUS_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 13739, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13744, __FUNCTION__)))));
      if (o50 == o30 || (operand_equal_p (o50, o30, 0) && types_match (o50, o30)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o30 };
     tree res = generic_simplify_159 (loc, type, op0, op1, captures, PLUS_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
if (real_zerop (op0))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op1, op0 };
      tree res = generic_simplify_21 (loc, type, op0, op1, captures);
      if (res) return res;
    }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13779, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_159 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13797, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_159 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13815, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13816, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     if (integer_onep (o31))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
    tree res = generic_simplify_164 (loc, type, op0, op1, captures);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13837, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13838, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13843, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13844, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_175 (loc, type, op0, op1, captures, PLUS_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13861, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13862, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_178 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13887, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 13892, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 13893, __FUNCTION__)))));
     switch (((enum tree_code) (o61)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o21, o50, o60, o61 };
      tree res = generic_simplify_122 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13916, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13917, __FUNCTION__)))));
      switch (((enum tree_code) (o51)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50, o51 };
       tree res = generic_simplify_122 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13944, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13945, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13950, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13951, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_175 (loc, type, op0, op1, captures, PLUS_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 13972, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 13973, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 13978, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 13979, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_178 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14000, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 14005, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 14006, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14015, __FUNCTION__)))));
     switch (((enum tree_code) (o60)->base.code))
       {
       case BIT_AND_EXPR:
         {
    tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 14020, __FUNCTION__)))));
    tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 14021, __FUNCTION__)))));
    switch (((enum tree_code) (o71)->base.code))
      {
      case INTEGER_CST:
        {
          {

     tree captures[6] __attribute__ ((__unused__)) = { o20, o30, o31, o60, o70, o71 };
     tree res = generic_simplify_122 (loc, type, op0, op1, captures, PLUS_EXPR);
     if (res) return res;
          }
          break;
        }
             default:;
             }
           break;
         }
       default:;
       }
            break;
          }
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14044, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14045, __FUNCTION__)))));
     switch (((enum tree_code) (o61)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[6] __attribute__ ((__unused__)) = { o20, o30, o31, op1, o60, o61 };
      tree res = generic_simplify_122 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case NEGATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 14072, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { op1, o30 };
  tree res = generic_simplify_31 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14091, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 14096, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
  tree res = generic_simplify_31 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14111, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
   tree res = generic_simplify_31 (loc, type, op0, op1, captures);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14126, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op1, o20 };
   tree res = generic_simplify_31 (loc, type, op0, op1, captures);
   if (res) return res;
 }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14137, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14138, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_213 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14152, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14153, __FUNCTION__)))));
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o51, o20 };
      tree res = generic_simplify_82 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o50, o20 };
      tree res = generic_simplify_82 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14176, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14177, __FUNCTION__)))));
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_13 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o51, o20 };
      tree res = generic_simplify_13 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if ((tree_code_type[(int) (((enum tree_code) (o20)->base.code))] == tcc_constant))
   {
     if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
    tree res = generic_simplify_186 (loc, type, op0, op1, captures, PLUS_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14220, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14221, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, op0 };
       tree res = generic_simplify_213 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14239, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14240, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14245, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14246, __FUNCTION__)))));
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_82 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_82 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14273, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14274, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14279, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14280, __FUNCTION__)))));
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_77 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o51, o20 };
      tree res = generic_simplify_77 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14307, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_94 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (integer_each_onep (op1))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_140 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_nop_convert (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      switch (((enum tree_code) (o20)->base.code))
        {
 case PLUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 14339, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 14340, __FUNCTION__)))));
     if ((tree_code_type[(int) (((enum tree_code) (o31)->base.code))] == tcc_constant))
       {
  if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
        tree res = generic_simplify_117 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, PLUS_EXPR);
        if (res) return res;
      }
    }
       }
     break;
   }
 case MINUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 14357, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 14358, __FUNCTION__)))));
     if ((tree_code_type[(int) (((enum tree_code) (o31)->base.code))] == tcc_constant))
       {
  if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
        tree res = generic_simplify_117 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, PLUS_EXPR);
        if (res) return res;
      }
    }
       }
     break;
   }
        default:;
        }
}
}
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14381, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_94 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14399, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 14404, __FUNCTION__)))));
       if (integer_each_onep (op1))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { o30 };
      tree res = generic_simplify_140 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14422, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14423, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14428, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14429, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o51 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o50 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MULT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14478, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14479, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_130 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };
       tree res = generic_simplify_130 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14506, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14507, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_267 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o20 };
       tree res = generic_simplify_267 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

   if (real_isneg (&((*((tree_check ((captures[1]), "generic-match.c", 14538, __FUNCTION__, (REAL_CST)))->real_cst.real_cst_ptr)))))
     {
       {

 tree tem = const_unop (NEGATE_EXPR, type, captures[1]);

    if (!((tree_class_check ((tem), (tcc_constant), "generic-match.c", 14544, __FUNCTION__))->base.public_flag) || !global_options.x_flag_trapping_math)
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 14546, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 14546 "generic-match.c" 3 4
                                                   __null
# 14546 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2542, %s:%d\n", "generic-match.c", 14547);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = tem;
        tree res;
        res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
        return res;
      }
       }
     }
 }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if ((((enum tree_code) (type)->base.code) == REAL_TYPE))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2548, %s:%d\n", "generic-match.c", 14571);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = build_real (type, dconst2);
     tree res;
     res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
     return res;
   }
 else
   {

     if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE))
       {
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2550, %s:%d\n", "generic-match.c", 14585);
  tree res_op0;
  res_op0 = captures[0];
  tree res_op1;
  res_op1 = build_int_cst (type, 2);
  tree res;
  res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
  return res;
       }
   }
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VIEW_CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14601, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case VEC_COND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 14606, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 14607, __FUNCTION__)))));
       tree o42 = (*((const_cast<tree*> (tree_operand_check ((o30), (2), "generic-match.c", 14608, __FUNCTION__)))));
       if (integer_each_onep (o41))
  {
    if (integer_zerop (o42))
      {
        {

   tree captures[5] __attribute__ ((__unused__)) = { op0, o30, o40, o41, o42 };
   tree res = generic_simplify_157 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case VIEW_CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14633, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case VEC_COND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 14638, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 14639, __FUNCTION__)))));
       tree o32 = (*((const_cast<tree*> (tree_operand_check ((o20), (2), "generic-match.c", 14640, __FUNCTION__)))));
       if (integer_each_onep (o31))
  {
    if (integer_zerop (o32))
      {
        {

   tree captures[5] __attribute__ ((__unused__)) = { op1, o20, o30, o31, o32 };
   tree res = generic_simplify_157 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VEC_COND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14665, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14666, __FUNCTION__)))));
 tree o32 = (*((const_cast<tree*> (tree_operand_check ((op1), (2), "generic-match.c", 14667, __FUNCTION__)))));
 if (integer_each_onep (o31))
   {
     if (integer_zerop (o32))
       {
  {

    tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o31, o32 };
    tree res = generic_simplify_157 (loc, type, op0, op1, captures);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case VEC_COND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14688, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14689, __FUNCTION__)))));
 tree o22 = (*((const_cast<tree*> (tree_operand_check ((op0), (2), "generic-match.c", 14690, __FUNCTION__)))));
 if (integer_each_onep (o21))
   {
     if (integer_zerop (o22))
       {
  {

    tree captures[5] __attribute__ ((__unused__)) = { op1, op0, o20, o21, o22 };
    tree res = generic_simplify_157 (loc, type, op0, op1, captures);
    if (res) return res;
  }
       }
   }
        break;
      }
    case RDIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14707, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14708, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case RDIV_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14713, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14714, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_43 (loc, type, op0, op1, captures, PLUS_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 14732 "generic-match.c" 3 4
        __null
# 14732 "generic-match.c"
                 ;
}

static tree
generic_simplify_POINTER_PLUS_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 14743, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 14743 "generic-match.c" 3 4
                                    __null
# 14743 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:99, %s:%d\n", "generic-match.c", 14744);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = non_lvalue_loc (loc, res_op0);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case POINTER_PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 14756, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 14757, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1544, %s:%d\n", "generic-match.c", 14761);
   tree res_op0;
   res_op0 = captures[1];
   tree res_op1;
   {
     tree ops1[2], res;
     ops1[0] = captures[2];
     ops1[1] = captures[3];
     res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 14769, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, POINTER_PLUS_EXPR, type, res_op0, res_op1);
   return res;
 }
        break;
      }
    default:;
    }
if (integer_zerop (op0))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op1 };
      if (((non_type_check ((op0), "generic-match.c", 14785, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 14785 "generic-match.c" 3 4
                                         __null
# 14785 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:104, %s:%d\n", "generic-match.c", 14786);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 14791, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res;
      res = non_lvalue_loc (loc, res_op0);
      return res;
    }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14806, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 14811, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 14812, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 14817, __FUNCTION__)))));
      switch (((enum tree_code) (o41)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 14822, __FUNCTION__)))));
     if (o70 == op0 || (operand_equal_p (o70, op0, 0) && types_match (o70, op0)))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o50 };

    if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 14829, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14829, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 14829, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14829, __FUNCTION__))->type_common.precision) && ((0 && useless_type_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 14829, __FUNCTION__))->typed.type))) || (1 && type == ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 14829, __FUNCTION__))->typed.type))))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1560, %s:%d\n", "generic-match.c", 14831);
        tree res;
        res = captures[3];
        if (((non_type_check ((captures[0]), "generic-match.c", 14834, __FUNCTION__))->base.side_effects_flag))
          res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        return res;
      }
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case POINTER_DIFF_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 14852, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 14853, __FUNCTION__)))));
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { o41, op1, o30, o40, op0 };

      if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 14860, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14860, __FUNCTION__))->type_common.precision) >= ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 14860, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14860, __FUNCTION__))->type_common.precision))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1564, %s:%d\n", "generic-match.c", 14862);
   tree res_op0;
   res_op0 = captures[3];
   tree res;
   res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
   if (((non_type_check ((captures[4]), "generic-match.c", 14867, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[4]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14881, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14882, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 14887, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 14892, __FUNCTION__)))));
      if (o60 == op0 || (operand_equal_p (o60, op0, 0) && types_match (o60, op0)))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op0, op1, op1, o40 };

     if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 14899, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14899, __FUNCTION__))->type_common.precision) == ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 14899, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14899, __FUNCTION__))->type_common.precision) && ((0 && useless_type_conversion_p (type, ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 14899, __FUNCTION__))->typed.type))) || (1 && type == ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 14899, __FUNCTION__))->typed.type))))
       {
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1560, %s:%d\n", "generic-match.c", 14901);
         tree res;
         res = captures[3];
         if (((non_type_check ((captures[0]), "generic-match.c", 14904, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
         return res;
       }
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14922, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 14923, __FUNCTION__)))));
 if (o31 == op0 || operand_equal_p (o31, op0, 0))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { o31, op1, op1, o30, op0 };

       if (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 14930, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14930, __FUNCTION__))->type_common.precision) >= ((tree_class_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 14930, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 14930, __FUNCTION__))->type_common.precision))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1564, %s:%d\n", "generic-match.c", 14932);
    tree res_op0;
    res_op0 = captures[3];
    tree res;
    res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
    if (((non_type_check ((captures[4]), "generic-match.c", 14937, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[4]), res);
    return res;
  }
     }
   }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 14947, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 14952, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 14953, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 14958, __FUNCTION__)))));
      if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
        {
   switch (((enum tree_code) (o41)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o41 };
    {

 tree algn = wide_int_to_tree (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 14970, __FUNCTION__))->typed.type), ~wi::to_wide (captures[1]));
        if (((non_type_check ((captures[1]), "generic-match.c", 14971, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 14971 "generic-match.c" 3 4
                                                   __null
# 14971 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1576, %s:%d\n", "generic-match.c", 14972);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = algn;
        tree res;
        res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
        return res;
    }
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 14999 "generic-match.c" 3 4
        __null
# 14999 "generic-match.c"
                 ;
}

static tree
generic_simplify_MINUS_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 15010, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 15010 "generic-match.c" 3 4
                                    __null
# 15010 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:99, %s:%d\n", "generic-match.c", 15011);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = non_lvalue_loc (loc, res_op0);
 return res;
      }
    }
  if (real_zerop (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

 if (fold_real_zero_addition_p (type, captures[1], 1))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:122, %s:%d\n", "generic-match.c", 15027);
     tree res_op0;
     res_op0 = captures[0];
     tree res;
     res = non_lvalue_loc (loc, res_op0);
     if (((non_type_check ((captures[1]), "generic-match.c", 15032, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     return res;
   }
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 15044, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || !HONOR_NANS (type))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:132, %s:%d\n", "generic-match.c", 15046);
     tree res;
     res = build_zero_cst (type);
     if (((non_type_check ((captures[0]), "generic-match.c", 15049, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15059, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15064, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case MULT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 15069, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 15070, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case TRUNC_DIV_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 15075, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 15076, __FUNCTION__)))));
     if (o60 == o20 || operand_equal_p (o60, o20, 0))
       {
         if (o51 == o61 || operand_equal_p (o51, o61, 0))
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { o60, o61, o20, o61 };
        tree res = generic_simplify_162 (loc, type, op0, op1, captures);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      switch (((enum tree_code) (o51)->base.code))
        {
        case TRUNC_DIV_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 15097, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o51), (1), "generic-match.c", 15098, __FUNCTION__)))));
     if (o70 == o20 || operand_equal_p (o70, o20, 0))
       {
         if (o71 == o50 || operand_equal_p (o71, o50, 0))
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { o70, o71, o20, o50 };
        tree res = generic_simplify_162 (loc, type, op0, op1, captures);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case MULT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15123, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15124, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case TRUNC_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 15129, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 15130, __FUNCTION__)))));
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   if (o41 == o51 || operand_equal_p (o41, o51, 0))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o50, o51, o20, o51 };
         tree res = generic_simplify_162 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o41)->base.code))
         {
  case TRUNC_DIV_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 15151, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o41), (1), "generic-match.c", 15152, __FUNCTION__)))));
      if (o60 == o20 || operand_equal_p (o60, o20, 0))
        {
   if (o61 == o40 || operand_equal_p (o61, o40, 0))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o60, o61, o20, o40 };
         tree res = generic_simplify_162 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15181, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case MULT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 15186, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 15187, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case TRUNC_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 15192, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 15193, __FUNCTION__)))));
      if (o50 == op0 || operand_equal_p (o50, op0, 0))
        {
   if (o41 == o51 || operand_equal_p (o41, o51, 0))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o50, o51, op0, o51 };
         tree res = generic_simplify_162 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o41)->base.code))
         {
  case TRUNC_DIV_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 15214, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o41), (1), "generic-match.c", 15215, __FUNCTION__)))));
      if (o60 == op0 || operand_equal_p (o60, op0, 0))
        {
   if (o61 == o40 || operand_equal_p (o61, o40, 0))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o60, o61, op0, o40 };
         tree res = generic_simplify_162 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15240, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15241, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case TRUNC_DIV_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 15246, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 15247, __FUNCTION__)))));
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    if (o31 == o41 || operand_equal_p (o31, o41, 0))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { o40, o41, op0, o41 };
   tree res = generic_simplify_162 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o31)->base.code))
   {
   case TRUNC_DIV_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 15268, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((o31), (1), "generic-match.c", 15269, __FUNCTION__)))));
       if (o50 == op0 || operand_equal_p (o50, op0, 0))
  {
    if (o51 == o30 || operand_equal_p (o51, o30, 0))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { o50, o51, op0, o30 };
   tree res = generic_simplify_162 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15294, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 15295, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 15300, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15305, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15306, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o40, op1 };
         tree res = generic_simplify_128 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o40, op1 };
         tree res = generic_simplify_128 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 15343, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15348, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15349, __FUNCTION__)))));
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o30, op1 };
         tree res = generic_simplify_128 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o30, op1 };
         tree res = generic_simplify_128 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15390, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15391, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };

    if (~wi::to_wide (captures[2]) == wi::to_wide (captures[4]))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:692, %s:%d\n", "generic-match.c", 15404);
        if (! tree_invariant_p (captures[4])) return (tree) 
# 15405 "generic-match.c" 3 4
                                                    __null
# 15405 "generic-match.c"
                                                             ;
        tree res_op0;
        {
          tree ops1[2], res;
          ops1[0] = captures[1];
          ops1[1] = unshare_expr (captures[4]);
          res = fold_build2_loc (loc, BIT_XOR_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 15411, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
          res_op0 = res;
        }
        tree res_op1;
        res_op1 = captures[4];
        tree res;
        res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
        if (((non_type_check ((captures[2]), "generic-match.c", 15418, __FUNCTION__))->base.side_effects_flag))
          res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
        return res;
      }
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15440, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15441, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    switch (((enum tree_code) (o51)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 15448, __FUNCTION__)))));
   if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
         tree res = generic_simplify_19 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 15467, __FUNCTION__)))));
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
         tree res = generic_simplify_19 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o20, op1 };
         tree res = generic_simplify_19 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    switch (((enum tree_code) (o51)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 15502, __FUNCTION__)))));
   if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o20, op1 };
         tree res = generic_simplify_19 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15525, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 15526, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15531, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15532, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

   if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 15541, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)) && !(!(any_integral_type_check ((type), "generic-match.c", 15541, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv) && !((tree_not_check4 ((type), "generic-match.c", 15541, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:872, %s:%d\n", "generic-match.c", 15543);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
      }
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15559, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15560, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

   if (!((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && !((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 15569, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)) && !(!(any_integral_type_check ((type), "generic-match.c", 15569, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv) && !((tree_not_check4 ((type), "generic-match.c", 15569, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:879, %s:%d\n", "generic-match.c", 15571);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15591, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 15592, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15597, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15598, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:884, %s:%d\n", "generic-match.c", 15606);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
   return res;
        }
      }
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15621, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15622, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:889, %s:%d\n", "generic-match.c", 15630);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, BIT_XOR_EXPR, type, res_op0, res_op1);
   return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (tree_negate_expr_p (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

 if (!(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1061, %s:%d\n", "generic-match.c", 15657);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     {
       tree ops1[1], res;
       ops1[0] = captures[1];
       res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 15664, __FUNCTION__))->typed.type), ops1[0]);
       res_op1 = res;
     }
     tree res;
     res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15677, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15682, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 15687, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 15688, __FUNCTION__)))));
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { o50, op1, o40, o51, o20 };
     tree res = generic_simplify_169 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o51 == o20 || operand_equal_p (o51, o20, 0))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { o51, op1, o40, o50, o20 };
     tree res = generic_simplify_169 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15715, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15716, __FUNCTION__)))));
       if (o40 == o20 || operand_equal_p (o40, o20, 0))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { o40, op1, op1, o41, o20 };
      tree res = generic_simplify_87 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o41 == o20 || operand_equal_p (o41, o20, 0))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { o41, op1, op1, o40, o20 };
      tree res = generic_simplify_87 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15747, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };

        if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15752, __FUNCTION__))->typed.type)))
   {
     {

 poly_int64 diff;

         if (ptr_difference_const (captures[0], captures[1], &diff))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1584, %s:%d\n", "generic-match.c", 15760);
      tree res;
      res = build_int_cst_type (type, diff);
      if (((non_type_check ((captures[0]), "generic-match.c", 15763, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 15765, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
     }
   }
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15784, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };

        if (tree_nop_conversion_p (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15793, __FUNCTION__))->typed.type)))
   {
     {

 poly_int64 diff;

         if (ptr_difference_const (captures[0], captures[1], &diff))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1590, %s:%d\n", "generic-match.c", 15801);
      tree res;
      res = build_int_cst_type (type, diff);
      if (((non_type_check ((captures[0]), "generic-match.c", 15804, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      if (((non_type_check ((captures[1]), "generic-match.c", 15806, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      return res;
    }
     }
   }
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15829, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 15834, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 15835, __FUNCTION__)))));
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { o40, op1, o30, o41, op0 };
      tree res = generic_simplify_169 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { o41, op1, o30, o40, op0 };
      tree res = generic_simplify_169 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15862, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15863, __FUNCTION__)))));
 if (o30 == op0 || operand_equal_p (o30, op0, 0))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { o30, op1, op1, o31, op0 };
       tree res = generic_simplify_87 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o31 == op0 || operand_equal_p (o31, op0, 0))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { o31, op1, op1, o30, op0 };
       tree res = generic_simplify_87 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15890, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 15891, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15896, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15897, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type)), "generic-match.c", 15904, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15904, __FUNCTION__))->typed.type)), "generic-match.c", 15904, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 15906);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 15913, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type)), "generic-match.c", 15925, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15925, __FUNCTION__))->typed.type)), "generic-match.c", 15925, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 15927);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 15934, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type)), "generic-match.c", 15946, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15946, __FUNCTION__))->typed.type)), "generic-match.c", 15946, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 15948);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 15955, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type)), "generic-match.c", 15967, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 15967, __FUNCTION__))->typed.type)), "generic-match.c", 15967, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 15969);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 15976, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 15990, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 15991, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 15996, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 15997, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type)), "generic-match.c", 16004, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16004, __FUNCTION__))->typed.type)), "generic-match.c", 16004, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1374, %s:%d\n", "generic-match.c", 16006);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 16013, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type)), "generic-match.c", 16025, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16025, __FUNCTION__))->typed.type)), "generic-match.c", 16025, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1401, %s:%d\n", "generic-match.c", 16027);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[0]), "generic-match.c", 16034, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16048, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16049, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16054, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16055, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type)), "generic-match.c", 16062, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && !((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 16062, __FUNCTION__))->typed.type)), "generic-match.c", 16062, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1385, %s:%d\n", "generic-match.c", 16064);
   tree res_op0;
   res_op0 = captures[1];
   tree res_op1;
   res_op1 = captures[3];
   tree res;
   res = fold_build2_loc (loc, POINTER_DIFF_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[2]), "generic-match.c", 16071, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type)), "generic-match.c", 16083, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && !((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && !((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16083, __FUNCTION__))->typed.type)), "generic-match.c", 16083, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)) && (global_options.x_flag_sanitize & SANITIZE_SI_OVERFLOW)))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1412, %s:%d\n", "generic-match.c", 16085);
   tree res_op0;
   res_op0 = captures[3];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, POINTER_DIFF_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 16092, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16110, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 16115, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
  tree res = generic_simplify_161 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16130, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
   tree res = generic_simplify_161 (loc, type, op0, op1, captures);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16145, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16146, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_245 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_245 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16169, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16170, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

       if (!((tree_not_check4 ((type), "generic-match.c", 16177, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
  {

    if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16180, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1697, %s:%d\n", "generic-match.c", 16182);
        tree res_op0;
        res_op0 = captures[1];
        tree res;
        res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
        if (((non_type_check ((captures[0]), "generic-match.c", 16187, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        return res;
      }
  }
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16202, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16203, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_199 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_199 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16226, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16227, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };

       if (!((tree_not_check4 ((type), "generic-match.c", 16234, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
  {

    if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16237, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1706, %s:%d\n", "generic-match.c", 16239);
        tree res;
        res = captures[1];
        if (((non_type_check ((captures[0]), "generic-match.c", 16242, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        return res;
      }
  }
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16257, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16258, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16263, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16264, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_137 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_137 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16291, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16292, __FUNCTION__)))));
 if ((tree_code_type[(int) (((enum tree_code) (o20)->base.code))] == tcc_constant))
   {
     if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
    tree res = generic_simplify_186 (loc, type, op0, op1, captures, MINUS_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16309, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16314, __FUNCTION__)))));
       if (integer_each_onep (op1))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { o30 };
      tree res = generic_simplify_119 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
   case PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16328, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 16329, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16334, __FUNCTION__)))));
      if (o60 == o30 || operand_equal_p (o60, o30, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o30 };
     tree res = generic_simplify_210 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o31 || operand_equal_p (o60, o31, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o31 };
     tree res = generic_simplify_210 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o30 || operand_equal_p (op1, o30, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o30 };
      tree res = generic_simplify_210 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (op1 == o31 || operand_equal_p (op1, o31, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o31 };
      tree res = generic_simplify_210 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
   case POINTER_PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16379, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 16380, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16385, __FUNCTION__)))));
      if (o60 == o30 || operand_equal_p (o60, o30, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o30 };

     if (!((tree_not_check4 ((type), "generic-match.c", 16392, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
       {

         if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16395, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
    {

      if (element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16398, __FUNCTION__))->typed.type)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16398, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16398, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && ((enum tree_code) (captures[1])->base.code) == INTEGER_CST && tree_int_cst_sign_bit (captures[1]) == 0))
        {
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1832, %s:%d\n", "generic-match.c", 16400);
          tree res_op0;
          res_op0 = captures[1];
          tree res;
          res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
          if (((non_type_check ((captures[2]), "generic-match.c", 16405, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
          return res;
        }
    }
       }
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16425, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case PLUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 16430, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 16431, __FUNCTION__)))));
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o50, o51, o20 };
     tree res = generic_simplify_61 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o51 == o20 || operand_equal_p (o51, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o51, o50, o20 };
     tree res = generic_simplify_61 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16462, __FUNCTION__)))));
 if (integer_each_onep (op1))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_119 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_nop_convert (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      switch (((enum tree_code) (o20)->base.code))
        {
 case PLUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16485, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 16486, __FUNCTION__)))));
     if ((tree_code_type[(int) (((enum tree_code) (o31)->base.code))] == tcc_constant))
       {
  if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
        tree res = generic_simplify_117 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, MINUS_EXPR);
        if (res) return res;
      }
    }
       }
     break;
   }
 case MINUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16503, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 16504, __FUNCTION__)))));
     if ((tree_code_type[(int) (((enum tree_code) (o31)->base.code))] == tcc_constant))
       {
  if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
        tree res = generic_simplify_117 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, MINUS_EXPR);
        if (res) return res;
      }
    }
       }
     break;
   }
        default:;
        }
}
}
if ((tree_code_type[(int) (((enum tree_code) (op0)->base.code))] == tcc_constant))
  {
    switch (((enum tree_code) (op1)->base.code))
      {
      case MINUS_EXPR:
        {
   tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16529, __FUNCTION__)))));
   tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16530, __FUNCTION__)))));
   if ((tree_code_type[(int) (((enum tree_code) (o30)->base.code))] == tcc_constant))
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o31 };

  if (!((tree_not_check4 ((type), "generic-match.c", 16537, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    {

      if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16540, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
        {
   {

 tree cst = const_binop (MINUS_EXPR, type, captures[0], captures[1]);

       if (cst && !((tree_class_check ((cst), (tcc_constant), "generic-match.c", 16546, __FUNCTION__))->base.public_flag))
         {
    if (((non_type_check ((captures[0]), "generic-match.c", 16548, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 16548 "generic-match.c" 3 4
                                               __null
# 16548 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[1]), "generic-match.c", 16549, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 16549 "generic-match.c" 3 4
                                               __null
# 16549 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1780, %s:%d\n", "generic-match.c", 16550);
    tree res_op0;
    res_op0 = cst;
    tree res_op1;
    res_op1 = captures[2];
    tree res;
    res = fold_build2_loc (loc, PLUS_EXPR, type, res_op0, res_op1);
    return res;
         }
   }
        }
    }
       }
     }
          break;
        }
      default:;
      }
  }
if (integer_all_onesp (op0))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op1 };

      if (!((tree_not_check4 ((type), "generic-match.c", 16575, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
 {

   if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16578, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
     {
       if (((non_type_check ((op0), "generic-match.c", 16580, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 16580 "generic-match.c" 3 4
                                          __null
# 16580 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1804, %s:%d\n", "generic-match.c", 16581);
       tree res_op0;
       res_op0 = captures[0];
       tree res;
       res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
       return res;
     }
 }
    }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16595, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 16600, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 16601, __FUNCTION__)))));
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o40, o41, op0 };
      tree res = generic_simplify_61 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o41, o40, op0 };
      tree res = generic_simplify_61 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16632, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16637, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case POINTER_PLUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 16642, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 16643, __FUNCTION__)))));
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o50, o51, o20 };

     if (!((tree_not_check4 ((type), "generic-match.c", 16650, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
       {

         if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16653, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
    {

      if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 16656, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16656, __FUNCTION__))->typed.type)))
        {
          {

 tree utype = unsigned_type_for (type);
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1870, %s:%d\n", "generic-match.c", 16661);
       tree res_op0;
       {
         tree ops1[1], res;
         {
           tree ops2[1], res;
           ops2[0] = captures[1];
           if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 16668, __FUNCTION__))->typed.type) != utype)
      res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
           else
             res = ops2[0];
           ops1[0] = res;
         }
         res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 16674, __FUNCTION__))->typed.type), ops1[0]);
         res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
       if (((non_type_check ((captures[2]), "generic-match.c", 16679, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
          }
        }
      else
        {

          if (element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16687, __FUNCTION__))->typed.type)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16687, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16687, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && ((enum tree_code) (captures[1])->base.code) == INTEGER_CST && tree_int_cst_sign_bit (captures[1]) == 0))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1879, %s:%d\n", "generic-match.c", 16689);
       tree res_op0;
       {
         tree ops1[1], res;
         ops1[0] = captures[1];
         if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 16694, __FUNCTION__))->typed.type) != type)
           res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
         else
           res = ops1[0];
         res_op0 = res;
       }
       tree res;
       res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
       if (((non_type_check ((captures[2]), "generic-match.c", 16702, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
        }
    }
       }
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16723, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 16724, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16729, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case PLUS_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 16734, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 16735, __FUNCTION__)))));
     if (o70 == o30 || operand_equal_p (o70, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o71, o30 };
    tree res = generic_simplify_197 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
     if (o71 == o30 || operand_equal_p (o71, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o70, o30 };
    tree res = generic_simplify_197 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
     if (o70 == o31 || operand_equal_p (o70, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o71, o31 };
    tree res = generic_simplify_197 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
     if (o71 == o31 || operand_equal_p (o71, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o70, o31 };
    tree res = generic_simplify_197 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case POINTER_PLUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 16784, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 16785, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16790, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case POINTER_PLUS_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 16795, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 16796, __FUNCTION__)))));
     if (o70 == o30 || operand_equal_p (o70, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o71, o30 };

    if (!((tree_not_check4 ((type), "generic-match.c", 16803, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
      {

        if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 16806, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
          {

     if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((type), "generic-match.c", 16809, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) && element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16809, __FUNCTION__))->typed.type)))
       {
         {

 tree utype = unsigned_type_for (type);
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1922, %s:%d\n", "generic-match.c", 16814);
      tree res_op0;
      {
        tree ops1[2], res;
        {
          tree ops2[1], res;
          ops2[0] = captures[1];
          if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 16821, __FUNCTION__))->typed.type) != utype)
            res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
          else
            res = ops2[0];
          ops1[0] = res;
        }
        {
          tree ops2[1], res;
          ops2[0] = captures[2];
          if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 16830, __FUNCTION__))->typed.type) != utype)
            res = fold_build1_loc (loc, NOP_EXPR, utype, ops2[0]);
          else
            res = ops2[0];
          ops1[1] = res;
        }
        res = fold_build2_loc (loc, MINUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 16836, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
      if (((non_type_check ((captures[3]), "generic-match.c", 16841, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
         }
       }
     else
       {

         if (element_precision (type) <= element_precision (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 16849, __FUNCTION__))->typed.type)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16849, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 16849, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) && ((enum tree_code) (captures[1])->base.code) == INTEGER_CST && tree_int_cst_sign_bit (captures[1]) == 0 && ((enum tree_code) (captures[2])->base.code) == INTEGER_CST && tree_int_cst_sign_bit (captures[2]) == 0))
           {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1933, %s:%d\n", "generic-match.c", 16851);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[1];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 16856, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op0 = res;
      }
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[2];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 16866, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op1 = res;
      }
      tree res;
      res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
      if (((non_type_check ((captures[3]), "generic-match.c", 16874, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
           }
       }
          }
      }
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16899, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16900, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16905, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16906, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, MINUS_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, MINUS_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o51 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, MINUS_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o50 };
      tree res = generic_simplify_35 (loc, type, op0, op1, captures, MINUS_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MULT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 16955, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 16956, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_130 (loc, type, op0, op1, captures, MINUS_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };
       tree res = generic_simplify_130 (loc, type, op0, op1, captures, MINUS_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 16983, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 16984, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_267 (loc, type, op0, op1, captures, MINUS_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o20 };
       tree res = generic_simplify_267 (loc, type, op0, op1, captures, MINUS_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
if (integer_zerop (op0))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op1 };
      if (((non_type_check ((op0), "generic-match.c", 17012, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 17012 "generic-match.c" 3 4
                                         __null
# 17012 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2555, %s:%d\n", "generic-match.c", 17013);
      tree res_op0;
      res_op0 = captures[0];
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
  }
if (real_zerop (op0))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

      if (fold_real_zero_addition_p (type, captures[0], 0))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2566, %s:%d\n", "generic-match.c", 17029);
   tree res_op0;
   res_op0 = captures[1];
   tree res;
   res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
   if (((non_type_check ((captures[0]), "generic-match.c", 17034, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VIEW_CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17044, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case VEC_COND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 17049, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 17050, __FUNCTION__)))));
       tree o42 = (*((const_cast<tree*> (tree_operand_check ((o30), (2), "generic-match.c", 17051, __FUNCTION__)))));
       if (integer_each_onep (o41))
  {
    if (integer_zerop (o42))
      {
        {

   tree captures[5] __attribute__ ((__unused__)) = { op0, o30, o40, o41, o42 };
   tree res = generic_simplify_48 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case VEC_COND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17072, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17073, __FUNCTION__)))));
 tree o32 = (*((const_cast<tree*> (tree_operand_check ((op1), (2), "generic-match.c", 17074, __FUNCTION__)))));
 if (integer_each_onep (o31))
   {
     if (integer_zerop (o32))
       {
  {

    tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o31, o32 };
    tree res = generic_simplify_48 (loc, type, op0, op1, captures);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case RDIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17095, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17096, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case RDIV_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17101, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17102, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_43 (loc, type, op0, op1, captures, MINUS_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 17120 "generic-match.c" 3 4
        __null
# 17120 "generic-match.c"
                 ;
}

static tree
generic_simplify_BIT_IOR_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 17131, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 17131 "generic-match.c" 3 4
                                    __null
# 17131 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:99, %s:%d\n", "generic-match.c", 17132);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = non_lvalue_loc (loc, res_op0);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17144, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17145, __FUNCTION__)))));
 if (integer_zerop (o21))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case NE_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17152, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17153, __FUNCTION__)))));
    if (integer_zerop (o51))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
   tree res = generic_simplify_234 (loc, type, op0, op1, captures, BIT_IOR_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
   }
 if (integer_all_onesp (o21))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case NE_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17174, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17175, __FUNCTION__)))));
    if (integer_all_onesp (o51))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
   tree res = generic_simplify_120 (loc, type, op0, op1, captures, BIT_IOR_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
   }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17194, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17195, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 17200, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17205, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17206, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 17211, __FUNCTION__)))));
     if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
       {
         if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   switch (((enum tree_code) (o61)->base.code))
     {
     case BIT_NOT_EXPR:
       {
         tree o80 = (*((const_cast<tree*> (tree_operand_check ((o61), (0), "generic-match.c", 17234, __FUNCTION__)))));
         if (o80 == o20 || (operand_equal_p (o80, o20, 0) && types_match (o80, o20)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
        if (res) return res;
      }
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 17261, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17266, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17267, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 17272, __FUNCTION__)))));
     if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
       {
         if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o21, o30 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   switch (((enum tree_code) (o61)->base.code))
     {
     case BIT_NOT_EXPR:
       {
         tree o80 = (*((const_cast<tree*> (tree_operand_check ((o61), (0), "generic-match.c", 17295, __FUNCTION__)))));
         if (o80 == o21 || (operand_equal_p (o80, o21, 0) && types_match (o80, o21)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o21, o30 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
        if (res) return res;
      }
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17322, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17323, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o61, o21 };
          tree res = generic_simplify_22 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17361, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17362, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 17367, __FUNCTION__)))));
     if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
       {
         switch (((enum tree_code) (o51)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
          tree res = generic_simplify_22 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17401, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17402, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_138 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_138 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17425, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17426, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    switch (((enum tree_code) (o51)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 17433, __FUNCTION__)))));
   if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op0 };
         tree res = generic_simplify_144 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    switch (((enum tree_code) (o51)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 17454, __FUNCTION__)))));
   if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o21, o20, op0 };
         tree res = generic_simplify_144 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 17473, __FUNCTION__)))));
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op0 };
         tree res = generic_simplify_144 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o21, o20, op0 };
         tree res = generic_simplify_144 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_XOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17514, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17515, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_138 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_138 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17542, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17543, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 17548, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_XOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17553, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17554, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o20, o40, op1 };
         tree res = generic_simplify_209 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o20, o40, op1 };
         tree res = generic_simplify_209 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 17591, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_XOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17596, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17597, __FUNCTION__)))));
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o21, o30, op1 };
         tree res = generic_simplify_209 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o21, o30, op1 };
         tree res = generic_simplify_209 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17638, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 17643, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 17644, __FUNCTION__)))));
       if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o41 };
      tree res = generic_simplify_147 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o40 };
      tree res = generic_simplify_147 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17675, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 17680, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 17681, __FUNCTION__)))));
       if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o31 };
      tree res = generic_simplify_147 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o31, op0, o30 };
      tree res = generic_simplify_147 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17704, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17705, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   if (o61 == o31 || (operand_equal_p (o61, o31, 0) && types_match (o61, o31)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op0 };
         tree res = generic_simplify_112 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
        {
   if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op0 };
         tree res = generic_simplify_112 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17751, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17752, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17757, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17758, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_26 (loc, type, op0, op1, captures, BIT_AND_EXPR);
   if (res) return res;
        }
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_26 (loc, type, op0, op1, captures, BIT_AND_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17787, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17788, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_26 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
        }
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_26 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17817, __FUNCTION__)))));
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o21 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o20, o20 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || operand_equal_p (op1, o21, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o21 };
       tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || operand_equal_p (op1, o20, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o20, o20 };
       tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17862, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17863, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17868, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17869, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op1, o20, o21 };
   tree res = generic_simplify_72 (loc, type, op0, op1, captures, BIT_AND_EXPR);
   if (res) return res;
        }
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op1, o21, o20 };
   tree res = generic_simplify_72 (loc, type, op0, op1, captures, BIT_AND_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17898, __FUNCTION__)))));
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_XOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 17903, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 17904, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
         tree res = generic_simplify_103 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
     {
       {

         tree captures[3] __attribute__ ((__unused__)) = { o21, o20, op1 };
         tree res = generic_simplify_103 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 17941, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 17942, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 17947, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 17948, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op1, o20, o21 };
   tree res = generic_simplify_72 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
        }
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op1, o21, o20 };
   tree res = generic_simplify_72 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (integer_all_onesp (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:774, %s:%d\n", "generic-match.c", 17986);
 tree res;
 res = captures[1];
 if (((non_type_check ((captures[0]), "generic-match.c", 17989, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    }
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 17999, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 17999 "generic-match.c" 3 4
                                    __null
# 17999 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:779, %s:%d\n", "generic-match.c", 18000);
 tree res;
 res = captures[0];
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18010, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18015, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 18020, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };
     tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 18042, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18047, __FUNCTION__)))));
      if (o50 == o30 || (operand_equal_p (o50, o30, 0) && types_match (o50, o30)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o30 };
     tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 18061, __FUNCTION__)))));
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, o60 };
       tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18076, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o30, o50 };
        tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 18091, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 18092, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18097, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 18102, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 18103, __FUNCTION__)))));
     if (o70 == o30 || operand_equal_p (o70, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o71, o30 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o30 || operand_equal_p (o71, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o70, o30 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o70 == o31 || operand_equal_p (o70, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o71, o31 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o31 || operand_equal_p (o71, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o70, o31 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 18152, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 18153, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18158, __FUNCTION__)))));
      if (o60 == o31 || operand_equal_p (o60, o31, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, o31 };
     tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o60 == o30 || operand_equal_p (o60, o30, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op0, o31, o30, o30 };
     tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o31 || operand_equal_p (op1, o31, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, o31 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (op1 == o30 || operand_equal_p (op1, o30, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o31, o30, o30 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18207, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 18212, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 18213, __FUNCTION__)))));
      if (o51 == o20 || operand_equal_p (o51, o20, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op1, o50, o51, o20 };
     tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op1, o51, o50, o20 };
     tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18240, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18241, __FUNCTION__)))));
       if (o41 == o20 || operand_equal_p (o41, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o41, o20 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o40 == o20 || operand_equal_p (o40, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o41, o40, o20 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18272, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 18286, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 18287, __FUNCTION__)))));
       if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o41 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o40 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_60 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18327, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 18332, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 18333, __FUNCTION__)))));
       if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, o20, o31 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o31, o20, o30 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18360, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18361, __FUNCTION__)))));
       if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o41, op0 };
      tree res = generic_simplify_71 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o41 == o20 || (operand_equal_p (o41, o20, 0) && types_match (o41, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o40, op0 };
      tree res = generic_simplify_71 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18384, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 18389, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
        tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18404, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18419, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 18420, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18425, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
      tree res = generic_simplify_170 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, op1 };
      tree res = generic_simplify_170 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18448, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18449, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_175 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18466, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18467, __FUNCTION__)))));
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, o20 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || operand_equal_p (o51, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o50, o20 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o21, o20, o51, o21 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || operand_equal_p (o51, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o21, o20, o50, o21 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18512, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 18513, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18518, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18519, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_175 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18544, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 18549, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 18550, __FUNCTION__)))));
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o41, op0 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o41, o40, op0 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18577, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18578, __FUNCTION__)))));
 if (o31 == op0 || operand_equal_p (o31, op0, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o31, op0 };
       tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || operand_equal_p (o30, op0, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op1, o31, o30, op0 };
       tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18605, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 18610, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 18611, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18616, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_IOR_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 18621, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 18622, __FUNCTION__)))));
     if (o70 == o30 || (operand_equal_p (o70, o30, 0) && types_match (o70, o30)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, o60, o71 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o30 || (operand_equal_p (o71, o30, 0) && types_match (o71, o30)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, o60, o70 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
     if (o70 == o31 || (operand_equal_p (o70, o31, 0) && types_match (o70, o31)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, o60, o71 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o31 || (operand_equal_p (o71, o31, 0) && types_match (o71, o31)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, o60, o70 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18667, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18668, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, op1, o61 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, op1, o60 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, op1, o61 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o31 || (operand_equal_p (o61, o31, 0) && types_match (o61, o31)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, op1, o60 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18717, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_15 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
   tree res = generic_simplify_15 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
   if (res) return res;
 }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18738, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 18739, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18744, __FUNCTION__)))));
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 18749, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 18750, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, o50, o61 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, o50, o60 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, o50, o61 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, o50, o60 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18795, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18796, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, op1, o51 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, op1, o50 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, op1, o51 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, op1, o50 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 18841, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 18842, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 18865, __FUNCTION__)))));
       if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o30, o21 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18879, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18880, __FUNCTION__)))));
      if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o30, op1, o60 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o30, op1, o61 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 18911, __FUNCTION__)))));
       if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18925, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18926, __FUNCTION__)))));
      if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o40, op1, o60 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o40, op1, o61 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 18957, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 18958, __FUNCTION__)))));
       switch (((enum tree_code) (o51)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 18963, __FUNCTION__)))));
      if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op1, o50, o21, op0, o20 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op1, o50, o20, op0, o21 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 18990, __FUNCTION__)))));
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op1, o51, o21, op0, o20 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   {

     tree captures[5] __attribute__ ((__unused__)) = { op1, o51, o20, op0, o21 };
     tree res = generic_simplify_252 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19025, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19026, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 19049, __FUNCTION__)))));
       if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o31)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 19067, __FUNCTION__)))));
       if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19089, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19090, __FUNCTION__)))));
 if ((tree_code_type[(int) (((enum tree_code) (o21)->base.code))] == tcc_constant))
   {
     if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
    tree res = generic_simplify_205 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19107, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19108, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_203 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case UNORDERED_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19135, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19136, __FUNCTION__)))));
 if (o21 == o20 || (operand_equal_p (o21, o20, 0) && types_match (o21, o20)))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case UNORDERED_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19143, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19144, __FUNCTION__)))));
    if (o51 == o50 || (operand_equal_p (o51, o50, 0) && types_match (o51, o50)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };

   if (types_match (captures[0], captures[1]))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3366, %s:%d\n", "generic-match.c", 19153);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, UNORDERED_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
      }
    if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op1, o51 };
   tree res = generic_simplify_134 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op1, o50 };
   tree res = generic_simplify_134 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case UNORDERED_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19191, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19192, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
   tree res = generic_simplify_67 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o21, op0, o20 };
   tree res = generic_simplify_67 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19225, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19226, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case GE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19231, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19232, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LT_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19253, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19254, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case GT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19259, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19260, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case GE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19277, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19278, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LE_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case NE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19295, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19296, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LE_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19317, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19318, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case EQ_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19323, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19324, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case LE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19341, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19342, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LE_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case GE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19359, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19360, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, GE_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case GE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19381, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19382, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19387, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19388, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, GE_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case LT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19405, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19406, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LT_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case LE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19423, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19424, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LE_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case GT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19445, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19446, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case LE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19451, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19452, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case EQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19473, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19474, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19479, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19480, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_51 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_logical_inverted_value (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
 {
   if (tree_truth_valued_p (op1))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { o20 };
  tree res = generic_simplify_224 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
  if (res) return res;
       }
     }
        }
}
}
if (tree_truth_valued_p (op0))
  {
    {
      tree op1_pops[1];
      if (tree_logical_inverted_value (op1, op1_pops))
        {
   tree o30 = op1_pops[0];
   if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { op0 };
  tree res = generic_simplify_224 (loc, type, op0, op1, captures, BIT_IOR_EXPR);
  if (res) return res;
       }
     }
}
    }
  }
  return (tree) 
# 19539 "generic-match.c" 3 4
        __null
# 19539 "generic-match.c"
                 ;
}

static tree
generic_simplify_BIT_XOR_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 19550, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 19550 "generic-match.c" 3 4
                                    __null
# 19550 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:99, %s:%d\n", "generic-match.c", 19551);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = non_lvalue_loc (loc, res_op0);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19563, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 19564, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 19569, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19574, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19575, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 19580, __FUNCTION__)))));
     if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
       {
         if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   switch (((enum tree_code) (o61)->base.code))
     {
     case BIT_NOT_EXPR:
       {
         tree o80 = (*((const_cast<tree*> (tree_operand_check ((o61), (0), "generic-match.c", 19603, __FUNCTION__)))));
         if (o80 == o20 || (operand_equal_p (o80, o20, 0) && types_match (o80, o20)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
        if (res) return res;
      }
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 19630, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19635, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19636, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 19641, __FUNCTION__)))));
     if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
       {
         if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o21, o30 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
        if (res) return res;
      }
           }
       }
            break;
          }
        default:;
        }
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   switch (((enum tree_code) (o61)->base.code))
     {
     case BIT_NOT_EXPR:
       {
         tree o80 = (*((const_cast<tree*> (tree_operand_check ((o61), (0), "generic-match.c", 19664, __FUNCTION__)))));
         if (o80 == o21 || (operand_equal_p (o80, o21, 0) && types_match (o80, o21)))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o21, o30 };
        tree res = generic_simplify_135 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
        if (res) return res;
      }
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19691, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19692, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o61, o21 };
          tree res = generic_simplify_22 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19730, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19731, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 19736, __FUNCTION__)))));
     if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
       {
         switch (((enum tree_code) (o51)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
          tree res = generic_simplify_22 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 19766, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19771, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
     tree res = generic_simplify_142 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 19793, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19798, __FUNCTION__)))));
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o30 };
     tree res = generic_simplify_142 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19820, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19825, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19826, __FUNCTION__)))));
       if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
  {
    switch (((enum tree_code) (o41)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 19833, __FUNCTION__)))));
   {

     tree captures[3] __attribute__ ((__unused__)) = { op1, o20, o60 };
     tree res = generic_simplify_142 (loc, type, op0, op1, captures);
     if (res) return res;
   }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 19849, __FUNCTION__)))));
      if (o41 == o20 || (operand_equal_p (o41, o20, 0) && types_match (o41, o20)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op1, o20, o50 };
     tree res = generic_simplify_142 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 19880, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19885, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 19890, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };
     tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 19912, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19917, __FUNCTION__)))));
      if (o50 == o30 || (operand_equal_p (o50, o30, 0) && types_match (o50, o30)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o30 };
     tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 19935, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 19936, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19945, __FUNCTION__)))));
     switch (((enum tree_code) (o60)->base.code))
       {
       case BIT_AND_EXPR:
         {
    tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 19950, __FUNCTION__)))));
    tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 19951, __FUNCTION__)))));
    switch (((enum tree_code) (o71)->base.code))
      {
      case INTEGER_CST:
        {
          {

     tree captures[6] __attribute__ ((__unused__)) = { o20, o30, o31, o60, o70, o71 };
     tree res = generic_simplify_122 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
     if (res) return res;
          }
          break;
        }
             default:;
             }
           break;
         }
       default:;
       }
            break;
          }
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 19974, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 19975, __FUNCTION__)))));
     switch (((enum tree_code) (o61)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[6] __attribute__ ((__unused__)) = { o20, o30, o31, op1, o60, o61 };
      tree res = generic_simplify_122 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 20002, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 20003, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20008, __FUNCTION__)))));
      if (o60 == o30 || operand_equal_p (o60, o30, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o30 };
     tree res = generic_simplify_259 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o31 || operand_equal_p (o60, o31, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o31 };
     tree res = generic_simplify_259 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o30 || operand_equal_p (op1, o30, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o30 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (op1 == o31 || operand_equal_p (op1, o31, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o31 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20057, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 20062, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 20063, __FUNCTION__)))));
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o50, o51, o20 };
     tree res = generic_simplify_259 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o51 == o20 || operand_equal_p (o51, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o51, o50, o20 };
     tree res = generic_simplify_259 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20090, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20091, __FUNCTION__)))));
       if (o40 == o20 || operand_equal_p (o40, o20, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o40, o41, o20 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o41 == o20 || operand_equal_p (o41, o20, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o41, o40, o20 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20122, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_159 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:797, %s:%d\n", "generic-match.c", 20141);
 tree res;
 res = build_zero_cst (type);
 if (((non_type_check ((captures[0]), "generic-match.c", 20144, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    }
  if (integer_all_onesp (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:802, %s:%d\n", "generic-match.c", 20154);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = fold_build1_loc (loc, BIT_NOT_EXPR, type, res_op0);
 if (((non_type_check ((captures[1]), "generic-match.c", 20159, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20168, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 20169, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20174, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20175, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_171 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20192, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20193, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_175 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20218, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 20223, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 20224, __FUNCTION__)))));
     switch (((enum tree_code) (o61)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o21, o50, o60, o61 };
      tree res = generic_simplify_122 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20247, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20248, __FUNCTION__)))));
      switch (((enum tree_code) (o51)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50, o51 };
       tree res = generic_simplify_122 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20275, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 20276, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20281, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20282, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_171 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20299, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20300, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_172 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20317, __FUNCTION__)))));
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o20 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o21 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o20 || operand_equal_p (op1, o20, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o20 };
       tree res = generic_simplify_259 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (op1 == o21 || operand_equal_p (op1, o21, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o21 };
       tree res = generic_simplify_259 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20362, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 20363, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20368, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20369, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_172 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20386, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20387, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_175 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20404, __FUNCTION__)))));
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o21 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o20 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || operand_equal_p (op1, o21, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o21 };
       tree res = generic_simplify_201 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (op1 == o20 || operand_equal_p (op1, o20, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o20 };
       tree res = generic_simplify_201 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20453, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 20458, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 20459, __FUNCTION__)))));
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o40, o41, op0 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o41, o40, op0 };
      tree res = generic_simplify_259 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20486, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20487, __FUNCTION__)))));
 if (o30 == op0 || operand_equal_p (o30, op0, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op0 };
       tree res = generic_simplify_259 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o31 == op0 || operand_equal_p (o31, op0, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o31, o30, op0 };
       tree res = generic_simplify_259 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20514, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 20519, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20524, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 20529, __FUNCTION__)))));
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, o60 };
       tree res = generic_simplify_86 (loc, type, op0, op1, captures);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20544, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o30, o50 };
        tree res = generic_simplify_86 (loc, type, op0, op1, captures);
        if (res) return res;
      }
      break;
    }
  case INTEGER_CST:
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o30, op1 };
        tree res = generic_simplify_208 (loc, type, op0, op1, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20573, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20578, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 20583, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
        tree res = generic_simplify_86 (loc, type, op0, op1, captures);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20598, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_86 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_208 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20623, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 20624, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20647, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20648, __FUNCTION__)))));
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, o20 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || operand_equal_p (o51, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o50, o20 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o21, o20, o51, o21 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || operand_equal_p (o51, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o21, o20, o50, o21 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20697, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20698, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, op0 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o31, op0 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20725, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 20730, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 20731, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20736, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 20741, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 20742, __FUNCTION__)))));
     if (o70 == o30 || operand_equal_p (o70, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o71, o30 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o30 || operand_equal_p (o71, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o70, o30 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o70 == o31 || operand_equal_p (o70, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o71, o31 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o31 || operand_equal_p (o71, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o70, o31 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_XOR_EXPR, BIT_AND_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 20791, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 20792, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20797, __FUNCTION__)))));
      if (o60 == o31 || operand_equal_p (o60, o31, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o31 };
     tree res = generic_simplify_201 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o30 || operand_equal_p (o60, o30, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o30 };
     tree res = generic_simplify_201 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o31 || operand_equal_p (op1, o31, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o31 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (op1 == o30 || operand_equal_p (op1, o30, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o30 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20846, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_XOR_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 20851, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 20852, __FUNCTION__)))));
      if (o51 == o20 || operand_equal_p (o51, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o50, o51, o20 };
     tree res = generic_simplify_201 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o51, o50, o20 };
     tree res = generic_simplify_201 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20879, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20880, __FUNCTION__)))));
       if (o41 == o20 || operand_equal_p (o41, o20, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o40, o41, o20 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o40 == o20 || operand_equal_p (o40, o20, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o41, o40, o20 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20911, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 20916, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 20917, __FUNCTION__)))));
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o40, o41, op0 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o41, o40, op0 };
      tree res = generic_simplify_201 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20944, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 20945, __FUNCTION__)))));
 if (o31 == op0 || operand_equal_p (o31, op0, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op0 };
       tree res = generic_simplify_201 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o30 == op0 || operand_equal_p (o30, op0, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o31, o30, op0 };
       tree res = generic_simplify_201 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 20972, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 20977, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 20978, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 20983, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_XOR_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 20988, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 20989, __FUNCTION__)))));
     if (o70 == o30 || (operand_equal_p (o70, o30, 0) && types_match (o70, o30)))
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o71 };
    tree res = generic_simplify_230 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
     if (o71 == o30 || (operand_equal_p (o71, o30, 0) && types_match (o71, o30)))
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o70 };
    tree res = generic_simplify_230 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
     if (o70 == o31 || (operand_equal_p (o70, o31, 0) && types_match (o70, o31)))
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o71 };
    tree res = generic_simplify_230 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
     if (o71 == o31 || (operand_equal_p (o71, o31, 0) && types_match (o71, o31)))
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o70 };
    tree res = generic_simplify_230 (loc, type, op0, op1, captures);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_XOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21034, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 21035, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o61 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o60 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o61 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o61 == o31 || (operand_equal_p (o61, o31, 0) && types_match (o61, o31)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o31, o30, o60 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21084, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_15 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
   tree res = generic_simplify_15 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
   if (res) return res;
 }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21105, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21106, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21111, __FUNCTION__)))));
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_XOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 21116, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 21117, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o61 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o60 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o61 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o60 };
     tree res = generic_simplify_230 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21162, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 21163, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_230 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_230 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_230 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_230 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if ((tree_code_type[(int) (((enum tree_code) (o21)->base.code))] == tcc_constant))
   {
     if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
    tree res = generic_simplify_205 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_logical_inverted_value (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
 {
   if (tree_truth_valued_p (op1))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { o20 };
  tree res = generic_simplify_224 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
  if (res) return res;
       }
     }
        }
}
}
{
  tree op0_pops[1];
  if (tree_nop_convert (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      switch (((enum tree_code) (o20)->base.code))
        {
 case BIT_NOT_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 21248, __FUNCTION__)))));
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, op1 };
       tree res = generic_simplify_244 (loc, type, op0, op1, captures);
       if (res) return res;
     }
     break;
   }
        default:;
        }
}
}
if (tree_truth_valued_p (op0))
  {
    {
      tree op1_pops[1];
      if (tree_logical_inverted_value (op1, op1_pops))
        {
   tree o30 = op1_pops[0];
   if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { op0 };
  tree res = generic_simplify_224 (loc, type, op0, op1, captures, BIT_XOR_EXPR);
  if (res) return res;
       }
     }
}
    }
  }
  {
    tree op1_pops[1];
    if (tree_nop_convert (op1, op1_pops))
      {
 tree o30 = op1_pops[0];
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 21289, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o40, op0 };
  tree res = generic_simplify_244 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
}
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21306, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21307, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_203 (loc, type, op0, op1, captures, BIT_IOR_EXPR, BIT_XOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case LT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21334, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21335, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, LT_EXPR, GE_EXPR, UNGE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case LE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21349, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21350, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR, UNGT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case EQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21364, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21365, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, EQ_EXPR, NE_EXPR, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21379, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21380, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case GE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21394, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21395, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, GE_EXPR, LT_EXPR, UNLT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case GT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21409, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21410, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, GT_EXPR, LE_EXPR, UNLE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case UNORDERED_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21424, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21425, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, UNORDERED_EXPR, ORDERED_EXPR, ORDERED_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case ORDERED_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21439, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21440, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, ORDERED_EXPR, UNORDERED_EXPR, UNORDERED_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case UNLT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21454, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21455, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, UNLT_EXPR, GE_EXPR, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case UNLE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21469, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21470, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, UNLE_EXPR, GT_EXPR, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case UNGT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21484, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21485, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, UNGT_EXPR, LE_EXPR, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case UNGE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21499, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21500, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, UNGE_EXPR, LT_EXPR, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case UNEQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21514, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21515, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, UNEQ_EXPR, LTGT_EXPR, LTGT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case LTGT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21529, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21530, __FUNCTION__)))));
 if (integer_truep (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_146 (loc, type, op0, op1, captures, LTGT_EXPR, UNEQ_EXPR, UNEQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  return (tree) 
# 21544 "generic-match.c" 3 4
        __null
# 21544 "generic-match.c"
                 ;
}

static tree
generic_simplify_POINTER_DIFF_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 21555, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 21555 "generic-match.c" 3 4
                                    __null
# 21555 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:109, %s:%d\n", "generic-match.c", 21556);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
 return res;
      }
    }
  if (op1 == op0 || operand_equal_p (op1, op0, 0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op0 };
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:135, %s:%d\n", "generic-match.c", 21569);
 tree res;
 res = build_zero_cst (type);
 if (((non_type_check ((captures[1]), "generic-match.c", 21572, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21581, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21590, __FUNCTION__)))));
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

        if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 21595, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21595, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 21595, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 21595, __FUNCTION__))->typed.type)))
   {
     {

 poly_int64 diff;

         if (ptr_difference_const (captures[1], captures[3], &diff))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1597, %s:%d\n", "generic-match.c", 21603);
      tree res;
      res = build_int_cst_type (type, diff);
      if (((non_type_check ((captures[1]), "generic-match.c", 21606, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[3]), "generic-match.c", 21608, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
    }
     }
   }
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21627, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

        if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 21636, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21636, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 21636, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 21636, __FUNCTION__))->typed.type)))
   {
     {

 poly_int64 diff;

         if (ptr_difference_const (captures[1], captures[3], &diff))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1604, %s:%d\n", "generic-match.c", 21644);
      tree res;
      res = build_int_cst_type (type, diff);
      if (((non_type_check ((captures[1]), "generic-match.c", 21647, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
      if (((non_type_check ((captures[3]), "generic-match.c", 21649, __FUNCTION__))->base.side_effects_flag))
        res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
      return res;
    }
     }
   }
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, op1, op1 };

   if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 21672, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21672, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 21672, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 21672, __FUNCTION__))->typed.type)))
     {
       {

 poly_int64 diff;

    if (ptr_difference_const (captures[1], captures[3], &diff))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1597, %s:%d\n", "generic-match.c", 21680);
        tree res;
        res = build_int_cst_type (type, diff);
        if (((non_type_check ((captures[0]), "generic-match.c", 21683, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        if (((non_type_check ((captures[2]), "generic-match.c", 21685, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
        return res;
      }
       }
     }
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ADDR_EXPR:
      {
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op0, op1, op1 };

   if (tree_nop_conversion_p (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 21704, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21704, __FUNCTION__))->typed.type)) && tree_nop_conversion_p (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 21704, __FUNCTION__))->typed.type), ((contains_struct_check ((captures[3]), (TS_TYPED), "generic-match.c", 21704, __FUNCTION__))->typed.type)))
     {
       {

 poly_int64 diff;

    if (ptr_difference_const (captures[1], captures[3], &diff))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1604, %s:%d\n", "generic-match.c", 21712);
        tree res;
        res = build_int_cst_type (type, diff);
        if (((non_type_check ((captures[0]), "generic-match.c", 21715, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
        if (((non_type_check ((captures[2]), "generic-match.c", 21717, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
        return res;
      }
       }
     }
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case POINTER_PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21732, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21733, __FUNCTION__)))));
 if (op1 == o20 || operand_equal_p (op1, o20, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o20 };

       if (!((tree_not_check4 ((type), "generic-match.c", 21740, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
  {

    if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 21743, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
      {
        {

 tree stype = signed_type_for (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21747, __FUNCTION__))->typed.type));
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1841, %s:%d\n", "generic-match.c", 21748);
     tree res_op0;
     {
       tree ops1[1], res;
       ops1[0] = captures[1];
       res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, stype, ops1[0]);
       res_op0 = res;
     }
     tree res;
     res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
     if (((non_type_check ((captures[2]), "generic-match.c", 21758, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
     return res;
        }
      }
  }
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case POINTER_PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21774, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 21775, __FUNCTION__)))));
 if (o30 == op0 || operand_equal_p (o30, op0, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op0 };

       if (!((tree_not_check4 ((type), "generic-match.c", 21782, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
  {

    if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 21785, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
      {
        {

 tree stype = signed_type_for (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21789, __FUNCTION__))->typed.type));
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1888, %s:%d\n", "generic-match.c", 21790);
     tree res_op0;
     {
       tree ops1[1], res;
       {
         tree ops2[1], res;
         ops2[0] = captures[1];
         res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, stype, ops2[0]);
         ops1[0] = res;
       }
       if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 21800, __FUNCTION__))->typed.type) != type)
         res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
       else
         res = ops1[0];
       res_op0 = res;
     }
     tree res;
     res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
     if (((non_type_check ((captures[2]), "generic-match.c", 21808, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
     return res;
        }
      }
  }
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case POINTER_PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 21824, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 21825, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 21830, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 21831, __FUNCTION__)))));
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, o20 };

      if (!((tree_not_check4 ((type), "generic-match.c", 21838, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
        {

   if ((!((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 21841, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || global_options.x_flag_associative_math) && !(((enum tree_code) (type)->base.code) == FIXED_POINT_TYPE))
     {
       {

 tree stype = signed_type_for (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 21845, __FUNCTION__))->typed.type));
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1942, %s:%d\n", "generic-match.c", 21846);
    tree res_op0;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[1];
        res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, stype, ops2[0]);
        ops1[0] = res;
      }
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 21856, __FUNCTION__))->typed.type) != type)
        res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
      else
        res = ops1[0];
      res_op0 = res;
    }
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, stype, ops2[0]);
        ops1[0] = res;
      }
      if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 21871, __FUNCTION__))->typed.type) != type)
        res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
      else
        res = ops1[0];
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MINUS_EXPR, type, res_op0, res_op1);
    if (((non_type_check ((captures[3]), "generic-match.c", 21879, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[3]), res);
    return res;
       }
     }
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
if (integer_zerop (op0))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op1 };
      if (((non_type_check ((op0), "generic-match.c", 21900, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 21900 "generic-match.c" 3 4
                                         __null
# 21900 "generic-match.c"
                                                  ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2558, %s:%d\n", "generic-match.c", 21901);
      tree res_op0;
      {
 tree ops1[1], res;
 ops1[0] = captures[0];
 if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 21906, __FUNCTION__))->typed.type) != type)
   res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
 else
   res = ops1[0];
 res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
  }
  return (tree) 
# 21917 "generic-match.c" 3 4
        __null
# 21917 "generic-match.c"
                 ;
}

static tree
generic_simplify_MULT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op1)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op1))
        {
 case CFN_BUILT_IN_COPYSIGNF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21930, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 21930, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21931, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 21931, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGN:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21948, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 21948, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21949, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 21949, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGN);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21966, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 21966, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21967, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 21967, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNL);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF16:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21984, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 21984, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 21985, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 21985, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF16);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22002, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22002, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22003, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22003, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22020, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22020, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22021, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22021, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22038, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22038, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22039, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22039, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32X:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22056, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22056, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22057, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22057, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32X);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64X:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22074, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22074, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22075, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22075, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64X);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128X:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22092, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22092, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22093, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22093, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128X);
        if (res) return res;
      }
    }
       }
     break;
   }
 case CFN_COPYSIGN:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22110, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22110, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22111, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22111, __FUNCTION__)))));
     if (real_onep (o30))
       {
  if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { op0 };
        tree res = generic_simplify_54 (loc, type, op0, op1, captures, CFN_COPYSIGN);
        if (res) return res;
      }
    }
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
if (integer_zerop (op1))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:139, %s:%d\n", "generic-match.c", 22136);
      tree res;
      res = captures[1];
      if (((non_type_check ((captures[0]), "generic-match.c", 22139, __FUNCTION__))->base.side_effects_flag))
 res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
      return res;
    }
  }
if (real_zerop (op1))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

      if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:148, %s:%d\n", "generic-match.c", 22152);
   tree res;
   res = captures[1];
   if (((non_type_check ((captures[0]), "generic-match.c", 22155, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
 }
    }
  }
if (real_onep (op1))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op0 };

      if (!HONOR_SNANS (type) && (!HONOR_SIGNED_ZEROS (type) || !(((enum tree_code) (type)->base.code) == COMPLEX_TYPE && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 22167, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)))
 {
   if (((non_type_check ((op1), "generic-match.c", 22169, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 22169 "generic-match.c" 3 4
                                      __null
# 22169 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:157, %s:%d\n", "generic-match.c", 22170);
   tree res_op0;
   res_op0 = captures[0];
   tree res;
   res = non_lvalue_loc (loc, res_op0);
   return res;
 }
    }
  }
if (real_minus_onep (op1))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op0 };

      if (!HONOR_SNANS (type) && (!HONOR_SIGNED_ZEROS (type) || !(((enum tree_code) (type)->base.code) == COMPLEX_TYPE && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 22185, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE)))
 {
   if (((non_type_check ((op1), "generic-match.c", 22187, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 22187 "generic-match.c" 3 4
                                      __null
# 22187 "generic-match.c"
                                               ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:165, %s:%d\n", "generic-match.c", 22188);
   tree res_op0;
   res_op0 = captures[0];
   tree res;
   res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
   return res;
 }
    }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_COPYSIGNF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22204, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22204, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22205, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22205, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22221, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22240, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22240, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22241, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22241, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGN);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22257, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGN);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22276, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22276, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22277, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22277, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNL);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22293, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNL);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF16:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22312, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22312, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22313, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22313, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF16);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22329, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF16);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22348, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22348, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22349, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22349, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22365, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22384, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22384, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22385, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22385, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22401, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22420, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22420, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22421, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22421, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22437, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22456, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22456, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22457, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22457, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32X);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22473, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32X);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22492, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22492, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22493, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22493, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64X);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22509, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64X);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22528, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22528, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22529, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22529, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128X);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22545, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128X);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_COPYSIGN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22564, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22564, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 22565, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22565, __FUNCTION__)))));
     if (real_onep (o20))
       {
  if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
    {
      {

        tree captures[1] __attribute__ ((__unused__)) = { o21 };
        tree res = generic_simplify_158 (loc, type, op0, op1, captures, CFN_COPYSIGN);
        if (res) return res;
      }
    }
  switch (((enum tree_code) (o21)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 22581, __FUNCTION__)))));
        if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o40 };
       tree res = generic_simplify_254 (loc, type, op0, op1, captures, CFN_COPYSIGN);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op1))
        {
 case CFN_BUILT_IN_COPYSIGNF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22610, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22610, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22611, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22611, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22618, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGN:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22637, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22637, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22638, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22638, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22645, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGN);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22664, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22664, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22665, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22665, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22672, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNL);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF16:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22691, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22691, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22692, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22692, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22699, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF16);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22718, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22718, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22719, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22719, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22726, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22745, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22745, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22746, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22746, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22753, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22772, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22772, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22773, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22773, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22780, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32X:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22799, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22799, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22800, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22800, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22807, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32X);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64X:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22826, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22826, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22827, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22827, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22834, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64X);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128X:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22853, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22853, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22854, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22854, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22861, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128X);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_COPYSIGN:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22880, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 22880, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 22881, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 22881, __FUNCTION__)))));
     if (real_onep (o30))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 22888, __FUNCTION__)))));
        if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_261 (loc, type, op0, op1, captures, CFN_COPYSIGN);
       if (res) return res;
     }
          }
        break;
      }
           default:;
           }
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
if (integer_onep (op1))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op0 };
      tree res = generic_simplify_17 (loc, type, op0, op1, captures, MULT_EXPR);
      if (res) return res;
    }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 22923, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 22924, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        {

 bool overflow_p;
 wide_int mul = wi::mul (wi::to_wide (captures[1]), wi::to_wide (captures[2]), ((signop) ((tree_class_check ((type), (tcc_type), "generic-match.c", 22939, __FUNCTION__))->base.u.bits.unsigned_flag)), &overflow_p);

     if (!overflow_p || ((((enum tree_code) (type)->base.code) == POINTER_TYPE || ((enum tree_code) (type)->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((type), "generic-match.c", 22941, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv)))
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 22943, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 22943 "generic-match.c" 3 4
                                                    __null
# 22943 "generic-match.c"
                                                             ;
         if (((non_type_check ((captures[2]), "generic-match.c", 22944, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 22944 "generic-match.c" 3 4
                                                    __null
# 22944 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:309, %s:%d\n", "generic-match.c", 22945);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = wide_int_to_tree (type, mul);
         tree res;
         res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
         return res;
       }
        }
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 22968, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 22969, __FUNCTION__)))));
 if (integer_pow2p (o21))
   {
     if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

    if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 22978, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 22978, __FUNCTION__))->base.u.bits.unsigned_flag))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:508, %s:%d\n", "generic-match.c", 22980);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        {
   tree ops1[1], res;
   ops1[0] = captures[1];
   res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 22987, __FUNCTION__))->typed.type), ops1[0]);
   res_op1 = res;
        }
        tree res;
        res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
        return res;
      }
  }
       }
   }
        break;
      }
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23001, __FUNCTION__)))));
 if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:554, %s:%d\n", "generic-match.c", 23007);
       if (! tree_invariant_p (captures[1])) return (tree) 
# 23008 "generic-match.c" 3 4
                                                   __null
# 23008 "generic-match.c"
                                                            ;
       tree res_op0;
       res_op0 = unshare_expr (captures[1]);
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
       return res;
     }
   }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_COPYSIGNF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23025, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23025, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23026, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23026, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23040, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23040, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23041, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23041, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGN);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23055, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23055, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23056, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23056, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNL);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF16:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23070, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23070, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23071, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23071, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF16);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23085, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23085, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23086, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23086, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23100, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23100, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23101, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23101, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23115, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23115, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23116, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23116, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF32X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23130, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23130, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23131, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23131, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF32X);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF64X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23145, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23145, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23146, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23146, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF64X);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_COPYSIGNF128X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23160, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23160, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23161, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23161, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_BUILT_IN_COPYSIGNF128X);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_COPYSIGN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23175, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23175, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23176, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 23176, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_106 (loc, type, op0, op1, captures, CFN_COPYSIGN);
    if (res) return res;
  }
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23197, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 23202, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 23203, __FUNCTION__)))));
       if (integer_onep (o40))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o40, o41 };
      tree res = generic_simplify_56 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23225, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23230, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 23231, __FUNCTION__)))));
       if (integer_onep (o30))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op1, o30, o31 };
      tree res = generic_simplify_56 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
   case NEGATE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23245, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23250, __FUNCTION__)))));
      if (tree_negate_expr_p (o50))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o30, o50 };
     tree res = generic_simplify_89 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
     if (tree_negate_expr_p (op1))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { o30, op1 };
    tree res = generic_simplify_89 (loc, type, op0, op1, captures);
    if (res) return res;
  }
       }
       break;
     }
   case GT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23277, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 23278, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
  tree res = generic_simplify_260 (loc, type, op0, op1, captures, GT_EXPR);
  if (res) return res;
       }
       break;
     }
   case LT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23289, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 23290, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
  tree res = generic_simplify_260 (loc, type, op0, op1, captures, LT_EXPR);
  if (res) return res;
       }
       break;
     }
   case GE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23301, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 23302, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
  tree res = generic_simplify_260 (loc, type, op0, op1, captures, GE_EXPR);
  if (res) return res;
       }
       break;
     }
   case LE_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23313, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 23314, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
  tree res = generic_simplify_260 (loc, type, op0, op1, captures, LE_EXPR);
  if (res) return res;
       }
       break;
     }
   case EXACT_DIV_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 23325, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 23326, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23331, __FUNCTION__)))));
      if (o60 == o31 || operand_equal_p (o60, o31, 0))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o31 };
     tree res = generic_simplify_99 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o31 || operand_equal_p (op1, o31, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, o31, o31 };
      tree res = generic_simplify_99 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
      if (tree_negate_expr_p (o20))
 {
   switch (((enum tree_code) (op1)->base.code))
     {
     case NOP_EXPR: case CONVERT_EXPR:
       {
  tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23364, __FUNCTION__)))));
  switch (((enum tree_code) (o40)->base.code))
    {
    case NEGATE_EXPR:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 23369, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o50, o20 };
   tree res = generic_simplify_89 (loc, type, op0, op1, captures);
   if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
     case NEGATE_EXPR:
       {
  tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23384, __FUNCTION__)))));
  {

    tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
    tree res = generic_simplify_89 (loc, type, op0, op1, captures);
    if (res) return res;
  }
         break;
       }
     default:;
     }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case LSHIFT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23404, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 23405, __FUNCTION__)))));
 if (integer_onep (o30))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o31 };
       tree res = generic_simplify_56 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case LSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23423, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 23424, __FUNCTION__)))));
 if (integer_onep (o20))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o20, o21 };
       tree res = generic_simplify_56 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case RDIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23438, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 23439, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };

        if (global_options.x_flag_associative_math && single_use (captures[0]))
   {
     {

 tree tem = const_binop (MULT_EXPR, type, captures[1], captures[3]);

         if (tem)
    {
      if (((non_type_check ((captures[1]), "generic-match.c", 23460, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 23460 "generic-match.c" 3 4
                                                 __null
# 23460 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[3]), "generic-match.c", 23461, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 23461 "generic-match.c" 3 4
                                                 __null
# 23461 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:651, %s:%d\n", "generic-match.c", 23462);
      tree res_op0;
      res_op0 = tem;
      tree res_op1;
      res_op1 = captures[2];
      tree res;
      res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
      return res;
    }
     }
   }
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23486, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23491, __FUNCTION__)))));
       if (tree_negate_expr_p (o40))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
      tree res = generic_simplify_89 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
      if (tree_negate_expr_p (op1))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_89 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23518, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 23519, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23524, __FUNCTION__)))));
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o21 };
      tree res = generic_simplify_99 (loc, type, op0, op1, captures);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || operand_equal_p (op1, o21, 0))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o21 };
       tree res = generic_simplify_99 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
if (tree_negate_expr_p (op0))
  {
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23557, __FUNCTION__)))));
   switch (((enum tree_code) (o30)->base.code))
     {
     case NEGATE_EXPR:
       {
  tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 23562, __FUNCTION__)))));
  {

    tree captures[2] __attribute__ ((__unused__)) = { o40, op0 };
    tree res = generic_simplify_89 (loc, type, op0, op1, captures);
    if (res) return res;
  }
         break;
       }
     default:;
     }
          break;
        }
      case NEGATE_EXPR:
        {
   tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23577, __FUNCTION__)))));
   {

     tree captures[2] __attribute__ ((__unused__)) = { o30, op0 };
     tree res = generic_simplify_89 (loc, type, op0, op1, captures);
     if (res) return res;
   }
          break;
        }
      default:;
      }
  }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 23594, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 23594 "generic-match.c" 3 4
                                    __null
# 23594 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2571, %s:%d\n", "generic-match.c", 23595);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 23607, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 23608, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
  tree res = generic_simplify_152 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MULT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 23631, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 23632, __FUNCTION__)))));
 switch (((enum tree_code) (o31)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o31, op0 };
  tree res = generic_simplify_152 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23658, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23658, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF);
    if (res) return res;
  }
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 23675, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23675, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 23682);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 23688, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SQRTF, type, 1, res_op0);
       if (!res)
         return (tree) 
# 23694 "generic-match.c" 3 4
               __null
# 23694 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23709, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23709, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT);
    if (res) return res;
  }
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 23726, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23726, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 23733);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 23739, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SQRT, type, 1, res_op0);
       if (!res)
         return (tree) 
# 23745 "generic-match.c" 3 4
               __null
# 23745 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23760, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23760, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL);
    if (res) return res;
  }
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 23777, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23777, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 23784);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 23790, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SQRTL, type, 1, res_op0);
       if (!res)
         return (tree) 
# 23796 "generic-match.c" 3 4
               __null
# 23796 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF16:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23811, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23811, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF16);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF32:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23825, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23825, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF32);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF64:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23839, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23839, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF64);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF128:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23853, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23853, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF128);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF32X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23867, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23867, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF32X);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF64X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23881, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23881, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF64X);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_BUILT_IN_SQRTF128X:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23895, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23895, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF128X);
    if (res) return res;
  }
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23909, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23909, __FUNCTION__)))));
     if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o20 };
    tree res = generic_simplify_218 (loc, type, op0, op1, captures, CFN_SQRT);
    if (res) return res;
  }
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 23926, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23926, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 23933);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 23939, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_SQRT, type, 1, res_op0);
       if (!res)
         return (tree) 
# 23945 "generic-match.c" 3 4
               __null
# 23945 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_CBRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 23960, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23960, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_CBRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 23968, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 23968, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 23975);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 23981, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_CBRTF, type, 1, res_op0);
       if (!res)
         return (tree) 
# 23987 "generic-match.c" 3 4
               __null
# 23987 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_CBRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24002, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24002, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_CBRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24010, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24010, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 24017);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24023, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_CBRT, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24029 "generic-match.c" 3 4
               __null
# 24029 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_CBRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24044, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24044, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_CBRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24052, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24052, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3900, %s:%d\n", "generic-match.c", 24059);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24065, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_CBRTL, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24071 "generic-match.c" 3 4
               __null
# 24071 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXPF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24086, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24086, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXPF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24094, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24094, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24101);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24107, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXPF, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24113 "generic-match.c" 3 4
               __null
# 24113 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24128, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24128, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24136, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24136, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24143);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24149, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24155 "generic-match.c" 3 4
               __null
# 24155 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXPL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24170, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24170, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXPL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24178, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24178, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24185);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24191, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXPL, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24197 "generic-match.c" 3 4
               __null
# 24197 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_EXP:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24212, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24212, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_EXP:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24220, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24220, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24227);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24233, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_EXP, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24239 "generic-match.c" 3 4
               __null
# 24239 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP2F:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24254, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24254, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP2F:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24262, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24262, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24269);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24275, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP2F, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24281 "generic-match.c" 3 4
               __null
# 24281 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP2:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24296, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24296, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP2:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24304, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24304, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24311);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24317, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP2, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24323 "generic-match.c" 3 4
               __null
# 24323 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP2L:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24338, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24338, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP2L:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24346, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24346, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24353);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24359, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP2L, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24365 "generic-match.c" 3 4
               __null
# 24365 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_EXP2:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24380, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24380, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_EXP2:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24388, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24388, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24395);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24401, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_EXP2, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24407 "generic-match.c" 3 4
               __null
# 24407 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP10F:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24422, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24422, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP10F:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24430, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24430, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24437);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24443, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP10F, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24449 "generic-match.c" 3 4
               __null
# 24449 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP10:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24464, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24464, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP10:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24472, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24472, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24479);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24485, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP10, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24491 "generic-match.c" 3 4
               __null
# 24491 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXP10L:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24506, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24506, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_EXP10L:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24514, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24514, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24521);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24527, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP10L, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24533 "generic-match.c" 3 4
               __null
# 24533 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_EXP10:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24548, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24548, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_EXP10:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24556, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24556, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24563);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24569, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_EXP10, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24575 "generic-match.c" 3 4
               __null
# 24575 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POW10F:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24590, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24590, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POW10F:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24598, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24598, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24605);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24611, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POW10F, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24617 "generic-match.c" 3 4
               __null
# 24617 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POW10:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24632, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24632, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POW10:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24640, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24640, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24647);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24653, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POW10, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24659 "generic-match.c" 3 4
               __null
# 24659 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POW10L:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24674, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24674, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POW10L:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24682, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24682, __FUNCTION__)))));
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

   if (global_options.x_flag_unsafe_math_optimizations)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3906, %s:%d\n", "generic-match.c", 24689);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[1];
         ops1[1] = captures[3];
         res = fold_build2_loc (loc, PLUS_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 24695, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res;
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POW10L, type, 1, res_op0);
       if (!res)
         return (tree) 
# 24701 "generic-match.c" 3 4
               __null
# 24701 "generic-match.c"
                        ;
       return res;
     }
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_TANF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24716, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24716, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_COSF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24724, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24724, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_BUILT_IN_TANF, CFN_BUILT_IN_COSF, CFN_BUILT_IN_SINF);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_TAN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24745, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24745, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_COS:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24753, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24753, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_BUILT_IN_TAN, CFN_BUILT_IN_COS, CFN_BUILT_IN_SIN);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_TANL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24774, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24774, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_COSL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24782, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24782, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_BUILT_IN_TANL, CFN_BUILT_IN_COSL, CFN_BUILT_IN_SINL);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_TAN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24803, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24803, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_COS:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24811, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24811, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_TAN, CFN_COS, CFN_SIN);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_COSF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24832, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24832, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_TANF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24840, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24840, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o20, op0 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_BUILT_IN_TANF, CFN_BUILT_IN_COSF, CFN_BUILT_IN_SINF);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_COS:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24861, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24861, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_TAN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24869, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24869, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o20, op0 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_BUILT_IN_TAN, CFN_BUILT_IN_COS, CFN_BUILT_IN_SIN);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_COSL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24890, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24890, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_TANL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24898, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24898, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o20, op0 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_BUILT_IN_TANL, CFN_BUILT_IN_COSL, CFN_BUILT_IN_SINL);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_COS:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 24919, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24919, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_TAN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24927, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24927, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o20, op0 };
       tree res = generic_simplify_36 (loc, type, op0, op1, captures, CFN_TAN, CFN_COS, CFN_SIN);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op1))
        {
 case CFN_BUILT_IN_POWF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24958, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24958, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24959, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 24959, __FUNCTION__)))));
     if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case REAL_CST:
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWF);
   if (res) return res;
        }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_POW:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24981, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 24981, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 24982, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 24982, __FUNCTION__)))));
     if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case REAL_CST:
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_BUILT_IN_POW);
   if (res) return res;
        }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_BUILT_IN_POWL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25004, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25004, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25005, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25005, __FUNCTION__)))));
     if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case REAL_CST:
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWL);
   if (res) return res;
        }
        break;
      }
           default:;
           }
       }
     break;
   }
 case CFN_POW:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25027, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25027, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25028, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25028, __FUNCTION__)))));
     if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
       {
  switch (((enum tree_code) (o31)->base.code))
    {
    case REAL_CST:
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_POW);
   if (res) return res;
        }
        break;
      }
           default:;
           }
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_POWF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25060, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25060, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25061, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25061, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWF);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POWF:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25086, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25086, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25087, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25087, __FUNCTION__)))));
        if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
       tree res = generic_simplify_29 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWF);
       if (res) return res;
     }
          }
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
       tree res = generic_simplify_47 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWF);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POW:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25117, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25117, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25118, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25118, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_BUILT_IN_POW);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POW:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25143, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25143, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25144, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25144, __FUNCTION__)))));
        if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
       tree res = generic_simplify_29 (loc, type, op0, op1, captures, CFN_BUILT_IN_POW);
       if (res) return res;
     }
          }
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
       tree res = generic_simplify_47 (loc, type, op0, op1, captures, CFN_BUILT_IN_POW);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POWL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25174, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25174, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25175, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25175, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWL);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POWL:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25200, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25200, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25201, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25201, __FUNCTION__)))));
        if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
       tree res = generic_simplify_29 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWL);
       if (res) return res;
     }
          }
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
       tree res = generic_simplify_47 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWL);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_POW:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25231, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25231, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25232, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25232, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
   tree res = generic_simplify_18 (loc, type, op0, op1, captures, CFN_POW);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_POW:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25257, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25257, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25258, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25258, __FUNCTION__)))));
        if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
       tree res = generic_simplify_29 (loc, type, op0, op1, captures, CFN_POW);
       if (res) return res;
     }
          }
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
       tree res = generic_simplify_47 (loc, type, op0, op1, captures, CFN_POW);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POWIF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25288, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25288, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25289, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25289, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POWIF:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25297, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25297, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25298, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25298, __FUNCTION__)))));
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };

       if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
         {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4165, %s:%d\n", "generic-match.c", 25307);
    tree res_op0;
    {
      tree ops1[2], res;
      ops1[0] = captures[1];
      ops1[1] = captures[4];
      res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 25313, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res_op1;
    res_op1 = captures[2];
    tree res;
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POWIF, type, 2, res_op0, res_op1);
    if (!res)
      return (tree) 
# 25321 "generic-match.c" 3 4
            __null
# 25321 "generic-match.c"
                     ;
    return res;
         }
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POWI:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25337, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25337, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25338, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25338, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POWI:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25346, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25346, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25347, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25347, __FUNCTION__)))));
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };

       if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
         {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4165, %s:%d\n", "generic-match.c", 25356);
    tree res_op0;
    {
      tree ops1[2], res;
      ops1[0] = captures[1];
      ops1[1] = captures[4];
      res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 25362, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res_op1;
    res_op1 = captures[2];
    tree res;
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POWI, type, 2, res_op0, res_op1);
    if (!res)
      return (tree) 
# 25370 "generic-match.c" 3 4
            __null
# 25370 "generic-match.c"
                     ;
    return res;
         }
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POWIL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25386, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25386, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 25387, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25387, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_POWIL:
      {
        tree o50 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25395, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 25395, __FUNCTION__)))));
        tree o51 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 25396, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 25396, __FUNCTION__)))));
        if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
   {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };

       if (global_options.x_flag_unsafe_math_optimizations && canonicalize_math_p ())
         {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4165, %s:%d\n", "generic-match.c", 25405);
    tree res_op0;
    {
      tree ops1[2], res;
      ops1[0] = captures[1];
      ops1[1] = captures[4];
      res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 25411, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
      res_op0 = res;
    }
    tree res_op1;
    res_op1 = captures[2];
    tree res;
    res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POWIL, type, 2, res_op0, res_op1);
    if (!res)
      return (tree) 
# 25419 "generic-match.c" 3 4
            __null
# 25419 "generic-match.c"
                     ;
    return res;
         }
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  return (tree) 
# 25438 "generic-match.c" 3 4
        __null
# 25438 "generic-match.c"
                 ;
}

static tree
generic_simplify_TRUNC_DIV_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op1)->base.code))
    {
    case LSHIFT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 25448, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 25449, __FUNCTION__)))));
 if (integer_onep (o30))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o31 };

       if ((((tree_class_check ((type), (tcc_type), "generic-match.c", 25456, __FUNCTION__))->base.u.bits.unsigned_flag) || tree_expr_nonnegative_p (captures[0])) && (!(((enum tree_code) (type)->base.code) == VECTOR_TYPE) || target_supports_op_p (type, RSHIFT_EXPR, optab_vector) || target_supports_op_p (type, RSHIFT_EXPR, optab_scalar)))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:235, %s:%d\n", "generic-match.c", 25458);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    res_op1 = captures[2];
    tree res;
    res = fold_build2_loc (loc, RSHIFT_EXPR, type, res_op0, res_op1);
    if (((non_type_check ((captures[1]), "generic-match.c", 25465, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
     }
   }
        break;
      }
    default:;
    }
if (integer_onep (op1))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { op0 };
      tree res = generic_simplify_17 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
      if (res) return res;
    }
  }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_33 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_269 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_241 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ABS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 25515, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25533, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 25551, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25569, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25583, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 25584, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_200 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25611, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 25616, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 25617, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
       tree res = generic_simplify_217 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25648, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 25649, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_217 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25676, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 25677, __FUNCTION__)))));
 if (integer_pow2p (o21))
   {
     if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
       {
  {

    tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

    if (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 25686, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 25686, __FUNCTION__))->base.u.bits.unsigned_flag))
      {
        if (((non_type_check ((captures[1]), "generic-match.c", 25688, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 25688 "generic-match.c" 3 4
                                                   __null
# 25688 "generic-match.c"
                                                            ;
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:499, %s:%d\n", "generic-match.c", 25689);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = wide_int_to_tree (type, wi::mask (((tree_class_check ((type), (tcc_type), "generic-match.c", 25693, __FUNCTION__))->type_common.precision) - wi::exact_log2 (wi::to_wide (captures[1])), false, ((tree_class_check ((type), (tcc_type), "generic-match.c", 25693, __FUNCTION__))->type_common.precision)));
        tree res;
        res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
        return res;
      }
  }
       }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, TRUNC_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  return (tree) 
# 25723 "generic-match.c" 3 4
        __null
# 25723 "generic-match.c"
                 ;
}

static tree
generic_simplify_CEIL_DIV_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_17 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_33 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_269 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_241 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ABS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 25769, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25787, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 25805, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25823, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25837, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 25842, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 25843, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
       tree res = generic_simplify_217 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25874, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 25875, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_217 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25902, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 25903, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, CEIL_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  return (tree) 
# 25926 "generic-match.c" 3 4
        __null
# 25926 "generic-match.c"
                 ;
}

static tree
generic_simplify_FLOOR_DIV_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_17 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_33 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_269 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_241 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ABS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 25972, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 25990, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26008, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26026, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

    if (((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 26044, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)) && ((tree_class_check ((type), (tcc_type), "generic-match.c", 26044, __FUNCTION__))->base.u.bits.unsigned_flag))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:279, %s:%d\n", "generic-match.c", 26046);
 tree res_op0;
 res_op0 = captures[0];
 tree res_op1;
 res_op1 = captures[1];
 tree res;
 res = fold_build2_loc (loc, TRUNC_DIV_EXPR, type, res_op0, res_op1);
 return res;
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26060, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 26065, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 26066, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
       tree res = generic_simplify_217 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26097, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26098, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_217 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26125, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26126, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, FLOOR_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  return (tree) 
# 26149 "generic-match.c" 3 4
        __null
# 26149 "generic-match.c"
                 ;
}

static tree
generic_simplify_ROUND_DIV_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_17 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_33 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_269 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_241 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ABS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26195, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26213, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26231, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26249, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26263, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 26268, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 26269, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
       tree res = generic_simplify_217 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26300, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26301, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_217 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26328, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26329, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, ROUND_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  return (tree) 
# 26352 "generic-match.c" 3 4
        __null
# 26352 "generic-match.c"
                 ;
}

static tree
generic_simplify_EXACT_DIV_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_17 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_33 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_269 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_241 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ABS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26398, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26416, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_55 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26434, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26452, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_184 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26466, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26467, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_200 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26494, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 26499, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 26500, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
       tree res = generic_simplify_217 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26531, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26532, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_217 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26559, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26560, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_8 (loc, type, op0, op1, captures, EXACT_DIV_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  return (tree) 
# 26583 "generic-match.c" 3 4
        __null
# 26583 "generic-match.c"
                 ;
}

static tree
generic_simplify_RDIV_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (((((enum tree_code) (type)->base.code) == REAL_TYPE) || ((((enum tree_code) (type)->base.code) == COMPLEX_TYPE || (((enum tree_code) (type)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 26595, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) && ! HONOR_NANS (type) && ! HONOR_INFINITIES (type))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:318, %s:%d\n", "generic-match.c", 26597);
     tree res;
     res = build_one_cst (type);
     if (((non_type_check ((captures[0]), "generic-match.c", 26600, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26610, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_30 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26628, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_30 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26642, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26647, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case ABS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 26652, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };
     tree res = generic_simplify_73 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case ABS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 26674, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26679, __FUNCTION__)))));
      if (o50 == o30 || (operand_equal_p (o50, o30, 0) && types_match (o50, o30)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o30 };
     tree res = generic_simplify_73 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case ABS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26705, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_73 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26723, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_73 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  if (real_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (!HONOR_SNANS (type))
   {
     if (((non_type_check ((op1), "generic-match.c", 26745, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26745 "generic-match.c" 3 4
                                        __null
# 26745 "generic-match.c"
                                                 ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:347, %s:%d\n", "generic-match.c", 26746);
     tree res_op0;
     res_op0 = captures[0];
     tree res;
     res = non_lvalue_loc (loc, res_op0);
     return res;
   }
      }
    }
  if (real_minus_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (!HONOR_SNANS (type))
   {
     if (((non_type_check ((op1), "generic-match.c", 26763, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26763 "generic-match.c" 3 4
                                        __null
# 26763 "generic-match.c"
                                                 ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:353, %s:%d\n", "generic-match.c", 26764);
     tree res_op0;
     res_op0 = captures[0];
     tree res;
     res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case RDIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 26777, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 26778, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };

   if (global_options.x_flag_reciprocal_math)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:359, %s:%d\n", "generic-match.c", 26785);
       tree res_op0;
       res_op0 = captures[1];
       tree res_op1;
       {
  tree ops1[2], res;
  ops1[0] = captures[2];
  ops1[1] = captures[3];
  res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 26793, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MULT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26809, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 26810, __FUNCTION__)))));
 switch (((enum tree_code) (o31)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };

  if (global_options.x_flag_reciprocal_math)
    {
      {

 tree tem = const_binop (RDIV_EXPR, type, build_one_cst (type), captures[3]);

   if (tem)
     {
       if (((non_type_check ((captures[3]), "generic-match.c", 26827, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26827 "generic-match.c" 3 4
                                                  __null
# 26827 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:367, %s:%d\n", "generic-match.c", 26828);
       tree res_op0;
       {
         tree ops1[2], res;
         ops1[0] = captures[0];
         ops1[1] = tem;
         res = fold_build2_loc (loc, MULT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 26834, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
         res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[2];
       tree res;
       res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
       return res;
     }
      }
    }
       }
       break;
     }
          default:;
          }
        break;
      }
    case RDIV_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26854, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 26855, __FUNCTION__)))));
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };

   if (global_options.x_flag_reciprocal_math)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:372, %s:%d\n", "generic-match.c", 26862);
       tree res_op0;
       {
  tree ops1[2], res;
  ops1[0] = captures[0];
  ops1[1] = captures[2];
  res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 26868, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
  res_op0 = res;
       }
       tree res_op1;
       res_op1 = captures[3];
       tree res;
       res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 26882, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:377, %s:%d\n", "generic-match.c", 26886);
   tree res_op0;
   {
     tree ops1[1], res;
     ops1[0] = captures[0];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 26891, __FUNCTION__))->typed.type), ops1[0]);
     res_op0 = res;
   }
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, RDIV_EXPR, type, res_op0, res_op1);
   return res;
 }
        break;
      }
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

   if (global_options.x_optimize)
     {

       if (global_options.x_flag_reciprocal_math && !real_zerop (captures[1]))
  {
    {

 tree tem = const_binop (RDIV_EXPR, type, build_one_cst (type), captures[1]);

        if (tem)
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 26919, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26919 "generic-match.c" 3 4
                                                __null
# 26919 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:405, %s:%d\n", "generic-match.c", 26920);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = tem;
     tree res;
     res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
     return res;
   }
    }
  }
       else
  {

    if (REAL_CST != COMPLEX_CST)
      {
        {

 tree inverse = exact_inverse (type, captures[1]);

     if (inverse)
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 26942, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26942 "generic-match.c" 3 4
                                                    __null
# 26942 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:409, %s:%d\n", "generic-match.c", 26943);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = inverse;
         tree res;
         res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
         return res;
       }
        }
      }
  }
     }
 }
        break;
      }
    case COMPLEX_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

   if (global_options.x_optimize)
     {

       if (global_options.x_flag_reciprocal_math && !real_zerop (captures[1]))
  {
    {

 tree tem = const_binop (RDIV_EXPR, type, build_one_cst (type), captures[1]);

        if (tem)
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 26976, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26976 "generic-match.c" 3 4
                                                __null
# 26976 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:405, %s:%d\n", "generic-match.c", 26977);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = tem;
     tree res;
     res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
     return res;
   }
    }
  }
       else
  {

    if (COMPLEX_CST != COMPLEX_CST)
      {
        {

 tree inverse = exact_inverse (type, captures[1]);

     if (inverse)
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 26999, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 26999 "generic-match.c" 3 4
                                                    __null
# 26999 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:409, %s:%d\n", "generic-match.c", 27000);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = inverse;
         tree res;
         res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
         return res;
       }
        }
      }
  }
     }
 }
        break;
      }
    case VECTOR_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

   if (global_options.x_optimize)
     {

       if (global_options.x_flag_reciprocal_math && !real_zerop (captures[1]))
  {
    {

 tree tem = const_binop (RDIV_EXPR, type, build_one_cst (type), captures[1]);

        if (tem)
   {
     if (((non_type_check ((captures[1]), "generic-match.c", 27033, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 27033 "generic-match.c" 3 4
                                                __null
# 27033 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:405, %s:%d\n", "generic-match.c", 27034);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = tem;
     tree res;
     res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
     return res;
   }
    }
  }
       else
  {

    if (VECTOR_CST != COMPLEX_CST)
      {
        {

 tree inverse = exact_inverse (type, captures[1]);

     if (inverse)
       {
         if (((non_type_check ((captures[1]), "generic-match.c", 27056, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 27056 "generic-match.c" 3 4
                                                    __null
# 27056 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:409, %s:%d\n", "generic-match.c", 27057);
         tree res_op0;
         res_op0 = captures[0];
         tree res_op1;
         res_op1 = inverse;
         tree res;
         res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
         return res;
       }
        }
      }
  }
     }
 }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op1))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27078, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27078, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27083, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27084, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27091);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27101, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SQRTF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27105, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27107 "generic-match.c" 3 4
               __null
# 27107 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27124, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27124, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27129, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27130, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27137);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27147, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SQRT, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27151, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27153 "generic-match.c" 3 4
               __null
# 27153 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27170, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27170, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27175, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27176, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27183);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27193, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_SQRTL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27197, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27199 "generic-match.c" 3 4
               __null
# 27199 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27216, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27216, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27221, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27222, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27229);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27239, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_SQRT, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27243, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27245 "generic-match.c" 3 4
               __null
# 27245 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_CBRTF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27262, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27262, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27267, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27268, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27275);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27285, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_CBRTF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27289, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27291 "generic-match.c" 3 4
               __null
# 27291 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_CBRT:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27308, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27308, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27313, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27314, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27321);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27331, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_CBRT, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27335, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27337 "generic-match.c" 3 4
               __null
# 27337 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_CBRTL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27354, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27354, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case RDIV_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 27359, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 27360, __FUNCTION__)))));
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o30, o40, o41 };

      if (global_options.x_flag_unsafe_math_optimizations)
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3912, %s:%d\n", "generic-match.c", 27367);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[1], res;
     {
       tree ops2[2], res;
       ops2[0] = captures[4];
       ops2[1] = captures[3];
       res = fold_build2_loc (loc, RDIV_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27377, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
       ops1[0] = res;
     }
     {
       res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_CBRTL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27381, __FUNCTION__))->typed.type), 1, ops1[0]);
       if (!res)
         return (tree) 
# 27383 "generic-match.c" 3 4
               __null
# 27383 "generic-match.c"
                        ;
     }
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_EXPF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27400, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27400, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27407);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27416, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXPF, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27420, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27422 "generic-match.c" 3 4
                __null
# 27422 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27435, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27435, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27442);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27451, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27455, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27457 "generic-match.c" 3 4
                __null
# 27457 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXPL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27470, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27470, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27477);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27486, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXPL, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27490, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27492 "generic-match.c" 3 4
                __null
# 27492 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_EXP:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27505, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27505, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27512);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27521, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_EXP, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27525, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27527 "generic-match.c" 3 4
                __null
# 27527 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP2F:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27540, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27540, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27547);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27556, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP2F, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27560, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27562 "generic-match.c" 3 4
                __null
# 27562 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP2:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27575, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27575, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27582);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27591, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP2, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27595, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27597 "generic-match.c" 3 4
                __null
# 27597 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP2L:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27610, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27610, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27617);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27626, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP2L, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27630, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27632 "generic-match.c" 3 4
                __null
# 27632 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_EXP2:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27645, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27645, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27652);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27661, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_EXP2, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27665, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27667 "generic-match.c" 3 4
                __null
# 27667 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP10F:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27680, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27680, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27687);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27696, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP10F, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27700, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27702 "generic-match.c" 3 4
                __null
# 27702 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP10:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27715, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27715, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27722);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27731, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP10, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27735, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27737 "generic-match.c" 3 4
                __null
# 27737 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_EXP10L:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27750, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27750, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27757);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27766, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_EXP10L, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27770, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27772 "generic-match.c" 3 4
                __null
# 27772 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_EXP10:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27785, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27785, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27792);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27801, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_EXP10, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27805, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27807 "generic-match.c" 3 4
                __null
# 27807 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_POW10F:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27820, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27820, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27827);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27836, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POW10F, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27840, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27842 "generic-match.c" 3 4
                __null
# 27842 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_POW10:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27855, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27855, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27862);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27871, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POW10, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27875, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27877 "generic-match.c" 3 4
                __null
# 27877 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 case CFN_BUILT_IN_POW10L:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27890, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27890, __FUNCTION__)))));
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o30 };

       if (global_options.x_flag_unsafe_math_optimizations)
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3918, %s:%d\n", "generic-match.c", 27897);
    tree res_op0;
    res_op0 = captures[0];
    tree res_op1;
    {
      tree ops1[1], res;
      {
        tree ops2[1], res;
        ops2[0] = captures[2];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 27906, __FUNCTION__))->typed.type), ops2[0]);
        ops1[0] = res;
      }
      {
        res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_POW10L, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 27910, __FUNCTION__))->typed.type), 1, ops1[0]);
        if (!res)
          return (tree) 
# 27912 "generic-match.c" 3 4
                __null
# 27912 "generic-match.c"
                         ;
      }
      res_op1 = res;
    }
    tree res;
    res = fold_build2_loc (loc, MULT_EXPR, type, res_op0, res_op1);
    return res;
  }
     }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SINF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 27935, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27935, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_COSF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27943, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27943, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_231 (loc, type, op0, op1, captures, CFN_BUILT_IN_SINF, CFN_BUILT_IN_COSF, CFN_BUILT_IN_TANF);
       if (res) return res;
     }
          }
        break;
      }
    case CFN_BUILT_IN_TANF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27957, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27957, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_111 (loc, type, op0, op1, captures, CFN_BUILT_IN_SINF, CFN_BUILT_IN_TANF, CFN_BUILT_IN_COSF);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SIN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 27978, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27978, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_COS:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 27986, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 27986, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_231 (loc, type, op0, op1, captures, CFN_BUILT_IN_SIN, CFN_BUILT_IN_COS, CFN_BUILT_IN_TAN);
       if (res) return res;
     }
          }
        break;
      }
    case CFN_BUILT_IN_TAN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28000, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28000, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_111 (loc, type, op0, op1, captures, CFN_BUILT_IN_SIN, CFN_BUILT_IN_TAN, CFN_BUILT_IN_COS);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SINL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28021, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28021, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_COSL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28029, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28029, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_231 (loc, type, op0, op1, captures, CFN_BUILT_IN_SINL, CFN_BUILT_IN_COSL, CFN_BUILT_IN_TANL);
       if (res) return res;
     }
          }
        break;
      }
    case CFN_BUILT_IN_TANL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28043, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28043, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_111 (loc, type, op0, op1, captures, CFN_BUILT_IN_SINL, CFN_BUILT_IN_TANL, CFN_BUILT_IN_COSL);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SIN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28064, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28064, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_COS:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28072, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28072, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_231 (loc, type, op0, op1, captures, CFN_SIN, CFN_COS, CFN_TAN);
       if (res) return res;
     }
          }
        break;
      }
    case CFN_TAN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28086, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28086, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_111 (loc, type, op0, op1, captures, CFN_SIN, CFN_TAN, CFN_COS);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_COSF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28107, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28107, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SINF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28115, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28115, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_23 (loc, type, op0, op1, captures, CFN_BUILT_IN_COSF, CFN_BUILT_IN_SINF, CFN_BUILT_IN_TANF);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_COS:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28136, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28136, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SIN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28144, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28144, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_23 (loc, type, op0, op1, captures, CFN_BUILT_IN_COS, CFN_BUILT_IN_SIN, CFN_BUILT_IN_TAN);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_COSL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28165, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28165, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SINL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28173, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28173, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_23 (loc, type, op0, op1, captures, CFN_BUILT_IN_COSL, CFN_BUILT_IN_SINL, CFN_BUILT_IN_TANL);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_COS:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28194, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28194, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SIN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28202, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28202, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_23 (loc, type, op0, op1, captures, CFN_COS, CFN_SIN, CFN_TAN);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_TANF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28223, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28223, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SINF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28231, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28231, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_235 (loc, type, op0, op1, captures, CFN_BUILT_IN_TANF, CFN_BUILT_IN_SINF, CFN_BUILT_IN_COSF);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_TAN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28252, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28252, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SIN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28260, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28260, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_235 (loc, type, op0, op1, captures, CFN_BUILT_IN_TAN, CFN_BUILT_IN_SIN, CFN_BUILT_IN_COS);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_TANL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28281, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28281, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SINL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28289, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28289, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_235 (loc, type, op0, op1, captures, CFN_BUILT_IN_TANL, CFN_BUILT_IN_SINL, CFN_BUILT_IN_COSL);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_TAN:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28310, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28310, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SIN:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28318, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28318, __FUNCTION__)))));
        if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
       tree res = generic_simplify_235 (loc, type, op0, op1, captures, CFN_TAN, CFN_SIN, CFN_COS);
       if (res) return res;
     }
          }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POWF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28339, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28339, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28340, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28340, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_131 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWF);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POW:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28362, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28362, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28363, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28363, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_131 (loc, type, op0, op1, captures, CFN_BUILT_IN_POW);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_POWL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28385, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28385, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28386, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28386, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_131 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWL);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
   }
 case CFN_POW:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28408, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28408, __FUNCTION__)))));
     tree o21 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 28409, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28409, __FUNCTION__)))));
     switch (((enum tree_code) (o21)->base.code))
       {
       case REAL_CST:
         {
    if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
   tree res = generic_simplify_131 (loc, type, op0, op1, captures, CFN_POW);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case CALL_EXPR:
      switch (get_call_combined_fn (op1))
        {
 case CFN_BUILT_IN_POWF:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28441, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28441, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28442, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28442, __FUNCTION__)))));
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };
       tree res = generic_simplify_160 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWF);
       if (res) return res;
     }
     break;
   }
 case CFN_BUILT_IN_POW:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28453, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28453, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28454, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28454, __FUNCTION__)))));
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };
       tree res = generic_simplify_160 (loc, type, op0, op1, captures, CFN_BUILT_IN_POW);
       if (res) return res;
     }
     break;
   }
 case CFN_BUILT_IN_POWL:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28465, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28465, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28466, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28466, __FUNCTION__)))));
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };
       tree res = generic_simplify_160 (loc, type, op0, op1, captures, CFN_BUILT_IN_POWL);
       if (res) return res;
     }
     break;
   }
 case CFN_POW:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28477, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 28477, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 28478, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 28478, __FUNCTION__)))));
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };
       tree res = generic_simplify_160 (loc, type, op0, op1, captures, CFN_POW);
       if (res) return res;
     }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  return (tree) 
# 28492 "generic-match.c" 3 4
        __null
# 28492 "generic-match.c"
                 ;
}

static tree
generic_simplify_CEIL_MOD_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_237 (loc, type, op0, op1, captures, CEIL_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_50 (loc, type, op0, op1, captures, CEIL_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_132 (loc, type, op0, op1, captures, CEIL_MOD_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_221 (loc, type, op0, op1, captures, CEIL_MOD_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case CEIL_MOD_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28538, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28539, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_32 (loc, type, op0, op1, captures, CEIL_MOD_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28553, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28554, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_97 (loc, type, op0, op1, captures, CEIL_MOD_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 28581 "generic-match.c" 3 4
        __null
# 28581 "generic-match.c"
                 ;
}

static tree
generic_simplify_FLOOR_MOD_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_237 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_50 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_132 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_221 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case FLOOR_MOD_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28627, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28628, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_32 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28642, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28643, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_97 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 28674, __FUNCTION__)))));
 {
   tree o30_pops[1];
   if (tree_power_of_two_cand (o30, o30_pops))
     {
       tree o40 = o30_pops[0];
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o40 };
  tree res = generic_simplify_3 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
  if (res) return res;
       }
}
 }
        break;
      }
    default:;
    }
{
  tree op1_pops[1];
  if (tree_power_of_two_cand (op1, op1_pops))
    {
      tree o30 = op1_pops[0];
      {

 tree captures[4] __attribute__ ((__unused__)) = { op0, op1, op1, o30 };
 tree res = generic_simplify_123 (loc, type, op0, op1, captures, FLOOR_MOD_EXPR);
 if (res) return res;
      }
}
}
  return (tree) 
# 28705 "generic-match.c" 3 4
        __null
# 28705 "generic-match.c"
                 ;
}

static tree
generic_simplify_ROUND_MOD_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_237 (loc, type, op0, op1, captures, ROUND_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_50 (loc, type, op0, op1, captures, ROUND_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_132 (loc, type, op0, op1, captures, ROUND_MOD_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_221 (loc, type, op0, op1, captures, ROUND_MOD_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case ROUND_MOD_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28751, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28752, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_32 (loc, type, op0, op1, captures, ROUND_MOD_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28766, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28767, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_97 (loc, type, op0, op1, captures, ROUND_MOD_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 28794 "generic-match.c" 3 4
        __null
# 28794 "generic-match.c"
                 ;
}

static tree
generic_simplify_TRUNC_MOD_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_237 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_50 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
 if (res) return res;
      }
    }
  if (integer_minus_onep (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_132 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
 if (res) return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_221 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case TRUNC_MOD_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28840, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28841, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_32 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28855, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28856, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_97 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

   if (((signop) ((tree_class_check ((type), (tcc_type), "generic-match.c", 28891, __FUNCTION__))->base.u.bits.unsigned_flag)) == SIGNED && !((tree_class_check ((captures[1]), (tcc_constant), "generic-match.c", 28891, __FUNCTION__))->base.public_flag) && wi::neg_p (wi::to_wide (captures[1])) && !(!(any_integral_type_check ((type), "generic-match.c", 28891, __FUNCTION__))->base.u.bits.unsigned_flag && global_options.x_flag_trapv) && !sign_bit_p (captures[1], captures[1]))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:455, %s:%d\n", "generic-match.c", 28893);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       {
  tree ops1[1], res;
  ops1[0] = captures[1];
  res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 28900, __FUNCTION__))->typed.type), ops1[0]);
  res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, TRUNC_MOD_EXPR, type, res_op0, res_op1);
       return res;
     }
 }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 28912, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 28917, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
  tree res = generic_simplify_180 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      {
 tree o30_pops[1];
 if (tree_power_of_two_cand (o30, o30_pops))
   {
     tree o40 = o30_pops[0];
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o40 };
       tree res = generic_simplify_3 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
       if (res) return res;
     }
}
      }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 28945, __FUNCTION__)))));
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
   tree res = generic_simplify_180 (loc, type, op0, op1, captures);
   if (res) return res;
 }
        break;
      }
    default:;
    }
{
  tree op1_pops[1];
  if (tree_power_of_two_cand (op1, op1_pops))
    {
      tree o30 = op1_pops[0];
      {

 tree captures[4] __attribute__ ((__unused__)) = { op0, op1, op1, o30 };
 tree res = generic_simplify_123 (loc, type, op0, op1, captures, TRUNC_MOD_EXPR);
 if (res) return res;
      }
}
}
  return (tree) 
# 28969 "generic-match.c" 3 4
        __null
# 28969 "generic-match.c"
                 ;
}

static tree
generic_simplify_LSHIFT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case RSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 28979, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 28980, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

      if (wi::ltu_p (wi::to_wide (captures[1]), element_precision (type)))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2148, %s:%d\n", "generic-match.c", 28993);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[2], res;
     ops1[0] = build_minus_one_cst (type);
     ops1[1] = captures[1];
     res = fold_build2_loc (loc, LSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 29001, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
if (integer_onep (op0))
  {
    switch (((enum tree_code) (op1)->base.code))
      {
      case MINUS_EXPR:
        {
   tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29024, __FUNCTION__)))));
   tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29025, __FUNCTION__)))));
   switch (((enum tree_code) (o30)->base.code))
     {
     case INTEGER_CST:
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o31 };

    if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && wi::eq_p (wi::to_wide (captures[2]), ((tree_class_check ((type), (tcc_type), "generic-match.c", 29034, __FUNCTION__))->type_common.precision) - 1) && single_use (captures[1]))
      {

        if (((tree_class_check ((type), (tcc_type), "generic-match.c", 29037, __FUNCTION__))->base.u.bits.unsigned_flag))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:638, %s:%d\n", "generic-match.c", 29039);
     tree res_op0;
     {
       tree ops1[2], res;
       ops1[0] = captures[0];
       ops1[1] = captures[2];
       res = fold_build2_loc (loc, LSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 29045, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
       res_op0 = res;
     }
     tree res_op1;
     res_op1 = captures[3];
     tree res;
     res = fold_build2_loc (loc, RSHIFT_EXPR, type, res_op0, res_op1);
     return res;
   }
        else
   {
     {

 tree utype = unsigned_type_for (type);
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:641, %s:%d\n", "generic-match.c", 29059);
         tree res_op0;
         {
    tree ops1[2], res;
    {
      tree ops2[2], res;
      {
        tree ops3[1], res;
        ops3[0] = captures[0];
        if (((contains_struct_check ((ops3[0]), (TS_TYPED), "generic-match.c", 29068, __FUNCTION__))->typed.type) != utype)
          res = fold_build1_loc (loc, NOP_EXPR, utype, ops3[0]);
        else
          res = ops3[0];
        ops2[0] = res;
      }
      ops2[1] = captures[2];
      res = fold_build2_loc (loc, LSHIFT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 29075, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
      ops1[0] = res;
    }
    ops1[1] = captures[3];
    res = fold_build2_loc (loc, RSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 29079, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
         }
         tree res;
         res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
         return res;
     }
   }
      }
  }
         break;
       }
     default:;
     }
          break;
        }
      default:;
      }
  }
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_270 (loc, type, op0, op1, captures, LSHIFT_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_173 (loc, type, op0, op1, captures, LSHIFT_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VECTOR_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_266 (loc, type, op0, op1, captures, LSHIFT_EXPR);
   if (res) return res;
 }
        break;
      }
    case CONSTRUCTOR:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_41 (loc, type, op0, op1, captures, LSHIFT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case LSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29144, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29145, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_249 (loc, type, op0, op1, captures, LSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29172, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29177, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29178, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1 };
       tree res = generic_simplify_105 (loc, type, op0, op1, captures, BIT_AND_EXPR, LSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29205, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29206, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1 };
       tree res = generic_simplify_105 (loc, type, op0, op1, captures, BIT_XOR_EXPR, LSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29233, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29234, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1 };
       tree res = generic_simplify_105 (loc, type, op0, op1, captures, BIT_IOR_EXPR, LSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29265, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29266, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1 };
        tree res = generic_simplify_4 (loc, type, op0, op1, captures, BIT_AND_EXPR, LSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29293, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29294, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1 };
        tree res = generic_simplify_4 (loc, type, op0, op1, captures, BIT_XOR_EXPR, LSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29321, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29322, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1 };
        tree res = generic_simplify_4 (loc, type, op0, op1, captures, BIT_IOR_EXPR, LSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 29349 "generic-match.c" 3 4
        __null
# 29349 "generic-match.c"
                 ;
}

static tree
generic_simplify_BIT_AND_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29359, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29364, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 29369, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };
     tree res = generic_simplify_253 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29391, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29396, __FUNCTION__)))));
      if (o50 == o30 || (operand_equal_p (o50, o30, 0) && types_match (o50, o30)))
        {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o30 };
     tree res = generic_simplify_253 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29422, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_253 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29440, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_253 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29458, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29459, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 29464, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 29465, __FUNCTION__)))));
       if (integer_onep (o40))
  {
    if (integer_minus_onep (o31))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o30, o41 };

   if (((tree_class_check ((type), (tcc_type), "generic-match.c", 29474, __FUNCTION__))->base.u.bits.unsigned_flag))
     {
       if (((non_type_check ((op1), "generic-match.c", 29476, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 29476 "generic-match.c" 3 4
                                          __null
# 29476 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:662, %s:%d\n", "generic-match.c", 29477);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       {
         tree ops1[1], res;
         {
    tree ops2[2], res;
    ops2[0] = build_all_ones_cst (type);
    ops2[1] = captures[3];
    res = fold_build2_loc (loc, LSHIFT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 29487, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
    ops1[0] = res;
         }
         res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 29490, __FUNCTION__))->typed.type), ops1[0]);
         res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29512, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29513, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29518, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29519, __FUNCTION__)))));
       if (integer_onep (o30))
  {
    if (integer_minus_onep (o21))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, op0, o20, o31 };

   if (((tree_class_check ((type), (tcc_type), "generic-match.c", 29528, __FUNCTION__))->base.u.bits.unsigned_flag))
     {
       if (((non_type_check ((op0), "generic-match.c", 29530, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 29530 "generic-match.c" 3 4
                                          __null
# 29530 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:662, %s:%d\n", "generic-match.c", 29531);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       {
         tree ops1[1], res;
         {
    tree ops2[2], res;
    ops2[0] = build_all_ones_cst (type);
    ops2[1] = captures[3];
    res = fold_build2_loc (loc, LSHIFT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 29541, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
    ops1[0] = res;
         }
         res = fold_build1_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 29544, __FUNCTION__))->typed.type), ops1[0]);
         res_op1 = res;
       }
       tree res;
       res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case EQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29562, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29563, __FUNCTION__)))));
 if (integer_zerop (o21))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case EQ_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29570, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29571, __FUNCTION__)))));
    if (integer_zerop (o51))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
   tree res = generic_simplify_234 (loc, type, op0, op1, captures, BIT_AND_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
   }
 if (integer_all_onesp (o21))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case EQ_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29592, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29593, __FUNCTION__)))));
    if (integer_all_onesp (o51))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
   tree res = generic_simplify_120 (loc, type, op0, op1, captures, BIT_AND_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
   }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29612, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29613, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29618, __FUNCTION__)))));
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_XOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 29623, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 29624, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
         tree res = generic_simplify_143 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
         tree res = generic_simplify_143 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29661, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29666, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29667, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29672, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29673, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   if (o61 == o31 || (operand_equal_p (o61, o31, 0) && types_match (o61, o31)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o30, o31 };
         tree res = generic_simplify_143 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
        {
   if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o31, o30 };
         tree res = generic_simplify_143 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (integer_zerop (op1))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:784, %s:%d\n", "generic-match.c", 29715);
 tree res;
 res = captures[1];
 if (((non_type_check ((captures[0]), "generic-match.c", 29718, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    }
  if (integer_all_onesp (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 if (((non_type_check ((op1), "generic-match.c", 29728, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 29728 "generic-match.c" 3 4
                                    __null
# 29728 "generic-match.c"
                                             ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:807, %s:%d\n", "generic-match.c", 29729);
 tree res_op0;
 res_op0 = captures[0];
 tree res;
 res = non_lvalue_loc (loc, res_op0);
 return res;
      }
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_60 (loc, type, op0, op1, captures, BIT_AND_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29750, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 29755, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 29756, __FUNCTION__)))));
       if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o41 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o30, o40 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29787, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29792, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29793, __FUNCTION__)))));
       if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o30, o20, o31 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o31, o20, o30 };
      tree res = generic_simplify_168 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29820, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29821, __FUNCTION__)))));
       if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o41, op0 };
      tree res = generic_simplify_71 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o41 == o20 || (operand_equal_p (o41, o20, 0) && types_match (o41, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o40, op0 };
      tree res = generic_simplify_71 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 29848, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 29849, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29854, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29855, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   if (o61 == o31 || (operand_equal_p (o61, o31, 0) && types_match (o61, o31)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o30, o31 };
         tree res = generic_simplify_179 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29880, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 29885, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
        tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29900, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 29915, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 29916, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29921, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
      tree res = generic_simplify_170 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, op1 };
      tree res = generic_simplify_170 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 29944, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 29945, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
         tree res = generic_simplify_179 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 29966, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 29967, __FUNCTION__)))));
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    switch (((enum tree_code) (o51)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 29974, __FUNCTION__)))));
   if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_NOT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 29993, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    switch (((enum tree_code) (o51)->base.code))
      {
      case BIT_NOT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 30028, __FUNCTION__)))));
   if (o70 == o21 || (operand_equal_p (o70, o21, 0) && types_match (o70, o21)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30051, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 30052, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 30057, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30062, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30063, __FUNCTION__)))));
      if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
        {
   if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 30088, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30093, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30094, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o30, o21 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o30, o21 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 30131, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case BIT_IOR_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30136, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30137, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   if (o61 == o40 || (operand_equal_p (o61, o40, 0) && types_match (o61, o40)))
     {
       {

         tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
         tree res = generic_simplify_181 (loc, type, op0, op1, captures);
         if (res) return res;
       }
     }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_XOR_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_XOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30180, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 30185, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30190, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case BIT_NOT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 30195, __FUNCTION__)))));
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, o60 };
       tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_NOT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30210, __FUNCTION__)))));
      {

        tree captures[2] __attribute__ ((__unused__)) = { o30, o50 };
        tree res = generic_simplify_196 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_XOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30233, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30234, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, op0 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_XOR_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o31, op0 };
       tree res = generic_simplify_194 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_XOR_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30261, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 30266, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 30267, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30272, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_IOR_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 30277, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 30278, __FUNCTION__)))));
     if (o70 == o30 || operand_equal_p (o70, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o71, o30 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o30 || operand_equal_p (o71, o30, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o30, o31, o70, o30 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
     if (o70 == o31 || operand_equal_p (o70, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o71, o31 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o31 || operand_equal_p (o71, o31, 0))
       {
         {

    tree captures[4] __attribute__ ((__unused__)) = { o31, o30, o70, o31 };
    tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 30327, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 30328, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30333, __FUNCTION__)))));
      if (o60 == o31 || operand_equal_p (o60, o31, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, o31 };
     tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o60 == o30 || operand_equal_p (o60, o30, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op0, o31, o30, o30 };
     tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o31 || operand_equal_p (op1, o31, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, o31 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (op1 == o30 || operand_equal_p (op1, o30, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o31, o30, o30 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30382, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 30387, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 30388, __FUNCTION__)))));
      if (o51 == o20 || operand_equal_p (o51, o20, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op1, o50, o51, o20 };
     tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o50 == o20 || operand_equal_p (o50, o20, 0))
        {
   {

     tree captures[4] __attribute__ ((__unused__)) = { op1, o51, o50, o20 };
     tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30415, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30416, __FUNCTION__)))));
       if (o41 == o20 || operand_equal_p (o41, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o41, o20 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o40 == o20 || operand_equal_p (o40, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o41, o40, o20 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30443, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 30444, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30449, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30450, __FUNCTION__)))));
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, o20 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || operand_equal_p (o51, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o50, o20 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o21, o20, o51, o21 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || operand_equal_p (o51, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { o21, o20, o50, o21 };
      tree res = generic_simplify_7 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30499, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 30504, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 30505, __FUNCTION__)))));
       if (o41 == op0 || operand_equal_p (o41, op0, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o41, op0 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o40 == op0 || operand_equal_p (o40, op0, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op1, o41, o40, op0 };
      tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30536, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 30537, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30542, __FUNCTION__)))));
       if (o50 == o21 || operand_equal_p (o50, o21, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o21 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || operand_equal_p (o50, o20, 0))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o20, o20 };
      tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (o50)->base.code))
         {
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 30565, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((o50), (1), "generic-match.c", 30566, __FUNCTION__)))));
      if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, o50, o61 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o20 || (operand_equal_p (o61, o20, 0) && types_match (o61, o20)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, o50, o60 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o60 == o21 || (operand_equal_p (o60, o21, 0) && types_match (o60, o21)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, o50, o61 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o21 || (operand_equal_p (o61, o21, 0) && types_match (o61, o21)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, o50, o60 };
     tree res = generic_simplify_70 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || operand_equal_p (op1, o21, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o21 };
       tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || operand_equal_p (op1, o20, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o21, o20, o20 };
       tree res = generic_simplify_185 (loc, type, op0, op1, captures, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30633, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30634, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, op1, o51 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1, op1, o50 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, op1, o51 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[7] __attribute__ ((__unused__)) = { op0, op0, o21, o20, op1, op1, o50 };
      tree res = generic_simplify_240 (loc, type, op0, op1, captures, BIT_AND_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30683, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30684, __FUNCTION__)))));
 if (o31 == op0 || operand_equal_p (o31, op0, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o31, op0 };
       tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || operand_equal_p (o30, op0, 0))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op1, o31, o30, op0 };
       tree res = generic_simplify_52 (loc, type, op0, op1, captures, BIT_AND_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30711, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 30716, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 30717, __FUNCTION__)))));
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30722, __FUNCTION__)))));
      switch (((enum tree_code) (o60)->base.code))
        {
        case BIT_AND_EXPR:
          {
     tree o70 = (*((const_cast<tree*> (tree_operand_check ((o60), (0), "generic-match.c", 30727, __FUNCTION__)))));
     tree o71 = (*((const_cast<tree*> (tree_operand_check ((o60), (1), "generic-match.c", 30728, __FUNCTION__)))));
     if (o70 == o30 || (operand_equal_p (o70, o30, 0) && types_match (o70, o30)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, o60, o71 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o30 || (operand_equal_p (o71, o30, 0) && types_match (o71, o30)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, o60, o70 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o70 == o31 || (operand_equal_p (o70, o31, 0) && types_match (o70, o31)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, o60, o71 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_AND_EXPR);
    if (res) return res;
         }
       }
     if (o71 == o31 || (operand_equal_p (o71, o31, 0) && types_match (o71, o31)))
       {
         {

    tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, o60, o70 };
    tree res = generic_simplify_191 (loc, type, op0, op1, captures, BIT_AND_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
  case BIT_AND_EXPR:
    {
      tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30773, __FUNCTION__)))));
      tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30774, __FUNCTION__)))));
      if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, op1, o61 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o30 || (operand_equal_p (o61, o30, 0) && types_match (o61, o30)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1, op1, o60 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, op1, o61 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      if (o61 == o31 || (operand_equal_p (o61, o31, 0) && types_match (o61, o31)))
        {
   {

     tree captures[7] __attribute__ ((__unused__)) = { op0, o20, o31, o30, op1, op1, o60 };
     tree res = generic_simplify_24 (loc, type, op0, op1, captures, BIT_AND_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30823, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_15 (loc, type, op0, op1, captures, BIT_AND_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
   tree res = generic_simplify_15 (loc, type, op0, op1, captures, BIT_AND_EXPR);
   if (res) return res;
 }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 30844, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 30845, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 30868, __FUNCTION__)))));
       if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o30, o21 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 30886, __FUNCTION__)))));
       if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (o21)->base.code))] == tcc_constant))
 {
   if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1109, %s:%d\n", "generic-match.c", 30907);
  if (! tree_invariant_p (captures[2])) return (tree) 
# 30908 "generic-match.c" 3 4
                                              __null
# 30908 "generic-match.c"
                                                       ;
  tree res_op0;
  {
    tree ops1[2], res;
    ops1[0] = captures[0];
    ops1[1] = unshare_expr (captures[2]);
    res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 30914, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op0 = res;
  }
  tree res_op1;
  {
    tree ops1[2], res;
    ops1[0] = captures[1];
    ops1[1] = captures[2];
    res = fold_build2_loc (loc, BIT_AND_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 30922, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
    res_op1 = res;
  }
  tree res;
  res = fold_build2_loc (loc, BIT_IOR_EXPR, type, res_op0, res_op1);
  return res;
       }
     }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_IOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 30939, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 30940, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_204 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o30)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 30963, __FUNCTION__)))));
       if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o31)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 30981, __FUNCTION__)))));
       if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
      tree res = generic_simplify_225 (loc, type, op0, op1, captures, BIT_AND_EXPR, BIT_IOR_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31003, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31004, __FUNCTION__)))));
 if ((tree_code_type[(int) (((enum tree_code) (o21)->base.code))] == tcc_constant))
   {
     if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
    tree res = generic_simplify_205 (loc, type, op0, op1, captures, BIT_AND_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  {
    tree op1_pops[1];
    if (tree_logical_inverted_value (op1, op1_pops))
      {
 tree o30 = op1_pops[0];
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_141 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
}
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31041, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_239 (loc, type, op0, op1, captures);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 31060, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 31061, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 31066, __FUNCTION__)))));
      switch (((enum tree_code) (o31)->base.code))
        {
        case INTEGER_CST:
          {
     switch (((enum tree_code) (op1)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o30, o40, o31, op1 };
      tree res = generic_simplify_255 (loc, type, op0, op1, captures, LSHIFT_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o30, o30, o31, op1 };
       tree res = generic_simplify_25 (loc, type, op0, op1, captures, LSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case RSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 31119, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 31120, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 31125, __FUNCTION__)))));
      switch (((enum tree_code) (o31)->base.code))
        {
        case INTEGER_CST:
          {
     switch (((enum tree_code) (op1)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o30, o40, o31, op1 };
      tree res = generic_simplify_255 (loc, type, op0, op1, captures, RSHIFT_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o30, o30, o31, op1 };
       tree res = generic_simplify_25 (loc, type, op0, op1, captures, RSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_logical_inverted_value (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
 {
   {

     tree captures[1] __attribute__ ((__unused__)) = { o20 };
     tree res = generic_simplify_141 (loc, type, op0, op1, captures);
     if (res) return res;
   }
        }
}
}
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_239 (loc, type, op0, op1, captures);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case LSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31216, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31217, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 31222, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, op0, o20, o30, o21, op1 };
       tree res = generic_simplify_59 (loc, type, op0, op1, captures, LSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[6] __attribute__ ((__unused__)) = { op0, op0, o20, o20, o21, op1 };
        tree res = generic_simplify_145 (loc, type, op0, op1, captures, LSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case RSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31275, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31276, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 31281, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, op0, o20, o30, o21, op1 };
       tree res = generic_simplify_59 (loc, type, op0, op1, captures, RSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[6] __attribute__ ((__unused__)) = { op0, op0, o20, o20, o21, op1 };
        tree res = generic_simplify_145 (loc, type, op0, op1, captures, RSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case ORDERED_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31334, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31335, __FUNCTION__)))));
 if (o21 == o20 || (operand_equal_p (o21, o20, 0) && types_match (o21, o20)))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case ORDERED_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31342, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31343, __FUNCTION__)))));
    if (o51 == o50 || (operand_equal_p (o51, o50, 0) && types_match (o51, o50)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };

   if (types_match (captures[0], captures[1]))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3370, %s:%d\n", "generic-match.c", 31352);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res;
       res = fold_build2_loc (loc, ORDERED_EXPR, type, res_op0, res_op1);
       return res;
     }
        }
      }
    if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op1, o51 };
   tree res = generic_simplify_193 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op1, o50 };
   tree res = generic_simplify_193 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case ORDERED_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31390, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31391, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
   tree res = generic_simplify_176 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o21, op0, o20 };
   tree res = generic_simplify_176 (loc, type, op0, op1, captures);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31424, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31425, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case GE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31430, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31431, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LT_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case GT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31448, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31449, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LT_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GT_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       break;
     }
   case EQ_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31484, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31485, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LT_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case LT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31502, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31503, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LT_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GT_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31530, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31531, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case GT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31536, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31537, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case LE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31554, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31555, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LE_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GE_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       break;
     }
   case GE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31578, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31579, __FUNCTION__)))));
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LE_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GE_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31606, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31607, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case EQ_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31612, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31613, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case EQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31634, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31635, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case GT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31640, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31641, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, EQ_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case LT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31658, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31659, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LT_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case NE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31676, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31677, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case GE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31698, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31699, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case LT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31704, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31705, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LT_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case GE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31722, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31723, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GE_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LE_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       break;
     }
   case LE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31746, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31747, __FUNCTION__)))));
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GE_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LE_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case GT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31774, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31775, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case LT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31780, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31781, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GT_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LT_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       break;
     }
   case LE_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31816, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31817, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case EQ_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31834, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31835, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
      {
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
   tree res = generic_simplify_195 (loc, type, op0, op1, captures, EQ_EXPR, GT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
   case GT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31852, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31853, __FUNCTION__)))));
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o21, op1, o51 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, GT_EXPR, MAX_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[5] __attribute__ ((__unused__)) = { op0, o21, o20, op1, o50 };
      tree res = generic_simplify_2 (loc, type, op0, op1, captures, LT_EXPR, MIN_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31880, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31881, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 31886, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 31891, __FUNCTION__)))));
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o30, o21, o50, op1 };
       tree res = generic_simplify_271 (loc, type, op0, op1, captures, MINUS_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31918, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31919, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 31924, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 31929, __FUNCTION__)))));
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[6] __attribute__ ((__unused__)) = { op0, o20, o30, o21, o50, op1 };
       tree res = generic_simplify_271 (loc, type, op0, op1, captures, PLUS_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 31956 "generic-match.c" 3 4
        __null
# 31956 "generic-match.c"
                 ;
}

static tree
generic_simplify_LT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case TRUNC_MOD_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31966, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31967, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_114 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 31981, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 31982, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 31987, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 31988, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32033, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32034, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case EXACT_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32043, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32044, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_156 (loc, type, op0, op1, captures, LT_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32066, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32067, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_272 (loc, type, op0, op1, captures, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32094, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32095, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32100, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32101, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o20 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32164, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32165, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32170, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32171, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_100 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_78 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32198, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32199, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32204, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32205, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };
      tree res = generic_simplify_85 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };
      tree res = generic_simplify_6 (loc, type, op0, op1, captures, LT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32236, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32237, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o30, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o31, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32260, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32261, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32279, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32280, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32294, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32295, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MIN_EXPR, LT_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32322, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32323, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MAX_EXPR, LT_EXPR, BIT_AND_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_136 (loc, type, op0, op1, captures, LT_EXPR, LE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32368, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32369, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (integer_zerop (op1))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
      tree res = generic_simplify_102 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_227 (loc, type, op0, op1, captures, LT_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32404, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32409, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_37 (loc, type, op0, op1, captures, LT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
     tree res = generic_simplify_188 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32433, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32438, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
  tree res = generic_simplify_40 (loc, type, op0, op1, captures, LT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
   tree res = generic_simplify_40 (loc, type, op0, op1, captures, LT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_90 (loc, type, op0, op1, captures, LT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32477, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32478, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, PLUS_EXPR, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32505, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32506, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, MINUS_EXPR, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_222 (loc, type, op0, op1, captures, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32555, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_108 (loc, type, op0, op1, captures, LT_EXPR, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32574, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32575, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_1 (loc, type, op0, op1, captures, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32602, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32607, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32631, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32636, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_84 (loc, type, op0, op1, captures, LT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, op1 };
   tree res = generic_simplify_148 (loc, type, op0, op1, captures, LT_EXPR);
   if (res) return res;
 }
 switch (((enum tree_code) (o20)->base.code))
   {
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32661, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case ADDR_EXPR:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
       tree res = generic_simplify_238 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
        tree res = generic_simplify_238 (loc, type, op0, op1, captures, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
  tree res = generic_simplify_177 (loc, type, op0, op1, captures, LT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32716, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o30 };
        tree res = generic_simplify_14 (loc, type, op0, op1, captures, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
  tree res = generic_simplify_14 (loc, type, op0, op1, captures, LT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 32752, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32752, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, LT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 32770, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32770, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, LT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 32788, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32788, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, LT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 32806, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32806, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, LT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 32824, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32824, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, LT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 32842, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32842, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, LT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 32860, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32860, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_SQRT, LT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 32878, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 32878, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_SQRT, LT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
   tree res = generic_simplify_38 (loc, type, op0, op1, captures, LT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 32917, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 32918, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32958, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32959, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     switch (((enum tree_code) (o31)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op1, op0, o31 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, GT_EXPR, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32981, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 32982, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, op0, o31 };
       tree res = generic_simplify_190 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case REALPART_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 32996, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o30))
       {
       case CFN_SUB_OVERFLOW:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 33004, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33004, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 33005, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 33005, __FUNCTION__)))));
    if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o41 };
   tree res = generic_simplify_256 (loc, type, op0, op1, captures, GT_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case REALPART_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33030, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o20))
       {
       case CFN_ADD_OVERFLOW:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 33038, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33038, __FUNCTION__)))));
    tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 33039, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 33039, __FUNCTION__)))));
    if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o30, o31 };
   tree res = generic_simplify_118 (loc, type, op0, op1, captures, LT_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
    if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o31, o30 };
   tree res = generic_simplify_118 (loc, type, op0, op1, captures, LT_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33069, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33070, __FUNCTION__)))));
 if (integer_all_onesp (o20))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, op1 };
       tree res = generic_simplify_121 (loc, type, op0, op1, captures, LT_EXPR, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33084, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33085, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, LT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 33112 "generic-match.c" 3 4
        __null
# 33112 "generic-match.c"
                 ;
}

static tree
generic_simplify_GE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case TRUNC_MOD_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33122, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33123, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_114 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33137, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33138, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33143, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33144, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33189, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33190, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case EXACT_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33199, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33200, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_156 (loc, type, op0, op1, captures, GE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33222, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33223, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_272 (loc, type, op0, op1, captures, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33250, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33251, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33256, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33257, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o20 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33320, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33321, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33326, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33327, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_100 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_78 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33354, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33355, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33360, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33361, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };
      tree res = generic_simplify_85 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };
      tree res = generic_simplify_6 (loc, type, op0, op1, captures, GE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33392, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33393, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o30, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o31, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33416, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 33417, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33435, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33436, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33450, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33451, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MAX_EXPR, GE_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33478, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33479, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MIN_EXPR, GE_EXPR, BIT_AND_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_136 (loc, type, op0, op1, captures, GE_EXPR, GT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33524, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33525, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (integer_zerop (op1))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
      tree res = generic_simplify_102 (loc, type, op0, op1, captures, GE_EXPR, LE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_88 (loc, type, op0, op1, captures, GE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33560, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33565, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_37 (loc, type, op0, op1, captures, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
     tree res = generic_simplify_188 (loc, type, op0, op1, captures, GE_EXPR, LE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33589, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33594, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
  tree res = generic_simplify_40 (loc, type, op0, op1, captures, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
   tree res = generic_simplify_40 (loc, type, op0, op1, captures, GE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_90 (loc, type, op0, op1, captures, GE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33633, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33634, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, PLUS_EXPR, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33661, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33662, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, MINUS_EXPR, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_222 (loc, type, op0, op1, captures, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33711, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_108 (loc, type, op0, op1, captures, GE_EXPR, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33730, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 33731, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_1 (loc, type, op0, op1, captures, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33758, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33763, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, GE_EXPR, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, GE_EXPR, LE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 33787, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33792, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_84 (loc, type, op0, op1, captures, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, op1 };
   tree res = generic_simplify_148 (loc, type, op0, op1, captures, GE_EXPR);
   if (res) return res;
 }
 switch (((enum tree_code) (o20)->base.code))
   {
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33817, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case ADDR_EXPR:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
       tree res = generic_simplify_238 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
        tree res = generic_simplify_238 (loc, type, op0, op1, captures, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
  tree res = generic_simplify_177 (loc, type, op0, op1, captures, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 33872, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o30 };
        tree res = generic_simplify_14 (loc, type, op0, op1, captures, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
  tree res = generic_simplify_14 (loc, type, op0, op1, captures, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 33908, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33908, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, GE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 33926, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33926, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, GE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 33944, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33944, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, GE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 33962, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33962, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, GE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 33980, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33980, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, GE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 33998, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 33998, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, GE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 34016, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 34016, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_SQRT, GE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 34034, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 34034, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_SQRT, GE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
   tree res = generic_simplify_38 (loc, type, op0, op1, captures, GE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34073, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34074, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, GE_EXPR, LE_EXPR);
      if (res) return res;
    }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34114, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34115, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     switch (((enum tree_code) (o31)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op1, op0, o31 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34137, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34138, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, op0, o31 };
       tree res = generic_simplify_190 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case REALPART_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34152, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o30))
       {
       case CFN_SUB_OVERFLOW:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 34160, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 34160, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 34161, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 34161, __FUNCTION__)))));
    if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o41 };
   tree res = generic_simplify_256 (loc, type, op0, op1, captures, LE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case REALPART_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34186, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o20))
       {
       case CFN_ADD_OVERFLOW:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 34194, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 34194, __FUNCTION__)))));
    tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 34195, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 34195, __FUNCTION__)))));
    if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o30, o31 };
   tree res = generic_simplify_118 (loc, type, op0, op1, captures, GE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
    if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o31, o30 };
   tree res = generic_simplify_118 (loc, type, op0, op1, captures, GE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34225, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34226, __FUNCTION__)))));
 if (integer_all_onesp (o20))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, op1 };
       tree res = generic_simplify_121 (loc, type, op0, op1, captures, GE_EXPR, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34240, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34241, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, GE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 34268 "generic-match.c" 3 4
        __null
# 34268 "generic-match.c"
                 ;
}

static tree
generic_simplify_GT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op1)->base.code))
    {
    case TRUNC_MOD_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34278, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34279, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_263 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34297, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34298, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34303, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34304, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34349, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34350, __FUNCTION__)))));
 if (integer_minus_onep (o21))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
      tree res = generic_simplify_215 (loc, type, op0, op1, captures, GT_EXPR, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34372, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34373, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o20 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34436, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34437, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case EXACT_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34446, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34447, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_156 (loc, type, op0, op1, captures, GT_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34469, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34470, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_272 (loc, type, op0, op1, captures, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34497, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34498, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34503, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34504, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_100 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_78 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34531, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34532, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34537, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34538, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };
      tree res = generic_simplify_85 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };
      tree res = generic_simplify_6 (loc, type, op0, op1, captures, GT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34569, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34570, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o30, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o31, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34593, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 34594, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34612, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34613, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34627, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34628, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MAX_EXPR, GT_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34655, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34656, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MIN_EXPR, GT_EXPR, BIT_AND_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_64 (loc, type, op0, op1, captures, GT_EXPR, GE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34701, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34702, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (integer_zerop (op1))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
      tree res = generic_simplify_102 (loc, type, op0, op1, captures, GT_EXPR, LT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_227 (loc, type, op0, op1, captures, GT_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34737, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34742, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_37 (loc, type, op0, op1, captures, GT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
     tree res = generic_simplify_188 (loc, type, op0, op1, captures, GT_EXPR, LT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34766, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34771, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
  tree res = generic_simplify_40 (loc, type, op0, op1, captures, GT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
   tree res = generic_simplify_40 (loc, type, op0, op1, captures, GT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_90 (loc, type, op0, op1, captures, GT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34810, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34811, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, PLUS_EXPR, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34838, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34839, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, MINUS_EXPR, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_222 (loc, type, op0, op1, captures, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34888, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_108 (loc, type, op0, op1, captures, GT_EXPR, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34907, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34908, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_1 (loc, type, op0, op1, captures, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34935, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 34936, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_247 (loc, type, op0, op1, captures, GT_EXPR, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34963, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34968, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, GT_EXPR, LT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, GT_EXPR, LT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 34992, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 34997, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_84 (loc, type, op0, op1, captures, GT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, op1 };
   tree res = generic_simplify_148 (loc, type, op0, op1, captures, GT_EXPR);
   if (res) return res;
 }
 switch (((enum tree_code) (o20)->base.code))
   {
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35022, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case ADDR_EXPR:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
       tree res = generic_simplify_238 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
        tree res = generic_simplify_238 (loc, type, op0, op1, captures, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
  tree res = generic_simplify_177 (loc, type, op0, op1, captures, GT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35077, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o30 };
        tree res = generic_simplify_14 (loc, type, op0, op1, captures, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
  tree res = generic_simplify_14 (loc, type, op0, op1, captures, GT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 35113, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35113, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 35131, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35131, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, GT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 35149, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35149, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 35167, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35167, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, GT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 35185, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35185, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 35203, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35203, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, GT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 35221, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35221, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_SQRT, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 35239, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35239, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_SQRT, GT_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
   tree res = generic_simplify_38 (loc, type, op0, op1, captures, GT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35278, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35279, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, GT_EXPR, LE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35305, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35306, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     switch (((enum tree_code) (o31)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op1, op0, o31 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, LT_EXPR, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35332, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35333, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_190 (loc, type, op0, op1, captures, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case REALPART_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35347, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o20))
       {
       case CFN_SUB_OVERFLOW:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 35355, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35355, __FUNCTION__)))));
    tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 35356, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 35356, __FUNCTION__)))));
    if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o30, o31 };
   tree res = generic_simplify_189 (loc, type, op0, op1, captures, GT_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REALPART_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35381, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o30))
       {
       case CFN_ADD_OVERFLOW:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 35389, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 35389, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 35390, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 35390, __FUNCTION__)))));
    if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o41 };
   tree res = generic_simplify_192 (loc, type, op0, op1, captures, LT_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
    if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o40 };
   tree res = generic_simplify_192 (loc, type, op0, op1, captures, LT_EXPR, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35420, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35421, __FUNCTION__)))));
 if (integer_all_onesp (o30))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o31, op0 };
       tree res = generic_simplify_20 (loc, type, op0, op1, captures, LT_EXPR, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35439, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35440, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35467, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35468, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, GT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 35495 "generic-match.c" 3 4
        __null
# 35495 "generic-match.c"
                 ;
}

static tree
generic_simplify_LE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op1)->base.code))
    {
    case TRUNC_MOD_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35505, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35506, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_263 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35524, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35525, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35530, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35531, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_264 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35576, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35577, __FUNCTION__)))));
 if (integer_minus_onep (o21))
   {
     switch (((enum tree_code) (op1)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
      tree res = generic_simplify_215 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
   }
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35599, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35600, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_98 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o21, o20 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35663, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35664, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case EXACT_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35673, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35674, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_156 (loc, type, op0, op1, captures, LE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35696, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35697, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_272 (loc, type, op0, op1, captures, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35724, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35725, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35730, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35731, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_100 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_78 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35758, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35759, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35764, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35765, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };
      tree res = generic_simplify_85 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };
      tree res = generic_simplify_6 (loc, type, op0, op1, captures, LE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35796, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35797, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o30, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o31, op0 };
       tree res = generic_simplify_212 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35820, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 35821, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35839, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35840, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35854, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35855, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MIN_EXPR, LE_EXPR, BIT_IOR_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35882, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35883, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_248 (loc, type, op0, op1, captures, MAX_EXPR, LE_EXPR, BIT_AND_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_64 (loc, type, op0, op1, captures, LE_EXPR, LT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35928, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 35929, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (integer_zerop (op1))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
      tree res = generic_simplify_102 (loc, type, op0, op1, captures, LE_EXPR, GE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_88 (loc, type, op0, op1, captures, LE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35964, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35969, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_37 (loc, type, op0, op1, captures, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
     tree res = generic_simplify_188 (loc, type, op0, op1, captures, LE_EXPR, GE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 35993, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 35998, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
  tree res = generic_simplify_40 (loc, type, op0, op1, captures, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
   tree res = generic_simplify_40 (loc, type, op0, op1, captures, LE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_90 (loc, type, op0, op1, captures, LE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36037, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36038, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, PLUS_EXPR, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36065, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36066, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, MINUS_EXPR, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_222 (loc, type, op0, op1, captures, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36115, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_108 (loc, type, op0, op1, captures, LE_EXPR, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36134, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36135, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_1 (loc, type, op0, op1, captures, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36162, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36163, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_247 (loc, type, op0, op1, captures, LE_EXPR, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36190, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36195, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, LE_EXPR, GE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, LE_EXPR, GE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36219, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36224, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_84 (loc, type, op0, op1, captures, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, op1 };
   tree res = generic_simplify_148 (loc, type, op0, op1, captures, LE_EXPR);
   if (res) return res;
 }
 switch (((enum tree_code) (o20)->base.code))
   {
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36249, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case ADDR_EXPR:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
       tree res = generic_simplify_238 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
        tree res = generic_simplify_238 (loc, type, op0, op1, captures, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
  tree res = generic_simplify_177 (loc, type, op0, op1, captures, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36304, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o30 };
        tree res = generic_simplify_14 (loc, type, op0, op1, captures, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
  tree res = generic_simplify_14 (loc, type, op0, op1, captures, LE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 36340, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36340, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 36358, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36358, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, LE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 36376, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36376, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 36394, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36394, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, LE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 36412, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36412, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 36430, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36430, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, LE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 36448, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36448, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_SQRT, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 36466, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36466, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_SQRT, LE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case INTEGER_CST:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
   tree res = generic_simplify_38 (loc, type, op0, op1, captures, LE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36505, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36506, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, LE_EXPR, GT_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36532, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36533, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     switch (((enum tree_code) (o31)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op1, op0, o31 };
      tree res = generic_simplify_62 (loc, type, op0, op1, captures, GE_EXPR, LE_EXPR);
      if (res) return res;
    }
           break;
         }
       default:;
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36559, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36560, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_190 (loc, type, op0, op1, captures, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case REALPART_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36574, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o20))
       {
       case CFN_SUB_OVERFLOW:
         {
    tree o30 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 36582, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36582, __FUNCTION__)))));
    tree o31 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o20), "generic-match.c", 36583, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 36583, __FUNCTION__)))));
    if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o30, o31 };
   tree res = generic_simplify_189 (loc, type, op0, op1, captures, LE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REALPART_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36608, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case CALL_EXPR:
     switch (get_call_combined_fn (o30))
       {
       case CFN_ADD_OVERFLOW:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 36616, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 36616, __FUNCTION__)))));
    tree o41 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((o30), "generic-match.c", 36617, __FUNCTION__, (CALL_EXPR)))), ((1) + 3), "generic-match.c", 36617, __FUNCTION__)))));
    if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o41 };
   tree res = generic_simplify_192 (loc, type, op0, op1, captures, GE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
    if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o30, op0, o40 };
   tree res = generic_simplify_192 (loc, type, op0, op1, captures, GE_EXPR, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     break;
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36647, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36648, __FUNCTION__)))));
 if (integer_all_onesp (o30))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op1, o31, op0 };
       tree res = generic_simplify_20 (loc, type, op0, op1, captures, GE_EXPR, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36666, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36667, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36694, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36695, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_83 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, LE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 36722 "generic-match.c" 3 4
        __null
# 36722 "generic-match.c"
                 ;
}

static tree
generic_simplify_EQ_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36732, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36733, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36738, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36739, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case MULT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36788, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36789, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_42 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36811, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36812, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case EXACT_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36821, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36822, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_156 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36844, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36845, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_272 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36872, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36873, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36878, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36879, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type)), "generic-match.c", 36886, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36886, __FUNCTION__))->typed.type)), "generic-match.c", 36886, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 36888);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 36895, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type)), "generic-match.c", 36907, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36907, __FUNCTION__))->typed.type)), "generic-match.c", 36907, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 36909);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 36916, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type)), "generic-match.c", 36928, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36928, __FUNCTION__))->typed.type)), "generic-match.c", 36928, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 36930);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 36937, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type)), "generic-match.c", 36949, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36949, __FUNCTION__))->typed.type)), "generic-match.c", 36949, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 36951);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 36958, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 36972, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 36973, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 36978, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 36979, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type)), "generic-match.c", 36986, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 36986, __FUNCTION__))->typed.type)), "generic-match.c", 36986, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1374, %s:%d\n", "generic-match.c", 36988);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 36995, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type)), "generic-match.c", 37007, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 37007, __FUNCTION__))->typed.type)), "generic-match.c", 37007, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1401, %s:%d\n", "generic-match.c", 37009);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, EQ_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[0]), "generic-match.c", 37016, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 37030, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 37031, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37036, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 37037, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };
      tree res = generic_simplify_85 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };
      tree res = generic_simplify_6 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 37064, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37069, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 37074, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 37075, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case INTEGER_CST:
          {
     switch (((enum tree_code) (o51)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 37084, __FUNCTION__)))));
    if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
      {
        {

          tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
          tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
          if (res) return res;
        }
      }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
      {
 tree op1_pops[1];
 if (tree_nop_convert (op1, op1_pops))
   {
     tree o40 = op1_pops[0];
     switch (((enum tree_code) (o40)->base.code))
       {
       case PLUS_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 37119, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 37120, __FUNCTION__)))));
    switch (((enum tree_code) (o51)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 37125, __FUNCTION__)))));
   if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o50, o20 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    switch (((enum tree_code) (o50)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 37143, __FUNCTION__)))));
   if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o51, o20 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o50, o20 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
    if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o51, o20 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       case POINTER_PLUS_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 37179, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 37180, __FUNCTION__)))));
    switch (((enum tree_code) (o50)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 37185, __FUNCTION__)))));
   if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o20, o51 };
         tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o20, o51 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
}
      }
 switch (((enum tree_code) (o20)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 37218, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 37219, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (o31)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 37228, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37233, __FUNCTION__)))));
    if (o70 == o50 || (operand_equal_p (o70, o50, 0) && types_match (o70, o50)))
      {
        {

          tree captures[2] __attribute__ ((__unused__)) = { o50, o30 };
          tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
          if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (op1 == o50 || (operand_equal_p (op1, o50, 0) && types_match (op1, o50)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o50, o30 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37264, __FUNCTION__)))));
     if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o31, o30 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o31, o30 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37299, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 37304, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 37305, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case INTEGER_CST:
          {
     if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case MINUS_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37331, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 37332, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (o41)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 37341, __FUNCTION__)))));
     if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (o41 == o20 || (operand_equal_p (o41, o20, 0) && types_match (o41, o20)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_logical_inverted_value (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
 {
   if (tree_truth_valued_p (op1))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { o20 };
  tree res = generic_simplify_34 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
     }
        }
}
}
{
  tree op0_pops[1];
  if (tree_nop_convert (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      switch (((enum tree_code) (o20)->base.code))
        {
 case PLUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 37404, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 37405, __FUNCTION__)))));
     switch (((enum tree_code) (o31)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 37410, __FUNCTION__)))));
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37415, __FUNCTION__)))));
   if (o70 == o50 || (operand_equal_p (o70, o50, 0) && types_match (o70, o50)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o50 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (o30)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 37437, __FUNCTION__)))));
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37442, __FUNCTION__)))));
   if (o70 == o40 || (operand_equal_p (o70, o40, 0) && types_match (o70, o40)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o40 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o40 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (o31)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 37473, __FUNCTION__)))));
    if (op1 == o50 || (operand_equal_p (op1, o50, 0) && types_match (op1, o50)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o50 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37491, __FUNCTION__)))));
    if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
    if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o30 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
     if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o30 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
     break;
   }
 case POINTER_PLUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 37536, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 37537, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 37542, __FUNCTION__)))));
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37547, __FUNCTION__)))));
   if (o70 == o40 || (operand_equal_p (o70, o40, 0) && types_match (o70, o40)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o40, o31 };
         tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o40, o31 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37578, __FUNCTION__)))));
    if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
    tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
     break;
   }
        default:;
        }
}
}
if (tree_truth_valued_p (op0))
  {
    {
      tree op1_pops[1];
      if (tree_logical_inverted_value (op1, op1_pops))
        {
   tree o30 = op1_pops[0];
   if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { op0 };
  tree res = generic_simplify_34 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
     }
}
    }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37630, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 37631, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
{
  tree op1_pops[1];
  if (tree_nop_convert (op1, op1_pops))
    {
      tree o30 = op1_pops[0];
      switch (((enum tree_code) (o30)->base.code))
        {
 case PLUS_EXPR:
   {
     tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 37654, __FUNCTION__)))));
     tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 37655, __FUNCTION__)))));
     switch (((enum tree_code) (o41)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 37660, __FUNCTION__)))));
    if (o60 == op0 || (operand_equal_p (o60, op0, 0) && types_match (o60, op0)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o40, op0 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (o40)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 37678, __FUNCTION__)))));
    if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o41, op0 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o40, op0 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
     if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o41, op0 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
     break;
   }
 case POINTER_PLUS_EXPR:
   {
     tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 37714, __FUNCTION__)))));
     tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 37715, __FUNCTION__)))));
     switch (((enum tree_code) (o40)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 37720, __FUNCTION__)))));
    if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o30, op0, o41 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op1, o30, op0, o41 };
    tree res = generic_simplify_228 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
     break;
   }
        default:;
        }
}
}
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 37753, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 37754, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (o21)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 37772, __FUNCTION__)))));
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37777, __FUNCTION__)))));
     if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37808, __FUNCTION__)))));
      if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
      tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 37839, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 37840, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_109 (loc, type, op0, op1, captures, EQ_EXPR, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37858, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 37863, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 37864, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (o41)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 37873, __FUNCTION__)))));
     if (o60 == op0 || (operand_equal_p (o60, op0, 0) && types_match (o60, op0)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 37908, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 37909, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (o31)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 37918, __FUNCTION__)))));
      if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
      tree res = generic_simplify_246 (loc, type, op0, op1, captures, EQ_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 37953, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 37954, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, EQ_EXPR, LE_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, EQ_EXPR, LE_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_9 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 37999, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38000, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, EQ_EXPR, GE_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, EQ_EXPR, GE_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_167 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_with_possible_nonzero_bits2 (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      {
 tree op1_pops[1];
 if (tree_with_certain_nonzero_bits2 (op1, op1_pops))
   {
     tree o40 = op1_pops[0];
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
       tree res = generic_simplify_174 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
}
      }
}
}
{
  tree op0_pops[1];
  if (tree_with_certain_nonzero_bits2 (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      {
 tree op1_pops[1];
 if (tree_with_possible_nonzero_bits2 (op1, op1_pops))
   {
     tree o40 = op1_pops[0];
     {

       tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
       tree res = generic_simplify_174 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
}
      }
}
}
  switch (((enum tree_code) (op1)->base.code))
    {
    case MIN_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38089, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 38090, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, EQ_EXPR, LE_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, EQ_EXPR, LE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MAX_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38113, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 38114, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, EQ_EXPR, GE_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, EQ_EXPR, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38141, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38142, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 38147, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 38148, __FUNCTION__)))));
       if (integer_onep (o30))
  {
    if (integer_onep (o21))
      {
        if (integer_zerop (op1))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o31 };
       tree res = generic_simplify_11 (loc, type, op0, op1, captures, EQ_EXPR, NE_EXPR);
       if (res) return res;
     }
          }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38172, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38173, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_251 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38200, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38201, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_183 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38215, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38216, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_113 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38230, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38231, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (integer_zerop (op1))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
      tree res = generic_simplify_102 (loc, type, op0, op1, captures, EQ_EXPR, EQ_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_88 (loc, type, op0, op1, captures, EQ_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38266, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38271, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_37 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
     tree res = generic_simplify_188 (loc, type, op0, op1, captures, EQ_EXPR, EQ_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38295, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38300, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
  tree res = generic_simplify_40 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
   tree res = generic_simplify_40 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_90 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38339, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38340, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, PLUS_EXPR, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38367, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38368, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, MINUS_EXPR, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_222 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38417, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_108 (loc, type, op0, op1, captures, EQ_EXPR, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38436, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38437, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
  tree res = generic_simplify_63 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38456, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38461, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, EQ_EXPR, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, EQ_EXPR, EQ_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38485, __FUNCTION__)))));
 if (zerop (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
       tree res = generic_simplify_79 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38499, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38504, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_84 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, op1 };
   tree res = generic_simplify_148 (loc, type, op0, op1, captures, EQ_EXPR);
   if (res) return res;
 }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 38525, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 38526, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, op1 };
       tree res = generic_simplify_92 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case SSA_NAME:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
  tree res = generic_simplify_91 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38575, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38576, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_92 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38603, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38604, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_126 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 38639, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38639, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, EQ_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 38657, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38657, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, EQ_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 38675, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38675, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, EQ_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 38693, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38693, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, EQ_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 38711, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38711, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, EQ_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 38729, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38729, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, EQ_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 38747, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38747, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_SQRT, EQ_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 38765, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 38765, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_SQRT, EQ_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_XOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38790, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 38791, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38818, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 38823, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 38824, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, op1 };
       tree res = generic_simplify_65 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38855, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case ADDR_EXPR:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
       tree res = generic_simplify_238 (loc, type, op0, op1, captures, EQ_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
        tree res = generic_simplify_238 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
     if (integer_zerop (op1))
       {
  {

    tree captures[1] __attribute__ ((__unused__)) = { o20 };
    tree res = generic_simplify_216 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38901, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38902, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_65 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 38933, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o30 };
        tree res = generic_simplify_14 (loc, type, op0, op1, captures, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
  tree res = generic_simplify_14 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if (integer_zerop (op1))
 {
   {

     tree captures[1] __attribute__ ((__unused__)) = { op0 };
     tree res = generic_simplify_216 (loc, type, op0, op1, captures, EQ_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 38975, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 38976, __FUNCTION__)))));
 if (integer_pow2p (o21))
   {
     if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_129 (loc, type, op0, op1, captures, EQ_EXPR, NE_EXPR);
    if (res) return res;
  }
       }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 38993, __FUNCTION__)))));
       if (integer_pow2p (o21))
  {
    if (integer_zerop (op1))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o30, o21 };
   tree res = generic_simplify_10 (loc, type, op0, op1, captures, EQ_EXPR, GE_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
 if (integer_pow2p (o21))
   {
     if (integer_zerop (op1))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o20, o21 };
    tree res = generic_simplify_236 (loc, type, op0, op1, captures, EQ_EXPR, GE_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
    tree res = generic_simplify_166 (loc, type, op0, op1, captures, EQ_EXPR);
    if (res) return res;
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39036, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_107 (loc, type, op0, op1, captures, EQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (integer_onep (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39061, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39061, __FUNCTION__))->typed.type)))
   {
     if (((non_type_check ((op1), "generic-match.c", 39063, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 39063 "generic-match.c" 3 4
                                        __null
# 39063 "generic-match.c"
                                                 ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3798, %s:%d\n", "generic-match.c", 39064);
     tree res_op0;
     res_op0 = captures[0];
     tree res;
     res = non_lvalue_loc (loc, res_op0);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39077, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39078, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_182 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39105, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39106, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_182 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, EQ_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 39133 "generic-match.c" 3 4
        __null
# 39133 "generic-match.c"
                 ;
}

static tree
generic_simplify_NE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39143, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39144, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MULT_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39149, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39150, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };
      tree res = generic_simplify_154 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case MULT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39199, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39200, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_42 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39222, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39223, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case EXACT_DIV_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39232, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39233, __FUNCTION__)))));
      if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };
     tree res = generic_simplify_156 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39255, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39256, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_272 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39283, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39284, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case PLUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39289, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39290, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type)), "generic-match.c", 39297, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39297, __FUNCTION__))->typed.type)), "generic-match.c", 39297, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 39299);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 39306, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type)), "generic-match.c", 39318, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39318, __FUNCTION__))->typed.type)), "generic-match.c", 39318, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 39320);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 39327, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type)), "generic-match.c", 39339, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39339, __FUNCTION__))->typed.type)), "generic-match.c", 39339, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 39341);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 39348, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o21, o20, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type)), "generic-match.c", 39360, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39360, __FUNCTION__))->typed.type)), "generic-match.c", 39360, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1358, %s:%d\n", "generic-match.c", 39362);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 39369, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39383, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39384, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39389, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39390, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o50 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type)), "generic-match.c", 39397, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 39397, __FUNCTION__))->typed.type)), "generic-match.c", 39397, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1374, %s:%d\n", "generic-match.c", 39399);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = captures[2];
   tree res;
   res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[1]), "generic-match.c", 39406, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
        }
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, o21, o51 };

      if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type)), "generic-match.c", 39418, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? global_options.x_flag_wrapv_pointer : ((any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 39418, __FUNCTION__))->typed.type)), "generic-match.c", 39418, __FUNCTION__))->base.u.bits.unsigned_flag || global_options.x_flag_wrapv))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:1401, %s:%d\n", "generic-match.c", 39420);
   tree res_op0;
   res_op0 = captures[2];
   tree res_op1;
   res_op1 = captures[1];
   tree res;
   res = fold_build2_loc (loc, NE_EXPR, type, res_op0, res_op1);
   if (((non_type_check ((captures[0]), "generic-match.c", 39427, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39441, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 39442, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case POINTER_DIFF_EXPR:
     {
       tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39447, __FUNCTION__)))));
       tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39448, __FUNCTION__)))));
       if (o51 == o21 || (operand_equal_p (o51, o21, 0) && types_match (o51, o21)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o50 };
      tree res = generic_simplify_85 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, o51 };
      tree res = generic_simplify_6 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 39475, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39480, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 39485, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 39486, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case INTEGER_CST:
          {
     switch (((enum tree_code) (o51)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 39495, __FUNCTION__)))));
    if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
      {
        {

          tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
          tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
          if (res) return res;
        }
      }
           break;
         }
       default:;
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
      {
 tree op1_pops[1];
 if (tree_nop_convert (op1, op1_pops))
   {
     tree o40 = op1_pops[0];
     switch (((enum tree_code) (o40)->base.code))
       {
       case PLUS_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 39530, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 39531, __FUNCTION__)))));
    switch (((enum tree_code) (o51)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((o51), (0), "generic-match.c", 39536, __FUNCTION__)))));
   if (o70 == o20 || (operand_equal_p (o70, o20, 0) && types_match (o70, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o50, o20 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    switch (((enum tree_code) (o50)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 39554, __FUNCTION__)))));
   if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o51, o20 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o50, o20 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
    if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o51, o20 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       case POINTER_PLUS_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 39590, __FUNCTION__)))));
    tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 39591, __FUNCTION__)))));
    switch (((enum tree_code) (o50)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o60 = (*((const_cast<tree*> (tree_operand_check ((o50), (0), "generic-match.c", 39596, __FUNCTION__)))));
   if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o20, o51 };
         tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o40, o20, o51 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
}
      }
 switch (((enum tree_code) (o20)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 39629, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 39630, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (o31)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 39639, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39644, __FUNCTION__)))));
    if (o70 == o50 || (operand_equal_p (o70, o50, 0) && types_match (o70, o50)))
      {
        {

          tree captures[2] __attribute__ ((__unused__)) = { o50, o30 };
          tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
          if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (op1 == o50 || (operand_equal_p (op1, o50, 0) && types_match (op1, o50)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o50, o30 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39675, __FUNCTION__)))));
     if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o31, o30 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o31, o30 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39710, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 39715, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((o40), (1), "generic-match.c", 39716, __FUNCTION__)))));
      switch (((enum tree_code) (o50)->base.code))
        {
        case INTEGER_CST:
          {
     if (o51 == o20 || (operand_equal_p (o51, o20, 0) && types_match (o51, o20)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o20, o50 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case MINUS_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39742, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 39743, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (o41)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 39752, __FUNCTION__)))));
     if (o60 == o20 || (operand_equal_p (o60, o20, 0) && types_match (o60, o20)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (o41 == o20 || (operand_equal_p (o41, o20, 0) && types_match (o41, o20)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_logical_inverted_value (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
 {
   if (tree_truth_valued_p (op1))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { o20 };
  tree res = generic_simplify_34 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
     }
        }
}
}
{
  tree op0_pops[1];
  if (tree_nop_convert (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      switch (((enum tree_code) (o20)->base.code))
        {
 case PLUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 39815, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 39816, __FUNCTION__)))));
     switch (((enum tree_code) (o31)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 39821, __FUNCTION__)))));
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39826, __FUNCTION__)))));
   if (o70 == o50 || (operand_equal_p (o70, o50, 0) && types_match (o70, o50)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o50 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (o30)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 39848, __FUNCTION__)))));
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39853, __FUNCTION__)))));
   if (o70 == o40 || (operand_equal_p (o70, o40, 0) && types_match (o70, o40)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o40 };
         tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o40 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (o31)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 39884, __FUNCTION__)))));
    if (op1 == o50 || (operand_equal_p (op1, o50, 0) && types_match (op1, o50)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o50 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39902, __FUNCTION__)))));
    if (o60 == o31 || (operand_equal_p (o60, o31, 0) && types_match (o60, o31)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
    if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o30 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (op1 == o31 || (operand_equal_p (op1, o31, 0) && types_match (op1, o31)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
     if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o31, o30 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
     break;
   }
 case POINTER_PLUS_EXPR:
   {
     tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 39947, __FUNCTION__)))));
     tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 39948, __FUNCTION__)))));
     switch (((enum tree_code) (o30)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 39953, __FUNCTION__)))));
    switch (((enum tree_code) (op1)->base.code))
      {
      case NOP_EXPR: case CONVERT_EXPR:
        {
   tree o70 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39958, __FUNCTION__)))));
   if (o70 == o40 || (operand_equal_p (o70, o40, 0) && types_match (o70, o40)))
     {
       {

         tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o40, o31 };
         tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
         if (res) return res;
       }
     }
          break;
        }
      default:;
      }
    if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o40, o31 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (op1)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 39989, __FUNCTION__)))));
    if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o30, o31 };
    tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
     break;
   }
        default:;
        }
}
}
if (tree_truth_valued_p (op0))
  {
    {
      tree op1_pops[1];
      if (tree_logical_inverted_value (op1, op1_pops))
        {
   tree o30 = op1_pops[0];
   if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
     {
       {

  tree captures[1] __attribute__ ((__unused__)) = { op0 };
  tree res = generic_simplify_34 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
     }
}
    }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40041, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 40042, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
{
  tree op1_pops[1];
  if (tree_nop_convert (op1, op1_pops))
    {
      tree o30 = op1_pops[0];
      switch (((enum tree_code) (o30)->base.code))
        {
 case PLUS_EXPR:
   {
     tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 40065, __FUNCTION__)))));
     tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 40066, __FUNCTION__)))));
     switch (((enum tree_code) (o41)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 40071, __FUNCTION__)))));
    if (o60 == op0 || (operand_equal_p (o60, op0, 0) && types_match (o60, op0)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o40, op0 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     switch (((enum tree_code) (o40)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 40089, __FUNCTION__)))));
    if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o41, op0 };
   tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o40, op0 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
     if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op1, o30, o41, op0 };
    tree res = generic_simplify_68 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
     break;
   }
 case POINTER_PLUS_EXPR:
   {
     tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 40125, __FUNCTION__)))));
     tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 40126, __FUNCTION__)))));
     switch (((enum tree_code) (o40)->base.code))
       {
       case NOP_EXPR: case CONVERT_EXPR:
         {
    tree o50 = (*((const_cast<tree*> (tree_operand_check ((o40), (0), "generic-match.c", 40131, __FUNCTION__)))));
    if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
      {
        {

   tree captures[4] __attribute__ ((__unused__)) = { op1, o30, op0, o41 };
   tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
        }
      }
           break;
         }
       default:;
       }
     if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
       {
  {

    tree captures[4] __attribute__ ((__unused__)) = { op1, o30, op0, o41 };
    tree res = generic_simplify_228 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
     break;
   }
        default:;
        }
}
}
  switch (((enum tree_code) (op0)->base.code))
    {
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40164, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40165, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };
       tree res = generic_simplify_28 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (o21)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((o21), (0), "generic-match.c", 40183, __FUNCTION__)))));
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40188, __FUNCTION__)))));
     if (o60 == o40 || (operand_equal_p (o60, o40, 0) && types_match (o60, o40)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (op1 == o40 || (operand_equal_p (op1, o40, 0) && types_match (op1, o40)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40219, __FUNCTION__)))));
      if (o50 == o21 || (operand_equal_p (o50, o21, 0) && types_match (o50, o21)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
      tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case TRUNC_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40250, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40251, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_109 (loc, type, op0, op1, captures, NE_EXPR, GE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40269, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case MINUS_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((o30), (0), "generic-match.c", 40274, __FUNCTION__)))));
       tree o41 = (*((const_cast<tree*> (tree_operand_check ((o30), (1), "generic-match.c", 40275, __FUNCTION__)))));
       switch (((enum tree_code) (o40)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (o41)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((o41), (0), "generic-match.c", 40284, __FUNCTION__)))));
     if (o60 == op0 || (operand_equal_p (o60, op0, 0) && types_match (o60, op0)))
       {
         {

    tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
    tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
         }
       }
            break;
          }
        default:;
        }
      if (o41 == op0 || (operand_equal_p (o41, op0, 0) && types_match (o41, op0)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { op0, o40 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40319, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 40320, __FUNCTION__)))));
 switch (((enum tree_code) (o30)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (o31)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((o31), (0), "generic-match.c", 40329, __FUNCTION__)))));
      if (o50 == op0 || (operand_equal_p (o50, op0, 0) && types_match (o50, op0)))
        {
   {

     tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
     tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
      break;
    }
         default:;
         }
       if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
      tree res = generic_simplify_246 (loc, type, op0, op1, captures, NE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40364, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40365, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, NE_EXPR, GT_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, NE_EXPR, GT_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_9 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40410, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40411, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, NE_EXPR, LT_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, NE_EXPR, LT_EXPR);
       if (res) return res;
     }
   }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_167 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_with_possible_nonzero_bits2 (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      {
 tree op1_pops[1];
 if (tree_with_certain_nonzero_bits2 (op1, op1_pops))
   {
     tree o40 = op1_pops[0];
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
       tree res = generic_simplify_174 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
}
      }
}
}
{
  tree op0_pops[1];
  if (tree_with_certain_nonzero_bits2 (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      {
 tree op1_pops[1];
 if (tree_with_possible_nonzero_bits2 (op1, op1_pops))
   {
     tree o40 = op1_pops[0];
     {

       tree captures[2] __attribute__ ((__unused__)) = { o40, o20 };
       tree res = generic_simplify_174 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
}
      }
}
}
  switch (((enum tree_code) (op1)->base.code))
    {
    case MIN_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40500, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 40501, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, NE_EXPR, GT_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MIN_EXPR, NE_EXPR, GT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MAX_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40524, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 40525, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, NE_EXPR, LT_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_165 (loc, type, op0, op1, captures, MAX_EXPR, NE_EXPR, LT_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40552, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40553, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case LSHIFT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 40558, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 40559, __FUNCTION__)))));
       if (integer_onep (o30))
  {
    if (integer_onep (o21))
      {
        if (integer_zerop (op1))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o31 };
       tree res = generic_simplify_11 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR);
       if (res) return res;
     }
          }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40583, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40584, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_251 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40611, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40612, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_183 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case POINTER_DIFF_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40626, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40627, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
       tree res = generic_simplify_113 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case MULT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40641, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40642, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (integer_zerop (op1))
  {
    {

      tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
      tree res = generic_simplify_102 (loc, type, op0, op1, captures, NE_EXPR, NE_EXPR);
      if (res) return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_227 (loc, type, op0, op1, captures, NE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40677, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40682, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_37 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
     tree res = generic_simplify_188 (loc, type, op0, op1, captures, NE_EXPR, NE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40706, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40711, __FUNCTION__)))));
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
  tree res = generic_simplify_40 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
   tree res = generic_simplify_40 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_90 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40750, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40751, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, PLUS_EXPR, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40778, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40779, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_220 (loc, type, op0, op1, captures, MINUS_EXPR, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o20)->base.code))
   {
   case REAL_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case REAL_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_222 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case FLOAT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40828, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case REAL_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_108 (loc, type, op0, op1, captures, NE_EXPR, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case EXACT_DIV_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40847, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40848, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
  tree res = generic_simplify_63 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40867, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40872, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, NE_EXPR, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, NE_EXPR, NE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case ABS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40896, __FUNCTION__)))));
 if (zerop (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
       tree res = generic_simplify_79 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40910, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 40915, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_84 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
 {

   tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, op1 };
   tree res = generic_simplify_148 (loc, type, op0, op1, captures, NE_EXPR);
   if (res) return res;
 }
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 40936, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 40937, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, op1 };
       tree res = generic_simplify_92 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case SSA_NAME:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
  tree res = generic_simplify_91 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 40986, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 40987, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_92 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41014, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41015, __FUNCTION__)))));
 if (integer_zerop (op1))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_126 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    case CALL_EXPR:
      switch (get_call_combined_fn (op0))
        {
 case CFN_BUILT_IN_SQRTF:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 41050, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41050, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, NE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTF:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 41068, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41068, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTF, NE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 41086, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41086, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, NE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 41104, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41104, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRT, NE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_BUILT_IN_SQRTL:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 41122, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41122, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, NE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_BUILT_IN_SQRTL:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 41140, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41140, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_BUILT_IN_SQRTL, NE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 case CFN_SQRT:
   {
     tree o20 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op0), "generic-match.c", 41158, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41158, __FUNCTION__)))));
     switch (((enum tree_code) (op1)->base.code))
       {
       case REAL_CST:
         {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
      tree res = generic_simplify_243 (loc, type, op0, op1, captures, CFN_SQRT, NE_EXPR);
      if (res) return res;
    }
           break;
         }
       case CALL_EXPR:
         switch (get_call_combined_fn (op1))
           {
    case CFN_SQRT:
      {
        tree o40 = (*((const_cast<tree*> (tree_operand_check (((tree_check ((op1), "generic-match.c", 41176, __FUNCTION__, (CALL_EXPR)))), ((0) + 3), "generic-match.c", 41176, __FUNCTION__)))));
        {

   tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
   tree res = generic_simplify_81 (loc, type, op0, op1, captures, CFN_SQRT, NE_EXPR);
   if (res) return res;
        }
        break;
      }
    default:;
           }
         break;
       default:;
       }
     break;
   }
 default:;
        }
      break;
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case BIT_XOR_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41201, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 41202, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o31 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { op0, o30 };
       tree res = generic_simplify_127 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41229, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 41234, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 41235, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o30, o31, op1 };
       tree res = generic_simplify_65 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41266, __FUNCTION__)))));
      switch (((enum tree_code) (o40)->base.code))
        {
        case ADDR_EXPR:
          {
     {

       tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o40 };
       tree res = generic_simplify_238 (loc, type, op0, op1, captures, NE_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, o20, op1 };
        tree res = generic_simplify_238 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
     if (integer_zerop (op1))
       {
  {

    tree captures[1] __attribute__ ((__unused__)) = { o20 };
    tree res = generic_simplify_216 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41312, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41313, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_65 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case ADDR_EXPR:
      {
 switch (((enum tree_code) (op1)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41344, __FUNCTION__)))));
       switch (((enum tree_code) (o30)->base.code))
         {
  case ADDR_EXPR:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { op0, op0, o30 };
        tree res = generic_simplify_14 (loc, type, op0, op1, captures, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
   case ADDR_EXPR:
     {
       {

  tree captures[3] __attribute__ ((__unused__)) = { op0, op0, op1 };
  tree res = generic_simplify_14 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if (integer_zerop (op1))
 {
   {

     tree captures[1] __attribute__ ((__unused__)) = { op0 };
     tree res = generic_simplify_216 (loc, type, op0, op1, captures, NE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41386, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41387, __FUNCTION__)))));
 if (integer_pow2p (o21))
   {
     if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, o20, o21 };
    tree res = generic_simplify_129 (loc, type, op0, op1, captures, NE_EXPR, EQ_EXPR);
    if (res) return res;
  }
       }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 41404, __FUNCTION__)))));
       if (integer_pow2p (o21))
  {
    if (integer_zerop (op1))
      {
        {

   tree captures[3] __attribute__ ((__unused__)) = { o20, o30, o21 };
   tree res = generic_simplify_10 (loc, type, op0, op1, captures, NE_EXPR, LT_EXPR);
   if (res) return res;
        }
      }
         }
       break;
     }
          default:;
          }
 if (integer_pow2p (o21))
   {
     if (integer_zerop (op1))
       {
  {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o20, o21 };
    tree res = generic_simplify_236 (loc, type, op0, op1, captures, NE_EXPR, LT_EXPR);
    if (res) return res;
  }
       }
   }
        break;
      }
    default:;
    }
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
    tree res = generic_simplify_166 (loc, type, op0, op1, captures, NE_EXPR);
    if (res) return res;
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41447, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case INTEGER_CST:
     {
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
  tree res = generic_simplify_107 (loc, type, op0, op1, captures, NE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41472, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41472, __FUNCTION__))->typed.type)))
   {
     if (((non_type_check ((op1), "generic-match.c", 41474, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 41474 "generic-match.c" 3 4
                                        __null
# 41474 "generic-match.c"
                                                 ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3792, %s:%d\n", "generic-match.c", 41475);
     tree res_op0;
     res_op0 = captures[0];
     tree res;
     res = non_lvalue_loc (loc, res_op0);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41488, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41489, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_182 (loc, type, op0, op1, captures, PLUS_EXPR, MINUS_EXPR, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case MINUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41516, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41517, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[4] __attribute__ ((__unused__)) = { op0, o20, o21, op1 };
        tree res = generic_simplify_182 (loc, type, op0, op1, captures, MINUS_EXPR, PLUS_EXPR, NE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 41544 "generic-match.c" 3 4
        __null
# 41544 "generic-match.c"
                 ;
}

static tree
generic_simplify_MIN_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_46 (loc, type, op0, op1, captures);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MAX_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41563, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41564, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_115 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_115 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MAX_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41591, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 41592, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, op0 };
       tree res = generic_simplify_115 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o31, op0 };
       tree res = generic_simplify_115 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41615, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_93 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41633, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_93 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

    if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_check5 ((type), "generic-match.c", 41651, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.minval) && operand_equal_p (captures[1], ((tree_check5 ((type), "generic-match.c", 41651, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.minval), OEP_ONLY_CONST))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2011, %s:%d\n", "generic-match.c", 41653);
 tree res;
 res = captures[1];
 if (((non_type_check ((captures[0]), "generic-match.c", 41656, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    else
      {

 if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_check5 ((type), "generic-match.c", 41663, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.maxval) && operand_equal_p (captures[1], ((tree_check5 ((type), "generic-match.c", 41663, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.maxval), OEP_ONLY_CONST))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2015, %s:%d\n", "generic-match.c", 41665);
     tree res;
     res = captures[0];
     if (((non_type_check ((captures[1]), "generic-match.c", 41668, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     return res;
   }
      }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41678, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 41679, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     switch (((enum tree_code) (o31)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41690, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41690, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41690, __FUNCTION__))->typed.type)), "generic-match.c", 41690, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
        {

   if (tree_int_cst_sgn (captures[2]) > 0)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2043, %s:%d\n", "generic-match.c", 41695);
       tree res;
       res = captures[0];
       if (((non_type_check ((captures[2]), "generic-match.c", 41698, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
   else
     {
       if (((non_type_check ((op1), "generic-match.c", 41704, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 41704 "generic-match.c" 3 4
                                          __null
# 41704 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2044, %s:%d\n", "generic-match.c", 41705);
       tree res;
       res = captures[1];
       return res;
     }
        }
    }
           break;
         }
       default:;
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41725, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41726, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41737, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41737, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41737, __FUNCTION__))->typed.type)), "generic-match.c", 41737, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
        {

   if (tree_int_cst_sgn (captures[2]) > 0)
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2043, %s:%d\n", "generic-match.c", 41742);
       tree res;
       res = captures[0];
       if (((non_type_check ((captures[2]), "generic-match.c", 41745, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
   else
     {
       if (((non_type_check ((op0), "generic-match.c", 41751, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 41751 "generic-match.c" 3 4
                                          __null
# 41751 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2044, %s:%d\n", "generic-match.c", 41752);
       tree res;
       res = captures[1];
       return res;
     }
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41768, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41773, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

  if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 41778, __FUNCTION__))->typed.type)), "generic-match.c", 41778, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2085, %s:%d\n", "generic-match.c", 41780);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = captures[3];
        res = fold_build2_loc (loc, MAX_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 41786, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41802, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41807, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_233 (loc, type, op0, op1, captures, MIN_EXPR, MAX_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 41822 "generic-match.c" 3 4
        __null
# 41822 "generic-match.c"
                 ;
}

static tree
generic_simplify_MAX_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_46 (loc, type, op0, op1, captures);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case MIN_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41841, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 41842, __FUNCTION__)))));
 if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };
       tree res = generic_simplify_155 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o21, o20 };
       tree res = generic_simplify_155 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case MIN_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41869, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 41870, __FUNCTION__)))));
 if (o31 == op0 || (operand_equal_p (o31, op0, 0) && types_match (o31, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o30, op0 };
       tree res = generic_simplify_155 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[2] __attribute__ ((__unused__)) = { o31, op0 };
       tree res = generic_simplify_155 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41893, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { op0 };
       tree res = generic_simplify_250 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 41911, __FUNCTION__)))));
 if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
   {
     {

       tree captures[1] __attribute__ ((__unused__)) = { o20 };
       tree res = generic_simplify_250 (loc, type, op0, op1, captures);
       if (res) return res;
     }
   }
        break;
      }
    default:;
    }
  {

    tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

    if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_check5 ((type), "generic-match.c", 41929, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.maxval) && operand_equal_p (captures[1], ((tree_check5 ((type), "generic-match.c", 41929, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.maxval), OEP_ONLY_CONST))
      {
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2022, %s:%d\n", "generic-match.c", 41931);
 tree res;
 res = captures[1];
 if (((non_type_check ((captures[0]), "generic-match.c", 41934, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    else
      {

 if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && ((tree_check5 ((type), "generic-match.c", 41941, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.minval) && operand_equal_p (captures[1], ((tree_check5 ((type), "generic-match.c", 41941, __FUNCTION__, (INTEGER_TYPE), (ENUMERAL_TYPE), (BOOLEAN_TYPE), (REAL_TYPE), (FIXED_POINT_TYPE)))->type_non_common.minval), OEP_ONLY_CONST))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2026, %s:%d\n", "generic-match.c", 41943);
     tree res;
     res = captures[0];
     if (((non_type_check ((captures[1]), "generic-match.c", 41946, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     return res;
   }
      }
  }
  switch (((enum tree_code) (op1)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 41956, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 41957, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     switch (((enum tree_code) (o31)->base.code))
       {
       case INTEGER_CST:
         {
    {

      tree captures[3] __attribute__ ((__unused__)) = { op0, op1, o31 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41968, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41968, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 41968, __FUNCTION__))->typed.type)), "generic-match.c", 41968, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
        {

   if (tree_int_cst_sgn (captures[2]) > 0)
     {
       if (((non_type_check ((op1), "generic-match.c", 41973, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 41973 "generic-match.c" 3 4
                                          __null
# 41973 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2034, %s:%d\n", "generic-match.c", 41974);
       tree res;
       res = captures[1];
       return res;
     }
   else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2035, %s:%d\n", "generic-match.c", 41981);
       tree res;
       res = captures[0];
       if (((non_type_check ((captures[2]), "generic-match.c", 41984, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
        }
    }
           break;
         }
       default:;
       }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case PLUS_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42003, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42004, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    {

      tree captures[3] __attribute__ ((__unused__)) = { o20, op0, o21 };

      if (((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 42015, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 42015, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 42015, __FUNCTION__))->typed.type)), "generic-match.c", 42015, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv)))
        {

   if (tree_int_cst_sgn (captures[2]) > 0)
     {
       if (((non_type_check ((op0), "generic-match.c", 42020, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 42020 "generic-match.c" 3 4
                                          __null
# 42020 "generic-match.c"
                                                   ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2034, %s:%d\n", "generic-match.c", 42021);
       tree res;
       res = captures[1];
       return res;
     }
   else
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2035, %s:%d\n", "generic-match.c", 42028);
       tree res;
       res = captures[0];
       if (((non_type_check ((captures[2]), "generic-match.c", 42031, __FUNCTION__))->base.side_effects_flag))
         res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42046, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42051, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };

  if (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == REAL_TYPE))) || (((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) || ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE || (((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))) && ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE) ? !global_options.x_flag_wrapv_pointer : (!(any_integral_type_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42056, __FUNCTION__))->typed.type)), "generic-match.c", 42056, __FUNCTION__))->base.u.bits.unsigned_flag && !global_options.x_flag_wrapv && !global_options.x_flag_trapv))))
    {
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2085, %s:%d\n", "generic-match.c", 42058);
      tree res_op0;
      {
        tree ops1[2], res;
        ops1[0] = captures[1];
        ops1[1] = captures[3];
        res = fold_build2_loc (loc, MIN_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 42064, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
        res_op0 = res;
      }
      tree res;
      res = fold_build1_loc (loc, NEGATE_EXPR, type, res_op0);
      return res;
    }
       }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_NOT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42080, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case BIT_NOT_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42085, __FUNCTION__)))));
       {

  tree captures[4] __attribute__ ((__unused__)) = { op0, o20, op1, o40 };
  tree res = generic_simplify_233 (loc, type, op0, op1, captures, MAX_EXPR, MIN_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 42100 "generic-match.c" 3 4
        __null
# 42100 "generic-match.c"
                 ;
}

static tree
generic_simplify_LROTATE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_all_onesp (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_214 (loc, type, op0, op1, captures, LROTATE_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_270 (loc, type, op0, op1, captures, LROTATE_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_173 (loc, type, op0, op1, captures, LROTATE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VECTOR_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_266 (loc, type, op0, op1, captures, LROTATE_EXPR);
   if (res) return res;
 }
        break;
      }
    case CONSTRUCTOR:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_41 (loc, type, op0, op1, captures, LROTATE_EXPR);
   if (res) return res;
 }
        break;
      }
    case INTEGER_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   if (((non_type_check ((captures[1]), "generic-match.c", 42160, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 42160 "generic-match.c" 3 4
                                              __null
# 42160 "generic-match.c"
                                                       ;
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2193, %s:%d\n", "generic-match.c", 42161);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   res_op1 = const_binop (MINUS_EXPR, ((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42165, __FUNCTION__))->typed.type), build_int_cst (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 42165, __FUNCTION__))->typed.type), element_precision (type)), captures[1]);
   tree res;
   res = fold_build2_loc (loc, RROTATE_EXPR, type, res_op0, res_op1);
   return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case LROTATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42178, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42179, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_249 (loc, type, op0, op1, captures, LROTATE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 42206 "generic-match.c" 3 4
        __null
# 42206 "generic-match.c"
                 ;
}

static tree
generic_simplify_RROTATE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (integer_all_onesp (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_214 (loc, type, op0, op1, captures, RROTATE_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_270 (loc, type, op0, op1, captures, RROTATE_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_173 (loc, type, op0, op1, captures, RROTATE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VECTOR_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_266 (loc, type, op0, op1, captures, RROTATE_EXPR);
   if (res) return res;
 }
        break;
      }
    case CONSTRUCTOR:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_41 (loc, type, op0, op1, captures, RROTATE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case RROTATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42267, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42268, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_249 (loc, type, op0, op1, captures, RROTATE_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 42295 "generic-match.c" 3 4
        __null
# 42295 "generic-match.c"
                 ;
}

static tree
generic_simplify_RSHIFT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case LSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42305, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42306, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       if (op1 == o21 || (operand_equal_p (op1, o21, 0) && types_match (op1, o21)))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { o20, o21 };

      if (((tree_class_check ((type), (tcc_type), "generic-match.c", 42317, __FUNCTION__))->base.u.bits.unsigned_flag) && (wi::ltu_p (wi::to_wide (captures[1]), element_precision (type))))
        {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2156, %s:%d\n", "generic-match.c", 42319);
   tree res_op0;
   res_op0 = captures[0];
   tree res_op1;
   {
     tree ops1[2], res;
     ops1[0] = build_minus_one_cst (type);
     ops1[1] = captures[1];
     res = fold_build2_loc (loc, RSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 42327, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
     res_op1 = res;
   }
   tree res;
   res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
   return res;
        }
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
if (integer_all_onesp (op0))
  {
    {

      tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };

      if (!((tree_class_check ((type), (tcc_type), "generic-match.c", 42350, __FUNCTION__))->base.u.bits.unsigned_flag) && tree_expr_nonnegative_p (captures[1]))
 {
   if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2142, %s:%d\n", "generic-match.c", 42352);
   tree res;
   res = captures[0];
   if (((non_type_check ((captures[1]), "generic-match.c", 42355, __FUNCTION__))->base.side_effects_flag))
     res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
   return res;
 }
    }
  }
  if (integer_zerop (op1))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_270 (loc, type, op0, op1, captures, RSHIFT_EXPR);
 if (res) return res;
      }
    }
  if (integer_zerop (op0))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 tree res = generic_simplify_173 (loc, type, op0, op1, captures, RSHIFT_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VECTOR_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_266 (loc, type, op0, op1, captures, RSHIFT_EXPR);
   if (res) return res;
 }
        break;
      }
    case CONSTRUCTOR:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_41 (loc, type, op0, op1, captures, RSHIFT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case RSHIFT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42407, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42408, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op1 };
        tree res = generic_simplify_249 (loc, type, op0, op1, captures, RSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case NOP_EXPR: case CONVERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42435, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 42440, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 42441, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1 };
       tree res = generic_simplify_105 (loc, type, op0, op1, captures, BIT_AND_EXPR, RSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_XOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 42468, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 42469, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1 };
       tree res = generic_simplify_105 (loc, type, op0, op1, captures, BIT_XOR_EXPR, RSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
   case BIT_IOR_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 42496, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 42497, __FUNCTION__)))));
       switch (((enum tree_code) (o31)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case INTEGER_CST:
          {
     {

       tree captures[5] __attribute__ ((__unused__)) = { op0, o20, o30, o31, op1 };
       tree res = generic_simplify_105 (loc, type, op0, op1, captures, BIT_IOR_EXPR, RSHIFT_EXPR);
       if (res) return res;
     }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_AND_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42528, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42529, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1 };
        tree res = generic_simplify_4 (loc, type, op0, op1, captures, BIT_AND_EXPR, RSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_XOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42556, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42557, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1 };
        tree res = generic_simplify_4 (loc, type, op0, op1, captures, BIT_XOR_EXPR, RSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case BIT_IOR_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42584, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 42585, __FUNCTION__)))));
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case INTEGER_CST:
    {
      {

        tree captures[5] __attribute__ ((__unused__)) = { op0, op0, o20, o21, op1 };
        tree res = generic_simplify_4 (loc, type, op0, op1, captures, BIT_IOR_EXPR, RSHIFT_EXPR);
        if (res) return res;
      }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 42612 "generic-match.c" 3 4
        __null
# 42612 "generic-match.c"
                 ;
}

static tree
generic_simplify_COMPLEX_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case REALPART_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42622, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case IMAGPART_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42627, __FUNCTION__)))));
       if (o40 == o20 || (operand_equal_p (o40, o20, 0) && types_match (o40, o20)))
  {
    {

      tree captures[1] __attribute__ ((__unused__)) = { o20 };
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2589, %s:%d\n", "generic-match.c", 42633);
      tree res;
      res = captures[0];
      return res;
    }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  return (tree) 
# 42647 "generic-match.c" 3 4
        __null
# 42647 "generic-match.c"
                 ;
}

static tree
generic_simplify_UNLE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_219 (loc, type, op0, op1, captures, UNLE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42666, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42671, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, UNLE_EXPR, UNGE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, UNLE_EXPR, UNGE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, UNLE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 42709 "generic-match.c" 3 4
        __null
# 42709 "generic-match.c"
                 ;
}

static tree
generic_simplify_UNGE_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_219 (loc, type, op0, op1, captures, UNGE_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42728, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42733, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, UNGE_EXPR, UNLE_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, UNGE_EXPR, UNLE_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, UNGE_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 42771 "generic-match.c" 3 4
        __null
# 42771 "generic-match.c"
                 ;
}

static tree
generic_simplify_UNEQ_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_219 (loc, type, op0, op1, captures, UNEQ_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42790, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42795, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, UNEQ_EXPR, UNEQ_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, UNEQ_EXPR, UNEQ_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, UNEQ_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 42833 "generic-match.c" 3 4
        __null
# 42833 "generic-match.c"
                 ;
}

static tree
generic_simplify_UNLT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_223 (loc, type, op0, op1, captures, UNLT_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42852, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42857, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, UNLT_EXPR, UNGT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, UNLT_EXPR, UNGT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, UNLT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 42895 "generic-match.c" 3 4
        __null
# 42895 "generic-match.c"
                 ;
}

static tree
generic_simplify_UNGT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };
 tree res = generic_simplify_223 (loc, type, op0, op1, captures, UNGT_EXPR);
 if (res) return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42914, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42919, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, UNGT_EXPR, UNLT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, UNGT_EXPR, UNLT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, UNGT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 42957 "generic-match.c" 3 4
        __null
# 42957 "generic-match.c"
                 ;
}

static tree
generic_simplify_LTGT_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  if (op1 == op0 || (operand_equal_p (op1, op0, 0) && types_match (op1, op0)))
    {
      {

 tree captures[1] __attribute__ ((__unused__)) = { op0 };

 if (!global_options.x_flag_trapping_math)
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3027, %s:%d\n", "generic-match.c", 42971);
     tree res;
     res = constant_boolean_node (false, type);
     if (((non_type_check ((captures[0]), "generic-match.c", 42974, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
     return res;
   }
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 42984, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 42989, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, LTGT_EXPR, LTGT_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, LTGT_EXPR, LTGT_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, LTGT_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 43027 "generic-match.c" 3 4
        __null
# 43027 "generic-match.c"
                 ;
}

static tree
generic_simplify_UNORDERED_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 43037, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43042, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, UNORDERED_EXPR, UNORDERED_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, UNORDERED_EXPR, UNORDERED_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, UNORDERED_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 43080 "generic-match.c" 3 4
        __null
# 43080 "generic-match.c"
                 ;
}

static tree
generic_simplify_ORDERED_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case NEGATE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 43090, __FUNCTION__)))));
 switch (((enum tree_code) (op1)->base.code))
   {
   case NEGATE_EXPR:
     {
       tree o40 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43095, __FUNCTION__)))));
       {

  tree captures[2] __attribute__ ((__unused__)) = { o20, o40 };
  tree res = generic_simplify_5 (loc, type, op0, op1, captures, ORDERED_EXPR, ORDERED_EXPR);
  if (res) return res;
       }
       break;
     }
          default:;
          }
      if ((tree_code_type[(int) (((enum tree_code) (op1)->base.code))] == tcc_constant))
 {
   {

     tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };
     tree res = generic_simplify_101 (loc, type, op0, op1, captures, ORDERED_EXPR, ORDERED_EXPR);
     if (res) return res;
   }
        }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case REAL_CST:
      {
 {

   tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
   tree res = generic_simplify_45 (loc, type, op0, op1, captures, ORDERED_EXPR);
   if (res) return res;
 }
        break;
      }
    default:;
    }
  return (tree) 
# 43133 "generic-match.c" 3 4
        __null
# 43133 "generic-match.c"
                 ;
}

tree
generic_simplify (location_t loc, enum tree_code code, const tree type __attribute__ ((__unused__)), tree op0, tree op1)
{
  switch (code)
    {
    case PLUS_EXPR:
      return generic_simplify_PLUS_EXPR (loc, code, type, op0, op1);
    case POINTER_PLUS_EXPR:
      return generic_simplify_POINTER_PLUS_EXPR (loc, code, type, op0, op1);
    case MINUS_EXPR:
      return generic_simplify_MINUS_EXPR (loc, code, type, op0, op1);
    case BIT_IOR_EXPR:
      return generic_simplify_BIT_IOR_EXPR (loc, code, type, op0, op1);
    case BIT_XOR_EXPR:
      return generic_simplify_BIT_XOR_EXPR (loc, code, type, op0, op1);
    case POINTER_DIFF_EXPR:
      return generic_simplify_POINTER_DIFF_EXPR (loc, code, type, op0, op1);
    case MULT_EXPR:
      return generic_simplify_MULT_EXPR (loc, code, type, op0, op1);
    case TRUNC_DIV_EXPR:
      return generic_simplify_TRUNC_DIV_EXPR (loc, code, type, op0, op1);
    case CEIL_DIV_EXPR:
      return generic_simplify_CEIL_DIV_EXPR (loc, code, type, op0, op1);
    case FLOOR_DIV_EXPR:
      return generic_simplify_FLOOR_DIV_EXPR (loc, code, type, op0, op1);
    case ROUND_DIV_EXPR:
      return generic_simplify_ROUND_DIV_EXPR (loc, code, type, op0, op1);
    case EXACT_DIV_EXPR:
      return generic_simplify_EXACT_DIV_EXPR (loc, code, type, op0, op1);
    case RDIV_EXPR:
      return generic_simplify_RDIV_EXPR (loc, code, type, op0, op1);
    case CEIL_MOD_EXPR:
      return generic_simplify_CEIL_MOD_EXPR (loc, code, type, op0, op1);
    case FLOOR_MOD_EXPR:
      return generic_simplify_FLOOR_MOD_EXPR (loc, code, type, op0, op1);
    case ROUND_MOD_EXPR:
      return generic_simplify_ROUND_MOD_EXPR (loc, code, type, op0, op1);
    case TRUNC_MOD_EXPR:
      return generic_simplify_TRUNC_MOD_EXPR (loc, code, type, op0, op1);
    case LSHIFT_EXPR:
      return generic_simplify_LSHIFT_EXPR (loc, code, type, op0, op1);
    case BIT_AND_EXPR:
      return generic_simplify_BIT_AND_EXPR (loc, code, type, op0, op1);
    case LT_EXPR:
      return generic_simplify_LT_EXPR (loc, code, type, op0, op1);
    case GE_EXPR:
      return generic_simplify_GE_EXPR (loc, code, type, op0, op1);
    case GT_EXPR:
      return generic_simplify_GT_EXPR (loc, code, type, op0, op1);
    case LE_EXPR:
      return generic_simplify_LE_EXPR (loc, code, type, op0, op1);
    case EQ_EXPR:
      return generic_simplify_EQ_EXPR (loc, code, type, op0, op1);
    case NE_EXPR:
      return generic_simplify_NE_EXPR (loc, code, type, op0, op1);
    case MIN_EXPR:
      return generic_simplify_MIN_EXPR (loc, code, type, op0, op1);
    case MAX_EXPR:
      return generic_simplify_MAX_EXPR (loc, code, type, op0, op1);
    case LROTATE_EXPR:
      return generic_simplify_LROTATE_EXPR (loc, code, type, op0, op1);
    case RROTATE_EXPR:
      return generic_simplify_RROTATE_EXPR (loc, code, type, op0, op1);
    case RSHIFT_EXPR:
      return generic_simplify_RSHIFT_EXPR (loc, code, type, op0, op1);
    case COMPLEX_EXPR:
      return generic_simplify_COMPLEX_EXPR (loc, code, type, op0, op1);
    case UNLE_EXPR:
      return generic_simplify_UNLE_EXPR (loc, code, type, op0, op1);
    case UNGE_EXPR:
      return generic_simplify_UNGE_EXPR (loc, code, type, op0, op1);
    case UNEQ_EXPR:
      return generic_simplify_UNEQ_EXPR (loc, code, type, op0, op1);
    case UNLT_EXPR:
      return generic_simplify_UNLT_EXPR (loc, code, type, op0, op1);
    case UNGT_EXPR:
      return generic_simplify_UNGT_EXPR (loc, code, type, op0, op1);
    case LTGT_EXPR:
      return generic_simplify_LTGT_EXPR (loc, code, type, op0, op1);
    case UNORDERED_EXPR:
      return generic_simplify_UNORDERED_EXPR (loc, code, type, op0, op1);
    case ORDERED_EXPR:
      return generic_simplify_ORDERED_EXPR (loc, code, type, op0, op1);
    default:;
    }
  return (tree) 
# 43221 "generic-match.c" 3 4
        __null
# 43221 "generic-match.c"
                 ;
}

static tree
generic_simplify_COND_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1, tree op2)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case GT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 43231, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 43232, __FUNCTION__)))));
 if (real_zerop (o21))
   {
     if (real_onep (op1))
       {
  if (real_minus_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 43243, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 43248, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43248 "generic-match.c" 3 4
                                            __null
# 43248 "generic-match.c"
                                                     ;
         if (((non_type_check ((op2), "generic-match.c", 43249, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43249 "generic-match.c" 3 4
                                            __null
# 43249 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 43250, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43250 "generic-match.c" 3 4
                                                    __null
# 43250 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:180, %s:%d\n", "generic-match.c", 43251);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43258, __FUNCTION__))->typed.type) != type)
      res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
    else
      res = ops1[0];
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 43267 "generic-match.c" 3 4
                 __null
# 43267 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 43275, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43275 "generic-match.c" 3 4
                                         __null
# 43275 "generic-match.c"
                                                  ;
      if (((non_type_check ((op2), "generic-match.c", 43276, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43276 "generic-match.c" 3 4
                                         __null
# 43276 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 43277, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43277 "generic-match.c" 3 4
                                                 __null
# 43277 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:182, %s:%d\n", "generic-match.c", 43278);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43285, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 43294 "generic-match.c" 3 4
              __null
# 43294 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 43302, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43302 "generic-match.c" 3 4
                                             __null
# 43302 "generic-match.c"
                                                      ;
          if (((non_type_check ((op2), "generic-match.c", 43303, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43303 "generic-match.c" 3 4
                                             __null
# 43303 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 43304, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43304 "generic-match.c" 3 4
                                                     __null
# 43304 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:184, %s:%d\n", "generic-match.c", 43305);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43312, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 43321 "generic-match.c" 3 4
                  __null
# 43321 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
     if (real_minus_onep (op1))
       {
  if (real_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op2 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 43338, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 43343, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43343 "generic-match.c" 3 4
                                            __null
# 43343 "generic-match.c"
                                                     ;
         if (((non_type_check ((op1), "generic-match.c", 43344, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43344 "generic-match.c" 3 4
                                            __null
# 43344 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 43345, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43345 "generic-match.c" 3 4
                                                    __null
# 43345 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:195, %s:%d\n", "generic-match.c", 43346);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43353, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 43359 "generic-match.c" 3 4
                 __null
# 43359 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 43367, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43367 "generic-match.c" 3 4
                                         __null
# 43367 "generic-match.c"
                                                  ;
      if (((non_type_check ((op1), "generic-match.c", 43368, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43368 "generic-match.c" 3 4
                                         __null
# 43368 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 43369, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43369 "generic-match.c" 3 4
                                                 __null
# 43369 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:197, %s:%d\n", "generic-match.c", 43370);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43377, __FUNCTION__))->typed.type), ops1[0]);
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 43383 "generic-match.c" 3 4
              __null
# 43383 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 43391, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43391 "generic-match.c" 3 4
                                             __null
# 43391 "generic-match.c"
                                                      ;
          if (((non_type_check ((op1), "generic-match.c", 43392, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43392 "generic-match.c" 3 4
                                             __null
# 43392 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 43393, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43393 "generic-match.c" 3 4
                                                     __null
# 43393 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:199, %s:%d\n", "generic-match.c", 43394);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43401, __FUNCTION__))->typed.type), ops1[0]);
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 43407 "generic-match.c" 3 4
                  __null
# 43407 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 43421, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43430, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
          tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GT_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GT_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      switch (((enum tree_code) (op1)->base.code))
        {
        case PLUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43473, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 43474, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GT_EXPR, PLUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        case MINUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43504, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 43505, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GT_EXPR, MINUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43551, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GT_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    switch (((enum tree_code) (op2)->base.code))
      {
      case INTEGER_CST:
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
     tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GT_EXPR);
     if (res) return res;
   }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case PLUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43594, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 43595, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GT_EXPR, PLUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43625, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 43626, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GT_EXPR, MINUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case GE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 43664, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 43665, __FUNCTION__)))));
 if (real_zerop (o21))
   {
     if (real_onep (op1))
       {
  if (real_minus_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 43676, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 43681, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43681 "generic-match.c" 3 4
                                            __null
# 43681 "generic-match.c"
                                                     ;
         if (((non_type_check ((op2), "generic-match.c", 43682, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43682 "generic-match.c" 3 4
                                            __null
# 43682 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 43683, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43683 "generic-match.c" 3 4
                                                    __null
# 43683 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:180, %s:%d\n", "generic-match.c", 43684);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43691, __FUNCTION__))->typed.type) != type)
      res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
    else
      res = ops1[0];
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 43700 "generic-match.c" 3 4
                 __null
# 43700 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 43708, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43708 "generic-match.c" 3 4
                                         __null
# 43708 "generic-match.c"
                                                  ;
      if (((non_type_check ((op2), "generic-match.c", 43709, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43709 "generic-match.c" 3 4
                                         __null
# 43709 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 43710, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43710 "generic-match.c" 3 4
                                                 __null
# 43710 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:182, %s:%d\n", "generic-match.c", 43711);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43718, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 43727 "generic-match.c" 3 4
              __null
# 43727 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 43735, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43735 "generic-match.c" 3 4
                                             __null
# 43735 "generic-match.c"
                                                      ;
          if (((non_type_check ((op2), "generic-match.c", 43736, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43736 "generic-match.c" 3 4
                                             __null
# 43736 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 43737, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43737 "generic-match.c" 3 4
                                                     __null
# 43737 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:184, %s:%d\n", "generic-match.c", 43738);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43745, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 43754 "generic-match.c" 3 4
                  __null
# 43754 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
     if (real_minus_onep (op1))
       {
  if (real_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op2 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 43771, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 43776, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43776 "generic-match.c" 3 4
                                            __null
# 43776 "generic-match.c"
                                                     ;
         if (((non_type_check ((op1), "generic-match.c", 43777, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43777 "generic-match.c" 3 4
                                            __null
# 43777 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 43778, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43778 "generic-match.c" 3 4
                                                    __null
# 43778 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:195, %s:%d\n", "generic-match.c", 43779);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43786, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 43792 "generic-match.c" 3 4
                 __null
# 43792 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 43800, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43800 "generic-match.c" 3 4
                                         __null
# 43800 "generic-match.c"
                                                  ;
      if (((non_type_check ((op1), "generic-match.c", 43801, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43801 "generic-match.c" 3 4
                                         __null
# 43801 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 43802, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43802 "generic-match.c" 3 4
                                                 __null
# 43802 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:197, %s:%d\n", "generic-match.c", 43803);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43810, __FUNCTION__))->typed.type), ops1[0]);
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 43816 "generic-match.c" 3 4
              __null
# 43816 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 43824, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43824 "generic-match.c" 3 4
                                             __null
# 43824 "generic-match.c"
                                                      ;
          if (((non_type_check ((op1), "generic-match.c", 43825, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43825 "generic-match.c" 3 4
                                             __null
# 43825 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 43826, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 43826 "generic-match.c" 3 4
                                                     __null
# 43826 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:199, %s:%d\n", "generic-match.c", 43827);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 43834, __FUNCTION__))->typed.type), ops1[0]);
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 43840 "generic-match.c" 3 4
                  __null
# 43840 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 43854, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43863, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
          tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GE_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GE_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      switch (((enum tree_code) (op1)->base.code))
        {
        case PLUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43906, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 43907, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GE_EXPR, PLUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        case MINUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43937, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 43938, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GE_EXPR, MINUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 43984, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GE_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    switch (((enum tree_code) (op2)->base.code))
      {
      case INTEGER_CST:
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
     tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, GE_EXPR);
     if (res) return res;
   }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case PLUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44027, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44028, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GE_EXPR, PLUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44058, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44059, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, GE_EXPR, MINUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case LT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 44097, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 44098, __FUNCTION__)))));
 if (real_zerop (o21))
   {
     if (real_onep (op1))
       {
  if (real_minus_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 44109, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 44114, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44114 "generic-match.c" 3 4
                                            __null
# 44114 "generic-match.c"
                                                     ;
         if (((non_type_check ((op2), "generic-match.c", 44115, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44115 "generic-match.c" 3 4
                                            __null
# 44115 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 44116, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44116 "generic-match.c" 3 4
                                                    __null
# 44116 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:180, %s:%d\n", "generic-match.c", 44117);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44124, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 44130 "generic-match.c" 3 4
                 __null
# 44130 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 44138, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44138 "generic-match.c" 3 4
                                         __null
# 44138 "generic-match.c"
                                                  ;
      if (((non_type_check ((op2), "generic-match.c", 44139, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44139 "generic-match.c" 3 4
                                         __null
# 44139 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 44140, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44140 "generic-match.c" 3 4
                                                 __null
# 44140 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:182, %s:%d\n", "generic-match.c", 44141);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44148, __FUNCTION__))->typed.type), ops1[0]);
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 44154 "generic-match.c" 3 4
              __null
# 44154 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 44162, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44162 "generic-match.c" 3 4
                                             __null
# 44162 "generic-match.c"
                                                      ;
          if (((non_type_check ((op2), "generic-match.c", 44163, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44163 "generic-match.c" 3 4
                                             __null
# 44163 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 44164, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44164 "generic-match.c" 3 4
                                                     __null
# 44164 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:184, %s:%d\n", "generic-match.c", 44165);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44172, __FUNCTION__))->typed.type), ops1[0]);
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 44178 "generic-match.c" 3 4
                  __null
# 44178 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
     if (real_minus_onep (op1))
       {
  if (real_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op2 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 44195, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 44200, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44200 "generic-match.c" 3 4
                                            __null
# 44200 "generic-match.c"
                                                     ;
         if (((non_type_check ((op1), "generic-match.c", 44201, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44201 "generic-match.c" 3 4
                                            __null
# 44201 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 44202, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44202 "generic-match.c" 3 4
                                                    __null
# 44202 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:195, %s:%d\n", "generic-match.c", 44203);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44210, __FUNCTION__))->typed.type) != type)
      res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
    else
      res = ops1[0];
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 44219 "generic-match.c" 3 4
                 __null
# 44219 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 44227, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44227 "generic-match.c" 3 4
                                         __null
# 44227 "generic-match.c"
                                                  ;
      if (((non_type_check ((op1), "generic-match.c", 44228, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44228 "generic-match.c" 3 4
                                         __null
# 44228 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 44229, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44229 "generic-match.c" 3 4
                                                 __null
# 44229 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:197, %s:%d\n", "generic-match.c", 44230);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44237, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 44246 "generic-match.c" 3 4
              __null
# 44246 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 44254, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44254 "generic-match.c" 3 4
                                             __null
# 44254 "generic-match.c"
                                                      ;
          if (((non_type_check ((op1), "generic-match.c", 44255, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44255 "generic-match.c" 3 4
                                             __null
# 44255 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 44256, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44256 "generic-match.c" 3 4
                                                     __null
# 44256 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:199, %s:%d\n", "generic-match.c", 44257);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44264, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 44273 "generic-match.c" 3 4
                  __null
# 44273 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 44287, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44296, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
          tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LT_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LT_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      switch (((enum tree_code) (op1)->base.code))
        {
        case PLUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44339, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44340, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LT_EXPR, PLUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        case MINUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44370, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44371, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LT_EXPR, MINUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44417, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LT_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    switch (((enum tree_code) (op2)->base.code))
      {
      case INTEGER_CST:
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
     tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LT_EXPR);
     if (res) return res;
   }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case PLUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44460, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44461, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LT_EXPR, PLUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44491, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44492, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LT_EXPR, MINUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case LE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 44530, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 44531, __FUNCTION__)))));
 if (real_zerop (o21))
   {
     if (real_onep (op1))
       {
  if (real_minus_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 44542, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 44547, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44547 "generic-match.c" 3 4
                                            __null
# 44547 "generic-match.c"
                                                     ;
         if (((non_type_check ((op2), "generic-match.c", 44548, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44548 "generic-match.c" 3 4
                                            __null
# 44548 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 44549, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44549 "generic-match.c" 3 4
                                                    __null
# 44549 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:180, %s:%d\n", "generic-match.c", 44550);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44557, __FUNCTION__))->typed.type), ops1[0]);
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 44563 "generic-match.c" 3 4
                 __null
# 44563 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 44571, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44571 "generic-match.c" 3 4
                                         __null
# 44571 "generic-match.c"
                                                  ;
      if (((non_type_check ((op2), "generic-match.c", 44572, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44572 "generic-match.c" 3 4
                                         __null
# 44572 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 44573, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44573 "generic-match.c" 3 4
                                                 __null
# 44573 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:182, %s:%d\n", "generic-match.c", 44574);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44581, __FUNCTION__))->typed.type), ops1[0]);
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 44587 "generic-match.c" 3 4
              __null
# 44587 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 44595, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44595 "generic-match.c" 3 4
                                             __null
# 44595 "generic-match.c"
                                                      ;
          if (((non_type_check ((op2), "generic-match.c", 44596, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44596 "generic-match.c" 3 4
                                             __null
# 44596 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 44597, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44597 "generic-match.c" 3 4
                                                     __null
# 44597 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:184, %s:%d\n", "generic-match.c", 44598);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     res = fold_build1_loc (loc, NEGATE_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44605, __FUNCTION__))->typed.type), ops1[0]);
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 44611 "generic-match.c" 3 4
                  __null
# 44611 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
     if (real_minus_onep (op1))
       {
  if (real_onep (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op2 };

        if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type) && types_match (type, ((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 44628, __FUNCTION__))->typed.type)))
   {

     if (types_match (type, global_trees[TI_FLOAT_TYPE]))
       {
         if (((non_type_check ((op0), "generic-match.c", 44633, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44633 "generic-match.c" 3 4
                                            __null
# 44633 "generic-match.c"
                                                     ;
         if (((non_type_check ((op1), "generic-match.c", 44634, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44634 "generic-match.c" 3 4
                                            __null
# 44634 "generic-match.c"
                                                     ;
         if (((non_type_check ((captures[1]), "generic-match.c", 44635, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44635 "generic-match.c" 3 4
                                                    __null
# 44635 "generic-match.c"
                                                             ;
         if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:195, %s:%d\n", "generic-match.c", 44636);
         tree res_op0;
         res_op0 = captures[1];
         tree res_op1;
         {
    tree ops1[1], res;
    ops1[0] = captures[0];
    if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44643, __FUNCTION__))->typed.type) != type)
      res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
    else
      res = ops1[0];
    res_op1 = res;
         }
         tree res;
         res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNF, type, 2, res_op0, res_op1);
         if (!res)
           return (tree) 
# 44652 "generic-match.c" 3 4
                 __null
# 44652 "generic-match.c"
                          ;
         return res;
       }
     else
       {

         if (types_match (type, global_trees[TI_DOUBLE_TYPE]))
    {
      if (((non_type_check ((op0), "generic-match.c", 44660, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44660 "generic-match.c" 3 4
                                         __null
# 44660 "generic-match.c"
                                                  ;
      if (((non_type_check ((op1), "generic-match.c", 44661, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44661 "generic-match.c" 3 4
                                         __null
# 44661 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 44662, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44662 "generic-match.c" 3 4
                                                 __null
# 44662 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:197, %s:%d\n", "generic-match.c", 44663);
      tree res_op0;
      res_op0 = captures[1];
      tree res_op1;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44670, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op1 = res;
      }
      tree res;
      res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGN, type, 2, res_op0, res_op1);
      if (!res)
        return (tree) 
# 44679 "generic-match.c" 3 4
              __null
# 44679 "generic-match.c"
                       ;
      return res;
    }
         else
    {

      if (types_match (type, global_trees[TI_LONG_DOUBLE_TYPE]))
        {
          if (((non_type_check ((op0), "generic-match.c", 44687, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44687 "generic-match.c" 3 4
                                             __null
# 44687 "generic-match.c"
                                                      ;
          if (((non_type_check ((op1), "generic-match.c", 44688, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44688 "generic-match.c" 3 4
                                             __null
# 44688 "generic-match.c"
                                                      ;
          if (((non_type_check ((captures[1]), "generic-match.c", 44689, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44689 "generic-match.c" 3 4
                                                     __null
# 44689 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:199, %s:%d\n", "generic-match.c", 44690);
          tree res_op0;
          res_op0 = captures[1];
          tree res_op1;
          {
     tree ops1[1], res;
     ops1[0] = captures[0];
     if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 44697, __FUNCTION__))->typed.type) != type)
       res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
     else
       res = ops1[0];
     res_op1 = res;
          }
          tree res;
          res = maybe_build_call_expr_loc (loc, CFN_BUILT_IN_COPYSIGNL, type, 2, res_op0, res_op1);
          if (!res)
            return (tree) 
# 44706 "generic-match.c" 3 4
                  __null
# 44706 "generic-match.c"
                           ;
          return res;
        }
    }
       }
   }
      }
    }
       }
   }
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 44720, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44729, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
          tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LE_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LE_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      switch (((enum tree_code) (op1)->base.code))
        {
        case PLUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44772, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44773, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LE_EXPR, PLUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        case MINUS_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44803, __FUNCTION__)))));
     tree o61 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44804, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (o61)->base.code))
           {
    case INTEGER_CST:
      {
        switch (((enum tree_code) (op2)->base.code))
          {
          case INTEGER_CST:
            {
       {

         tree captures[4] __attribute__ ((__unused__)) = { o30, o21, o61, op2 };
         tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LE_EXPR, MINUS_EXPR);
         if (res) return res;
       }
              break;
            }
          default:;
          }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44850, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LE_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    switch (((enum tree_code) (op2)->base.code))
      {
      case INTEGER_CST:
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
     tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, LE_EXPR);
     if (res) return res;
   }
          break;
        }
      default:;
      }
         }
       switch (((enum tree_code) (op1)->base.code))
         {
  case PLUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44893, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44894, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LE_EXPR, PLUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
  case MINUS_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 44924, __FUNCTION__)))));
      tree o51 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 44925, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (o51)->base.code))
     {
     case INTEGER_CST:
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[4] __attribute__ ((__unused__)) = { o20, o21, o51, op2 };
          tree res = generic_simplify_163 (loc, type, op0, op1, op2, captures, LE_EXPR, MINUS_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
        break;
      }
    case INTEGER_CST:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, op2 };

   if (integer_zerop (captures[0]))
     {

       if (!(((enum tree_code) (((contains_struct_check ((captures[2]), (TS_TYPED), "generic-match.c", 44970, __FUNCTION__))->typed.type))->base.code) == VOID_TYPE) || (((enum tree_code) (type)->base.code) == VOID_TYPE))
  {
    if (((non_type_check ((captures[1]), "generic-match.c", 44972, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44972 "generic-match.c" 3 4
                                               __null
# 44972 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[2]), "generic-match.c", 44973, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44973 "generic-match.c" 3 4
                                               __null
# 44973 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2657, %s:%d\n", "generic-match.c", 44974);
    tree res;
    res = captures[2];
    if (((non_type_check ((captures[0]), "generic-match.c", 44977, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    return res;
  }
     }
   else
     {

       if (!(((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 44985, __FUNCTION__))->typed.type))->base.code) == VOID_TYPE) || (((enum tree_code) (type)->base.code) == VOID_TYPE))
  {
    if (((non_type_check ((captures[1]), "generic-match.c", 44987, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44987 "generic-match.c" 3 4
                                               __null
# 44987 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[2]), "generic-match.c", 44988, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 44988 "generic-match.c" 3 4
                                               __null
# 44988 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2659, %s:%d\n", "generic-match.c", 44989);
    tree res;
    res = captures[1];
    if (((non_type_check ((captures[0]), "generic-match.c", 44992, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    return res;
  }
     }
 }
        break;
      }
    case EQ_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 45002, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 45003, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case NOP_EXPR: case CONVERT_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 45008, __FUNCTION__)))));
       switch (((enum tree_code) (o21)->base.code))
         {
  case INTEGER_CST:
    {
      switch (((enum tree_code) (op1)->base.code))
        {
        case NOP_EXPR: case CONVERT_EXPR:
          {
     tree o60 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 45017, __FUNCTION__)))));
     if (o60 == o30 || (operand_equal_p (o60, o30, 0) && types_match (o60, o30)))
       {
         switch (((enum tree_code) (op2)->base.code))
           {
    case INTEGER_CST:
      {
        {

          tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
          tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, EQ_EXPR);
          if (res) return res;
        }
        break;
      }
           default:;
           }
       }
            break;
          }
        default:;
        }
      if (op1 == o30 || (operand_equal_p (op1, o30, 0) && types_match (op1, o30)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, EQ_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       break;
     }
          default:;
          }
 switch (((enum tree_code) (o21)->base.code))
   {
   case INTEGER_CST:
     {
       switch (((enum tree_code) (op1)->base.code))
         {
  case NOP_EXPR: case CONVERT_EXPR:
    {
      tree o50 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 45072, __FUNCTION__)))));
      if (o50 == o20 || (operand_equal_p (o50, o20, 0) && types_match (o50, o20)))
        {
   switch (((enum tree_code) (op2)->base.code))
     {
     case INTEGER_CST:
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
    tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, EQ_EXPR);
    if (res) return res;
         }
         break;
       }
            default:;
            }
        }
      break;
    }
         default:;
         }
       if (op1 == o20 || (operand_equal_p (op1, o20, 0) && types_match (op1, o20)))
  {
    switch (((enum tree_code) (op2)->base.code))
      {
      case INTEGER_CST:
        {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, o21, op2 };
     tree res = generic_simplify_96 (loc, type, op0, op1, op2, captures, EQ_EXPR);
     if (res) return res;
   }
          break;
        }
      default:;
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case COND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 45123, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 45124, __FUNCTION__)))));
 tree o32 = (*((const_cast<tree*> (tree_operand_check ((op1), (2), "generic-match.c", 45125, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o31, o32, op2 };
       if (((non_type_check ((captures[0]), "generic-match.c", 45131, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45131 "generic-match.c" 3 4
                                                  __null
# 45131 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 45132, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45132 "generic-match.c" 3 4
                                                  __null
# 45132 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45133, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45133 "generic-match.c" 3 4
                                                  __null
# 45133 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 45134, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45134 "generic-match.c" 3 4
                                                  __null
# 45134 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2852, %s:%d\n", "generic-match.c", 45135);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = captures[3];
       tree res;
       res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
       return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op2)->base.code))
    {
    case COND_EXPR:
      {
 tree o40 = (*((const_cast<tree*> (tree_operand_check ((op2), (0), "generic-match.c", 45155, __FUNCTION__)))));
 tree o41 = (*((const_cast<tree*> (tree_operand_check ((op2), (1), "generic-match.c", 45156, __FUNCTION__)))));
 tree o42 = (*((const_cast<tree*> (tree_operand_check ((op2), (2), "generic-match.c", 45157, __FUNCTION__)))));
 if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o41, o42 };
       if (((non_type_check ((captures[0]), "generic-match.c", 45163, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45163 "generic-match.c" 3 4
                                                  __null
# 45163 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 45164, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45164 "generic-match.c" 3 4
                                                  __null
# 45164 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45165, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45165 "generic-match.c" 3 4
                                                  __null
# 45165 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 45166, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45166 "generic-match.c" 3 4
                                                  __null
# 45166 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2855, %s:%d\n", "generic-match.c", 45167);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = captures[3];
       tree res;
       res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
       return res;
     }
   }
 {

   tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o40, o41, o42 };

   if ((tree_code_type[(int) (((enum tree_code) (captures[0])->base.code))] == tcc_comparison) && (tree_code_type[(int) (((enum tree_code) (captures[2])->base.code))] == tcc_comparison) && invert_tree_comparison (((enum tree_code) (captures[0])->base.code), HONOR_NANS ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45183, __FUNCTION__))))))) == ((enum tree_code) (captures[2])->base.code) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45183, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[2]), (0), "generic-match.c", 45183, __FUNCTION__))))), 0) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (1), "generic-match.c", 45183, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[2]), (1), "generic-match.c", 45183, __FUNCTION__))))), 0))
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 45185, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45185 "generic-match.c" 3 4
                                                  __null
# 45185 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45186, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45186 "generic-match.c" 3 4
                                                  __null
# 45186 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 45187, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45187 "generic-match.c" 3 4
                                                  __null
# 45187 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 45188, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45188 "generic-match.c" 3 4
                                                  __null
# 45188 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2869, %s:%d\n", "generic-match.c", 45189);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = captures[3];
       tree res;
       res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
       return res;
     }
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case COND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 45209, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 45210, __FUNCTION__)))));
 tree o32 = (*((const_cast<tree*> (tree_operand_check ((op1), (2), "generic-match.c", 45211, __FUNCTION__)))));
 {

   tree captures[5] __attribute__ ((__unused__)) = { op0, o30, o31, o32, op2 };

   if ((tree_code_type[(int) (((enum tree_code) (captures[0])->base.code))] == tcc_comparison) && (tree_code_type[(int) (((enum tree_code) (captures[1])->base.code))] == tcc_comparison) && invert_tree_comparison (((enum tree_code) (captures[0])->base.code), HONOR_NANS ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45216, __FUNCTION__))))))) == ((enum tree_code) (captures[1])->base.code) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45216, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[1]), (0), "generic-match.c", 45216, __FUNCTION__))))), 0) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (1), "generic-match.c", 45216, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[1]), (1), "generic-match.c", 45216, __FUNCTION__))))), 0))
     {
       if (((non_type_check ((captures[1]), "generic-match.c", 45218, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45218 "generic-match.c" 3 4
                                                  __null
# 45218 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45219, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45219 "generic-match.c" 3 4
                                                  __null
# 45219 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[3]), "generic-match.c", 45220, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45220 "generic-match.c" 3 4
                                                  __null
# 45220 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[4]), "generic-match.c", 45221, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45221 "generic-match.c" 3 4
                                                  __null
# 45221 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2878, %s:%d\n", "generic-match.c", 45222);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[3];
       tree res_op2;
       res_op2 = captures[4];
       tree res;
       res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
       return res;
     }
 }
        break;
      }
    default:;
    }
  if (op2 == op1 || (operand_equal_p (op2, op1, 0) && types_match (op2, op1)))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 if (((non_type_check ((captures[1]), "generic-match.c", 45243, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45243 "generic-match.c" 3 4
                                            __null
# 45243 "generic-match.c"
                                                     ;
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2883, %s:%d\n", "generic-match.c", 45244);
 tree res;
 res = captures[1];
 if (((non_type_check ((captures[0]), "generic-match.c", 45247, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    }
  switch (((enum tree_code) (op0)->base.code))
    {
    case NE_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 45256, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 45257, __FUNCTION__)))));
 switch (((enum tree_code) (o20)->base.code))
   {
   case BIT_AND_EXPR:
     {
       tree o30 = (*((const_cast<tree*> (tree_operand_check ((o20), (0), "generic-match.c", 45262, __FUNCTION__)))));
       tree o31 = (*((const_cast<tree*> (tree_operand_check ((o20), (1), "generic-match.c", 45263, __FUNCTION__)))));
       if (integer_pow2p (o31))
  {
    if (integer_zerop (o21))
      {
        if (integer_pow2p (op1))
   {
     if (integer_zerop (op2))
       {
         {

    tree captures[3] __attribute__ ((__unused__)) = { o30, o31, op1 };
    {

 int shift = (wi::exact_log2 (wi::to_wide (captures[2])) - wi::exact_log2 (wi::to_wide (captures[1])));

        if (shift > 0)
          {
     if (((non_type_check ((op0), "generic-match.c", 45281, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45281 "generic-match.c" 3 4
                                        __null
# 45281 "generic-match.c"
                                                 ;
     if (((non_type_check ((op2), "generic-match.c", 45282, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45282 "generic-match.c" 3 4
                                        __null
# 45282 "generic-match.c"
                                                 ;
     if (((non_type_check ((captures[2]), "generic-match.c", 45283, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45283 "generic-match.c" 3 4
                                                __null
# 45283 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3575, %s:%d\n", "generic-match.c", 45284);
     tree res_op0;
     {
       tree ops1[2], res;
       {
         tree ops2[1], res;
         ops2[0] = captures[0];
         if (((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 45291, __FUNCTION__))->typed.type) != type)
           res = fold_build1_loc (loc, NOP_EXPR, type, ops2[0]);
         else
           res = ops2[0];
         ops1[0] = res;
       }
       ops1[1] = build_int_cst (integer_types[itk_int], shift);
       res = fold_build2_loc (loc, LSHIFT_EXPR, ((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 45298, __FUNCTION__))->typed.type), ops1[0], ops1[1]);
       res_op0 = res;
     }
     tree res_op1;
     res_op1 = captures[2];
     tree res;
     res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
     return res;
          }
        else
          {
     if (((non_type_check ((op0), "generic-match.c", 45309, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45309 "generic-match.c" 3 4
                                        __null
# 45309 "generic-match.c"
                                                 ;
     if (((non_type_check ((op2), "generic-match.c", 45310, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45310 "generic-match.c" 3 4
                                        __null
# 45310 "generic-match.c"
                                                 ;
     if (((non_type_check ((captures[2]), "generic-match.c", 45311, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45311 "generic-match.c" 3 4
                                                __null
# 45311 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3577, %s:%d\n", "generic-match.c", 45312);
     tree res_op0;
     {
       tree ops1[1], res;
       {
         tree ops2[2], res;
         ops2[0] = captures[0];
         ops2[1] = build_int_cst (integer_types[itk_int], -shift);
         res = fold_build2_loc (loc, RSHIFT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 45320, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
         ops1[0] = res;
       }
       if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 45323, __FUNCTION__))->typed.type) != type)
         res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
       else
         res = ops1[0];
       res_op0 = res;
     }
     tree res_op1;
     res_op1 = captures[2];
     tree res;
     res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
     return res;
          }
    }
         }
       }
          }
      }
         }
       break;
     }
          default:;
          }
        break;
      }
    case LT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 45349, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 45350, __FUNCTION__)))));
 if (integer_zerop (o21))
   {
     if (integer_pow2p (op1))
       {
  if (integer_zerop (op2))
    {
      {

        tree captures[2] __attribute__ ((__unused__)) = { o20, op1 };

        if (!((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45361, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45361, __FUNCTION__))->base.u.bits.unsigned_flag))
   {
     {

 int shift = element_precision (captures[0]) - wi::exact_log2 (wi::to_wide (captures[1])) - 1;

         if (shift >= 0)
    {
      if (((non_type_check ((op0), "generic-match.c", 45369, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45369 "generic-match.c" 3 4
                                         __null
# 45369 "generic-match.c"
                                                  ;
      if (((non_type_check ((op2), "generic-match.c", 45370, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45370 "generic-match.c" 3 4
                                         __null
# 45370 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 45371, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45371 "generic-match.c" 3 4
                                                 __null
# 45371 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3604, %s:%d\n", "generic-match.c", 45372);
      tree res_op0;
      {
        tree ops1[1], res;
        {
          tree ops2[2], res;
          ops2[0] = captures[0];
          ops2[1] = build_int_cst (integer_types[itk_int], shift);
          res = fold_build2_loc (loc, RSHIFT_EXPR, ((contains_struct_check ((ops2[0]), (TS_TYPED), "generic-match.c", 45380, __FUNCTION__))->typed.type), ops2[0], ops2[1]);
          ops1[0] = res;
        }
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 45383, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
      return res;
    }
         else
    {
      if (((non_type_check ((op0), "generic-match.c", 45397, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45397 "generic-match.c" 3 4
                                         __null
# 45397 "generic-match.c"
                                                  ;
      if (((non_type_check ((op2), "generic-match.c", 45398, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45398 "generic-match.c" 3 4
                                         __null
# 45398 "generic-match.c"
                                                  ;
      if (((non_type_check ((captures[1]), "generic-match.c", 45399, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45399 "generic-match.c" 3 4
                                                 __null
# 45399 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:3609, %s:%d\n", "generic-match.c", 45400);
      tree res_op0;
      {
        tree ops1[1], res;
        ops1[0] = captures[0];
        if (((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 45405, __FUNCTION__))->typed.type) != type)
          res = fold_build1_loc (loc, NOP_EXPR, type, ops1[0]);
        else
          res = ops1[0];
        res_op0 = res;
      }
      tree res_op1;
      res_op1 = captures[1];
      tree res;
      res = fold_build2_loc (loc, BIT_AND_EXPR, type, res_op0, res_op1);
      return res;
    }
     }
   }
      }
    }
       }
   }
        break;
      }
    default:;
    }
{
  tree op0_pops[1];
  if (tree_logical_inverted_value (op0, op0_pops))
    {
      tree o20 = op0_pops[0];
      if (tree_truth_valued_p (o20))
 {
   {

     tree captures[3] __attribute__ ((__unused__)) = { o20, op1, op2 };
     if (((non_type_check ((captures[1]), "generic-match.c", 45437, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45437 "generic-match.c" 3 4
                                                __null
# 45437 "generic-match.c"
                                                         ;
     if (((non_type_check ((captures[2]), "generic-match.c", 45438, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45438 "generic-match.c" 3 4
                                                __null
# 45438 "generic-match.c"
                                                         ;
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2888, %s:%d\n", "generic-match.c", 45439);
     tree res_op0;
     res_op0 = captures[0];
     tree res_op1;
     res_op1 = captures[2];
     tree res_op2;
     res_op2 = captures[1];
     tree res;
     res = fold_build3_loc (loc, COND_EXPR, type, res_op0, res_op1, res_op2);
     return res;
   }
        }
}
}
  return (tree) 
# 45453 "generic-match.c" 3 4
        __null
# 45453 "generic-match.c"
                 ;
}

static tree
generic_simplify_VEC_COND_EXPR (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1, tree op2)
{
  switch (((enum tree_code) (op0)->base.code))
    {
    case VECTOR_CST:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, op2 };

   if (integer_all_onesp (captures[0]))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2663, %s:%d\n", "generic-match.c", 45469);
       tree res;
       res = captures[1];
       if (((non_type_check ((captures[0]), "generic-match.c", 45472, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
       if (((non_type_check ((captures[2]), "generic-match.c", 45474, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
   else
     {

       if (integer_zerop (captures[0]))
  {
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2665, %s:%d\n", "generic-match.c", 45483);
    tree res;
    res = captures[2];
    if (((non_type_check ((captures[0]), "generic-match.c", 45486, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    if (((non_type_check ((captures[1]), "generic-match.c", 45488, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
    return res;
  }
     }
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VEC_COND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 45502, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 45503, __FUNCTION__)))));
 tree o32 = (*((const_cast<tree*> (tree_operand_check ((op1), (2), "generic-match.c", 45504, __FUNCTION__)))));
 if (o30 == op0 || (operand_equal_p (o30, op0, 0) && types_match (o30, op0)))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, o31, o32, op2 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2852, %s:%d\n", "generic-match.c", 45510);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = captures[3];
       tree res;
       res = fold_build3_loc (loc, VEC_COND_EXPR, type, res_op0, res_op1, res_op2);
       if (((non_type_check ((captures[2]), "generic-match.c", 45519, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
   }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op2)->base.code))
    {
    case VEC_COND_EXPR:
      {
 tree o40 = (*((const_cast<tree*> (tree_operand_check ((op2), (0), "generic-match.c", 45532, __FUNCTION__)))));
 tree o41 = (*((const_cast<tree*> (tree_operand_check ((op2), (1), "generic-match.c", 45533, __FUNCTION__)))));
 tree o42 = (*((const_cast<tree*> (tree_operand_check ((op2), (2), "generic-match.c", 45534, __FUNCTION__)))));
 if (o40 == op0 || (operand_equal_p (o40, op0, 0) && types_match (o40, op0)))
   {
     {

       tree captures[4] __attribute__ ((__unused__)) = { op0, op1, o41, o42 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2855, %s:%d\n", "generic-match.c", 45540);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = captures[3];
       tree res;
       res = fold_build3_loc (loc, VEC_COND_EXPR, type, res_op0, res_op1, res_op2);
       if (((non_type_check ((captures[2]), "generic-match.c", 45549, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
   }
 {

   tree captures[5] __attribute__ ((__unused__)) = { op0, op1, o40, o41, o42 };

   if ((tree_code_type[(int) (((enum tree_code) (captures[0])->base.code))] == tcc_comparison) && (tree_code_type[(int) (((enum tree_code) (captures[2])->base.code))] == tcc_comparison) && invert_tree_comparison (((enum tree_code) (captures[0])->base.code), HONOR_NANS ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45558, __FUNCTION__))))))) == ((enum tree_code) (captures[2])->base.code) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45558, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[2]), (0), "generic-match.c", 45558, __FUNCTION__))))), 0) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (1), "generic-match.c", 45558, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[2]), (1), "generic-match.c", 45558, __FUNCTION__))))), 0))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2869, %s:%d\n", "generic-match.c", 45560);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = captures[3];
       tree res;
       res = fold_build3_loc (loc, VEC_COND_EXPR, type, res_op0, res_op1, res_op2);
       if (((non_type_check ((captures[2]), "generic-match.c", 45569, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       if (((non_type_check ((captures[4]), "generic-match.c", 45571, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[4]), res);
       return res;
     }
 }
        break;
      }
    default:;
    }
  switch (((enum tree_code) (op1)->base.code))
    {
    case VEC_COND_EXPR:
      {
 tree o30 = (*((const_cast<tree*> (tree_operand_check ((op1), (0), "generic-match.c", 45584, __FUNCTION__)))));
 tree o31 = (*((const_cast<tree*> (tree_operand_check ((op1), (1), "generic-match.c", 45585, __FUNCTION__)))));
 tree o32 = (*((const_cast<tree*> (tree_operand_check ((op1), (2), "generic-match.c", 45586, __FUNCTION__)))));
 {

   tree captures[5] __attribute__ ((__unused__)) = { op0, o30, o31, o32, op2 };

   if ((tree_code_type[(int) (((enum tree_code) (captures[0])->base.code))] == tcc_comparison) && (tree_code_type[(int) (((enum tree_code) (captures[1])->base.code))] == tcc_comparison) && invert_tree_comparison (((enum tree_code) (captures[0])->base.code), HONOR_NANS ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45591, __FUNCTION__))))))) == ((enum tree_code) (captures[1])->base.code) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (0), "generic-match.c", 45591, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[1]), (0), "generic-match.c", 45591, __FUNCTION__))))), 0) && operand_equal_p ((*((const_cast<tree*> (tree_operand_check ((captures[0]), (1), "generic-match.c", 45591, __FUNCTION__))))), (*((const_cast<tree*> (tree_operand_check ((captures[1]), (1), "generic-match.c", 45591, __FUNCTION__))))), 0))
     {
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2878, %s:%d\n", "generic-match.c", 45593);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[3];
       tree res_op2;
       res_op2 = captures[4];
       tree res;
       res = fold_build3_loc (loc, VEC_COND_EXPR, type, res_op0, res_op1, res_op2);
       if (((non_type_check ((captures[1]), "generic-match.c", 45602, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
       if (((non_type_check ((captures[2]), "generic-match.c", 45604, __FUNCTION__))->base.side_effects_flag))
  res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
       return res;
     }
 }
        break;
      }
    default:;
    }
  if (op2 == op1 || (operand_equal_p (op2, op1, 0) && types_match (op2, op1)))
    {
      {

 tree captures[2] __attribute__ ((__unused__)) = { op0, op1 };
 if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2883, %s:%d\n", "generic-match.c", 45618);
 tree res;
 res = captures[1];
 if (((non_type_check ((captures[0]), "generic-match.c", 45621, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
 return res;
      }
    }
  {
    tree op0_pops[1];
    if (tree_logical_inverted_value (op0, op0_pops))
      {
 tree o20 = op0_pops[0];
 if (tree_truth_valued_p (o20))
   {
     {

       tree captures[3] __attribute__ ((__unused__)) = { o20, op1, op2 };
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:2888, %s:%d\n", "generic-match.c", 45636);
       tree res_op0;
       res_op0 = captures[0];
       tree res_op1;
       res_op1 = captures[2];
       tree res_op2;
       res_op2 = captures[1];
       tree res;
       res = fold_build3_loc (loc, VEC_COND_EXPR, type, res_op0, res_op1, res_op2);
       return res;
     }
   }
}
  }
  return (tree) 
# 45650 "generic-match.c" 3 4
        __null
# 45650 "generic-match.c"
                 ;
}

static tree
generic_simplify_BIT_FIELD_REF (location_t loc __attribute__ ((__unused__)), enum tree_code code __attribute__ ((__unused__)), const tree type __attribute__ ((__unused__)), tree op0, tree op1, tree op2)
{
  {

    tree captures[3] __attribute__ ((__unused__)) = { op0, op1, op2 };

    if (((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45660, __FUNCTION__))->typed.type))->base.code) == COMPLEX_TYPE && tree_int_cst_equal (captures[1], ((tree_class_check ((((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45660, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45660, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45660, __FUNCTION__))->type_common.size)))
      {

 if (integer_zerop (captures[2]))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4567, %s:%d\n", "generic-match.c", 45665);
     tree res_op0;
     {
       tree ops1[1], res;
       ops1[0] = captures[0];
       res = fold_build1_loc (loc, REALPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 45670, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45670, __FUNCTION__))->typed.type), ops1[0]);
       res_op0 = res;
     }
     tree res;
     res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
     if (((non_type_check ((captures[1]), "generic-match.c", 45675, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     if (((non_type_check ((captures[2]), "generic-match.c", 45677, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
     return res;
   }
 else
   {

     if (tree_int_cst_equal (captures[2], ((tree_class_check ((((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45684, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45684, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45684, __FUNCTION__))->type_common.size)))
       {
  if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4569, %s:%d\n", "generic-match.c", 45686);
  tree res_op0;
  {
    tree ops1[1], res;
    ops1[0] = captures[0];
    res = fold_build1_loc (loc, IMAGPART_EXPR, ((contains_struct_check ((((contains_struct_check ((ops1[0]), (TS_TYPED), "generic-match.c", 45691, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45691, __FUNCTION__))->typed.type), ops1[0]);
    res_op0 = res;
  }
  tree res;
  res = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, res_op0);
  if (((non_type_check ((captures[1]), "generic-match.c", 45696, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
  if (((non_type_check ((captures[2]), "generic-match.c", 45698, __FUNCTION__))->base.side_effects_flag))
    res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
  return res;
       }
   }
      }
    else
      {

 if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45707, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45707, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45707, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE) && (((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) && (!0 || is_gimple_reg (captures[0])) && ((compare_tree_int (captures[1], ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45707, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45707, __FUNCTION__))->type_common.precision)) == 0 && integer_zerop (captures[2])) || (0 == 0 && ((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45707, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45707, __FUNCTION__))->type_common.precision) % (8) == 0 && ((tree_class_check ((type), (tcc_type), "generic-match.c", 45707, __FUNCTION__))->type_common.precision) % (8) == 0 && compare_tree_int (captures[2], (0 ? (((tree_class_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45707, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45707, __FUNCTION__))->type_common.precision) - ((tree_class_check ((type), (tcc_type), "generic-match.c", 45707, __FUNCTION__))->type_common.precision)) : 0)) == 0)))
   {
     if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4587, %s:%d\n", "generic-match.c", 45709);
     tree res_op0;
     res_op0 = captures[0];
     tree res;
     res = fold_build1_loc (loc, NOP_EXPR, type, res_op0);
     if (((non_type_check ((captures[1]), "generic-match.c", 45714, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
     if (((non_type_check ((captures[2]), "generic-match.c", 45716, __FUNCTION__))->base.side_effects_flag))
       res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
     return res;
   }
      }
  }
  switch (((enum tree_code) (op0)->base.code))
    {
    case CONSTRUCTOR:
      {
 {

   tree captures[3] __attribute__ ((__unused__)) = { op0, op1, op2 };

   if ((((enum tree_code) (((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45730, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE) && (types_match (type, ((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45730, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45730, __FUNCTION__))->typed.type)) || ((((enum tree_code) (type)->base.code) == VECTOR_TYPE) && types_match (((contains_struct_check ((type), (TS_TYPED), "generic-match.c", 45730, __FUNCTION__))->typed.type), ((contains_struct_check ((((contains_struct_check ((captures[0]), (TS_TYPED), "generic-match.c", 45730, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45730, __FUNCTION__))->typed.type)))))
     {
       {

 tree ctor = (((enum tree_code) (captures[0])->base.code) == SSA_NAME ? gimple_assign_rhs1 ((tree_check ((captures[0]), "generic-match.c", 45734, __FUNCTION__, (SSA_NAME)))->ssa_name.def_stmt) : captures[0]);
 tree eltype = ((contains_struct_check ((((contains_struct_check ((ctor), (TS_TYPED), "generic-match.c", 45735, __FUNCTION__))->typed.type)), (TS_TYPED), "generic-match.c", 45735, __FUNCTION__))->typed.type);
 unsigned long width = tree_to_uhwi (((tree_class_check ((eltype), (tcc_type), "generic-match.c", 45736, __FUNCTION__))->type_common.size));
 unsigned long n = tree_to_uhwi (captures[1]);
 unsigned long idx = tree_to_uhwi (captures[2]);

    if (n != 0 && (idx % width) == 0 && (n % width) == 0 && (!maybe_lt (TYPE_VECTOR_SUBPARTS (((contains_struct_check ((ctor), (TS_TYPED), "generic-match.c", 45740, __FUNCTION__))->typed.type)), (idx + n) / width)))
      {
        {

 idx = idx / width;
 n = n / width;
 poly_uint64 k = 1;
 if ((vec_safe_length (((tree_check ((ctor), "generic-match.c", 45747, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))) != 0) { tree cons_elem = ((contains_struct_check (((&(*((tree_check ((ctor), "generic-match.c", 45747, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))[0])->value), (TS_TYPED), "generic-match.c", 45747, __FUNCTION__))->typed.type);
 if (((enum tree_code) (cons_elem)->base.code) == VECTOR_TYPE) k = TYPE_VECTOR_SUBPARTS (cons_elem);
 } unsigned long elt, count, const_k;

     if (multiple_p (idx, k, &elt) && multiple_p (n, k, &count))
       {

         if ((vec_safe_length (((tree_check ((ctor), "generic-match.c", 45754, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))) == 0)
    {
      if (((non_type_check ((captures[0]), "generic-match.c", 45756, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45756 "generic-match.c" 3 4
                                                 __null
# 45756 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[1]), "generic-match.c", 45757, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45757 "generic-match.c" 3 4
                                                 __null
# 45757 "generic-match.c"
                                                          ;
      if (((non_type_check ((captures[2]), "generic-match.c", 45758, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45758 "generic-match.c" 3 4
                                                 __null
# 45758 "generic-match.c"
                                                          ;
      if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4629, %s:%d\n", "generic-match.c", 45759);
      tree res;
      res = build_constructor (type, 
# 45761 "generic-match.c" 3 4
                                     __null
# 45761 "generic-match.c"
                                         );
      return res;
    }
         else
    {

      if (count == 1)
        {

          if (elt < (vec_safe_length (((tree_check ((ctor), "generic-match.c", 45770, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))))
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 45772, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45772 "generic-match.c" 3 4
                                                  __null
# 45772 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 45773, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45773 "generic-match.c" 3 4
                                                  __null
# 45773 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45774, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45774 "generic-match.c" 3 4
                                                  __null
# 45774 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4632, %s:%d\n", "generic-match.c", 45775);
       tree res;
       res = (&(*((tree_check ((ctor), "generic-match.c", 45777, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))[elt])->value;
       return res;
     }
          else
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 45782, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45782 "generic-match.c" 3 4
                                                  __null
# 45782 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 45783, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45783 "generic-match.c" 3 4
                                                  __null
# 45783 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45784, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45784 "generic-match.c" 3 4
                                                  __null
# 45784 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4633, %s:%d\n", "generic-match.c", 45785);
       tree res;
       res = build_zero_cst (type);
       return res;
     }
        }
      else
        {
          if (((non_type_check ((captures[0]), "generic-match.c", 45793, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45793 "generic-match.c" 3 4
                                                     __null
# 45793 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[1]), "generic-match.c", 45794, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45794 "generic-match.c" 3 4
                                                     __null
# 45794 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[2]), "generic-match.c", 45795, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45795 "generic-match.c" 3 4
                                                     __null
# 45795 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4634, %s:%d\n", "generic-match.c", 45796);
          tree res;
 vec<constructor_elt, va_gc> *vals;
 vec_alloc (vals, count);
 for (unsigned i = 0;
 i < count && elt + i < (vec_safe_length (((tree_check ((ctor), "generic-match.c", 45801, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts)));
 ++i) do { constructor_elt _ce___ = {(tree) 
# 45802 "generic-match.c" 3 4
     __null
# 45802 "generic-match.c"
     , (&(*((tree_check ((ctor), "generic-match.c", 45802, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))[elt + i])->value}; vec_safe_push ((vals), _ce___); } while (0);
          res = build_constructor (type, vals);
          return res;
        }
    }
       }
     else
       {

         if (k.is_constant (&const_k) && idx + n <= (idx / const_k + 1) * const_k)
    {

      if ((vec_safe_length (((tree_check ((ctor), "generic-match.c", 45814, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))) <= idx / const_k)
        {
          if (((non_type_check ((captures[0]), "generic-match.c", 45816, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45816 "generic-match.c" 3 4
                                                     __null
# 45816 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[1]), "generic-match.c", 45817, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45817 "generic-match.c" 3 4
                                                     __null
# 45817 "generic-match.c"
                                                              ;
          if (((non_type_check ((captures[2]), "generic-match.c", 45818, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45818 "generic-match.c" 3 4
                                                     __null
# 45818 "generic-match.c"
                                                              ;
          if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4648, %s:%d\n", "generic-match.c", 45819);
          tree res;
          res = build_zero_cst (type);
          return res;
        }
      else
        {

          if (n == const_k)
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 45829, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45829 "generic-match.c" 3 4
                                                  __null
# 45829 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 45830, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45830 "generic-match.c" 3 4
                                                  __null
# 45830 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45831, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45831 "generic-match.c" 3 4
                                                  __null
# 45831 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4650, %s:%d\n", "generic-match.c", 45832);
       tree res;
       res = (&(*((tree_check ((ctor), "generic-match.c", 45834, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))[idx / const_k])->value;
       return res;
     }
          else
     {
       if (((non_type_check ((captures[0]), "generic-match.c", 45839, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45839 "generic-match.c" 3 4
                                                  __null
# 45839 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[1]), "generic-match.c", 45840, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45840 "generic-match.c" 3 4
                                                  __null
# 45840 "generic-match.c"
                                                           ;
       if (((non_type_check ((captures[2]), "generic-match.c", 45841, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45841 "generic-match.c" 3 4
                                                  __null
# 45841 "generic-match.c"
                                                           ;
       if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4651, %s:%d\n", "generic-match.c", 45842);
       tree res_op0;
       res_op0 = (&(*((tree_check ((ctor), "generic-match.c", 45844, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))[idx / const_k])->value;
       tree res_op1;
       res_op1 = captures[1];
       tree res_op2;
       res_op2 = size_int_kind ((idx % const_k) * width, stk_bitsizetype);
       tree res;
       res = fold_build3_loc (loc, BIT_FIELD_REF, type, res_op0, res_op1, res_op2);
       return res;
     }
        }
    }
       }
        }
      }
       }
     }
 }
        break;
      }
    case BIT_INSERT_EXPR:
      {
 tree o20 = (*((const_cast<tree*> (tree_operand_check ((op0), (0), "generic-match.c", 45865, __FUNCTION__)))));
 tree o21 = (*((const_cast<tree*> (tree_operand_check ((op0), (1), "generic-match.c", 45866, __FUNCTION__)))));
 tree o22 = (*((const_cast<tree*> (tree_operand_check ((op0), (2), "generic-match.c", 45867, __FUNCTION__)))));
 {

   tree captures[5] __attribute__ ((__unused__)) = { o20, o21, o22, op1, op2 };
   {

 unsigned long isize;
 if ((((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 45874, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 45874, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 45874, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)) isize = ((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 45874, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45874, __FUNCTION__))->type_common.precision);
 else isize = tree_to_uhwi (((tree_class_check ((((contains_struct_check ((captures[1]), (TS_TYPED), "generic-match.c", 45875, __FUNCTION__))->typed.type)), (tcc_type), "generic-match.c", 45875, __FUNCTION__))->type_common.size));

       if (wi::leu_p (wi::to_wide (captures[2]), wi::to_wide (captures[4])) && wi::leu_p (wi::to_wide (captures[4]) + wi::to_wide (captures[3]), wi::to_wide (captures[2]) + isize))
  {
    if (((non_type_check ((captures[2]), "generic-match.c", 45879, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45879 "generic-match.c" 3 4
                                               __null
# 45879 "generic-match.c"
                                                        ;
    if (((non_type_check ((captures[4]), "generic-match.c", 45880, __FUNCTION__))->base.side_effects_flag)) return (tree) 
# 45880 "generic-match.c" 3 4
                                               __null
# 45880 "generic-match.c"
                                                        ;
    if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4671, %s:%d\n", "generic-match.c", 45881);
    tree res_op0;
    res_op0 = captures[1];
    tree res_op1;
    res_op1 = captures[3];
    tree res_op2;
    res_op2 = wide_int_to_tree (sizetype_tab[(int) stk_bitsizetype], wi::to_wide (captures[4]) - wi::to_wide (captures[2]));
    tree res;
    res = fold_build3_loc (loc, BIT_FIELD_REF, type, res_op0, res_op1, res_op2);
    if (((non_type_check ((captures[0]), "generic-match.c", 45890, __FUNCTION__))->base.side_effects_flag))
      res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[0]), res);
    return res;
  }
       else
  {

    if (wi::geu_p (wi::to_wide (captures[2]), wi::to_wide (captures[4]) + wi::to_wide (captures[3])) || wi::geu_p (wi::to_wide (captures[4]), wi::to_wide (captures[2]) + isize))
      {
        if (dump_file && (dump_flags & (1 << 21))) fprintf (dump_file, "Applying pattern match.pd:4678, %s:%d\n", "generic-match.c", 45899);
        tree res_op0;
        res_op0 = captures[0];
        tree res_op1;
        res_op1 = captures[3];
        tree res_op2;
        res_op2 = captures[4];
        tree res;
        res = fold_build3_loc (loc, BIT_FIELD_REF, type, res_op0, res_op1, res_op2);
        if (((non_type_check ((captures[1]), "generic-match.c", 45908, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[1]), res);
        if (((non_type_check ((captures[2]), "generic-match.c", 45910, __FUNCTION__))->base.side_effects_flag))
   res = build2_loc (loc, COMPOUND_EXPR, type, fold_ignored_result (captures[2]), res);
        return res;
      }
  }
   }
 }
        break;
      }
    default:;
    }
  return (tree) 
# 45921 "generic-match.c" 3 4
        __null
# 45921 "generic-match.c"
                 ;
}

tree
generic_simplify (location_t loc, enum tree_code code, const tree type __attribute__ ((__unused__)), tree op0, tree op1, tree op2)
{
  switch (code)
    {
    case COND_EXPR:
      return generic_simplify_COND_EXPR (loc, code, type, op0, op1, op2);
    case VEC_COND_EXPR:
      return generic_simplify_VEC_COND_EXPR (loc, code, type, op0, op1, op2);
    case BIT_FIELD_REF:
      return generic_simplify_BIT_FIELD_REF (loc, code, type, op0, op1, op2);
    default:;
    }
  return (tree) 
# 45937 "generic-match.c" 3 4
        __null
# 45937 "generic-match.c"
                 ;
}
