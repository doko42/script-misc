# -*- python -*-
# ex: set syntax=python:

import os

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
	BuildSlave("marxinbox-slave", "pass", max_builds = 1),
	BuildSlave('marxinbook-slave', 'pass', max_builds = 1),
	BuildSlave('evans-slave', '22d71061dfcda672b35a05c909e83bb8', max_builds = 1)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

gcc_repo_url = u'git@github.com:marxin/gcc.git'
llvm_repo_url = u'git@github.com:marxin/llvm-project.git'
icc_repo_url = u'git@github.com:marxin/icc-meta.git'

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
	gcc_repo_url,
        workdir='gcc-git',
	branches = True,
        pollinterval=20))

c['change_source'].append(GitPoller(
	llvm_repo_url,
        workdir='llvm-git',
	branches = True,
        pollinterval=20))

c['change_source'].append(GitPoller(
	icc_repo_url,
        workdir='icc-meta-git',
	branches = True,
        pollinterval=20))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.changes.filter import ChangeFilter

c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
                            name="gcc-all",
			    change_filter = ChangeFilter(branch_re = '^buildbot.*', repository = gcc_repo_url),
			    fileIsImportant = lambda change: change.asDict()['comments'].startswith('buildbot'),
                            treeStableTimer=None,
                            builderNames=["gcc-spec2006"]))

c['schedulers'].append(AnyBranchScheduler(
                            name="llvm-all",
			    change_filter = ChangeFilter(branch_re = '^buildbot.*', repository = llvm_repo_url),
			    fileIsImportant = lambda change: change.asDict()['comments'].startswith('buildbot'),
                            treeStableTimer=None,
                            builderNames=['llvm-spec2006']))

c['schedulers'].append(AnyBranchScheduler(
                            name="icc-meta-all",
			    change_filter = ChangeFilter(branch_re = '^buildbot.*', repository = icc_repo_url),
			    fileIsImportant = lambda change: change.asDict()['comments'].startswith('buildbot'),
                            treeStableTimer=None,
                            builderNames=['icc-spec2006']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import MakeDirectory
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.shell import Compile
from buildbot.process.properties import WithProperties
from buildbot.steps.transfer import * 
from buildbot.steps import shell
from buildbot.process import *
from twisted.internet import defer
from base64 import *

class SetPropertyFromChangeSets(ShellCommand):
  def start(self):
    self.setProperty('changes', b64encode(list(self.build.allChanges())[0].asDict()['comments']))
    ShellCommand.start(self)

def append_last_change_property(f):
  f.addStep(SetPropertyFromChangeSets(command = ['echo']))

# CREATE GCC factory that compiles GCC from git repository
def create_gcc_factory():
  gcc_build_dir = 'build/builddir'
  f = BuildFactory()

  f.addStep(Git(repourl = gcc_repo_url, mode='incremental', haltOnFailure = True))
  append_last_change_property(f)
  f.addStep(shell.SetPropertyFromCommand(command="cat /proc/cpuinfo | grep processor | wc -l", property="nproc", haltOnFailure = True))
  f.addStep(ShellCommand(command=['rm', '-rf', 'builddir'], haltOnFailure = True))
  f.addStep(MakeDirectory(gcc_build_dir, haltOnFailure = True))
  f.addStep(ShellCommand(command=['./../configure',
	'--disable-bootstrap',
	'--enable-languages=c,c++,fortran',
	'--disable-libsanitizer',
	'--disable-multilib',
	'--enable-checking=release',
	WithProperties('--prefix=%(builddir)s/install/gcc-%(revision)s')],
	workdir = gcc_build_dir,
	haltOnFailure = True))
  f.addStep(Compile(command = ['make', WithProperties('-j%(nproc)s')], workdir = gcc_build_dir, haltOnFailure = True))
  f.addStep(Compile(command = ['make', 'install'], workdir = gcc_build_dir, haltOnFailure = True))

  return f

system_compiler_env = {'PATH': '/abuild/mliska/bin/gcc492/bin:${PATH}', 'LD_LIBRARY_PATH': '/abuild/mliska/bin/gcc492/lib64:${LD_LIBRARY_PATH}'}

# CREATE LLVM factory that compiles LLVM from git repository
def create_llvm_factory():
  llvm_build_dir = 'build/llvm/builddir'
  f = BuildFactory()

  f.addStep(Git(repourl = llvm_repo_url, mode='incremental', haltOnFailure = True))
  append_last_change_property(f)
  f.addStep(shell.SetPropertyFromCommand(command="cat /proc/cpuinfo | grep processor | wc -l", property="nproc", haltOnFailure = True))
  f.addStep(ShellCommand(command=['rm', '-rf', 'llvm/builddiir'], haltOnFailure = True))
  f.addStep(ShellCommand(command=['ln', '-s', '../../clang', 'clang', '||', 'true'], workdir = 'build/llvm/tools', warnOnFailure = True))
  f.addStep(MakeDirectory(llvm_build_dir, haltOnFailure = True))
  f.addStep(ShellCommand(command=['./../configure',
	'--enable-optimized',
	WithProperties('--prefix=%(builddir)s/install/llvm-%(revision)s')],
	workdir = llvm_build_dir,
	haltOnFailure = True,
	env = system_compiler_env))
  # add GCC 4.9.2 to PATH for evans machine
  f.addStep(Compile(command = ['make', WithProperties('-j%(nproc)s')], env = system_compiler_env, workdir = llvm_build_dir, haltOnFailure = True))
  f.addStep(Compile(command = ['make', 'install'], env = system_compiler_env, workdir = llvm_build_dir, haltOnFailure = True))

  return f

# CREATE ICC
def create_icc_factory():
  f = BuildFactory()
  append_last_change_property(f)

  return f

# APPEND spec step to an existing factory with given compiler_prefix
def append_spec_benchmark(f, compiler_prefix):
  f.addStep(
	  ShellCommand(
		  command = [
			  '../../source/script-misc/spec_buildbot.py',
			  '../../source/cpu2006',
			  WithProperties(compiler_prefix + '-%(revision)s'),
			  WithProperties('/tmp/spec-' + compiler_prefix + '-%(revision)s.json'),
			  compiler_prefix,
			  WithProperties('%(changes)s'),
			  WithProperties('/tmp/spec-%(revision)s')],
			  env = { 'PATH': WithProperties('%(builddir)s/install/' + compiler_prefix + '-%(revision)s/bin:${PATH}'),'LD_LIBRARY_PATH': system_compiler_env['LD_LIBRARY_PATH']}
		  , haltOnFailure = True
	  ))
  f.addStep(FileUpload(slavesrc = WithProperties('/tmp/spec-' + compiler_prefix + '-%(revision)s.json'),
	masterdest = WithProperties('reports/spec-' + compiler_prefix + '-%(revision)s.json'),
	haltOnFailure = True))
  f.addStep(DirectoryUpload(slavesrc = WithProperties('/tmp/spec-%(revision)s'), masterdest = WithProperties('perf-data/spec-' + compiler_prefix + '-%(revision)s')))

def append_remove_install(f, prefix):
  f.addStep(RemoveDirectory(dir = WithProperties('%(builddir)s/install/' + prefix + '-%(revision)s')))

# GCC RUN
gcc_spec_factory = create_gcc_factory()
append_spec_benchmark(gcc_spec_factory, 'gcc')
append_remove_install(gcc_spec_factory, 'gcc')

# LLVM RUN
llvm_spec_factory = create_llvm_factory()
append_spec_benchmark(llvm_spec_factory, 'llvm')
append_remove_install(llvm_spec_factory, 'llvm')

# ICC RUN
icc_spec_factory = create_icc_factory()
append_spec_benchmark(icc_spec_factory, 'icc')
append_remove_install(icc_spec_factory, 'icc')

from buildbot.config import BuilderConfig

c['mergeRequests'] = False
c['builders'] = []
c['builders'].append(
    BuilderConfig(name="gcc-spec2006",
      slavenames=['evans-slave', 'marxinbook-slave'],
      factory=gcc_spec_factory))

c['builders'].append(
    BuilderConfig(name="llvm-spec2006",
      slavenames=['evans-slave', 'marxinbook-slave'],
      factory=llvm_spec_factory))

c['builders'].append(
    BuilderConfig(name="icc-spec2006",
      slavenames = ['evans-slave'],
      factory = icc_spec_factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "SPEC tester"
c['titleURL'] = "http://suse.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
